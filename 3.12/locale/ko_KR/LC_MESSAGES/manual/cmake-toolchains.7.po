# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2018 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-toolchains.7.rst:4
msgid "cmake-toolchains(7)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:7
msgid "Contents"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:13
msgid ""
"CMake uses a toolchain of utilities to compile, link libraries and create "
"archives, and other tasks to drive the build. The toolchain utilities "
"available are determined by the languages enabled. In normal builds, CMake "
"automatically determines the toolchain for host builds based on system "
"introspection and defaults. In cross-compiling scenarios, a toolchain file "
"may be specified with information about compiler and utility paths."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:21
msgid "Languages"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:23
msgid ""
"Languages are enabled by the :command:`project` command.  Language-specific "
"built-in variables, such as :variable:`CMAKE_CXX_COMPILER "
"<CMAKE_<LANG>_COMPILER>`, :variable:`CMAKE_CXX_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` etc are set by invoking the :command:`project` "
"command.  If no project command is in the top-level CMakeLists file, one "
"will be implicitly generated. By default the enabled languages are C and CXX:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:31
msgid "project(C_Only C)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:35
msgid ""
"A special value of NONE can also be used with the :command:`project` command "
"to enable no languages:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:38
msgid "project(MyProject NONE)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:42
msgid ""
"The :command:`enable_language` command can be used to enable languages after "
"the :command:`project` command:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:45
msgid "enable_language(CXX)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:49
msgid ""
"When a language is enabled, CMake finds a compiler for that language, and "
"determines some information, such as the vendor and version of the compiler, "
"the target architecture and bitwidth, the location of corresponding "
"utilities etc."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:54
msgid ""
"The :prop_gbl:`ENABLED_LANGUAGES` global property contains the languages "
"which are currently enabled."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:58
msgid "Variables and Properties"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:60
msgid ""
"Several variables relate to the language components of a toolchain which are "
"enabled. :variable:`CMAKE_<LANG>_COMPILER` is the full path to the compiler "
"used for ``<LANG>``. :variable:`CMAKE_<LANG>_COMPILER_ID` is the identifier "
"used by CMake for the compiler and :variable:`CMAKE_<LANG>_COMPILER_VERSION` "
"is the version of the compiler."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:66
msgid ""
"The :variable:`CMAKE_<LANG>_FLAGS` variables and the configuration-specific "
"equivalents contain flags that will be added to the compile command when "
"compiling a file of a particular language."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:70
msgid ""
"As the linker is invoked by the compiler driver, CMake needs a way to "
"determine which compiler to use to invoke the linker. This is calculated by "
"the :prop_sf:`LANGUAGE` of source files in the target, and in the case of "
"static libraries, the language of the dependent libraries. The choice CMake "
"makes may be overridden with the :prop_tgt:`LINKER_LANGUAGE` target property."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:77
msgid "Toolchain Features"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:79
msgid ""
"CMake provides the :command:`try_compile` command and wrapper macros such "
"as :module:`CheckCXXSourceCompiles`, :module:`CheckCXXSymbolExists` and :"
"module:`CheckIncludeFile` to test capability and availability of various "
"toolchain features. These APIs test the toolchain in some way and cache the "
"result so that the test does not have to be performed again the next time "
"CMake runs."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:86
msgid ""
"Some toolchain features have built-in handling in CMake, and do not require "
"compile-tests. For example, :prop_tgt:`POSITION_INDEPENDENT_CODE` allows "
"specifying that a target should be built as position-independent code, if "
"the compiler supports that feature. The :prop_tgt:`<LANG>_VISIBILITY_PRESET` "
"and :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties add flags for "
"hidden visibility, if supported by the compiler."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:96
msgid "Cross Compiling"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:98
msgid ""
"If :manual:`cmake(1)` is invoked with the command line parameter ``-"
"DCMAKE_TOOLCHAIN_FILE=path/to/file``, the file will be loaded early to set "
"values for the compilers. The :variable:`CMAKE_CROSSCOMPILING` variable is "
"set to true when CMake is cross-compiling."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:105
msgid "Cross Compiling for Linux"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:107
msgid "A typical cross-compiling toolchain for Linux has content such as:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:110
msgid ""
"set(CMAKE_SYSTEM_NAME Linux)\n"
"set(CMAKE_SYSTEM_PROCESSOR arm)\n"
"\n"
"set(CMAKE_SYSROOT /home/devel/rasp-pi-rootfs)\n"
"set(CMAKE_STAGING_PREFIX /home/devel/stage)\n"
"\n"
"set(tools /home/devel/gcc-4.7-linaro-rpi-gnueabihf)\n"
"set(CMAKE_C_COMPILER ${tools}/bin/arm-linux-gnueabihf-gcc)\n"
"set(CMAKE_CXX_COMPILER ${tools}/bin/arm-linux-gnueabihf-g++)\n"
"\n"
"set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n"
"set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n"
"set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n"
"set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:127
msgid ""
"The :variable:`CMAKE_SYSTEM_NAME` is the CMake-identifier of the target "
"platform to build for."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:130
msgid ""
"The :variable:`CMAKE_SYSTEM_PROCESSOR` is the CMake-identifier of the target "
"architecture to build for."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:133
msgid ""
"The :variable:`CMAKE_SYSROOT` is optional, and may be specified if a sysroot "
"is available."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:136
msgid ""
"The :variable:`CMAKE_STAGING_PREFIX` is also optional. It may be used to "
"specify a path on the host to install to. The :variable:"
"`CMAKE_INSTALL_PREFIX` is always the runtime installation location, even "
"when cross-compiling."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:140
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER` variables may be set to full paths, or "
"to names of compilers to search for in standard locations.   For toolchains "
"that do not support linking binaries without custom flags or scripts one may "
"set the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable to "
"``STATIC_LIBRARY`` to tell CMake not to try to link executables during its "
"checks."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:146
msgid ""
"CMake ``find_*`` commands will look in the sysroot, and the :variable:"
"`CMAKE_FIND_ROOT_PATH` entries by default in all cases, as well as looking "
"in the host system root prefix. Although this can be controlled on a case-by-"
"case basis, when cross-compiling, it can be useful to exclude looking in "
"either the host or the target for particular artifacts. Generally, includes, "
"libraries and packages should be found in the target system prefixes, "
"whereas executables which must be run as part of the build should be found "
"only on the host and not on the target. This is the purpose of the "
"``CMAKE_FIND_ROOT_PATH_MODE_*`` variables."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:158
msgid "Cross Compiling for the Cray Linux Environment"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:160
msgid ""
"Cross compiling for compute nodes in the Cray Linux Environment can be done "
"without needing a separate toolchain file.  Specifying ``-"
"DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment`` on the CMake command line will "
"ensure that the appropriate build settings and search paths are configured. "
"The platform will pull its configuration from the current environment "
"variables and will configure a project to use the compiler wrappers from the "
"Cray Programming Environment's ``PrgEnv-*`` modules if present and loaded."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:168
msgid ""
"The default configuration of the Cray Programming Environment is to only "
"support static libraries.  This can be overridden and shared libraries "
"enabled by setting the ``CRAYPE_LINK_TYPE`` environment variable to "
"``dynamic``."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:173
msgid ""
"Running CMake without specifying :variable:`CMAKE_SYSTEM_NAME` will run the "
"configure step in host mode assuming a standard Linux environment. If not "
"overridden, the ``PrgEnv-*`` compiler wrappers will end up getting used, "
"which if targeting the either the login node or compute node, is likely not "
"the desired behavior.  The exception to this would be if you are building "
"directly on a NID instead of cross-compiling from a login node. If trying to "
"build software for a login node, you will need to either first unload the "
"currently loaded ``PrgEnv-*`` module or explicitly tell CMake to use the "
"system compilers in ``/usr/bin`` instead of the Cray wrappers.  If instead "
"targeting a compute node is desired, just specify the :variable:"
"`CMAKE_SYSTEM_NAME` as mentioned above."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:186
msgid "Cross Compiling using Clang"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:188
msgid ""
"Some compilers such as Clang are inherently cross compilers. The :variable:"
"`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a value to those supported "
"compilers when compiling:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:192
msgid ""
"set(CMAKE_SYSTEM_NAME Linux)\n"
"set(CMAKE_SYSTEM_PROCESSOR arm)\n"
"\n"
"set(triple arm-linux-gnueabihf)\n"
"\n"
"set(CMAKE_C_COMPILER clang)\n"
"set(CMAKE_C_COMPILER_TARGET ${triple})\n"
"set(CMAKE_CXX_COMPILER clang++)\n"
"set(CMAKE_CXX_COMPILER_TARGET ${triple})"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:204
msgid ""
"Similarly, some compilers do not ship their own supplementary utilities such "
"as linkers, but provide a way to specify the location of the external "
"toolchain which will be used by the compiler driver. The :variable:"
"`CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN` variable can be set in a "
"toolchain file to pass the path to the compiler driver."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:211
msgid "Cross Compiling for QNX"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:213
msgid ""
"As the Clang compiler the QNX QCC compile is inherently a cross compiler. "
"And the :variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a value "
"to those supported compilers when compiling:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:217
msgid ""
"set(CMAKE_SYSTEM_NAME QNX)\n"
"\n"
"set(arch gcc_ntoarmv7le)\n"
"\n"
"set(CMAKE_C_COMPILER qcc)\n"
"set(CMAKE_C_COMPILER_TARGET ${arch})\n"
"set(CMAKE_CXX_COMPILER QCC)\n"
"set(CMAKE_CXX_COMPILER_TARGET ${arch})"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:229
msgid "Cross Compiling for Windows CE"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:231
msgid ""
"Cross compiling for Windows CE requires the corresponding SDK being "
"installed on your system.  These SDKs are usually installed under ``C:/"
"Program Files (x86)/Windows CE Tools/SDKs``."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:235
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows CE may "
"look like this:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:238
msgid ""
"set(CMAKE_SYSTEM_NAME WindowsCE)\n"
"\n"
"set(CMAKE_SYSTEM_VERSION 8.0)\n"
"set(CMAKE_SYSTEM_PROCESSOR arm)\n"
"\n"
"set(CMAKE_GENERATOR_TOOLSET CE800) # Can be omitted for 8.0\n"
"set(CMAKE_GENERATOR_PLATFORM SDK_AM335X_SK_WEC2013_V310)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:248
msgid ""
"The :variable:`CMAKE_GENERATOR_PLATFORM` tells the generator which SDK to "
"use. Further :variable:`CMAKE_SYSTEM_VERSION` tells the generator what "
"version of Windows CE to use.  Currently version 8.0 (Windows Embedded "
"Compact 2013) is supported out of the box.  Other versions may require one "
"to set :variable:`CMAKE_GENERATOR_TOOLSET` to the correct value."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:255
msgid "Cross Compiling for Windows 10 Universal Applications"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:257
msgid ""
"A toolchain file to configure a Visual Studio generator for a Windows 10 "
"Universal Application may look like this:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:260
msgid ""
"set(CMAKE_SYSTEM_NAME WindowsStore)\n"
"set(CMAKE_SYSTEM_VERSION 10.0)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:265
msgid ""
"A Windows 10 Universal Application targets both Windows Store and Windows "
"Phone.  Specify the :variable:`CMAKE_SYSTEM_VERSION` variable to be ``10.0`` "
"to build with the latest available Windows 10 SDK. Specify a more specific "
"version (e.g. ``10.0.10240.0`` for RTM) to build with the corresponding SDK."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:272
msgid "Cross Compiling for Windows Phone"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:274
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows Phone "
"may look like this:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:277
msgid ""
"set(CMAKE_SYSTEM_NAME WindowsPhone)\n"
"set(CMAKE_SYSTEM_VERSION 8.1)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:283
msgid "Cross Compiling for Windows Store"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:285
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows Store "
"may look like this:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:288
msgid ""
"set(CMAKE_SYSTEM_NAME WindowsStore)\n"
"set(CMAKE_SYSTEM_VERSION 8.1)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:296
msgid "Cross Compiling for Android"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:298
msgid ""
"A toolchain file may configure cross-compiling for Android by setting the :"
"variable:`CMAKE_SYSTEM_NAME` variable to ``Android``.  Further configuration "
"is specific to the Android development environment to be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:302
msgid ""
"For :ref:`Visual Studio Generators`, CMake expects :ref:`NVIDIA Nsight Tegra "
"Visual Studio Edition <Cross Compiling for Android with NVIDIA Nsight Tegra "
"Visual Studio Edition>` to be installed.  See that section for further "
"configuration details."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:307
msgid ""
"For :ref:`Makefile Generators` and the :generator:`Ninja` generator, CMake "
"expects one of these environments:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:310
msgid ":ref:`NDK <Cross Compiling for Android with the NDK>`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:311
msgid ""
":ref:`Standalone Toolchain <Cross Compiling for Android with a Standalone "
"Toolchain>`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:313
msgid "CMake uses the following steps to select one of the environments:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:315
msgid ""
"If the :variable:`CMAKE_ANDROID_NDK` variable is set, the NDK at the "
"specified location will be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:318
msgid ""
"Else, if the :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` variable is set, "
"the Standalone Toolchain at the specified location will be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:321
msgid ""
"Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of the "
"form ``<ndk>/platforms/android-<api>/arch-<arch>``, the ``<ndk>`` part will "
"be used as the value of :variable:`CMAKE_ANDROID_NDK` and the NDK will be "
"used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:326
msgid ""
"Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of the "
"form ``<standalone-toolchain>/sysroot``, the ``<standalone-toolchain>`` part "
"will be used as the value of :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` "
"and the Standalone Toolchain will be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:331
msgid ""
"Else, if a cmake variable ``ANDROID_NDK`` is set it will be used as the "
"value of :variable:`CMAKE_ANDROID_NDK`, and the NDK will be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:334
msgid ""
"Else, if a cmake variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set, it will "
"be used as the value of :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and "
"the Standalone Toolchain will be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:338
msgid ""
"Else, if an environment variable ``ANDROID_NDK_ROOT`` or ``ANDROID_NDK`` is "
"set, it will be used as the value of :variable:`CMAKE_ANDROID_NDK`, and the "
"NDK will be used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:342
msgid ""
"Else, if an environment variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set "
"then it will be used as the value of :variable:"
"`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and the Standalone Toolchain will be "
"used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:347
msgid ""
"Else, an error diagnostic will be issued that neither the NDK or Standalone "
"Toolchain can be found."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:353
msgid "Cross Compiling for Android with the NDK"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:355
msgid ""
"A toolchain file may configure :ref:`Makefile Generators` or the :generator:"
"`Ninja` generator to target Android for cross-compiling."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:358
msgid "Configure use of an Android NDK with the following variables:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:362
#: ../../../manual/cmake-toolchains.7.rst:444
msgid ":variable:`CMAKE_SYSTEM_NAME`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:361
#: ../../../manual/cmake-toolchains.7.rst:443
msgid ""
"Set to ``Android``.  Must be specified to enable cross compiling for Android."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:372
#: ../../../manual/cmake-toolchains.7.rst:465
msgid ":variable:`CMAKE_SYSTEM_VERSION`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:365
msgid ""
"Set to the Android API level.  If not specified, the value is determined as "
"follows:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:368
msgid ""
"If the :variable:`CMAKE_ANDROID_API` variable is set, its value is used as "
"the API level."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:370
msgid ""
"If the :variable:`CMAKE_SYSROOT` variable is set, the API level is detected "
"from the NDK directory structure containing the sysroot."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:372
msgid "Otherwise, the latest API level available in the NDK is used."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:380
#: ../../../manual/cmake-toolchains.7.rst:468
msgid ":variable:`CMAKE_ANDROID_ARCH_ABI`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:375
msgid ""
"Set to the Android ABI (architecture).  If not specified, this variable will "
"default to ``armeabi``. The :variable:`CMAKE_ANDROID_ARCH` variable will be "
"computed from ``CMAKE_ANDROID_ARCH_ABI`` automatically. Also see the :"
"variable:`CMAKE_ANDROID_ARM_MODE` and :variable:`CMAKE_ANDROID_ARM_NEON` "
"variables."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:386
msgid ":variable:`CMAKE_ANDROID_NDK`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:383
msgid ""
"Set to the absolute path to the Android NDK root directory. A "
"``${CMAKE_ANDROID_NDK}/platforms`` directory must exist. If not specified, a "
"default for this variable will be chosen as specified :ref:`above <Cross "
"Compiling for Android>`."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:391
msgid ":variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:389
msgid ""
"Set to a true value to use the deprecated per-api-level headers instead of "
"the unified headers.  If not specified, the default will be false unless "
"using a NDK that does not provide unified headers."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:395
msgid ":variable:`CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:394
msgid ""
"Set to the version of the NDK toolchain to be selected as the compiler. If "
"not specified, the default will be the latest available GCC toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:399
msgid ":variable:`CMAKE_ANDROID_STL_TYPE`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:398
msgid ""
"Set to specify which C++ standard library to use.  If not specified, a "
"default will be selected as described in the variable documentation."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:401
#: ../../../manual/cmake-toolchains.7.rst:462
msgid "The following variables will be computed and provided automatically:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:404
#: ../../../manual/cmake-toolchains.7.rst:471
msgid ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:404
msgid "The absolute path prefix to the binutils in the NDK toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:408
#: ../../../manual/cmake-toolchains.7.rst:474
msgid ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:407
msgid "The host platform suffix of the binutils in the NDK toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:410
#: ../../../manual/cmake-toolchains.7.rst:476
msgid "For example, a toolchain file might contain:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:412
msgid ""
"set(CMAKE_SYSTEM_NAME Android)\n"
"set(CMAKE_SYSTEM_VERSION 21) # API level\n"
"set(CMAKE_ANDROID_ARCH_ABI arm64-v8a)\n"
"set(CMAKE_ANDROID_NDK /path/to/android-ndk)\n"
"set(CMAKE_ANDROID_STL_TYPE gnustl_static)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:420
#: ../../../manual/cmake-toolchains.7.rst:483
msgid "Alternatively one may specify the values without a toolchain file:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:422
msgid ""
"$ cmake ../src \\\n"
"  -DCMAKE_SYSTEM_NAME=Android \\\n"
"  -DCMAKE_SYSTEM_VERSION=21 \\\n"
"  -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \\\n"
"  -DCMAKE_ANDROID_NDK=/path/to/android-ndk \\\n"
"  -DCMAKE_ANDROID_STL_TYPE=gnustl_static"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:434
msgid "Cross Compiling for Android with a Standalone Toolchain"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:436
msgid ""
"A toolchain file may configure :ref:`Makefile Generators` or the :generator:"
"`Ninja` generator to target Android for cross-compiling using a standalone "
"toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:440
msgid ""
"Configure use of an Android standalone toolchain with the following "
"variables:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:451
msgid ":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:447
msgid ""
"Set to the absolute path to the standalone toolchain root directory. A "
"``${CMAKE_ANDROID_STANDALONE_TOOLCHAIN}/sysroot`` directory must exist. If "
"not specified, a default for this variable will be chosen as specified :ref:"
"`above <Cross Compiling for Android>`."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:456
msgid ":variable:`CMAKE_ANDROID_ARM_MODE`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:454
msgid ""
"When the standalone toolchain targets ARM, optionally set this to ``ON`` to "
"target 32-bit ARM instead of 16-bit Thumb. See variable documentation for "
"details."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:460
msgid ":variable:`CMAKE_ANDROID_ARM_NEON`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:459
msgid ""
"When the standalone toolchain targets ARM v7, optionally set thisto ``ON`` "
"to target ARM NEON devices.  See variable documentation for details."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:465
msgid "The Android API level detected from the standalone toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:468
msgid "The Android ABI detected from the standalone toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:471
msgid "The absolute path prefix to the binutils in the standalone toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:474
msgid "The host platform suffix of the binutils in the standalone toolchain."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:478
msgid ""
"set(CMAKE_SYSTEM_NAME Android)\n"
"set(CMAKE_ANDROID_STANDALONE_TOOLCHAIN /path/to/android-toolchain)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:485
msgid ""
"$ cmake ../src \\\n"
"  -DCMAKE_SYSTEM_NAME=Android \\\n"
"  -DCMAKE_ANDROID_STANDALONE_TOOLCHAIN=/path/to/android-toolchain"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:494
msgid ""
"Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:496
msgid ""
"A toolchain file to configure one of the :ref:`Visual Studio Generators` to "
"build using NVIDIA Nsight Tegra targeting Android may look like this:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:499
msgid "set(CMAKE_SYSTEM_NAME Android)"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:503
msgid ""
"The :variable:`CMAKE_GENERATOR_TOOLSET` may be set to select the Nsight "
"Tegra \"Toolchain Version\" value."
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:506
msgid "See also target properties:"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:508
msgid ":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:509
msgid ":prop_tgt:`ANDROID_API_MIN`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:510
msgid ":prop_tgt:`ANDROID_API`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:511
msgid ":prop_tgt:`ANDROID_ARCH`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:512
msgid ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:513
msgid ":prop_tgt:`ANDROID_GUI`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:514
msgid ":prop_tgt:`ANDROID_JAR_DEPENDENCIES`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:515
msgid ":prop_tgt:`ANDROID_JAR_DIRECTORIES`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:516
msgid ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:517
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:518
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:519
msgid ":prop_tgt:`ANDROID_PROCESS_MAX`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:520
msgid ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:521
msgid ":prop_tgt:`ANDROID_PROGUARD`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:522
msgid ":prop_tgt:`ANDROID_SECURE_PROPS_PATH`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:523
msgid ":prop_tgt:`ANDROID_SKIP_ANT_STEP`"
msgstr ""

#: ../../../manual/cmake-toolchains.7.rst:524
msgid ":prop_tgt:`ANDROID_STL_TYPE`"
msgstr ""
