# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-02 08:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CheckTypeSize.cmake:6
msgid "CheckTypeSize"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:8
msgid ""
"This module provides a command to check the size of a C/C++ type or "
"expression."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:10
msgid "Load this module in a CMake project with:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:12
msgid "include(CheckTypeSize)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:17
msgid "Commands"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:19
msgid "This module provides the following command:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:23
msgid ""
"Checks once whether the C/C++ type or expression exists and determines its "
"size:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:26
msgid ""
"check_type_size(<type> <variable> [BUILTIN_TYPES_ONLY] [LANGUAGE <language>])"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:30
msgid "The arguments are:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:32
msgid "``<type>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:33
msgid "The type or expression being checked."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:35
#: ../../../../Modules/CheckTypeSize.cmake:59
msgid "``<variable>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:36
msgid ""
"The name of the variable and a prefix used for storing the check results."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:38
msgid "``BUILTIN_TYPES_ONLY``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:39
msgid ""
"If given, only compiler-builtin types will be supported in the check. If "
"*not* given, the command checks for common headers ``<sys/types.h>``, "
"``<stdint.h>``, and ``<stddef.h>``, and saves results in "
"``HAVE_SYS_TYPES_H``, ``HAVE_STDINT_H``, and ``HAVE_STDDEF_H`` internal "
"cache variables.  The type size check automatically includes the available "
"headers, thus supporting checks of types defined in the headers."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:46
msgid "``LANGUAGE <language>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:47
msgid ""
"Uses the ``<language>`` compiler to perform the check. Acceptable values are "
"``C`` and ``CXX``. If not specified, it defaults to ``C``."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:52
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:53
msgid "Results are reported in the following variables:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:55
msgid "``HAVE_<variable>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:56
msgid ""
"Internal cache variable that holds a boolean true or false value indicating "
"whether the type or expression ``<type>`` exists."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:60
msgid "Internal cache variable that holds one of the following values:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:62
msgid "``<size>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:63
msgid ""
"If the type or expression exists, it will have a non-zero size ``<size>`` in "
"bytes."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:66
msgid "``0``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:67
msgid ""
"When type has architecture-dependent size;  This may occur when :variable:"
"`CMAKE_OSX_ARCHITECTURES` has multiple architectures. In this case "
"``<variable>_CODE`` contains preprocessor tests mapping from each "
"architecture macro to the corresponding type size. The list of architecture "
"macros is stored in ``<variable>_KEYS``, and the value for each key is "
"stored in ``<variable>-<key>``."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:74
msgid "\"\" (empty string)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:75
msgid "When type or expression does not exist."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:77
msgid "``<variable>_CODE``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:78
msgid ""
"CMake variable that holds preprocessor code to define the macro "
"``<variable>`` to the size of the type, or to leave the macro undefined if "
"the type does not exist."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:82
msgid ""
"Despite the name of this command, it may also be used to determine the size "
"of more complex expressions.  For example, to check the size of a struct "
"member:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:86
msgid "check_type_size(\"((struct something*)0)->member\" SIZEOF_MEMBER)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:91
msgid "Variables Affecting the Check"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:92
msgid ""
"The following variables may be set before calling this command to modify the "
"way the check is run:"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:1
msgid "``CMAKE_REQUIRED_FLAGS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:2
msgid ""
"A space-separated string of additional flags to pass to the compiler. A :ref:"
"`semicolon-separated list <CMake Language Lists>` will not work. The "
"contents of :variable:`CMAKE_<LANG>_FLAGS` and its associated configuration-"
"specific :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables are automatically "
"prepended to the compiler command before the contents of this variable."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:1
msgid "``CMAKE_REQUIRED_DEFINITIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of compiler "
"definitions, each of the form ``-DFOO`` or ``-DFOO=bar``.  A definition for "
"the name specified by the result variable argument of the check command is "
"also added automatically."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_INCLUDES.rst:1
msgid "``CMAKE_REQUIRED_INCLUDES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_INCLUDES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of header search "
"paths to pass to the compiler.  These will be the only header search paths "
"used; the contents of the :prop_dir:`INCLUDE_DIRECTORIES` directory property "
"will be ignored."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_OPTIONS.rst:1
msgid "``CMAKE_REQUIRED_LINK_OPTIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_OPTIONS.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of options to add "
"to the link command (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:1
msgid "``CMAKE_REQUIRED_LIBRARIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of libraries to add "
"to the link command.  These can be the names of system libraries, or they "
"can be :ref:`Imported Targets` (see :command:`try_compile` for further "
"details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:1
msgid "``CMAKE_REQUIRED_LINK_DIRECTORIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of library search "
"paths to pass to the linker (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:1
msgid "``CMAKE_REQUIRED_QUIET``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:4
msgid ""
"If this variable evaluates to a boolean true value, all status messages "
"associated with the check will be suppressed."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:109
msgid "``CMAKE_EXTRA_INCLUDE_FILES``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:110
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of extra header "
"files to include when performing the check."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:114
msgid "Examples"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:116
msgid "Consider the code:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:118
msgid ""
"include(CheckTypeSize)\n"
"\n"
"# Check for size of long.\n"
"check_type_size(long SIZEOF_LONG)\n"
"message(\"HAVE_SIZEOF_LONG: ${HAVE_SIZEOF_LONG}\")\n"
"message(\"SIZEOF_LONG: ${SIZEOF_LONG}\")\n"
"message(\"SIZEOF_LONG_CODE: ${SIZEOF_LONG_CODE}\")"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:128
msgid "On a 64-bit architecture, the output may look something like this::"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:130
msgid ""
"HAVE_SIZEOF_LONG: TRUE\n"
"SIZEOF_LONG: 8\n"
"SIZEOF_LONG_CODE: #define SIZEOF_LONG 8"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:134
msgid ""
"On Apple platforms, when :variable:`CMAKE_OSX_ARCHITECTURES` has multiple "
"architectures, types may have architecture-dependent sizes. For example, "
"with the code"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:138
msgid ""
"include(CheckTypeSize)\n"
"\n"
"check_type_size(long SIZEOF_LONG)\n"
"message(\"HAVE_SIZEOF_LONG: ${HAVE_SIZEOF_LONG}\")\n"
"message(\"SIZEOF_LONG: ${SIZEOF_LONG}\")\n"
"foreach(key IN LISTS SIZE_OF_LONG_KEYS)\n"
"  message(\"key: ${key}\")\n"
"  message(\"value: ${SIZE_OF_LONG-${key}}\")\n"
"endforeach()\n"
"message(\"SIZEOF_LONG_CODE:\n"
"${SIZEOF_LONG_CODE}\")"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:152
msgid "the result may be::"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:154
msgid ""
"HAVE_SIZEOF_LONG: TRUE\n"
"SIZEOF_LONG: 0\n"
"key: __i386\n"
"value: 4\n"
"key: __x86_64\n"
"value: 8\n"
"SIZEOF_LONG_CODE:\n"
"#if defined(__i386)\n"
"# define SIZE_OF_LONG 4\n"
"#elif defined(__x86_64)\n"
"# define SIZE_OF_LONG 8\n"
"#else\n"
"# error SIZE_OF_LONG unknown\n"
"#endif"
msgstr ""
