# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-02 08:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CheckLinkerFlag.cmake:6
msgid "CheckLinkerFlag"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:10
msgid ""
"This module provides a command to check whether a given link flag is "
"supported by the compiler."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:13
msgid "Load this module in a CMake project with:"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:15
msgid "include(CheckLinkerFlag)"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:20
msgid "Commands"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:22
msgid "This module provides the following command:"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:26
msgid "Checks once whether the compiler supports a given link flag:"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:28
msgid "check_linker_flag(<lang> <flag> <variable>)"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:32
msgid ""
"This command checks once whether the linker flag ``<flag>`` is accepted by "
"the ``<lang>`` compiler without producing a diagnostic message."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:35
msgid "The arguments are:"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:37
msgid "``<lang>``"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:38
msgid ""
"The language of the compiler used for the check.  Supported languages are "
"``C``, ``CXX``, ``CUDA``, ``Fortran``, ``HIP``, ``OBJC``, ``OBJCXX``, and "
"``Swift``."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:42
msgid "Support for ``CUDA`` language."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:45
msgid "Support for ``HIP`` language."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:48
msgid "Support for ``Swift`` language."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:51
msgid "``<flag>``"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:52
msgid ""
"Linker flag(s) to check.  Multiple flags can be specified in one argument as "
"a string using a :ref:`semicolon-separated list <CMake Language Lists>`."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:56
msgid ""
"The underlying implementation uses the :prop_tgt:`LINK_OPTIONS` target "
"property to test the specified flag.  The ``LINKER:`` (and ``SHELL:``) "
"prefixes may be used, as described in the `Handling Compiler Driver "
"Differences`_ section."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:61
msgid "``<variable>``"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:62
msgid ""
"The name of the variable to store the check result.  This variable will be "
"created as an internal cache variable."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:65
msgid ""
"This command temporarily sets the ``CMAKE_REQUIRED_LINK_OPTIONS`` variable "
"and calls the :command:`check_source_compiles` command from the :module:"
"`CheckSourceCompiles` module."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:69
msgid ""
"A successful result only indicates that the compiler did not report an error "
"when given the link flag.  Whether the flag has any effect, or the intended "
"one, is outside the scope of this module."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:75
msgid ""
"Since the underlying :command:`try_compile` command also uses flags from "
"variables like :variable:`CMAKE_<LANG>_FLAGS`, unknown or unsupported flags "
"in those variables may result in a false negative for this check."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:80
msgid "Variables Affecting the Check"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:81
msgid ""
"The following variables may be set before calling this command to modify the "
"way the check is run:"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:1
msgid "``CMAKE_REQUIRED_FLAGS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:2
msgid ""
"A space-separated string of additional flags to pass to the compiler. A :ref:"
"`semicolon-separated list <CMake Language Lists>` will not work. The "
"contents of :variable:`CMAKE_<LANG>_FLAGS` and its associated configuration-"
"specific :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables are automatically "
"prepended to the compiler command before the contents of this variable."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:1
msgid "``CMAKE_REQUIRED_DEFINITIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of compiler "
"definitions, each of the form ``-DFOO`` or ``-DFOO=bar``.  A definition for "
"the name specified by the result variable argument of the check command is "
"also added automatically."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_INCLUDES.rst:1
msgid "``CMAKE_REQUIRED_INCLUDES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_INCLUDES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of header search "
"paths to pass to the compiler.  These will be the only header search paths "
"used; the contents of the :prop_dir:`INCLUDE_DIRECTORIES` directory property "
"will be ignored."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:1
msgid "``CMAKE_REQUIRED_LIBRARIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of libraries to add "
"to the link command.  These can be the names of system libraries, or they "
"can be :ref:`Imported Targets` (see :command:`try_compile` for further "
"details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:1
msgid "``CMAKE_REQUIRED_LINK_DIRECTORIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of library search "
"paths to pass to the linker (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:1
msgid "``CMAKE_REQUIRED_QUIET``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:4
msgid ""
"If this variable evaluates to a boolean true value, all status messages "
"associated with the check will be suppressed."
msgstr ""

#: ../../../command/include/LINK_OPTIONS_LINKER.rst:2
msgid "Handling Compiler Driver Differences"
msgstr ""

#: ../../../command/include/LINK_OPTIONS_LINKER.rst:4
msgid ""
"To pass options to the linker tool, each compiler driver has its own syntax. "
"The ``LINKER:`` prefix and ``,`` separator can be used to specify, in a "
"portable way, options to pass to the linker tool. ``LINKER:`` is replaced by "
"the appropriate driver option and ``,`` by the appropriate driver separator. "
"The driver prefix and driver separator are given by the values of the :"
"variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and :variable:"
"`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables."
msgstr ""

#: ../../../command/include/LINK_OPTIONS_LINKER.rst:12
msgid ""
"For example, ``\"LINKER:-z,defs\"`` becomes ``-Xlinker -z -Xlinker defs`` "
"for ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``."
msgstr ""

#: ../../../command/include/LINK_OPTIONS_LINKER.rst:15
msgid ""
"The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix "
"expression."
msgstr ""

#: ../../../command/include/LINK_OPTIONS_LINKER.rst:18
msgid ""
"The ``LINKER:`` prefix supports, as an alternative syntax, specification of "
"arguments using the ``SHELL:`` prefix and space as separator. The previous "
"example then becomes ``\"LINKER:SHELL:-z defs\"``."
msgstr ""

#: ../../../command/include/LINK_OPTIONS_LINKER.rst:24
msgid ""
"Specifying the ``SHELL:`` prefix anywhere other than at the beginning of the "
"``LINKER:`` prefix is not supported."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:99
msgid "Examples"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:102
msgid "Example: Checking Linker Flag"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:104
msgid ""
"The following example shows how to use this module to check the ``-z relro`` "
"linker flag, which is supported on many Unix-like systems to enable read-"
"only relocations for improved binary security.  If the flag is supported by "
"the linker, it is conditionally added to the executable target using the :"
"command:`target_link_options`.  The ``LINKER:`` prefix is used to pass the "
"flag to the linker in a portable and compiler-independent way."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:111
msgid ""
"include(CheckLinkerFlag)\n"
"\n"
"check_linker_flag(C \"LINKER:-z,relro\" HAVE_Z_RELRO)\n"
"\n"
"add_executable(example main.c)\n"
"\n"
"if(HAVE_Z_RELRO)\n"
"  target_link_options(example PRIVATE \"LINKER:-z,relro\")\n"
"endif()"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:124
msgid "Example: Checking Multiple Flags"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:126
msgid ""
"In the following example, multiple linker flags are checked simultaneously:"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:128
msgid ""
"include(CheckLinkerFlag)\n"
"\n"
"check_linker_flag(C \"LINKER:-z,relro;LINKER:-z,now\" HAVE_FLAGS)\n"
"\n"
"add_executable(example main.c)\n"
"\n"
"if(HAVE_FLAGS)\n"
"  target_link_options(example PRIVATE LINKER:-z,relro LINKER:-z,now)\n"
"endif()"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:141
msgid "See Also"
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:143
msgid ""
"The :variable:`CMAKE_LINKER_TYPE` variable to specify the linker, which will "
"be used also by this module."
msgstr ""

#: ../../../../Modules/CheckLinkerFlag.cmake:145
msgid ""
"The :module:`CheckCompilerFlag` module to check whether a compiler flag is "
"supported."
msgstr ""
