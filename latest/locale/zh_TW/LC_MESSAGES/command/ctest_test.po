# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 07:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/ctest_test.rst:2
msgid "ctest_test"
msgstr ""

#: ../../../command/ctest_test.rst:4
msgid "Perform the :ref:`CTest Test Step` as a :ref:`Dashboard Client`."
msgstr ""

#: ../../../command/ctest_test.rst:6
msgid ""
"ctest_test([BUILD <build-dir>] [APPEND]\n"
"           [START <start-number>]\n"
"           [END <end-number>]\n"
"           [STRIDE <stride-number>]\n"
"           [EXCLUDE <exclude-regex>]\n"
"           [INCLUDE <include-regex>]\n"
"           [EXCLUDE_LABEL <label-exclude-regex>]\n"
"           [INCLUDE_LABEL <label-include-regex>]\n"
"           [EXCLUDE_FROM_FILE <filename>]\n"
"           [INCLUDE_FROM_FILE <filename>]\n"
"           [EXCLUDE_FIXTURE <regex>]\n"
"           [EXCLUDE_FIXTURE_SETUP <regex>]\n"
"           [EXCLUDE_FIXTURE_CLEANUP <regex>]\n"
"           [PARALLEL_LEVEL [<level>]]\n"
"           [RESOURCE_SPEC_FILE <file>]\n"
"           [TEST_LOAD <threshold>]\n"
"           [SCHEDULE_RANDOM <ON|OFF>]\n"
"           [STOP_ON_FAILURE]\n"
"           [STOP_TIME <time-of-day>]\n"
"           [RETURN_VALUE <result-var>]\n"
"           [CAPTURE_CMAKE_ERROR <result-var>]\n"
"           [REPEAT <mode>:<n>]\n"
"           [OUTPUT_JUNIT <file>]\n"
"           [QUIET]\n"
"           )"
msgstr ""

#: ../../../command/ctest_test.rst:38
msgid ""
"Run tests in the project build tree and store results in ``Test.xml`` for "
"submission with the :command:`ctest_submit` command."
msgstr ""

#: ../../../command/ctest_test.rst:41
msgid "The options are:"
msgstr ""

#: ../../../command/ctest_test.rst:43
msgid "``BUILD <build-dir>``"
msgstr ""

#: ../../../command/ctest_test.rst:44
msgid ""
"Specify the top-level build directory.  If not given, the :variable:"
"`CTEST_BINARY_DIRECTORY` variable is used."
msgstr ""

#: ../../../command/ctest_test.rst:47
msgid "``APPEND``"
msgstr ""

#: ../../../command/ctest_test.rst:48
msgid ""
"Mark ``Test.xml`` for append to results previously submitted to a dashboard "
"server since the last :command:`ctest_start` call. Append semantics are "
"defined by the dashboard server in use. This does *not* cause results to be "
"appended to a ``.xml`` file produced by a previous call to this command."
msgstr ""

#: ../../../command/ctest_test.rst:54
msgid "``START <start-number>``"
msgstr ""

#: ../../../command/ctest_test.rst:55
msgid "Specify the beginning of a range of test numbers."
msgstr ""

#: ../../../command/ctest_test.rst:57
msgid "``END <end-number>``"
msgstr ""

#: ../../../command/ctest_test.rst:58
msgid "Specify the end of a range of test numbers."
msgstr ""

#: ../../../command/ctest_test.rst:60
msgid "``STRIDE <stride-number>``"
msgstr ""

#: ../../../command/ctest_test.rst:61
msgid "Specify the stride by which to step across a range of test numbers."
msgstr ""

#: ../../../command/ctest_test.rst:63
msgid "``EXCLUDE <exclude-regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:64
msgid "Specify a regular expression matching test names to exclude."
msgstr ""

#: ../../../command/ctest_test.rst:66
msgid "``INCLUDE <include-regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:67
msgid ""
"Specify a regular expression matching test names to include. Tests not "
"matching this expression are excluded."
msgstr ""

#: ../../../command/ctest_test.rst:70
msgid "``EXCLUDE_LABEL <label-exclude-regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:71
msgid "Specify a regular expression matching test labels to exclude."
msgstr ""

#: ../../../command/ctest_test.rst:73
msgid "``INCLUDE_LABEL <label-include-regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:74
msgid ""
"Specify a regular expression matching test labels to include. Tests not "
"matching this expression are excluded."
msgstr ""

#: ../../../command/ctest_test.rst:77
msgid "``EXCLUDE_FROM_FILE <filename>``"
msgstr ""

#: ../../../command/ctest_test.rst:80
msgid "Do NOT run tests listed with their exact name in the given file."
msgstr ""

#: ../../../command/ctest_test.rst:82
msgid "``INCLUDE_FROM_FILE <filename>``"
msgstr ""

#: ../../../command/ctest_test.rst:85
msgid "Only run the tests listed with their exact name in the given file."
msgstr ""

#: ../../../command/ctest_test.rst:87
msgid "``EXCLUDE_FIXTURE <regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:90
msgid ""
"If a test in the set of tests to be executed requires a particular fixture, "
"that fixture's setup and cleanup tests would normally be added to the test "
"set automatically. This option prevents adding setup or cleanup tests for "
"fixtures matching the ``<regex>``. Note that all other fixture behavior is "
"retained, including test dependencies and skipping tests that have fixture "
"setup tests that fail."
msgstr ""

#: ../../../command/ctest_test.rst:97
msgid "``EXCLUDE_FIXTURE_SETUP <regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:100
msgid ""
"Same as ``EXCLUDE_FIXTURE`` except only matching setup tests are excluded."
msgstr ""

#: ../../../command/ctest_test.rst:102
msgid "``EXCLUDE_FIXTURE_CLEANUP <regex>``"
msgstr ""

#: ../../../command/ctest_test.rst:105
msgid ""
"Same as ``EXCLUDE_FIXTURE`` except only matching cleanup tests are excluded."
msgstr ""

#: ../../../command/ctest_test.rst:107
msgid "``PARALLEL_LEVEL [<level>]``"
msgstr ""

#: ../../../command/ctest_test.rst:108
msgid "Run tests in parallel, limited to a given level of parallelism."
msgstr ""

#: ../../../command/ctest_test.rst:112
msgid ""
"The ``<level>`` may be omitted, or ``0``, to let ctest use a default level "
"of parallelism, or unbounded parallelism, respectively, as documented by "
"the :option:`ctest --parallel` option."
msgstr ""

#: ../../../command/ctest_test.rst:116
msgid "``RESOURCE_SPEC_FILE <file>``"
msgstr ""

#: ../../../command/ctest_test.rst:119
msgid ""
"Specify a :ref:`resource specification file <ctest-resource-specification-"
"file>`. See :ref:`ctest-resource-allocation` for more information."
msgstr ""

#: ../../../command/ctest_test.rst:123
msgid "``TEST_LOAD <threshold>``"
msgstr ""

#: ../../../command/ctest_test.rst:126
msgid ""
"While running tests in parallel, try not to start tests when they may cause "
"the CPU load to pass above a given threshold.  If not specified the :"
"variable:`CTEST_TEST_LOAD` variable will be checked, and then the :option:`--"
"test-load <ctest --test-load>` command-line argument to :manual:`ctest(1)`. "
"See also the ``TestLoad`` setting in the :ref:`CTest Test Step`."
msgstr ""

#: ../../../command/ctest_test.rst:133
msgid "``REPEAT <mode>:<n>``"
msgstr ""

#: ../../../command/ctest_test.rst:136
msgid ""
"Run tests repeatedly based on the given ``<mode>`` up to ``<n>`` times. The "
"modes are:"
msgstr ""

#: ../../../command/ctest_test.rst:139
msgid "``UNTIL_FAIL``"
msgstr ""

#: ../../../command/ctest_test.rst:140
msgid ""
"Require each test to run ``<n>`` times without failing in order to pass. "
"This is useful in finding sporadic failures in test cases."
msgstr ""

#: ../../../command/ctest_test.rst:143
msgid "``UNTIL_PASS``"
msgstr ""

#: ../../../command/ctest_test.rst:144
msgid ""
"Allow each test to run up to ``<n>`` times in order to pass. Repeats tests "
"if they fail for any reason. This is useful in tolerating sporadic failures "
"in test cases."
msgstr ""

#: ../../../command/ctest_test.rst:148
msgid "``AFTER_TIMEOUT``"
msgstr ""

#: ../../../command/ctest_test.rst:149
msgid ""
"Allow each test to run up to ``<n>`` times in order to pass. Repeats tests "
"only if they timeout. This is useful in tolerating sporadic timeouts in test "
"cases on busy machines."
msgstr ""

#: ../../../command/ctest_test.rst:154
msgid "``SCHEDULE_RANDOM <ON|OFF>``"
msgstr ""

#: ../../../command/ctest_test.rst:155
msgid ""
"Launch tests in a random order.  This may be useful for detecting implicit "
"test dependencies."
msgstr ""

#: ../../../command/ctest_test.rst:158
msgid "``STOP_ON_FAILURE``"
msgstr ""

#: ../../../command/ctest_test.rst:161
msgid "Stop the execution of the tests once one has failed."
msgstr ""

#: ../../../command/ctest_test.rst:163
msgid "``STOP_TIME <time-of-day>``"
msgstr ""

#: ../../../command/ctest_test.rst:164
msgid "Specify a time of day at which the tests should all stop running."
msgstr ""

#: ../../../command/ctest_test.rst:166
msgid "``RETURN_VALUE <result-var>``"
msgstr ""

#: ../../../command/ctest_test.rst:167
msgid ""
"Store in the ``<result-var>`` variable ``0`` if all tests passed. Store non-"
"zero if anything went wrong."
msgstr ""

#: ../../../command/ctest_test.rst:170
msgid "``CAPTURE_CMAKE_ERROR <result-var>``"
msgstr ""

#: ../../../command/ctest_test.rst:173
msgid ""
"Store in the ``<result-var>`` variable -1 if there are any errors running "
"the command and prevent ctest from returning non-zero if an error occurs."
msgstr ""

#: ../../../command/ctest_test.rst:176
msgid "``OUTPUT_JUNIT <file>``"
msgstr ""

#: ../../../command/ctest_test.rst:179
msgid ""
"Write test results to ``<file>`` in JUnit XML format. If ``<file>`` is a "
"relative path, it will be placed in the build directory. If ``<file>`` "
"already exists, it will be overwritten. Note that the resulting JUnit XML "
"file is **not** uploaded to CDash because it would be redundant with CTest's "
"``Test.xml`` file."
msgstr ""

#: ../../../command/ctest_test.rst:185
msgid "``QUIET``"
msgstr ""

#: ../../../command/ctest_test.rst:188
msgid ""
"Suppress any CTest-specific non-error messages that would have otherwise "
"been printed to the console.  Output from the underlying test command is not "
"affected.  Summary info detailing the percentage of passing tests is also "
"unaffected by the ``QUIET`` option."
msgstr ""

#: ../../../command/ctest_test.rst:193
msgid ""
"See also the :variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE`, :"
"variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE` and :variable:"
"`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` variables, along with their "
"corresponding :manual:`ctest(1)` command line options :option:`--test-output-"
"size-passed <ctest --test-output-size-passed>`, :option:`--test-output-size-"
"failed <ctest --test-output-size-failed>`, and :option:`--test-output-"
"truncation <ctest --test-output-truncation>`."
msgstr ""

#: ../../../command/ctest_test.rst:204
msgid "Additional Test Measurements"
msgstr ""

#: ../../../command/ctest_test.rst:206
msgid ""
"CTest can parse the output of your tests for extra measurements to report to "
"CDash."
msgstr ""

#: ../../../command/ctest_test.rst:209
msgid ""
"When run as a :ref:`Dashboard Client`, CTest will include these custom "
"measurements in the ``Test.xml`` file that gets uploaded to CDash."
msgstr ""

#: ../../../command/ctest_test.rst:212
msgid ""
"Check the `CDash test measurement documentation <https://github.com/Kitware/"
"CDash/blob/master/docs/test_measurements.md>`_ for more information on the "
"types of test measurements that CDash recognizes."
msgstr ""

#: ../../../command/ctest_test.rst:221
msgid ""
"The following example demonstrates how to output a variety of custom test "
"measurements."
msgstr ""

#: ../../../command/ctest_test.rst:224
msgid ""
"std::cout <<\n"
"  \"<CTestMeasurement type=\\\"numeric/double\\\" name=\\\"score\\\">28.3</"
"CTestMeasurement>\"\n"
"  << std::endl;\n"
"\n"
"std::cout <<\n"
"  \"<CTestMeasurement type=\\\"text/string\\\" name=\\\"color\\\">red</"
"CTestMeasurement>\"\n"
"  << std::endl;\n"
"\n"
"std::cout <<\n"
"  \"<CTestMeasurement type=\\\"text/link\\\" name=\\\"CMake URL\\\">https://"
"cmake.org</CTestMeasurement>\"\n"
"  << std::endl;\n"
"\n"
"std::cout <<\n"
"  \"<CTestMeasurement type=\\\"text/preformatted\\\" name=\\\"Console "
"Output\\\">\" <<\n"
"  \"line 1.\\n\" <<\n"
"  \"  \\033[31;1m line 2. Bold red, and indented!\\033[0;0ml\\n\" <<\n"
"  \"line 3. Not bold or indented...\\n\" <<\n"
"  \"</CTestMeasurement>\" << std::endl;"
msgstr ""

#: ../../../command/ctest_test.rst:246
msgid "Image Measurements"
msgstr ""

#: ../../../command/ctest_test.rst:248
msgid "The following example demonstrates how to upload test images to CDash."
msgstr ""

#: ../../../command/ctest_test.rst:250
msgid ""
"std::cout <<\n"
"  \"<CTestMeasurementFile type=\\\"image/jpg\\\" name=\\\"TestImage\\\">\" "
"<<\n"
"  \"/dir/to/test_img.jpg</CTestMeasurementFile>\" << std::endl;\n"
"\n"
"std::cout <<\n"
"  \"<CTestMeasurementFile type=\\\"image/gif\\\" name=\\\"ValidImage\\\">\" "
"<<\n"
"  \"/dir/to/valid_img.gif</CTestMeasurementFile>\" << std::endl;\n"
"\n"
"std::cout <<\n"
"  \"<CTestMeasurementFile type=\\\"image/png\\\" name=\\\"AlgoResult\\\">\" "
"<<\n"
"  \"/dir/to/img.png</CTestMeasurementFile>\"\n"
"  << std::endl;"
msgstr ""

#: ../../../command/ctest_test.rst:265
msgid ""
"Images will be displayed together in an interactive comparison mode on CDash "
"if they are provided with two or more of the following names."
msgstr ""

#: ../../../command/ctest_test.rst:268
msgid "``TestImage``"
msgstr ""

#: ../../../command/ctest_test.rst:269
msgid "``ValidImage``"
msgstr ""

#: ../../../command/ctest_test.rst:270
msgid "``BaselineImage``"
msgstr ""

#: ../../../command/ctest_test.rst:271
msgid "``DifferenceImage2``"
msgstr ""

#: ../../../command/ctest_test.rst:273
msgid ""
"By convention, ``TestImage`` is the image generated by your test, and "
"``ValidImage`` (or ``BaselineImage``) is basis of comparison used to "
"determine if the test passed or failed."
msgstr ""

#: ../../../command/ctest_test.rst:277
msgid ""
"If another image name is used it will be displayed by CDash as a static "
"image separate from the interactive comparison UI."
msgstr ""

#: ../../../command/ctest_test.rst:281
msgid "Attached Files"
msgstr ""

#: ../../../command/ctest_test.rst:285
msgid ""
"The following example demonstrates how to upload non-image files to CDash."
msgstr ""

#: ../../../command/ctest_test.rst:287
msgid ""
"std::cout <<\n"
"  \"<CTestMeasurementFile type=\\\"file\\\" name=\\\"TestInputData1\\\">\" "
"<<\n"
"  \"/dir/to/data1.csv</CTestMeasurementFile>\\n\"                   <<\n"
"  \"<CTestMeasurementFile type=\\\"file\\\" name=\\\"TestInputData2\\\">\" "
"<<\n"
"  \"/dir/to/data2.csv</CTestMeasurementFile>\"                     << std::"
"endl;"
msgstr ""

#: ../../../command/ctest_test.rst:295
msgid ""
"If the name of the file to upload is known at configure time, you can use "
"the :prop_test:`ATTACHED_FILES` or :prop_test:`ATTACHED_FILES_ON_FAIL` test "
"properties instead."
msgstr ""

#: ../../../command/ctest_test.rst:300
msgid "Custom Details"
msgstr ""

#: ../../../command/ctest_test.rst:304
msgid ""
"The following example demonstrates how to specify a custom value for the "
"``Test Details`` field displayed on CDash."
msgstr ""

#: ../../../command/ctest_test.rst:307
msgid ""
"std::cout <<\n"
"  \"<CTestDetails>My Custom Details Value</CTestDetails>\" << std::endl;"
msgstr ""

#: ../../../command/ctest_test.rst:315
msgid "Additional Labels"
msgstr ""

#: ../../../command/ctest_test.rst:319
msgid ""
"The following example demonstrates how to add additional labels to a test at "
"runtime."
msgstr ""

#: ../../../command/ctest_test.rst:322
msgid ""
"std::cout <<\n"
"  \"<CTestLabel>Custom Label 1</CTestLabel>\\n\" <<\n"
"  \"<CTestLabel>Custom Label 2</CTestLabel>\"   << std::endl;"
msgstr ""

#: ../../../command/ctest_test.rst:328
msgid ""
"Use the :prop_test:`LABELS` test property instead for labels that can be "
"determined at configure time."
msgstr ""
