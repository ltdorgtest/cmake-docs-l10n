# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 07:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CheckLibraryExists.cmake:6
msgid "CheckLibraryExists"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:8
msgid "Check once if the function exists in system or specified library."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:12
msgid "check_library_exists(<library> <function> <location> <variable>)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:16
msgid ""
"Check that the library ``<library>`` exists in the given location "
"``<location>`` and has the specified ``<function>``. The result is stored in "
"an internal cache variable ``<variable>``. If ``<location>`` is empty "
"string, default directories are searched."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:21
msgid ""
"Prefer using :module:`CheckSymbolExists` or :module:`CheckSourceCompiles` "
"instead of this module for more robust detection if a function is available "
"in a library."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:25
msgid ""
"The following variables may be set before calling this macro to modify the "
"way the check is run:"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_FLAGS.txt:1
msgid "``CMAKE_REQUIRED_FLAGS``"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_FLAGS.txt:2
msgid ""
"String of additional flags to pass to the compiler. The string must be space-"
"delimited--a :ref:`;-list <CMake Language Lists>` will not work. The "
"contents of :variable:`CMAKE_<LANG>_FLAGS <CMAKE_<LANG>_FLAGS>` and its "
"associated configuration-specific variable are automatically added to the "
"compiler command before the contents of ``CMAKE_REQUIRED_FLAGS``."
msgstr ""

#: ../../../module/CMAKE_REQUIRED_DEFINITIONS.txt:1
msgid "``CMAKE_REQUIRED_DEFINITIONS``"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_DEFINITIONS.txt:2
msgid ""
"A :ref:`;-list <CMake Language Lists>` of compiler definitions of the form "
"``-DFOO`` or ``-DFOO=bar``. A definition for the name specified by "
"``<resultVar>`` will also be added automatically."
msgstr ""

#: ../../../module/CMAKE_REQUIRED_LINK_OPTIONS.txt:1
msgid "``CMAKE_REQUIRED_LINK_OPTIONS``"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_LINK_OPTIONS.txt:4
msgid ""
"A :ref:`;-list <CMake Language Lists>` of options to add to the link command "
"(see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/CMAKE_REQUIRED_LIBRARIES.txt:1
msgid "``CMAKE_REQUIRED_LIBRARIES``"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_LIBRARIES.txt:2
msgid ""
"A :ref:`;-list <CMake Language Lists>` of libraries to add to the link "
"command. These can be the name of system libraries or they can be :ref:"
"`Imported Targets <Imported Targets>` (see :command:`try_compile` for "
"further details)."
msgstr ""

#: ../../../module/CMAKE_REQUIRED_LINK_DIRECTORIES.txt:1
msgid "``CMAKE_REQUIRED_LINK_DIRECTORIES``"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_LINK_DIRECTORIES.txt:4
msgid ""
"A :ref:`;-list <CMake Language Lists>` of libraries search paths to pass to "
"the linker (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/CMAKE_REQUIRED_QUIET.txt:1
msgid "``CMAKE_REQUIRED_QUIET``"
msgstr ""

#: ../../../module/CMAKE_REQUIRED_QUIET.txt:4
msgid ""
"If this variable evaluates to a boolean true value, all status messages "
"associated with the check will be suppressed."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:41
msgid "Examples"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:43
msgid ""
"This module can be useful for performing so-called sanity checks to verify "
"that the specified library provides the expected functionality and is indeed "
"the correct one being located."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:47
msgid ""
"For example, to check if the ``curl`` library exists in the default paths "
"and has the ``curl_easy_perform`` function:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:50
msgid ""
"include(CheckLibraryExists)\n"
"check_library_exists(curl curl_easy_perform \"\" HAVE_LIBRARY_CURL)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:55
msgid ""
"To check if library exists in specific non-standard location and has a "
"specified function:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:58
msgid ""
"include(CheckLibraryExists)\n"
"check_library_exists(curl curl_easy_perform \"/opt/curl/lib\" "
"HAVE_LIBRARY_CURL)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:63
msgid ""
"Also :ref:`IMPORTED library <add_library imported libraries>` (for example, "
"from the ``find_package()`` call) can be used:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:66
msgid ""
"find_package(CURL)\n"
"\n"
"# ...\n"
"\n"
"if(TARGET CURL::libcurl)\n"
"  include(CheckLibraryExists)\n"
"  check_library_exists(CURL::libcurl curl_easy_perform \"\" "
"HAVE_LIBRARY_CURL)\n"
"endif()"
msgstr ""
