# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 07:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../policy/CMP0003.rst:2
msgid "CMP0003"
msgstr ""

#: ../../../policy/REMOVED_PROLOGUE.txt:2
msgid ""
"The ``OLD`` behavior of this policy was removed in CMake version |"
"REMOVED_IN_CMAKE_VERSION|. This policy must be set to ``NEW`` by a call to :"
"command:`cmake_minimum_required` or :command:`cmake_policy`."
msgstr ""

#: ../../../policy/CMP0003.rst:7
msgid "Libraries linked via full path no longer produce linker search paths."
msgstr ""

#: ../../../policy/CMP0003.rst:9
msgid ""
"This policy affects how libraries whose full paths are NOT known are found "
"at link time, but was created due to a change in how CMake deals with "
"libraries whose full paths are known.  Consider the code"
msgstr ""

#: ../../../policy/CMP0003.rst:13
msgid "target_link_libraries(myexe /path/to/libA.so)"
msgstr ""

#: ../../../policy/CMP0003.rst:17
msgid ""
"CMake 2.4 and below implemented linking to libraries whose full paths are "
"known by splitting them on the link line into separate components consisting "
"of the linker search path and the library name.  The example code might have "
"produced something like"
msgstr ""

#: ../../../policy/CMP0003.rst:24
msgid "... -L/path/to -lA ..."
msgstr ""

#: ../../../policy/CMP0003.rst:26
msgid ""
"in order to link to library A.  An analysis was performed to order multiple "
"link directories such that the linker would find library A in the desired "
"location, but there are cases in which this does not work. CMake versions "
"2.6 and above use the more reliable approach of passing the full path to "
"libraries directly to the linker in most cases.  The example code now "
"produces something like"
msgstr ""

#: ../../../policy/CMP0003.rst:35
msgid "... /path/to/libA.so ...."
msgstr ""

#: ../../../policy/CMP0003.rst:37
msgid "Unfortunately this change can break code like"
msgstr ""

#: ../../../policy/CMP0003.rst:39
msgid "target_link_libraries(myexe /path/to/libA.so B)"
msgstr ""

#: ../../../policy/CMP0003.rst:43
msgid ""
"where ``B`` is meant to find ``/path/to/libB.so``.  This code is wrong "
"because the user is asking the linker to find library B but has not provided "
"a linker search path (which may be added with the link_directories "
"command).  However, with the old linking implementation the code would work "
"accidentally because the linker search path added for library A allowed "
"library B to be found."
msgstr ""

#: ../../../policy/CMP0003.rst:50
msgid ""
"In order to support projects depending on linker search paths added by "
"linking to libraries with known full paths, the ``OLD`` behavior for this "
"policy will add the linker search paths even though they are not needed for "
"their own libraries.  When this policy is set to ``OLD``, CMake will produce "
"a link line such as"
msgstr ""

#: ../../../policy/CMP0003.rst:58
msgid "... -L/path/to /path/to/libA.so -lB ..."
msgstr ""

#: ../../../policy/CMP0003.rst:60
msgid ""
"which will allow library B to be found as it was previously.  When this "
"policy is set to NEW, CMake will produce a link line such as"
msgstr ""

#: ../../../policy/CMP0003.rst:65
msgid "... /path/to/libA.so -lB ..."
msgstr ""

#: ../../../policy/CMP0003.rst:67
msgid "which more accurately matches what the project specified."
msgstr ""

#: ../../../policy/CMP0003.rst:69
msgid ""
"The setting for this policy used when generating the link line is that in "
"effect when the target is created by an add_executable or add_library "
"command.  For the example described above, the code"
msgstr ""

#: ../../../policy/CMP0003.rst:73
msgid ""
"cmake_policy(SET CMP0003 OLD) # or cmake_policy(VERSION 2.4)\n"
"add_executable(myexe myexe.c)\n"
"target_link_libraries(myexe /path/to/libA.so B)"
msgstr ""

#: ../../../policy/CMP0003.rst:79
msgid ""
"will work and suppress the warning for this policy.  It may also be updated "
"to work with the corrected linking approach:"
msgstr ""

#: ../../../policy/CMP0003.rst:82
msgid ""
"cmake_policy(SET CMP0003 NEW) # or cmake_policy(VERSION 2.6)\n"
"link_directories(/path/to) # needed to find library B\n"
"add_executable(myexe myexe.c)\n"
"target_link_libraries(myexe /path/to/libA.so B)"
msgstr ""

#: ../../../policy/CMP0003.rst:89
msgid "Even better, library B may be specified with a full path:"
msgstr ""

#: ../../../policy/CMP0003.rst:91
msgid ""
"add_executable(myexe myexe.c)\n"
"target_link_libraries(myexe /path/to/libA.so /path/to/libB.so)"
msgstr ""

#: ../../../policy/CMP0003.rst:96
msgid ""
"When all items on the link line have known paths CMake does not check this "
"policy so it has no effect."
msgstr ""

#: ../../../policy/CMP0003.rst:99
msgid ""
"Note that the warning for this policy will be issued for at most one "
"target.  This avoids flooding users with messages for every target when "
"setting the policy once will probably fix all targets."
msgstr ""

#: ../../../policy/REMOVED_EPILOGUE.txt:1
msgid ""
"This policy was introduced in CMake version |INTRODUCED_IN_CMAKE_VERSION|. "
"Prior to removal in CMake version |REMOVED_IN_CMAKE_VERSION|, it could be "
"set by :command:`cmake_policy` or :command:`cmake_minimum_required`. If it "
"was not set, CMake |WARNED_OR_DID_NOT_WARN|, and used ``OLD`` behavior."
msgstr ""
