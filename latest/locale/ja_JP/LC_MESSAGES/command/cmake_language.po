# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 07:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/cmake_language.rst:2
msgid "cmake_language"
msgstr ""

#: ../../../command/cmake_language.rst:6
msgid "Call meta-operations on CMake commands."
msgstr ""

#: ../../../command/cmake_language.rst:9
msgid "Synopsis"
msgstr ""

#: ../../../command/cmake_language.rst:13
msgid ""
"cmake_language(`CALL`_ <command> [<arg>...])\n"
"cmake_language(`EVAL`_ CODE <code>...)\n"
"cmake_language(`DEFER`_ <options>... CALL <command> [<arg>...])\n"
"cmake_language(`SET_DEPENDENCY_PROVIDER`_ <command> SUPPORTED_METHODS "
"<methods>...)\n"
"cmake_language(`GET_MESSAGE_LOG_LEVEL`_ <out-var>)\n"
"cmake_language(`EXIT`_ <exit-code>)"
msgstr ""

#: ../../../command/cmake_language.rst:21
msgid "Introduction"
msgstr ""

#: ../../../command/cmake_language.rst:23
msgid ""
"This command will call meta-operations on built-in CMake commands or those "
"created via the :command:`macro` or :command:`function` commands."
msgstr ""

#: ../../../command/cmake_language.rst:26
msgid "``cmake_language`` does not introduce a new variable or policy scope."
msgstr ""

#: ../../../command/cmake_language.rst:29
msgid "Calling Commands"
msgstr ""

#: ../../../command/cmake_language.rst:34
msgid ""
"Calls the named ``<command>`` with the given arguments (if any). For "
"example, the code:"
msgstr ""

#: ../../../command/cmake_language.rst:37
msgid ""
"set(message_command \"message\")\n"
"cmake_language(CALL ${message_command} STATUS \"Hello World!\")"
msgstr ""

#: ../../../command/cmake_language.rst:42
#: ../../../command/cmake_language.rst:84
msgid "is equivalent to"
msgstr ""

#: ../../../command/cmake_language.rst:44
msgid "message(STATUS \"Hello World!\")"
msgstr ""

#: ../../../command/cmake_language.rst:49
msgid ""
"To ensure consistency of the code, the following commands are not allowed:"
msgstr ""

#: ../../../command/cmake_language.rst:51
msgid "``if`` / ``elseif`` / ``else`` / ``endif``"
msgstr ""

#: ../../../command/cmake_language.rst:52
msgid "``block`` / ``endblock``"
msgstr ""

#: ../../../command/cmake_language.rst:53
msgid "``while`` / ``endwhile``"
msgstr ""

#: ../../../command/cmake_language.rst:54
msgid "``foreach`` / ``endforeach``"
msgstr ""

#: ../../../command/cmake_language.rst:55
msgid "``function`` / ``endfunction``"
msgstr ""

#: ../../../command/cmake_language.rst:56
msgid "``macro`` / ``endmacro``"
msgstr ""

#: ../../../command/cmake_language.rst:59
msgid "Evaluating Code"
msgstr ""

#: ../../../command/cmake_language.rst:65
msgid "Evaluates the ``<code>...`` as CMake code."
msgstr ""

#: ../../../command/cmake_language.rst:67
#: ../../../command/cmake_language.rst:184
msgid "For example, the code:"
msgstr ""

#: ../../../command/cmake_language.rst:69
msgid ""
"set(A TRUE)\n"
"set(B TRUE)\n"
"set(C TRUE)\n"
"set(condition \"(A AND B) OR C\")\n"
"\n"
"cmake_language(EVAL CODE \"\n"
"  if (${condition})\n"
"    message(STATUS TRUE)\n"
"  else()\n"
"    message(STATUS FALSE)\n"
"  endif()\"\n"
")"
msgstr ""

#: ../../../command/cmake_language.rst:86
msgid ""
"set(A TRUE)\n"
"set(B TRUE)\n"
"set(C TRUE)\n"
"set(condition \"(A AND B) OR C\")\n"
"\n"
"file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/eval.cmake \"\n"
"  if (${condition})\n"
"    message(STATUS TRUE)\n"
"  else()\n"
"    message(STATUS FALSE)\n"
"  endif()\"\n"
")\n"
"\n"
"include(${CMAKE_CURRENT_BINARY_DIR}/eval.cmake)"
msgstr ""

#: ../../../command/cmake_language.rst:104
msgid "Deferring Calls"
msgstr ""

#: ../../../command/cmake_language.rst:111
msgid ""
"Schedules a call to the named ``<command>`` with the given arguments (if "
"any) to occur at a later time.  By default, deferred calls are executed as "
"if written at the end of the current directory's ``CMakeLists.txt`` file, "
"except that they run even after a :command:`return` call.  Variable "
"references in arguments are evaluated at the time the deferred call is "
"executed."
msgstr ""

#: ../../../command/cmake_language.rst:118
msgid "The options are:"
msgstr ""

#: ../../../command/cmake_language.rst:120
msgid "``DIRECTORY <dir>``"
msgstr ""

#: ../../../command/cmake_language.rst:121
msgid ""
"Schedule the call for the end of the given directory instead of the current "
"directory.  The ``<dir>`` may reference either a source directory or its "
"corresponding binary directory.  Relative paths are treated as relative to "
"the current source directory."
msgstr ""

#: ../../../command/cmake_language.rst:126
msgid ""
"The given directory must be known to CMake, being either the top-level "
"directory or one added by :command:`add_subdirectory`.  Furthermore, the "
"given directory must not yet be finished processing.  This means it can be "
"the current directory or one of its ancestors."
msgstr ""

#: ../../../command/cmake_language.rst:131
msgid "``ID <id>``"
msgstr ""

#: ../../../command/cmake_language.rst:132
msgid ""
"Specify an identification for the deferred call. The ``<id>`` may not be "
"empty and may not begin with a capital letter ``A-Z``. The ``<id>`` may "
"begin with an underscore (``_``) only if it was generated automatically by "
"an earlier call that used ``ID_VAR`` to get the id."
msgstr ""

#: ../../../command/cmake_language.rst:137
msgid "``ID_VAR <var>``"
msgstr ""

#: ../../../command/cmake_language.rst:138
msgid ""
"Specify a variable in which to store the identification for the deferred "
"call.  If ``ID <id>`` is not given, a new identification will be generated "
"and the generated id will start with an underscore (``_``)."
msgstr ""

#: ../../../command/cmake_language.rst:142
msgid "The currently scheduled list of deferred calls may be retrieved:"
msgstr ""

#: ../../../command/cmake_language.rst:144
msgid "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL_IDS <var>)"
msgstr ""

#: ../../../command/cmake_language.rst:148
msgid ""
"This will store in ``<var>`` a :ref:`semicolon-separated list <CMake "
"Language Lists>` of deferred call ids.  The ids are for the directory scope "
"in which the calls have been deferred to (i.e. where they will be executed), "
"which can be different to the scope in which they were created.  The "
"``DIRECTORY`` option can be used to specify the scope for which to retrieve "
"the call ids. If that option is not given, the call ids for the current "
"directory scope will be returned."
msgstr ""

#: ../../../command/cmake_language.rst:156
msgid "Details of a specific call may be retrieved from its id:"
msgstr ""

#: ../../../command/cmake_language.rst:158
msgid "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL <id> <var>)"
msgstr ""

#: ../../../command/cmake_language.rst:162
msgid ""
"This will store in ``<var>`` a :ref:`semicolon-separated list <CMake "
"Language Lists>` in which the first element is the name of the command to be "
"called, and the remaining elements are its unevaluated arguments (any "
"contained ``;`` characters are included literally and cannot be "
"distinguished from multiple arguments).  If multiple calls are scheduled "
"with the same id, this retrieves the first one.  If no call is scheduled "
"with the given id in the specified ``DIRECTORY`` scope (or the current "
"directory scope if no ``DIRECTORY`` option is given), this stores an empty "
"string in the variable."
msgstr ""

#: ../../../command/cmake_language.rst:171
msgid "Deferred calls may be canceled by their id:"
msgstr ""

#: ../../../command/cmake_language.rst:173
msgid "cmake_language(DEFER [DIRECTORY <dir>] CANCEL_CALL <id>...)"
msgstr ""

#: ../../../command/cmake_language.rst:177
msgid ""
"This cancels all deferred calls matching any of the given ids in the "
"specified ``DIRECTORY`` scope (or the current directory scope if no "
"``DIRECTORY`` option is given).  Unknown ids are silently ignored."
msgstr ""

#: ../../../command/cmake_language.rst:182
msgid "Deferred Call Examples"
msgstr ""

#: ../../../command/cmake_language.rst:186
msgid ""
"cmake_language(DEFER CALL message \"${deferred_message}\")\n"
"cmake_language(DEFER ID_VAR id CALL message \"Canceled Message\")\n"
"cmake_language(DEFER CANCEL_CALL ${id})\n"
"message(\"Immediate Message\")\n"
"set(deferred_message \"Deferred Message\")"
msgstr ""

#: ../../../command/cmake_language.rst:194
msgid "prints::"
msgstr ""

#: ../../../command/cmake_language.rst:196
msgid ""
"Immediate Message\n"
"Deferred Message"
msgstr ""

#: ../../../command/cmake_language.rst:199
msgid ""
"The ``Canceled Message`` is never printed because its command is canceled.  "
"The ``deferred_message`` variable reference is not evaluated until the call "
"site, so it can be set after the deferred call is scheduled."
msgstr ""

#: ../../../command/cmake_language.rst:203
msgid ""
"In order to evaluate variable references immediately when scheduling a "
"deferred call, wrap it using ``cmake_language(EVAL)``.  However, note that "
"arguments will be re-evaluated in the deferred call, though that can be "
"avoided by using bracket arguments.  For example:"
msgstr ""

#: ../../../command/cmake_language.rst:208
msgid ""
"set(deferred_message \"Deferred Message 1\")\n"
"set(re_evaluated [[${deferred_message}]])\n"
"cmake_language(EVAL CODE \"\n"
"  cmake_language(DEFER CALL message [[${deferred_message}]])\n"
"  cmake_language(DEFER CALL message \\\"${re_evaluated}\\\")\n"
"\")\n"
"message(\"Immediate Message\")\n"
"set(deferred_message \"Deferred Message 2\")"
msgstr ""

#: ../../../command/cmake_language.rst:219
msgid "also prints::"
msgstr ""

#: ../../../command/cmake_language.rst:221
msgid ""
"Immediate Message\n"
"Deferred Message 1\n"
"Deferred Message 2"
msgstr ""

#: ../../../command/cmake_language.rst:228
msgid "Dependency Providers"
msgstr ""

#: ../../../command/cmake_language.rst:232
msgid ""
"A high-level introduction to this feature can be found in the :ref:`Using "
"Dependencies Guide <dependency_providers_overview>`."
msgstr ""

#: ../../../command/cmake_language.rst:239
msgid ""
"When a call is made to :command:`find_package` or :command:"
"`FetchContent_MakeAvailable`, the call may be forwarded to a dependency "
"provider which then has the opportunity to fulfill the request. If the "
"request is for one of the ``<methods>`` specified when the provider was set, "
"CMake calls the provider's ``<command>`` with a set of method-specific "
"arguments.  If the provider does not fulfill the request, or if the provider "
"doesn't support the request's method, or no provider is set, the built-in :"
"command:`find_package` or :command:`FetchContent_MakeAvailable` "
"implementation is used to fulfill the request in the usual way."
msgstr ""

#: ../../../command/cmake_language.rst:250
msgid ""
"One or more of the following values can be specified for the ``<methods>`` "
"when setting the provider:"
msgstr ""

#: ../../../command/cmake_language.rst:253
#: ../../../command/cmake_language.rst:308
msgid "``FIND_PACKAGE``"
msgstr ""

#: ../../../command/cmake_language.rst:254
msgid "The provider command accepts :command:`find_package` requests."
msgstr ""

#: ../../../command/cmake_language.rst:256
#: ../../../command/cmake_language.rst:326
msgid "``FETCHCONTENT_MAKEAVAILABLE_SERIAL``"
msgstr ""

#: ../../../command/cmake_language.rst:257
msgid ""
"The provider command accepts :command:`FetchContent_MakeAvailable` "
"requests.  It expects each dependency to be fed to the provider command one "
"at a time, not the whole list in one go."
msgstr ""

#: ../../../command/cmake_language.rst:261
msgid ""
"Only one provider can be set at any point in time.  If a provider is already "
"set when ``cmake_language(SET_DEPENDENCY_PROVIDER)`` is called, the new "
"provider replaces the previously set one.  The specified ``<command>`` must "
"already exist when ``cmake_language(SET_DEPENDENCY_PROVIDER)`` is called. As "
"a special case, providing an empty string for the ``<command>`` and no "
"``<methods>`` will discard any previously set provider."
msgstr ""

#: ../../../command/cmake_language.rst:268
msgid ""
"The dependency provider can only be set while processing one of the files "
"specified by the :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable. "
"Thus, dependency providers can only be set as part of the first call to :"
"command:`project`.  Calling ``cmake_language(SET_DEPENDENCY_PROVIDER)`` "
"outside of that context will result in an error."
msgstr ""

#: ../../../command/cmake_language.rst:274
msgid ""
"The :prop_gbl:`PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE` global property "
"can be set if the dependency provider also wants to be enabled in whole-"
"project calls to :command:`try_compile`."
msgstr ""

#: ../../../command/cmake_language.rst:280
msgid ""
"The choice of dependency provider should always be under the user's control. "
"As a convenience, a project may choose to provide a file that users can list "
"in their :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable, but the use "
"of such a file should always be the user's choice."
msgstr ""

#: ../../../command/cmake_language.rst:286
msgid "Provider commands"
msgstr ""

#: ../../../command/cmake_language.rst:288
msgid ""
"Providers define a single ``<command>`` to accept requests.  The name of the "
"command should be specific to that provider, not something overly generic "
"that another provider might also use.  This enables users to compose "
"different providers in their own custom provider.  The recommended form is "
"``xxx_provide_dependency()``, where ``xxx`` is the provider-specific part (e."
"g. ``vcpkg_provide_dependency()``, ``conan_provide_dependency()``, "
"``ourcompany_provide_dependency()``, and so on)."
msgstr ""

#: ../../../command/cmake_language.rst:296
msgid "xxx_provide_dependency(<method> [<method-specific-args>...])"
msgstr ""

#: ../../../command/cmake_language.rst:300
msgid ""
"Because some methods expect certain variables to be set in the calling "
"scope, the provider command should typically be implemented as a macro "
"rather than a function.  This ensures it does not introduce a new variable "
"scope."
msgstr ""

#: ../../../command/cmake_language.rst:304
msgid ""
"The arguments CMake passes to the dependency provider depend on the type of "
"request.  The first argument is always the method, and it will only ever be "
"one of the ``<methods>`` that was specified when setting the provider."
msgstr ""

#: ../../../command/cmake_language.rst:309
msgid ""
"The ``<method-specific-args>`` will be everything passed to the :command:"
"`find_package` call that requested the dependency.  The first of these "
"``<method-specific-args>`` will therefore always be the name of the "
"dependency.  Dependency names are case-sensitive for this method because :"
"command:`find_package` treats them case-sensitively too."
msgstr ""

#: ../../../command/cmake_language.rst:315
msgid ""
"If the provider command fulfills the request, it must set the same variable "
"that :command:`find_package` expects to be set.  For a dependency named "
"``depName``, the provider must set ``depName_FOUND`` to true if it fulfilled "
"the request.  If the provider returns without setting this variable, CMake "
"will assume the request was not fulfilled and will fall back to the built-in "
"implementation."
msgstr ""

#: ../../../command/cmake_language.rst:322
msgid ""
"If the provider needs to call the built-in :command:`find_package` "
"implementation as part of its processing, it can do so by including the "
"``BYPASS_PROVIDER`` keyword as one of the arguments."
msgstr ""

#: ../../../command/cmake_language.rst:327
msgid ""
"The ``<method-specific-args>`` will be everything passed to the :command:"
"`FetchContent_Declare` call that corresponds to the requested dependency, "
"with the following exceptions:"
msgstr ""

#: ../../../command/cmake_language.rst:331
msgid ""
"If ``SOURCE_DIR`` or ``BINARY_DIR`` were not part of the original declared "
"arguments, they will be added with their default values."
msgstr ""

#: ../../../command/cmake_language.rst:333
msgid ""
"If :variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` is set to ``NEVER``, any "
"``FIND_PACKAGE_ARGS`` will be omitted."
msgstr ""

#: ../../../command/cmake_language.rst:335
msgid "The ``OVERRIDE_FIND_PACKAGE`` keyword is always omitted."
msgstr ""

#: ../../../command/cmake_language.rst:337
msgid ""
"The first of the ``<method-specific-args>`` will always be the name of the "
"dependency.  Dependency names are case-insensitive for this method because :"
"module:`FetchContent` also treats them case-insensitively."
msgstr ""

#: ../../../command/cmake_language.rst:341
msgid ""
"If the provider fulfills the request, it should call :command:"
"`FetchContent_SetPopulated`, passing the name of the dependency as the first "
"argument.  The ``SOURCE_DIR`` and ``BINARY_DIR`` arguments to that command "
"should only be given if the provider makes the dependency's source and build "
"directories available in exactly the same way as the built-in :command:"
"`FetchContent_MakeAvailable` command."
msgstr ""

#: ../../../command/cmake_language.rst:348
msgid ""
"If the provider returns without calling :command:`FetchContent_SetPopulated` "
"for the named dependency, CMake will assume the request was not fulfilled "
"and will fall back to the built-in implementation."
msgstr ""

#: ../../../command/cmake_language.rst:352
msgid ""
"Note that empty arguments may be significant for this method (e.g. an empty "
"string following a ``GIT_SUBMODULES`` keyword).  Therefore, if forwarding "
"these arguments on to another command, extra care must be taken to avoid "
"such arguments being silently dropped."
msgstr ""

#: ../../../command/cmake_language.rst:357
msgid ""
"If ``FETCHCONTENT_SOURCE_DIR_<uppercaseDepName>`` is set, then the "
"dependency provider will never see requests for the ``<depName>`` dependency "
"for this method. When the user sets such a variable, they are explicitly "
"overriding where to get that dependency from and are taking on the "
"responsibility that their overriding version meets any requirements for that "
"dependency and is compatible with whatever else in the project uses it. "
"Depending on the value of :variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` and "
"whether the ``OVERRIDE_FIND_PACKAGE`` option was given to :command:"
"`FetchContent_Declare`, having "
"``FETCHCONTENT_SOURCE_DIR_<uppercaseDepName>`` set may also prevent the "
"dependency provider from seeing requests for a ``find_package(depName)`` "
"call too."
msgstr ""

#: ../../../command/cmake_language.rst:371
msgid "Provider Examples"
msgstr ""

#: ../../../command/cmake_language.rst:373
msgid ""
"This first example only intercepts :command:`find_package` calls.  The "
"provider command runs an external tool which copies the relevant artifacts "
"into a provider-specific directory, if that tool knows about the dependency. "
"It then relies on the built-in implementation to then find those artifacts. :"
"command:`FetchContent_MakeAvailable` calls would not go through the provider."
msgstr ""

#: ../../../command/cmake_language.rst:379
#: ../../../command/cmake_language.rst:419
#: ../../../command/cmake_language.rst:478
msgid "mycomp_provider.cmake"
msgstr ""

#: ../../../command/cmake_language.rst:379
msgid ""
"# Always ensure we have the policy settings this provider expects\n"
"cmake_minimum_required(VERSION 3.24)\n"
"\n"
"set(MYCOMP_PROVIDER_INSTALL_DIR ${CMAKE_BINARY_DIR}/mycomp_packages\n"
"  CACHE PATH \"The directory this provider installs packages to\"\n"
")\n"
"# Tell the built-in implementation to look in our area first, unless\n"
"# the find_package() call uses NO_..._PATH options to exclude it\n"
"list(APPEND CMAKE_MODULE_PATH ${MYCOMP_PROVIDER_INSTALL_DIR}/cmake)\n"
"list(APPEND CMAKE_PREFIX_PATH ${MYCOMP_PROVIDER_INSTALL_DIR})\n"
"\n"
"macro(mycomp_provide_dependency method package_name)\n"
"  execute_process(\n"
"    COMMAND some_tool ${package_name} --installdir "
"${MYCOMP_PROVIDER_INSTALL_DIR}\n"
"    COMMAND_ERROR_IS_FATAL ANY\n"
"  )\n"
"endmacro()\n"
"\n"
"cmake_language(\n"
"  SET_DEPENDENCY_PROVIDER mycomp_provide_dependency\n"
"  SUPPORTED_METHODS FIND_PACKAGE\n"
")"
msgstr ""

#: ../../../command/cmake_language.rst:405
msgid "The user would then typically use the above file like so::"
msgstr ""

#: ../../../command/cmake_language.rst:407
msgid ""
"cmake -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=/path/to/mycomp_provider.cmake ..."
msgstr ""

#: ../../../command/cmake_language.rst:409
msgid ""
"The next example demonstrates a provider that accepts both methods, but only "
"handles one specific dependency.  It enforces providing Google Test using :"
"module:`FetchContent`, but leaves all other dependencies to be fulfilled by "
"CMake's built-in implementation.  It accepts a few different names, which "
"demonstrates one way of working around projects that hard-code an unusual or "
"undesirable way of adding this particular dependency to the build.  The "
"example also demonstrates how to use the :command:`list` command to preserve "
"variables that may be overwritten by a call to :command:"
"`FetchContent_MakeAvailable`."
msgstr ""

#: ../../../command/cmake_language.rst:419
msgid ""
"cmake_minimum_required(VERSION 3.24)\n"
"\n"
"# Because we declare this very early, it will take precedence over any\n"
"# details the project might declare later for the same thing\n"
"include(FetchContent)\n"
"FetchContent_Declare(\n"
"  googletest\n"
"  GIT_REPOSITORY https://github.com/google/googletest.git\n"
"  GIT_TAG        e2239ee6043f73722e7aa812a459f54a28552929 # release-1.11.0\n"
")\n"
"\n"
"# Both FIND_PACKAGE and FETCHCONTENT_MAKEAVAILABLE_SERIAL methods provide\n"
"# the package or dependency name as the first method-specific argument.\n"
"macro(mycomp_provide_dependency method dep_name)\n"
"  if(\"${dep_name}\" MATCHES \"^(gtest|googletest)$\")\n"
"    # Save our current command arguments in case we are called recursively\n"
"    list(APPEND mycomp_provider_args ${method} ${dep_name})\n"
"\n"
"    # This will forward to the built-in FetchContent implementation,\n"
"    # which detects a recursive call for the same thing and avoids calling\n"
"    # the provider again if dep_name is the same as the current call.\n"
"    FetchContent_MakeAvailable(googletest)\n"
"\n"
"    # Restore our command arguments\n"
"    list(POP_BACK mycomp_provider_args dep_name method)\n"
"\n"
"    # Tell the caller we fulfilled the request\n"
"    if(\"${method}\" STREQUAL \"FIND_PACKAGE\")\n"
"      # We need to set this if we got here from a find_package() call\n"
"      # since we used a different method to fulfill the request.\n"
"      # This example assumes projects only use the gtest targets,\n"
"      # not any of the variables the FindGTest module may define.\n"
"      set(${dep_name}_FOUND TRUE)\n"
"    elseif(NOT \"${dep_name}\" STREQUAL \"googletest\")\n"
"      # We used the same method, but were given a different name to the\n"
"      # one we populated with. Tell the caller about the name it used.\n"
"      FetchContent_SetPopulated(${dep_name}\n"
"        SOURCE_DIR \"${googletest_SOURCE_DIR}\"\n"
"        BINARY_DIR \"${googletest_BINARY_DIR}\"\n"
"      )\n"
"    endif()\n"
"  endif()\n"
"endmacro()\n"
"\n"
"cmake_language(\n"
"  SET_DEPENDENCY_PROVIDER mycomp_provide_dependency\n"
"  SUPPORTED_METHODS\n"
"    FIND_PACKAGE\n"
"    FETCHCONTENT_MAKEAVAILABLE_SERIAL\n"
")"
msgstr ""

#: ../../../command/cmake_language.rst:473
msgid ""
"The final example demonstrates how to modify arguments to a :command:"
"`find_package` call.  It forces all such calls to have the ``QUIET`` "
"keyword.  It uses the ``BYPASS_PROVIDER`` keyword to prevent calling the "
"provider command recursively for the same dependency."
msgstr ""

#: ../../../command/cmake_language.rst:478
msgid ""
"cmake_minimum_required(VERSION 3.24)\n"
"\n"
"macro(mycomp_provide_dependency method)\n"
"  find_package(${ARGN} BYPASS_PROVIDER QUIET)\n"
"endmacro()\n"
"\n"
"cmake_language(\n"
"  SET_DEPENDENCY_PROVIDER mycomp_provide_dependency\n"
"  SUPPORTED_METHODS FIND_PACKAGE\n"
")"
msgstr ""

#: ../../../command/cmake_language.rst:493
msgid "Getting current message log level"
msgstr ""

#: ../../../command/cmake_language.rst:502
msgid ""
"Writes the current :command:`message` logging level into the given "
"``<output_variable>``."
msgstr ""

#: ../../../command/cmake_language.rst:505
msgid "See :command:`message` for the possible logging levels."
msgstr ""

#: ../../../command/cmake_language.rst:507
msgid ""
"The current message logging level can be set either using the :option:`--log-"
"level <cmake --log-level>` command line option of the :manual:`cmake(1)` "
"program or using the :variable:`CMAKE_MESSAGE_LOG_LEVEL` variable."
msgstr ""

#: ../../../command/cmake_language.rst:512
msgid ""
"If both the command line option and the variable are set, the command line "
"option takes precedence. If neither are set, the default logging level is "
"returned."
msgstr ""

#: ../../../command/cmake_language.rst:517
msgid "Terminating Scripts"
msgstr ""

#: ../../../command/cmake_language.rst:524
msgid ""
"Terminate the current :option:`cmake -P` script and exit with ``<exit-"
"code>``."
msgstr ""

#: ../../../command/cmake_language.rst:526
msgid ""
"This command works only in :ref:`script mode <Script Processing Mode>`. If "
"used outside of that context, it will cause a fatal error."
msgstr ""

#: ../../../command/cmake_language.rst:529
msgid ""
"The ``<exit-code>`` should be non-negative. If ``<exit-code>`` is negative, "
"then the behavior is unspecified (e.g., on Windows the error code -1 becomes "
"``0xffffffff``, and on Linux it becomes 255). Exit codes above 255 may not "
"be supported by the underlying shell or platform, and some shells may "
"interpret values above 125 specially.  Therefore, it is advisable to only "
"specify an ``<exit-code>`` in the range 0 to 125."
msgstr ""
