# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2016 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/UseJava.cmake:6
msgid "UseJava"
msgstr ""

#: ../../../../Modules/UseJava.cmake:8
msgid "Use Module for Java"
msgstr ""

#: ../../../../Modules/UseJava.cmake:10
msgid ""
"This file provides functions for Java.  It is assumed that FindJava.cmake "
"has already been loaded.  See FindJava.cmake for information on how to load "
"Java into your CMake project."
msgstr ""

#: ../../../../Modules/UseJava.cmake:16
msgid ""
"add_jar(target_name\n"
"        [SOURCES] source1 [source2 ...] [resource1 ...]\n"
"        [INCLUDE_JARS jar1 [jar2 ...]]\n"
"        [ENTRY_POINT entry]\n"
"        [VERSION version]\n"
"        [OUTPUT_NAME name]\n"
"        [OUTPUT_DIR dir]\n"
"        )"
msgstr ""

#: ../../../../Modules/UseJava.cmake:25
msgid ""
"This command creates a <target_name>.jar.  It compiles the given source "
"files (source) and adds the given resource files (resource) to the jar "
"file.  Source files can be java files or listing files (prefixed by '@').  "
"If only resource files are given then just a jar file is created.  The list "
"of include jars are added to the classpath when compiling the java sources "
"and also to the dependencies of the target. INCLUDE_JARS also accepts other "
"target names created by add_jar.  For backwards compatibility, jar files "
"listed as sources are ignored (as they have been since the first version of "
"this module)."
msgstr ""

#: ../../../../Modules/UseJava.cmake:35
msgid ""
"The default OUTPUT_DIR can also be changed by setting the variable "
"CMAKE_JAVA_TARGET_OUTPUT_DIR."
msgstr ""

#: ../../../../Modules/UseJava.cmake:38
msgid "Additional instructions:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:42
msgid ""
"To add compile flags to the target you can set these flags with\n"
"the following variable:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:49
msgid "set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:55
msgid ""
"To add a path or a jar file to the class path you can do this\n"
"with the CMAKE_JAVA_INCLUDE_PATH variable."
msgstr ""

#: ../../../../Modules/UseJava.cmake:62
msgid "set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:68
msgid "To use a different output name for the target you can set it with:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:74
msgid "add_jar(foobar foobar.java OUTPUT_NAME shibboleet.jar)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:80
msgid ""
"To use a different output directory than CMAKE_CURRENT_BINARY_DIR\n"
"you can set it with:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:87
msgid "add_jar(foobar foobar.java OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:93
msgid ""
"To define an entry point in your jar you can set it with the ENTRY_POINT\n"
"named argument:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:100
msgid "add_jar(example ENTRY_POINT com/examples/MyProject/Main)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:106
msgid ""
"To define a custom manifest for the jar, you can set it with the manifest\n"
"named argument:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:113
msgid "add_jar(example MANIFEST /path/to/manifest)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:119
msgid ""
"To add a VERSION to the target output name you can set it using\n"
"the VERSION named argument to add_jar. This will create a jar file with the\n"
"name shibboleet-1.0.0.jar and will create a symlink shibboleet.jar\n"
"pointing to the jar with the version information."
msgstr ""

#: ../../../../Modules/UseJava.cmake:128
msgid "add_jar(shibboleet shibbotleet.java VERSION 1.2.0)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:134
msgid ""
"If the target is a JNI library, utilize the following commands to\n"
"create a JNI symbolic link:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:141
msgid ""
"set(CMAKE_JNI_TARGET TRUE)\n"
"add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\n"
"install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)\n"
"install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})"
msgstr ""

#: ../../../../Modules/UseJava.cmake:150
msgid ""
"If a single target needs to produce more than one jar from its\n"
"java source code, to prevent the accumulation of duplicate class\n"
"files in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior\n"
"to calling the add_jar() function:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:159
msgid ""
"set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)\n"
"add_jar(foo foo.java)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:166
msgid ""
"set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)\n"
"add_jar(bar bar.java)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:171 ../../../../Modules/UseJava.cmake:223
msgid "Target Properties:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:175
msgid ""
"The add_jar() function sets some target properties. You can get these\n"
"properties with the\n"
"   get_property(TARGET <target_name> PROPERTY <propery_name>)\n"
"command."
msgstr ""

#: ../../../../Modules/UseJava.cmake:184
msgid ""
"INSTALL_FILES      The files which should be installed. This is used by\n"
"                   install_jar().\n"
"JNI_SYMLINK        The JNI symlink which should be installed.\n"
"                   This is used by install_jni_symlink().\n"
"JAR_FILE           The location of the jar file so that you can include\n"
"                   it.\n"
"CLASSDIR           The directory where the class files can be found. For\n"
"                   example to use them with javah."
msgstr ""

#: ../../../../Modules/UseJava.cmake:195
msgid ""
"find_jar(<VAR>\n"
"         name | NAMES name1 [name2 ...]\n"
"         [PATHS path1 [path2 ... ENV var]]\n"
"         [VERSIONS version1 [version2]]\n"
"         [DOC \"cache documentation string\"]\n"
"         )"
msgstr ""

#: ../../../../Modules/UseJava.cmake:202
msgid ""
"This command is used to find a full path to the named jar.  A cache entry "
"named by <VAR> is created to stor the result of this command. If the full "
"path to a jar is found the result is stored in the variable and the search "
"will not repeated unless the variable is cleared.  If nothing is found, the "
"result will be <VAR>-NOTFOUND, and the search will be attempted again next "
"time find_jar is invoked with the same variable.  The name of the full path "
"to a file that is searched for is specified by the names listed after NAMES "
"argument. Additional search locations can be specified after the PATHS "
"argument. If you require special a version of a jar file you can specify it "
"with the VERSIONS argument.  The argument after DOC will be used for the "
"documentation string in the cache."
msgstr ""

#: ../../../../Modules/UseJava.cmake:217
msgid ""
"install_jar(target_name destination)\n"
"install_jar(target_name DESTINATION destination [COMPONENT component])"
msgstr ""

#: ../../../../Modules/UseJava.cmake:220
msgid ""
"This command installs the TARGET_NAME files to the given DESTINATION. It "
"should be called in the same scope as add_jar() or it will fail."
msgstr ""

#: ../../../../Modules/UseJava.cmake:227
msgid ""
"The install_jar() function sets the INSTALL_DESTINATION target property\n"
"on jars so installed. This property holds the DESTINATION as described\n"
"above, and is used by install_jar_exports(). You can get this property\n"
"with the\n"
"   get_property(TARGET <target_name> PROPERTY INSTALL_DESTINATION)\n"
"command."
msgstr ""

#: ../../../../Modules/UseJava.cmake:238
msgid ""
"install_jni_symlink(target_name destination)\n"
"install_jni_symlink(target_name DESTINATION destination [COMPONENT "
"component])"
msgstr ""

#: ../../../../Modules/UseJava.cmake:241
msgid ""
"This command installs the TARGET_NAME JNI symlinks to the given "
"DESTINATION.  It should be called in the same scope as add_jar() or it will "
"fail."
msgstr ""

#: ../../../../Modules/UseJava.cmake:247
msgid ""
"install_jar_exports(TARGETS jar1 [jar2 ...]\n"
"                    FILE export_filename\n"
"                    DESTINATION destination [COMPONENT component])"
msgstr ""

#: ../../../../Modules/UseJava.cmake:251
msgid ""
"This command installs a target export file export_filename for the named jar "
"targets to the given DESTINATION. Its function is similar to that of "
"install(EXPORTS)."
msgstr ""

#: ../../../../Modules/UseJava.cmake:257
msgid ""
"export_jars(TARGETS jar1 [jar2 ...]\n"
"            FILE export_filename)"
msgstr ""

#: ../../../../Modules/UseJava.cmake:260
msgid ""
"This command writes a target export file export_filename for the named jar "
"targets. Its function is similar to that of export()."
msgstr ""

#: ../../../../Modules/UseJava.cmake:265
msgid ""
"create_javadoc(<VAR>\n"
"               PACKAGES pkg1 [pkg2 ...]\n"
"               [SOURCEPATH <sourcepath>]\n"
"               [CLASSPATH <classpath>]\n"
"               [INSTALLPATH <install path>]\n"
"               [DOCTITLE \"the documentation title\"]\n"
"               [WINDOWTITLE \"the title of the document\"]\n"
"               [AUTHOR TRUE|FALSE]\n"
"               [USE TRUE|FALSE]\n"
"               [VERSION TRUE|FALSE]\n"
"               )"
msgstr ""

#: ../../../../Modules/UseJava.cmake:277
msgid ""
"Create java documentation based on files or packages.  For more details "
"please read the javadoc manpage."
msgstr ""

#: ../../../../Modules/UseJava.cmake:280
msgid ""
"There are two main signatures for create_javadoc.  The first signature works "
"with package names on a path with source files:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:285
msgid ""
"Example:\n"
"create_javadoc(my_example_doc\n"
"  PACKAGES com.exmaple.foo com.example.bar\n"
"  SOURCEPATH \"${CMAKE_CURRENT_SOURCE_DIR}\"\n"
"  CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n"
"  WINDOWTITLE \"My example\"\n"
"  DOCTITLE \"<h1>My example</h1>\"\n"
"  AUTHOR TRUE\n"
"  USE TRUE\n"
"  VERSION TRUE\n"
")"
msgstr ""

#: ../../../../Modules/UseJava.cmake:299
msgid "The second signature for create_javadoc works on a given list of files."
msgstr ""

#: ../../../../Modules/UseJava.cmake:304
msgid ""
"create_javadoc(<VAR>\n"
"               FILES file1 [file2 ...]\n"
"               [CLASSPATH <classpath>]\n"
"               [INSTALLPATH <install path>]\n"
"               [DOCTITLE \"the documentation title\"]\n"
"               [WINDOWTITLE \"the title of the document\"]\n"
"               [AUTHOR TRUE|FALSE]\n"
"               [USE TRUE|FALSE]\n"
"               [VERSION TRUE|FALSE]\n"
"              )"
msgstr ""

#: ../../../../Modules/UseJava.cmake:317
msgid "Example:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:321
msgid ""
"create_javadoc(my_example_doc\n"
"  FILES ${example_SRCS}\n"
"  CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n"
"  WINDOWTITLE \"My example\"\n"
"  DOCTITLE \"<h1>My example</h1>\"\n"
"  AUTHOR TRUE\n"
"  USE TRUE\n"
"  VERSION TRUE\n"
")"
msgstr ""

#: ../../../../Modules/UseJava.cmake:333
msgid ""
"Both signatures share most of the options.  These options are the same as "
"what you can find in the javadoc manpage.  Please look at the manpage for "
"CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and VERSION."
msgstr ""

#: ../../../../Modules/UseJava.cmake:337
msgid "The documentation will be by default installed to"
msgstr ""

#: ../../../../Modules/UseJava.cmake:341
msgid "${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>"
msgstr ""

#: ../../../../Modules/UseJava.cmake:345
msgid "if you don't set the INSTALLPATH."
msgstr ""

#: ../../../../Modules/UseJava.cmake:349
msgid ""
"create_javah(TARGET <target>\n"
"             GENERATED_FILES <VAR>\n"
"             CLASSES <class>...\n"
"             [CLASSPATH <classpath>...]\n"
"             [DEPENDS <depend>...]\n"
"             [OUTPUT_NAME <path>|OUTPUT_DIR <path>]\n"
"             )"
msgstr ""

#: ../../../../Modules/UseJava.cmake:357
msgid ""
"Create C header files from java classes. These files provide the connective "
"glue that allow your Java and C code to interact."
msgstr ""

#: ../../../../Modules/UseJava.cmake:360
msgid ""
"There are two main signatures for create_javah.  The first signature returns "
"generated files through variable specified by GENERATED_FILES option:"
msgstr ""

#: ../../../../Modules/UseJava.cmake:365
msgid ""
"Example:\n"
"Create_javah(GENERATED_FILES files_headers\n"
"  CLASSES org.cmake.HelloWorld\n"
"  CLASSPATH hello.jar\n"
")"
msgstr ""

#: ../../../../Modules/UseJava.cmake:373
msgid ""
"The second signature for create_javah creates a target which encapsulates "
"header files generation."
msgstr ""

#: ../../../../Modules/UseJava.cmake:378
msgid ""
"Example:\n"
"Create_javah(TARGET target_headers\n"
"  CLASSES org.cmake.HelloWorld\n"
"  CLASSPATH hello.jar\n"
")"
msgstr ""

#: ../../../../Modules/UseJava.cmake:386
msgid "Both signatures share same options."
msgstr ""

#: ../../../../Modules/UseJava.cmake:389
msgid "``CLASSES <class>...``"
msgstr ""

#: ../../../../Modules/UseJava.cmake:389
msgid "Specifies Java classes used to generate headers."
msgstr ""

#: ../../../../Modules/UseJava.cmake:393
msgid "``CLASSPATH <classpath>...``"
msgstr ""

#: ../../../../Modules/UseJava.cmake:392
msgid ""
"Specifies various paths to look up classes. Here .class files, jar files or "
"targets created by command add_jar can be used."
msgstr ""

#: ../../../../Modules/UseJava.cmake:396
msgid "``DEPENDS <depend>...``"
msgstr ""

#: ../../../../Modules/UseJava.cmake:396
msgid "Targets on which the javah target depends"
msgstr ""

#: ../../../../Modules/UseJava.cmake:400
msgid "``OUTPUT_NAME <path>``"
msgstr ""

#: ../../../../Modules/UseJava.cmake:399
msgid ""
"Concatenates the resulting header files for all the classes listed by option "
"CLASSES into <path>. Same behavior as option '-o' of javah tool."
msgstr ""

#: ../../../../Modules/UseJava.cmake:1431
msgid "``OUTPUT_DIR <path>``"
msgstr ""

#: ../../../../Modules/UseJava.cmake:403
msgid ""
"Sets the directory where the header files will be generated. Same behavior "
"as option '-d' of javah tool. If not specified, ${CMAKE_CURRENT_BINARY_DIR} "
"is used as output directory."
msgstr ""
