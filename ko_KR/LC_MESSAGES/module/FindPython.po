# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindPython.cmake:6
msgid "FindPython"
msgstr ""

#: ../../../../Modules/FindPython.cmake:10
msgid ""
"Find Python interpreter, compiler and development environment (include "
"directories and libraries)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:13
msgid ""
"When a version is requested, it can be specified as a simple value or as a "
"range. For a detailed description of version range usage and capabilities, "
"refer to the :command:`find_package` command."
msgstr ""

#: ../../../../Modules/FindPython.cmake:18
msgid "The following components are supported:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:20
msgid "``Interpreter``: search for Python interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:21
msgid "``Compiler``: search for Python compiler. Only offered by IronPython."
msgstr ""

#: ../../../../Modules/FindPython.cmake:22
msgid ""
"``Development``: search for development artifacts (include directories and "
"libraries)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:25
msgid ""
"This component includes two sub-components which can be specified "
"independently:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:29
msgid ""
"``Development.Module``: search for artifacts for Python module developments."
msgstr ""

#: ../../../../Modules/FindPython.cmake:31
msgid ""
"``Development.Embed``: search for artifacts for Python embedding "
"developments."
msgstr ""

#: ../../../../Modules/FindPython.cmake:36
msgid ""
"``Development.SABIModule``: search for artifacts for Python module "
"developments using the `Stable Application Binary Interface <https://docs."
"python.org/3/c-api/stable.html>`_. This component is available only for "
"version ``3.2`` and upper."
msgstr ""

#: ../../../../Modules/FindPython.cmake:41
msgid "``NumPy``: search for NumPy include directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:43
msgid "Added the ``NumPy`` component."
msgstr ""

#: ../../../../Modules/FindPython.cmake:46
msgid "If no ``COMPONENTS`` are specified, ``Interpreter`` is assumed."
msgstr ""

#: ../../../../Modules/FindPython.cmake:48
msgid ""
"If component ``Development`` is specified, it implies sub-components "
"``Development.Module`` and ``Development.Embed``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:51
msgid ""
"In a cross-compiling mode (i.e. the :variable:`CMAKE_CROSSCOMPILING` "
"variable is defined to true), the following constraints, when the policy :"
"policy:`CMP0190` is set to ``NEW``, now apply to the requested components:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:56
msgid ""
"``Interpreter`` or ``Compiler`` alone: the host artifacts will be searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:57
msgid ""
"``Interpreter`` or ``Compiler`` with ``Development`` or any sub-component: "
"The target artifacts will be searched. In this case, the :variable:"
"`CMAKE_CROSSCOMPILING_EMULATOR` variable must be defined and will be used to "
"execute the interpreter or the compiler."
msgstr ""

#: ../../../../Modules/FindPython.cmake:62
msgid ""
"When both host and target artifacts are needed, two different calls to the :"
"command:`find_package` command should be done. The "
"``Python_ARTIFACTS_PREFIX`` variable can be helpful in this situation."
msgstr ""

#: ../../../../Modules/FindPython.cmake:66
msgid ""
"To ensure consistent versions between components ``Interpreter``, "
"``Compiler``, ``Development`` (or one of its sub-components) and ``NumPy``, "
"specify all components at the same time:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:70
msgid "find_package (Python COMPONENTS Interpreter Development)"
msgstr ""

#: ../../../../Modules/FindPython.cmake:74
msgid ""
"This module looks preferably for version 3 of Python. If not found, version "
"2 is searched. To manage concurrent versions 3 and 2 of Python, use :module:"
"`FindPython3` and :module:`FindPython2` modules rather than this one."
msgstr ""

#: ../../../../Modules/FindPython.cmake:81
msgid ""
"If components ``Interpreter`` and ``Development`` (or one of its sub-"
"components) are both specified, this module search only for interpreter with "
"same platform architecture as the one defined by CMake configuration. This "
"constraint does not apply if only ``Interpreter`` component is specified."
msgstr ""

#: ../../../../Modules/FindPython.cmake:88
msgid "Imported Targets"
msgstr ""

#: ../../../../Modules/FindPython.cmake:90
msgid ""
"This module defines the following :ref:`Imported Targets <Imported Targets>`:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:92
msgid ""
":ref:`Imported Targets <Imported Targets>` are only created when :prop_gbl:"
"`CMAKE_ROLE` is ``PROJECT``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:96
msgid "``Python::Interpreter``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:97
msgid ""
"Python interpreter. This target is defined only if the ``Interpreter`` "
"component is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:99
msgid "``Python::InterpreterDebug``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:102
msgid ""
"Python debug interpreter. This target is defined only if the ``Interpreter`` "
"component is found and the ``Python_EXECUTABLE_DEBUG`` variable is defined. "
"The target is only defined on the ``Windows`` platform."
msgstr ""

#: ../../../../Modules/FindPython.cmake:106
msgid "``Python::InterpreterMultiConfig``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:109
msgid ""
"Python interpreter. The release or debug version of the interpreter will be "
"used, based on the context (platform, configuration). This target is defined "
"only if the ``Interpreter`` component is found"
msgstr ""

#: ../../../../Modules/FindPython.cmake:113
msgid "``Python::Compiler``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:114
msgid ""
"Python compiler. This target is defined only if the ``Compiler`` component "
"is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:117
msgid "``Python::Module``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:120
msgid ""
"Python library for Python module. Target defined if component ``Development."
"Module`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:123
msgid "``Python::SABIModule``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:126
msgid ""
"Python library for Python module using the Stable Application Binary "
"Interface. Target defined if component ``Development.SABIModule`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:129
msgid "``Python::Python``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:130
msgid ""
"Python library for Python embedding. Target defined if component "
"``Development.Embed`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:133
msgid "``Python::NumPy``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:136
msgid "NumPy Python library. Target defined if component ``NumPy`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:139
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindPython.cmake:141
msgid ""
"This module will set the following variables in your project (see :ref:"
"`Standard Variable Names <CMake Developer Standard Variable Names>`):"
msgstr ""

#: ../../../../Modules/FindPython.cmake:144
msgid "``Python_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:145
msgid "System has the Python requested components."
msgstr ""

#: ../../../../Modules/FindPython.cmake:146
msgid "``Python_Interpreter_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:147
msgid "System has the Python interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:148
#: ../../../../Modules/FindPython.cmake:521
msgid "``Python_EXECUTABLE``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:149
msgid "Path to the Python interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:150
msgid "``Python_EXECUTABLE_DEBUG``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:153
msgid ""
"Path to the debug Python interpreter. It is only defined on the ``Windows`` "
"platform."
msgstr ""

#: ../../../../Modules/FindPython.cmake:156
msgid "``Python_INTERPRETER``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:159
msgid ""
"Path to the Python interpreter, defined as a :manual:`generator expression "
"<cmake-generator-expressions(7)>` selecting the ``Python_EXECUTABLE`` or "
"``Python_EXECUTABLE_DEBUG`` variable based on the context (platform, "
"configuration)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:164
msgid "``Python_INTERPRETER_ID``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:165
msgid "A short string unique to the interpreter. Possible values include:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:166
msgid "Python"
msgstr ""

#: ../../../../Modules/FindPython.cmake:167
msgid "ActivePython"
msgstr ""

#: ../../../../Modules/FindPython.cmake:168
msgid "Anaconda"
msgstr ""

#: ../../../../Modules/FindPython.cmake:169
msgid "Canopy"
msgstr ""

#: ../../../../Modules/FindPython.cmake:170
#: ../../../../Modules/FindPython.cmake:214
msgid "IronPython"
msgstr ""

#: ../../../../Modules/FindPython.cmake:171
msgid "PyPy"
msgstr ""

#: ../../../../Modules/FindPython.cmake:172
msgid "``Python_STDLIB``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:173
msgid "Standard platform independent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:175
msgid "Information returned by ``sysconfig.get_path('stdlib')``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:176
msgid "``Python_STDARCH``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:177
msgid "Standard platform dependent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:179
msgid "Information returned by ``sysconfig.get_path('platstdlib')``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:180
msgid "``Python_SITELIB``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:181
msgid "Third-party platform independent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:183
msgid "Information returned by ``sysconfig.get_path('purelib')``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:184
msgid "``Python_SITEARCH``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:185
msgid "Third-party platform dependent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:187
msgid "Information returned by ``sysconfig.get_path('platlib')``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:189
msgid "``Python_SOABI``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:192
msgid "Extension suffix for modules."
msgstr ""

#: ../../../../Modules/FindPython.cmake:194
msgid ""
"Information computed from ``sysconfig.get_config_var('EXT_SUFFIX')`` or "
"``sysconfig.get_config_var('SOABI')`` or ``python3-config --extension-"
"suffix``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:198
msgid "``Python_SOSABI``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:201
msgid ""
"Extension suffix for modules using the Stable Application Binary Interface."
msgstr ""

#: ../../../../Modules/FindPython.cmake:203
msgid ""
"Information computed from ``importlib.machinery.EXTENSION_SUFFIXES`` if the "
"COMPONENT ``Interpreter`` was specified. Otherwise, the extension is "
"``abi3`` except for ``Windows``, ``MSYS`` and ``CYGWIN`` for which this is "
"an empty string."
msgstr ""

#: ../../../../Modules/FindPython.cmake:208
msgid "``Python_Compiler_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:209
msgid "System has the Python compiler."
msgstr ""

#: ../../../../Modules/FindPython.cmake:210
#: ../../../../Modules/FindPython.cmake:524
msgid "``Python_COMPILER``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:211
msgid "Path to the Python compiler. Only offered by IronPython."
msgstr ""

#: ../../../../Modules/FindPython.cmake:212
msgid "``Python_COMPILER_ID``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:213
msgid "A short string unique to the compiler. Possible values include:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:216
#: ../../../../Modules/FindPython.cmake:527
msgid "``Python_DOTNET_LAUNCHER``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:219
#: ../../../../Modules/FindPython.cmake:530
msgid "The ``.Net`` interpreter. Only used by ``IronPython`` implementation."
msgstr ""

#: ../../../../Modules/FindPython.cmake:221
msgid "``Python_Development_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:222
msgid "System has the Python development artifacts."
msgstr ""

#: ../../../../Modules/FindPython.cmake:224
msgid "``Python_Development.Module_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:227
msgid "System has the Python development artifacts for Python module."
msgstr ""

#: ../../../../Modules/FindPython.cmake:229
msgid "``Python_Development.SABIModule_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:232
msgid ""
"System has the Python development artifacts for Python module using the "
"Stable Application Binary Interface."
msgstr ""

#: ../../../../Modules/FindPython.cmake:235
msgid "``Python_Development.Embed_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:238
msgid "System has the Python development artifacts for Python embedding."
msgstr ""

#: ../../../../Modules/FindPython.cmake:240
msgid "``Python_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:242
msgid "The Python include directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:244
msgid "``Python_DEFINITIONS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:247
msgid "The Python preprocessor definitions."
msgstr ""

#: ../../../../Modules/FindPython.cmake:249
msgid "``Python_DEBUG_POSTFIX``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:252
msgid ""
"Postfix of debug python module. This variable can be used to define the :"
"prop_tgt:`DEBUG_POSTFIX` target property."
msgstr ""

#: ../../../../Modules/FindPython.cmake:255
msgid "``Python_LINK_OPTIONS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:258
msgid ""
"The Python link options. Some configurations require specific link options "
"for a correct build and execution."
msgstr ""

#: ../../../../Modules/FindPython.cmake:261
msgid "``Python_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:262
msgid "The Python libraries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:263
msgid "``Python_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:264
msgid "The Python library directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:265
msgid "``Python_RUNTIME_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:266
msgid "The Python runtime library directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:267
msgid "``Python_SABI_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:270
msgid "The Python libraries for the Stable Application Binary Interface."
msgstr ""

#: ../../../../Modules/FindPython.cmake:271
msgid "``Python_SABI_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:274
msgid "The Python ``SABI`` library directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:275
msgid "``Python_RUNTIME_SABI_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:278
msgid "The Python runtime ``SABI`` library directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:279
msgid "``Python_VERSION``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:280
msgid "Python version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:281
msgid "``Python_VERSION_MAJOR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:282
msgid "Python major version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:283
msgid "``Python_VERSION_MINOR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:284
msgid "Python minor version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:285
msgid "``Python_VERSION_PATCH``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:286
msgid "Python patch version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:288
msgid "``Python_PyPy_VERSION``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:291
msgid "Python PyPy version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:293
msgid "``Python_NumPy_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:296
msgid "System has the NumPy."
msgstr ""

#: ../../../../Modules/FindPython.cmake:298
msgid "``Python_NumPy_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:301
msgid "The NumPy include directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:303
msgid "``Python_NumPy_VERSION``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:306
msgid "The NumPy version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:309
msgid "Hints"
msgstr ""

#: ../../../../Modules/FindPython.cmake:311
msgid "``Python_ROOT_DIR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:312
msgid "Define the root directory of a Python installation."
msgstr ""

#: ../../../../Modules/FindPython.cmake:314
msgid "``Python_USE_STATIC_LIBS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:315
msgid ""
"If not defined, search for shared libraries and static libraries in that "
"order."
msgstr ""

#: ../../../../Modules/FindPython.cmake:317
msgid "If set to TRUE, search **only** for static libraries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:318
msgid "If set to FALSE, search **only** for shared libraries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:322
msgid ""
"This hint will be ignored on ``Windows`` because static libraries are not "
"available on this platform."
msgstr ""

#: ../../../../Modules/FindPython.cmake:325
msgid "``Python_FIND_ABI``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:328
msgid ""
"This variable defines which ABIs, as defined in :pep:`3149`, should be "
"searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:333
msgid "This hint will be honored only when searched for ``Python`` version 3."
msgstr ""

#: ../../../../Modules/FindPython.cmake:335
msgid ""
"The ``Python_FIND_ABI`` variable is a 4-tuple specifying, in that order, "
"``pydebug`` (``d``), ``pymalloc`` (``m``), ``unicode`` (``u``) and "
"``gil_disabled`` (``t``) flags."
msgstr ""

#: ../../../../Modules/FindPython.cmake:339
msgid ""
"A fourth element, specifying the ``gil_disabled`` flag (i.e. free threaded "
"python), is added and is optional. If not specified, the value is ``OFF``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:344
msgid "Each element can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:346
msgid "``ON``: Corresponding flag is selected."
msgstr ""

#: ../../../../Modules/FindPython.cmake:347
msgid "``OFF``: Corresponding flag is not selected."
msgstr ""

#: ../../../../Modules/FindPython.cmake:348
msgid "``ANY``: The two possibilities (``ON`` and ``OFF``) will be searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:352
msgid ""
"If ``Python3_FIND_ABI`` is not defined, any ABI, excluding the "
"``gil_disabled`` flag, will be searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:355
msgid ""
"From this 4-tuple, various ABIs will be searched starting from the most "
"specialized to the most general. Moreover, when ``ANY`` is specified for "
"``pydebug`` and ``gil_disabled``, ``debug`` and ``free threaded`` versions "
"will be searched **after** ``non-debug`` and ``non-gil-disabled`` ones."
msgstr ""

#: ../../../../Modules/FindPython.cmake:360
msgid "For example, if we have:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:362
msgid "set (Python_FIND_ABI \"ON\" \"ANY\" \"ANY\" \"ON\")"
msgstr ""

#: ../../../../Modules/FindPython.cmake:366
msgid ""
"The following flags combinations will be appended, in that order, to the "
"artifact names: ``tdmu``, ``tdm``, ``tdu``, and ``td``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:369
msgid "And to search any possible ABIs:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:371
msgid "set (Python_FIND_ABI \"ANY\" \"ANY\" \"ANY\" \"ANY\")"
msgstr ""

#: ../../../../Modules/FindPython.cmake:375
msgid ""
"The following combinations, in that order, will be used: ``mu``, ``m``, "
"``u``, ``<empty>``, ``dmu``, ``dm``, ``du``, ``d``, ``tmu``, ``tm``, ``tu``, "
"``t``, ``tdmu``, ``tdm``, ``tdu``, and ``td``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:381
msgid ""
"This hint is useful only on ``POSIX`` systems except for the "
"``gil_disabled`` flag. So, on ``Windows`` systems, when ``Python_FIND_ABI`` "
"is defined, ``Python`` distributions from `python.org <https://www.python."
"org/>`_ will be found only if the value for each flag is ``OFF`` or ``ANY`` "
"except for the fourth one (``gil_disabled``)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:388
msgid "``Python_FIND_STRATEGY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:391
msgid ""
"This variable defines how lookup will be done. The ``Python_FIND_STRATEGY`` "
"variable can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:394
msgid ""
"``VERSION``: Try to find the most recent version in all specified locations. "
"This is the default if policy :policy:`CMP0094` is undefined or set to "
"``OLD``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:398
msgid ""
"``LOCATION``: Stops lookup as soon as a version satisfying version "
"constraints is founded. This is the default if policy :policy:`CMP0094` is "
"set to ``NEW``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:402
msgid "See also ``Python_FIND_UNVERSIONED_NAMES``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:404
msgid "``Python_FIND_REGISTRY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:407
msgid ""
"On Windows the ``Python_FIND_REGISTRY`` variable determine the order of "
"preference between registry and environment variables. the "
"``Python_FIND_REGISTRY`` variable can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:411
msgid ""
"``FIRST``: Try to use registry before environment variables. This is the "
"default."
msgstr ""

#: ../../../../Modules/FindPython.cmake:413
msgid "``LAST``: Try to use registry after environment variables."
msgstr ""

#: ../../../../Modules/FindPython.cmake:414
msgid "``NEVER``: Never try to use registry."
msgstr ""

#: ../../../../Modules/FindPython.cmake:416
msgid "``Python_FIND_FRAMEWORK``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:419
msgid ""
"On macOS the ``Python_FIND_FRAMEWORK`` variable determine the order of "
"preference between Apple-style and unix-style package components. This "
"variable can take same values as :variable:`CMAKE_FIND_FRAMEWORK` variable."
msgstr ""

#: ../../../../Modules/FindPython.cmake:426
msgid "Value ``ONLY`` is not supported so ``FIRST`` will be used instead."
msgstr ""

#: ../../../../Modules/FindPython.cmake:428
msgid ""
"If ``Python_FIND_FRAMEWORK`` is not defined, :variable:"
"`CMAKE_FIND_FRAMEWORK` variable will be used, if any."
msgstr ""

#: ../../../../Modules/FindPython.cmake:431
msgid "``Python_FIND_VIRTUALENV``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:434
msgid ""
"This variable defines the handling of virtual environments managed by "
"``virtualenv`` or ``conda``. It is meaningful only when a virtual "
"environment is active (i.e. the ``activate`` script has been evaluated). In "
"this case, it takes precedence over ``Python_FIND_REGISTRY`` and "
"``CMAKE_FIND_FRAMEWORK`` variables.  The ``Python_FIND_VIRTUALENV`` variable "
"can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:441
msgid ""
"``FIRST``: The virtual environment is used before any other standard paths "
"to look-up for the interpreter. This is the default."
msgstr ""

#: ../../../../Modules/FindPython.cmake:443
msgid ""
"``ONLY``: Only the virtual environment is used to look-up for the "
"interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:445
msgid ""
"``STANDARD``: The virtual environment is not used to look-up for the "
"interpreter but environment variable ``PATH`` is always considered. In this "
"case, variable ``Python_FIND_REGISTRY`` (Windows) or "
"``CMAKE_FIND_FRAMEWORK`` (macOS) can be set with value ``LAST`` or ``NEVER`` "
"to select preferably the interpreter from the virtual environment."
msgstr ""

#: ../../../../Modules/FindPython.cmake:452
msgid "Added support for ``conda`` environments."
msgstr ""

#: ../../../../Modules/FindPython.cmake:457
msgid ""
"If the component ``Development`` is requested (or one of its sub-components) "
"and is not found or the wrong artifacts are returned, including also the "
"component ``Interpreter`` may be helpful."
msgstr ""

#: ../../../../Modules/FindPython.cmake:461
msgid "``Python_FIND_IMPLEMENTATIONS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:464
msgid ""
"This variable defines, in an ordered list, the different implementations "
"which will be searched. The ``Python_FIND_IMPLEMENTATIONS`` variable can "
"hold the following values:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:468
msgid ""
"``CPython``: this is the standard implementation. Various products, like "
"``Anaconda`` or ``ActivePython``, rely on this implementation."
msgstr ""

#: ../../../../Modules/FindPython.cmake:470
msgid ""
"``IronPython``: This implementation use the ``CSharp`` language for ``.NET "
"Framework`` on top of the `Dynamic Language Runtime` (``DLR``). See "
"`IronPython <https://ironpython.net>`_."
msgstr ""

#: ../../../../Modules/FindPython.cmake:473
msgid ""
"``PyPy``: This implementation use ``RPython`` language and ``RPython "
"translation toolchain`` to produce the python interpreter. See `PyPy "
"<https://pypy.org>`_."
msgstr ""

#: ../../../../Modules/FindPython.cmake:477
msgid "The default value is:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:479
msgid "Windows platform: ``CPython``, ``IronPython``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:480
msgid "Other platforms: ``CPython``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:484
msgid ""
"This hint has the lowest priority of all hints, so even if, for example, you "
"specify ``IronPython`` first and ``CPython`` in second, a python product "
"based on ``CPython`` can be selected because, for example with "
"``Python_FIND_STRATEGY=LOCATION``, each location will be search first for "
"``IronPython`` and second for ``CPython``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:492
msgid ""
"When ``IronPython`` is specified, on platforms other than ``Windows``, the "
"``.Net`` interpreter (i.e. ``mono`` command) is expected to be available "
"through the ``PATH`` variable."
msgstr ""

#: ../../../../Modules/FindPython.cmake:496
msgid "``Python_FIND_UNVERSIONED_NAMES``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:499
msgid ""
"This variable defines how the generic names will be searched. Currently, it "
"only applies to the generic names of the interpreter, namely, ``python3`` or "
"``python2`` and ``python``. The ``Python_FIND_UNVERSIONED_NAMES`` variable "
"can be set to one of the following values:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:505
msgid ""
"``FIRST``: The generic names are searched before the more specialized ones "
"(such as ``python2.5`` for example)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:507
msgid ""
"``LAST``: The generic names are searched after the more specialized ones. "
"This is the default."
msgstr ""

#: ../../../../Modules/FindPython.cmake:509
msgid "``NEVER``: The generic name are not searched at all."
msgstr ""

#: ../../../../Modules/FindPython.cmake:511
msgid "See also ``Python_FIND_STRATEGY``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:514
msgid "Artifacts Specification"
msgstr ""

#: ../../../../Modules/FindPython.cmake:518
msgid ""
"To solve special cases, it is possible to specify directly the artifacts by "
"setting the following variables:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:522
msgid "The path to the interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:525
msgid "The path to the compiler."
msgstr ""

#: ../../../../Modules/FindPython.cmake:532
msgid "``Python_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:533
msgid ""
"The path to the library. It will be used to compute the variables "
"``Python_LIBRARIES``, ``Python_LIBRARY_DIRS`` and "
"``Python_RUNTIME_LIBRARY_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:537
msgid "``Python_SABI_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:540
msgid ""
"The path to the library for Stable Application Binary Interface. It will be "
"used to compute the variables ``Python_SABI_LIBRARIES``, "
"``Python_SABI_LIBRARY_DIRS`` and ``Python_RUNTIME_SABI_LIBRARY_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:544
msgid "``Python_INCLUDE_DIR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:545
msgid ""
"The path to the directory of the ``Python`` headers. It will be used to "
"compute the variable ``Python_INCLUDE_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:548
msgid "``Python_NumPy_INCLUDE_DIR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:549
msgid ""
"The path to the directory of the ``NumPy`` headers. It will be used to "
"compute the variable ``Python_NumPy_INCLUDE_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:554
msgid ""
"All paths must be absolute. Any artifact specified with a relative path will "
"be ignored."
msgstr ""

#: ../../../../Modules/FindPython.cmake:559
msgid ""
"When an artifact is specified, all ``HINTS`` will be ignored and no search "
"will be performed for this artifact."
msgstr ""

#: ../../../../Modules/FindPython.cmake:562
msgid ""
"If more than one artifact is specified, it is the user's responsibility to "
"ensure the consistency of the various artifacts."
msgstr ""

#: ../../../../Modules/FindPython.cmake:565
msgid ""
"By default, this module supports multiple calls in different directories of "
"a project with different version/component requirements while providing "
"correct and consistent results for each call. To support this behavior, "
"CMake cache is not used in the traditional way which can be problematic for "
"interactive specification. So, to enable also interactive specification, "
"module behavior can be controlled with the following variable:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:572
msgid "``Python_ARTIFACTS_INTERACTIVE``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:575
msgid "Selects the behavior of the module. This is a boolean variable:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:577
msgid ""
"If set to ``TRUE``: Create CMake cache entries for the above artifact "
"specification variables so that users can edit them interactively. This "
"disables support for multiple version/component requirements."
msgstr ""

#: ../../../../Modules/FindPython.cmake:580
msgid ""
"If set to ``FALSE`` or undefined: Enable multiple version/component "
"requirements."
msgstr ""

#: ../../../../Modules/FindPython.cmake:583
msgid "``Python_ARTIFACTS_PREFIX``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:586
msgid ""
"Define a custom prefix which will be used for the definition of all the "
"result variables, targets, and commands. By using this variable, this module "
"supports multiple calls in the same directory with different version/"
"component requirements. For example, in case of cross-compilation, "
"development components are needed but the native python interpreter can also "
"be required:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:593
msgid ""
"find_package(Python COMPONENTS Development)\n"
"\n"
"set(Python_ARTIFACTS_PREFIX \"_HOST\")\n"
"find_package(Python COMPONENTS Interpreter)\n"
"\n"
"# Here Python_HOST_EXECUTABLE and Python_HOST::Interpreter artifacts are "
"defined"
msgstr ""

#: ../../../../Modules/FindPython.cmake:604
msgid ""
"For consistency with standard behavior of modules, the various standard "
"``_FOUND`` variables (i.e. without the custom prefix) are also defined by "
"each call to the :command:`find_package` command."
msgstr ""

#: ../../../../Modules/FindPython.cmake:609
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindPython.cmake:611
msgid ""
"This module defines the command ``Python_add_library`` (when :prop_gbl:"
"`CMAKE_ROLE` is ``PROJECT``), which has the same semantics as :command:"
"`add_library` and adds a dependency to target ``Python::Python`` or, when "
"library type is ``MODULE``, to target ``Python::Module`` or ``Python::"
"SABIModule`` (when ``USE_SABI`` option is specified) and takes care of "
"Python module naming rules:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:618
msgid ""
"Python_add_library (<name> [STATIC | SHARED | MODULE [USE_SABI <version>] "
"[WITH_SOABI]]\n"
"                    <source1> [<source2> ...])"
msgstr ""

#: ../../../../Modules/FindPython.cmake:623
msgid "If the library type is not specified, ``MODULE`` is assumed."
msgstr ""

#: ../../../../Modules/FindPython.cmake:625
msgid ""
"For ``MODULE`` library type, if option ``WITH_SOABI`` is specified, the "
"module suffix will include the ``Python_SOABI`` value, if any."
msgstr ""

#: ../../../../Modules/FindPython.cmake:629
msgid ""
"For ``MODULE`` type, if the option ``USE_SABI`` is specified, the "
"preprocessor definition ``Py_LIMITED_API`` will be specified, as "
"``PRIVATE``, for the target ``<name>`` with the value computed from "
"``<version>`` argument. The expected format for ``<version>`` is ``major[."
"minor]``, where each component is a numeric value. If ``minor`` component is "
"specified, the version should be, at least, ``3.2`` which is the version "
"where the `Stable Application Binary Interface <https://docs.python.org/3/c-"
"api/stable.html>`_ was introduced. Specifying only major version ``3`` is "
"equivalent to ``3.2``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:639
msgid ""
"When option ``WITH_SOABI`` is also specified,  the module suffix will "
"include the ``Python_SOSABI`` value, if any."
msgstr ""

#: ../../../../Modules/FindPython.cmake:642
msgid ""
"For ``MODULE`` type, the :prop_tgt:`DEBUG_POSTFIX` target property is "
"initialized with the value of ``Python_DEBUG_POSTFIX`` variable if defined."
msgstr ""
