# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-02 08:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/ExternalProject.cmake:8
msgid "ExternalProject"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:11
msgid "Contents"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:15
msgid "External Project Definition"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:19
msgid ""
"The ``ExternalProject_Add()`` function creates a custom target to drive "
"download, update/patch, configure, build, install and test steps of an "
"external project:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:23
msgid "ExternalProject_Add(<name> [<option>...])"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:27
msgid ""
"The individual steps within the process can be driven independently if "
"required (e.g. for CDash submission) and extra custom steps can be defined, "
"along with the ability to control the step dependencies. The directory "
"structure used for the management of the external project can also be "
"customized. The function supports a large number of options which can be "
"used to tailor the external project behavior."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:35
msgid "Directory Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:37
msgid ""
"Most of the time, the default directory layout is sufficient. It is largely "
"an implementation detail that the main project usually doesn't need to "
"change. In some circumstances, however, control over the directory layout "
"can be useful or necessary. The directory options are potentially more "
"useful from the point of view that the main build can use the :command:"
"`ExternalProject_Get_Property` command to retrieve their values, thereby "
"allowing the main project to refer to build artifacts of the external "
"project."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:46
msgid "``PREFIX <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:47
msgid ""
"Root directory for the external project. Unless otherwise noted below, all "
"other directories associated with the external project will be created under "
"here."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:51
msgid "``TMP_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:52
msgid "Directory in which to store temporary files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:54
msgid "``STAMP_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:55
msgid ""
"Directory in which to store the timestamps of each step. Log files from "
"individual steps are also created in here unless overridden by LOG_DIR (see "
"*Logging Options* below)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:59
msgid "``LOG_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:62
msgid "Directory in which to store the logs of each step."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:64
msgid "``DOWNLOAD_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:65
msgid ""
"Directory in which to store downloaded files before unpacking them. This "
"directory is only used by the URL download method, all other download "
"methods use ``SOURCE_DIR`` directly instead."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:69
msgid "``SOURCE_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:70
msgid ""
"Source directory into which downloaded contents will be unpacked, or for non-"
"URL download methods, the directory in which the repository should be "
"checked out, cloned, etc. If no download method is specified, this must "
"point to an existing directory where the external project has already been "
"unpacked or cloned/checked out."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:77
msgid ""
"If a download method is specified, any existing contents of the source "
"directory may be deleted. Only the URL download method checks whether this "
"directory is either missing or empty before initiating the download, "
"stopping with an error if it is not empty. All other download methods "
"silently discard any previous contents of the source directory."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:84
msgid "``BINARY_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:85
msgid ""
"Specify the build directory location. This option is ignored if "
"``BUILD_IN_SOURCE`` is enabled."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:88
msgid "``INSTALL_DIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:89
msgid ""
"Installation prefix to be placed in the ``<INSTALL_DIR>`` placeholder. This "
"does not actually configure the external project to install to the given "
"prefix. That must be done by passing appropriate arguments to the external "
"project configuration step, e.g. using ``<INSTALL_DIR>``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:94
msgid ""
"If any of the above ``..._DIR`` options are not specified, their defaults "
"are computed as follows. If the ``PREFIX`` option is given or the "
"``EP_PREFIX`` directory property is set, then an external project is built "
"and installed under the specified prefix::"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:99
msgid ""
"TMP_DIR      = <prefix>/tmp\n"
"STAMP_DIR    = <prefix>/src/<name>-stamp\n"
"DOWNLOAD_DIR = <prefix>/src\n"
"SOURCE_DIR   = <prefix>/src/<name>\n"
"BINARY_DIR   = <prefix>/src/<name>-build\n"
"INSTALL_DIR  = <prefix>\n"
"LOG_DIR      = <STAMP_DIR>"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:107
msgid ""
"Otherwise, if the ``EP_BASE`` directory property is set then components of "
"an external project are stored under the specified base::"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:110
msgid ""
"TMP_DIR      = <base>/tmp/<name>\n"
"STAMP_DIR    = <base>/Stamp/<name>\n"
"DOWNLOAD_DIR = <base>/Download/<name>\n"
"SOURCE_DIR   = <base>/Source/<name>\n"
"BINARY_DIR   = <base>/Build/<name>\n"
"INSTALL_DIR  = <base>/Install/<name>\n"
"LOG_DIR      = <STAMP_DIR>"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:118
msgid ""
"If no ``PREFIX``, ``EP_PREFIX``, or ``EP_BASE`` is specified, then the "
"default is to set ``PREFIX`` to ``<name>-prefix``. Relative paths are "
"interpreted with respect to :variable:`CMAKE_CURRENT_BINARY_DIR` at the "
"point where ``ExternalProject_Add()`` is called."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:124
msgid "Download Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:126
msgid ""
"A download method can be omitted if the ``SOURCE_DIR`` option is used to "
"point to an existing non-empty directory. Otherwise, one of the download "
"methods below must be specified (multiple download methods should not be "
"given) or a custom ``DOWNLOAD_COMMAND`` provided."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:131
msgid "``DOWNLOAD_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:132
msgid ""
"Overrides the command used for the download step (:manual:`generator "
"expressions <cmake-generator-expressions(7)>` are supported). If this option "
"is specified, all other download options will be ignored. Providing an empty "
"string for ``<cmd>`` effectively disables the download step."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:139
msgid "URL"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:141
msgid "``URL <url1> [<url2>...]``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:142
msgid ""
"List of paths and/or URL(s) of the external project's source. When more than "
"one URL is given, they are tried in turn until one succeeds. A URL may be an "
"ordinary path in the local file system (in which case it must be the only "
"URL provided) or any downloadable URL supported by the :command:"
"`file(DOWNLOAD)` command. A local filesystem path may refer to either an "
"existing directory or to an archive file, whereas a URL is expected to point "
"to a file which can be treated as an archive. When an archive is used, it "
"will be unpacked automatically unless the ``DOWNLOAD_NO_EXTRACT`` option is "
"set to prevent it. The archive type is determined by inspecting the actual "
"content rather than using logic based on the file extension."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:154
msgid "Multiple URLs are allowed."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:157
msgid "``URL_HASH <algo>=<hashValue>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:158
msgid ""
"Hash of the archive file to be downloaded. The argument should be of the "
"form ``<algo>=<hashValue>`` where ``algo`` can be any of the hashing "
"algorithms supported by the :command:`file()` command. Specifying this "
"option is strongly recommended for URL downloads, as it ensures the "
"integrity of the downloaded content. It is also used as a check for a "
"previously downloaded file, allowing connection to the remote location to be "
"avoided altogether if the local directory already has a file from an earlier "
"download that matches the specified hash."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:167
msgid "``URL_MD5 <md5>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:168
msgid "Equivalent to ``URL_HASH MD5=<md5>``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:170
msgid "``DOWNLOAD_NAME <fname>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:171
msgid ""
"File name to use for the downloaded file. If not given, the end of the URL "
"is used to determine the file name. This option is rarely needed, the "
"default name is generally suitable and is not normally used outside of code "
"internal to the ``ExternalProject`` module."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:176
msgid "``DOWNLOAD_EXTRACT_TIMESTAMP <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:179
msgid ""
"When specified with a true value, the timestamps of the extracted files will "
"match those in the archive. When false, the timestamps of the extracted "
"files will reflect the time at which the extraction was performed. If the "
"download URL changes, timestamps based off those in the archive can result "
"in dependent targets not being rebuilt when they potentially should have "
"been. Therefore, unless the file timestamps are significant to the project "
"in some way, use a false value for this option. If "
"``DOWNLOAD_EXTRACT_TIMESTAMP`` is not given, the default is false. See "
"policy :policy:`CMP0135`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:189
msgid "``DOWNLOAD_NO_EXTRACT <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:192
msgid ""
"Allows the extraction part of the download step to be disabled by passing a "
"boolean true value for this option. If this option is not given, the "
"downloaded contents will be unpacked automatically if required. If "
"extraction has been disabled, the full path to the downloaded file is "
"available as ``<DOWNLOADED_FILE>`` in subsequent steps or as the property "
"``DOWNLOADED_FILE`` with the :command:`ExternalProject_Get_Property` command."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:200
msgid "``DOWNLOAD_NO_PROGRESS <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:201
msgid ""
"Can be used to disable logging the download progress. If this option is not "
"given, download progress messages will be logged."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:204
msgid "``TIMEOUT <seconds>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:205
msgid "Maximum time allowed for file download operations."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:207
msgid "``INACTIVITY_TIMEOUT <seconds>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:210
msgid "Terminate the operation after a period of inactivity."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:212
msgid "``HTTP_USERNAME <username>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:215
msgid "Username for the download operation if authentication is required."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:217
msgid "``HTTP_PASSWORD <password>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:220
msgid "Password for the download operation if authentication is required."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:222
msgid "``HTTP_HEADER <header1> [<header2>...]``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:225
msgid ""
"Provides an arbitrary list of HTTP headers for the download operation. This "
"can be useful for accessing content in systems like AWS, etc."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:228
msgid "``TLS_VERSION <min>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:231
msgid ""
"Specify minimum TLS version for ``https://`` URLs.  If this option is not "
"provided, the value of the :variable:`CMAKE_TLS_VERSION` variable or the :"
"envvar:`CMAKE_TLS_VERSION` environment variable will be used instead (see :"
"command:`file(DOWNLOAD)`)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:236
msgid ""
"This option also applies to ``git clone`` invocations, although the default "
"behavior is different.  If none of the ``TLS_VERSION`` option, :variable:"
"`CMAKE_TLS_VERSION` variable, or :envvar:`CMAKE_TLS_VERSION` environment "
"variable is specified, the behavior will be determined by git's default or a "
"``http.sslVersion`` git config option the user may have set at a global "
"level."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:243
msgid "``TLS_VERIFY <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:244
msgid ""
"Specifies whether certificate verification should be performed for ``https://"
"`` URLs.  If this option is not provided, the value of the :variable:"
"`CMAKE_TLS_VERIFY` variable or the :envvar:`CMAKE_TLS_VERIFY` environment "
"variable will be used instead (see :command:`file(DOWNLOAD)`). If neither of "
"those is set, certificate verification will not be performed. In situations "
"where ``URL_HASH`` cannot be provided, this option can be an alternative "
"verification measure."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:252
msgid ""
"This option also applies to ``git clone`` invocations, although the default "
"behavior is different.  If none of the ``TLS_VERIFY`` option, :variable:"
"`CMAKE_TLS_VERIFY` variable, or :envvar:`CMAKE_TLS_VERIFY` environment "
"variable is specified, the behavior will be determined by git's default "
"(true) or a ``http.sslVerify`` git config option the user may have set at a "
"global level."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:261
msgid "Previously this option did not apply to ``git clone`` invocations."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:265
msgid ""
"Previously the :envvar:`CMAKE_TLS_VERIFY` environment variable was not "
"checked."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:268
msgid "``TLS_CAINFO <file>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:269
msgid ""
"Specify a custom certificate authority file to use if ``TLS_VERIFY`` is "
"enabled. If this option is not specified, the value of the :variable:"
"`CMAKE_TLS_CAINFO` variable will be used instead (see :command:"
"`file(DOWNLOAD)`)"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:274
msgid "``NETRC <level>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:277
msgid ""
"Specify whether the ``.netrc`` file is to be used for operation. If this "
"option is not specified, the value of the :variable:`CMAKE_NETRC` variable "
"will be used instead (see :command:`file(DOWNLOAD)`).  Valid levels are:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:282
msgid "``IGNORED``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:283
msgid "The ``.netrc`` file is ignored. This is the default."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:285
msgid "``OPTIONAL``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:286
msgid ""
"The ``.netrc`` file is optional, and information in the URL is preferred.  "
"The file will be scanned to find which ever information is not specified in "
"the URL."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:289
msgid "``REQUIRED``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:290
msgid "The ``.netrc`` file is required, and information in the URL is ignored."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:293
msgid "``NETRC_FILE <file>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:296
msgid ""
"Specify an alternative ``.netrc`` file to the one in your home directory if "
"the ``NETRC`` level is ``OPTIONAL`` or ``REQUIRED``. If this option is not "
"specified, the value of the :variable:`CMAKE_NETRC_FILE` variable will be "
"used instead (see :command:`file(DOWNLOAD)`)"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:301
msgid "Added support for `tbz2`, `.tar.xz`, `.txz`, and `.7z` extensions."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:305
msgid "Git"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:307
msgid ""
"NOTE: A git version of 1.6.5 or later is required if this download method is "
"used."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:310
msgid "``GIT_REPOSITORY <url>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:311
msgid ""
"URL of the git repository. Any URL understood by the ``git`` command may be "
"used."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:314
msgid ""
"A relative URL will be resolved based on the parent project's remote, "
"subject to :policy:`CMP0150`.  See the policy documentation for how the "
"remote is selected, including conditions where the remote selection can "
"fail.  Local filesystem remotes should always use absolute paths."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:321
msgid "``GIT_TAG <tag>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:322
msgid ""
"Git branch name, tag or commit hash. Note that branch names and tags should "
"generally be specified as remote names (i.e. ``origin/myBranch`` rather than "
"simply ``myBranch``). This ensures that if the remote end has its tag moved "
"or branch rebased or history rewritten, the local clone will still be "
"updated correctly. In general, however, specifying a commit hash should be "
"preferred for a number of reasons:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:329
msgid ""
"If the local clone already has the commit corresponding to the hash, no "
"``git fetch`` needs to be performed to check for changes each time CMake is "
"re-run. This can result in a significant speed up if many external projects "
"are being used."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:333
msgid ""
"Using a specific git hash ensures that the main project's own history is "
"fully traceable to a specific point in the external project's evolution. If "
"a branch or tag name is used instead, then checking out a specific commit of "
"the main project doesn't necessarily pin the whole build to a specific point "
"in the life of the external project. The lack of such deterministic behavior "
"makes the main project lose traceability and repeatability."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:341
msgid ""
"If ``GIT_SHALLOW`` is enabled then ``GIT_TAG`` works only with branch names "
"and tags.  A commit hash is not allowed."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:344
msgid ""
"Note that if not provided, ``GIT_TAG`` defaults to ``master``, not the "
"default Git branch name."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:347
msgid "``GIT_REMOTE_NAME <name>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:348
msgid ""
"The optional name of the remote. If this option is not specified, it "
"defaults to ``origin``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:351
msgid "``GIT_SUBMODULES <module>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:352
msgid ""
"Specific git submodules that should also be updated. If this option is not "
"provided, all git submodules will be updated."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:355
msgid ""
"When :policy:`CMP0097` is set to ``NEW``, if this value is set to an empty "
"string then no submodules are initialized or updated."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:359
msgid "``GIT_SUBMODULES_RECURSE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:362
msgid ""
"Specify whether git submodules (if any) should update recursively by passing "
"the ``--recursive`` flag to ``git submodule update``. If not specified, the "
"default is on."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:366
msgid "``GIT_SHALLOW <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:369
msgid ""
"When this option is enabled, the ``git clone`` operation will be given the "
"``--depth 1`` option. This performs a shallow clone, which avoids "
"downloading the whole history and instead retrieves just the commit denoted "
"by the ``GIT_TAG`` option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:374
msgid "``GIT_PROGRESS <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:377
msgid ""
"When enabled, this option instructs the ``git clone`` operation to report "
"its progress by passing it the ``--progress`` option. Without this option, "
"the clone step for large projects may appear to make the build stall, since "
"nothing will be logged until the clone operation finishes. While this option "
"can be used to provide progress to prevent the appearance of the build "
"having stalled, it may also make the build overly noisy if lots of external "
"projects are used."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:385
msgid "``GIT_CONFIG <option1> [<option2>...]``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:388
msgid ""
"Specify a list of config options to pass to ``git clone``. Each option "
"listed will be transformed into its own ``--config <option>`` on the ``git "
"clone`` command line, with each option required to be in the form "
"``key=value``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:393
msgid "``GIT_REMOTE_UPDATE_STRATEGY <strategy>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:396
msgid ""
"When ``GIT_TAG`` refers to a remote branch, this option can be used to "
"specify how the update step behaves.  The ``<strategy>`` must be one of the "
"following:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:400
msgid "``CHECKOUT``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:401
msgid ""
"Ignore the local branch and always checkout the branch specified by "
"``GIT_TAG``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:404
msgid "``REBASE``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:405
msgid ""
"Try to rebase the current branch to the one specified by ``GIT_TAG``. If "
"there are local uncommitted changes, they will be stashed first and popped "
"again after rebasing.  If rebasing or popping stashed changes fail, abort "
"the rebase and halt with an error. When ``GIT_REMOTE_UPDATE_STRATEGY`` is "
"not present, this is the default strategy unless the default has been "
"overridden with ``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` (see below). Note "
"that if the branch specified in ``GIT_TAG`` is different to the upstream "
"branch currently being tracked, it is not safe to perform a rebase. In that "
"situation, ``REBASE`` will silently be treated as ``CHECKOUT`` instead."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:417
msgid "``REBASE_CHECKOUT``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:418
msgid ""
"Same as ``REBASE`` except if the rebase fails, an annotated tag will be "
"created at the original ``HEAD`` position from before the rebase and then "
"checkout ``GIT_TAG`` just like the ``CHECKOUT`` strategy. The message stored "
"on the annotated tag will give information about what was attempted and the "
"tag name will include a timestamp so that each failed run will add a new "
"tag.  This strategy ensures no changes will be lost, but updates should "
"always succeed if ``GIT_TAG`` refers to a valid ref unless there are "
"uncommitted changes that cannot be popped successfully."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:428
msgid ""
"The variable ``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` can be set to override "
"the default strategy.  This variable should not be set by a project, it is "
"intended for the user to set.  It is primarily intended for use in "
"continuous integration scripts to ensure that when history is rewritten on a "
"remote branch, the build doesn't end up with unintended changes or failed "
"builds resulting from conflicts during rebase operations."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:437
msgid "Subversion"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:439
msgid "``SVN_REPOSITORY <url>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:440
msgid "URL of the Subversion repository."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:442
msgid "``SVN_REVISION -r<rev>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:443
msgid "Revision to checkout from the Subversion repository."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:445
msgid "``SVN_USERNAME <username>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:446
msgid "Username for the Subversion checkout and update."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:448
msgid "``SVN_PASSWORD <password>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:449
msgid "Password for the Subversion checkout and update."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:451
msgid "``SVN_TRUST_CERT <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:452
msgid ""
"Specifies whether to trust the Subversion server site certificate. If "
"enabled, the ``--trust-server-cert`` option is passed to the ``svn`` "
"checkout and update commands."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:457
msgid "Mercurial"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:459
msgid "``HG_REPOSITORY <url>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:460
msgid "URL of the mercurial repository."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:462
msgid "``HG_TAG <tag>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:463
msgid "Mercurial branch name, tag or commit id."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:466
msgid "CVS"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:468
msgid "``CVS_REPOSITORY <cvsroot>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:469
msgid "CVSROOT of the CVS repository."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:471
msgid "``CVS_MODULE <mod>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:472
msgid "Module to checkout from the CVS repository."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:474
msgid "``CVS_TAG <tag>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:475
msgid "Tag to checkout from the CVS repository."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:478
msgid "Update Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:480
msgid ""
"Whenever CMake is re-run, by default the external project's sources will be "
"updated if the download method supports updates (e.g. a git repository would "
"be checked if the ``GIT_TAG`` does not refer to a specific commit)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:484
msgid "``UPDATE_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:485
msgid ""
"Overrides the download method's update step with a custom command. The "
"command may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:489
msgid "``UPDATE_DISCONNECTED <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:492
msgid ""
"When enabled, this option causes the update step to be skipped (but see "
"below for changed behavior where this is not the case). It does not prevent "
"the download step. The update step can still be added as a step target (see :"
"command:`ExternalProject_Add_StepTargets`) and called manually. This is "
"useful if you want to allow developers to build the project when "
"disconnected from the network (the network may still be needed for the "
"download step though)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:502
msgid ""
"When ``UPDATE_DISCONNECTED`` is true, the update step will be executed if "
"any details about the update or download step are changed. Furthermore, if "
"using the git download/update method, the update logic will be modified to "
"skip attempts to contact the remote. If the ``GIT_TAG`` mentions a ref that "
"is not known locally, the update step will halt with a fatal error."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:509
msgid ""
"When this option is present, it is generally advisable to make the value a "
"cache variable under the developer's control rather than hard-coding it. If "
"this option is not present, the default value is taken from the "
"``EP_UPDATE_DISCONNECTED`` directory property. If that is also not defined, "
"updates are performed as normal. The ``EP_UPDATE_DISCONNECTED`` directory "
"property is intended as a convenience for controlling the "
"``UPDATE_DISCONNECTED`` behavior for an entire section of a project's "
"directory hierarchy and may be a more convenient method of giving developers "
"control over whether or not to perform updates (assuming the project also "
"provides a cache variable or some other convenient method for setting the "
"directory property)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:521
msgid ""
"This may cause a step target to be created automatically for the "
"``download`` step.  See policy :policy:`CMP0114`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:525
msgid "Patch Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:527
msgid "``PATCH_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:528
msgid ""
"Specifies a custom command to patch the sources after an update. By default, "
"no patch command is defined. Note that it can be quite difficult to define "
"an appropriate patch command that performs robustly, especially for download "
"methods such as git where changing the ``GIT_TAG`` will not discard changes "
"from a previous patch, but the patch command will be called again after "
"updating to the new tag."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:536
msgid "Configure Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:538
msgid ""
"The configure step is run after the download and update steps. By default, "
"the external project is assumed to be a CMake project, but this can be "
"overridden if required."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:542
msgid "``CONFIGURE_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:543
msgid ""
"The default configure command runs CMake with a few options based on the "
"main project.  The options added are typically only those needed to use the "
"same generator as the main project, but the ``CMAKE_GENERATOR`` option can "
"be given to override this.  The project is responsible for adding any "
"toolchain details, flags or other settings it wants to reuse from the main "
"project or otherwise specify (see ``CMAKE_ARGS``, ``CMAKE_CACHE_ARGS`` and "
"``CMAKE_CACHE_DEFAULT_ARGS`` below)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:551
msgid ""
"For non-CMake external projects, the ``CONFIGURE_COMMAND`` option must be "
"used to override the default configure command (:manual:`generator "
"expressions <cmake-generator-expressions(7)>` are supported). For projects "
"that require no configure step, specify this option with an empty string as "
"the command to execute."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:557
msgid "``CMAKE_COMMAND /.../cmake``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:558
msgid ""
"Specify an alternative cmake executable for the configure step (use an "
"absolute path). This is generally not recommended, since it is usually "
"desirable to use the same CMake version throughout the whole build. This "
"option is ignored if a custom configure command has been specified with "
"``CONFIGURE_COMMAND``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:564
msgid "``CMAKE_GENERATOR <gen>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:565
msgid ""
"Override the CMake generator used for the configure step. Without this "
"option, the same generator as the main build will be used. This option is "
"ignored if a custom configure command has been specified with the "
"``CONFIGURE_COMMAND`` option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:570
msgid "``CMAKE_GENERATOR_PLATFORM <platform>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:573
msgid ""
"Pass a generator-specific platform name to the CMake command (see :variable:"
"`CMAKE_GENERATOR_PLATFORM`). It is an error to provide this option without "
"the ``CMAKE_GENERATOR`` option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:577
msgid "``CMAKE_GENERATOR_TOOLSET <toolset>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:578
msgid ""
"Pass a generator-specific toolset name to the CMake command (see :variable:"
"`CMAKE_GENERATOR_TOOLSET`). It is an error to provide this option without "
"the ``CMAKE_GENERATOR`` option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:582
msgid "``CMAKE_GENERATOR_INSTANCE <instance>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:585
msgid ""
"Pass a generator-specific instance selection to the CMake command (see :"
"variable:`CMAKE_GENERATOR_INSTANCE`). It is an error to provide this option "
"without the ``CMAKE_GENERATOR`` option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:589
msgid "``CMAKE_ARGS <arg>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:590
msgid ""
"The specified arguments are passed to the :program:`cmake` command line. "
"They can be any argument the :program:`cmake` command understands, not just "
"cache values defined by ``-D...`` arguments (see also :manual:`CMake Options "
"<cmake(1)>`)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:595
#: ../../../../Modules/ExternalProject.cmake:607
msgid ""
"Arguments may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:599
msgid "``CMAKE_CACHE_ARGS <arg>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:600
msgid ""
"This is an alternate way of specifying cache variables where command line "
"length issues may become a problem. The arguments are expected to be in the "
"form ``-Dvar:STRING=value``, which are then transformed into CMake :command:"
"`set` commands with the ``FORCE`` option used. These ``set()`` commands are "
"written to a pre-load script which is then applied using the :manual:`cmake -"
"C <cmake(1)>` command line option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:611
msgid "``CMAKE_CACHE_DEFAULT_ARGS <arg>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:614
msgid ""
"This is the same as the ``CMAKE_CACHE_ARGS`` option except the ``set()`` "
"commands do not include the ``FORCE`` keyword. This means the values act as "
"initial defaults only and will not override any variables already set from a "
"previous run. Use this option with care, as it can lead to different "
"behavior depending on whether the build starts from a fresh build directory "
"or reuses previous build contents."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:621
msgid ""
"If the CMake generator is the ``Green Hills MULTI`` and not overridden, the "
"original project's settings for the GHS toolset and target system "
"customization cache variables are propagated into the external project."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:626
msgid "``SOURCE_SUBDIR <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:629
msgid ""
"When no ``CONFIGURE_COMMAND`` option is specified, the configure step "
"assumes the external project has a ``CMakeLists.txt`` file at the top of its "
"source tree (i.e. in ``SOURCE_DIR``). The ``SOURCE_SUBDIR`` option can be "
"used to point to an alternative directory within the source tree to use as "
"the top of the CMake source tree instead. This must be a relative path and "
"it will be interpreted as being relative to ``SOURCE_DIR``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:637
msgid ""
"When ``BUILD_IN_SOURCE`` option is enabled, the ``BUILD_COMMAND`` is used to "
"point to an alternative directory within the source tree."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:641
msgid "``CONFIGURE_HANDLED_BY_BUILD <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:644
msgid ""
"Enabling this option relaxes the dependencies of the configure step on other "
"external projects to order-only. This means the configure step will be "
"executed after its external project dependencies are built but it will not "
"be marked dirty when one of its external project dependencies is rebuilt. "
"This option can be enabled when the build step is smart enough to figure out "
"if the configure step needs to be rerun. CMake and Meson are examples of "
"build systems whose build step is smart enough to know if the configure step "
"needs to be rerun."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:654
msgid "Build Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:656
msgid ""
"If the configure step assumed the external project uses CMake as its build "
"system, the build step will also. Otherwise, the build step will assume a "
"Makefile-based build and simply run ``make`` with no arguments as the "
"default build step. This can be overridden with custom build commands if "
"required."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:662
msgid ""
"If both the main project and the external project use make as their build "
"tool, the build step of the external project is invoked as a recursive make "
"using ``$(MAKE)``.  This will communicate some build tool settings from the "
"main project to the external project.  If either the main project or "
"external project is not using make, no build tool settings will be passed to "
"the external project other than those established by the configure step (i."
"e. running ``ninja -v`` in the main project will not pass ``-v`` to the "
"external project's build step, even if it also uses ``ninja`` as its build "
"tool)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:672
msgid "``BUILD_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:673
msgid ""
"Overrides the default build command (:manual:`generator expressions <cmake-"
"generator-expressions(7)>` are supported). If this option is not given, the "
"default build command will be chosen to integrate with the main build in the "
"most appropriate way (e.g. using recursive ``make`` for Makefile generators "
"or :option:`cmake --build` if the project uses a CMake build). This option "
"can be specified with an empty string as the command to make the build step "
"do nothing."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:682
msgid "``BUILD_IN_SOURCE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:683
msgid ""
"When this option is enabled, the build will be done directly within the "
"external project's source tree. This should generally be avoided, the use of "
"a separate build directory is usually preferred, but it can be useful when "
"the external project assumes an in-source build. The ``BINARY_DIR`` option "
"should not be specified if building in-source."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:689
msgid "``BUILD_ALWAYS <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:690
msgid ""
"Enabling this option forces the build step to always be run. This can be the "
"easiest way to robustly ensure that the external project's own build "
"dependencies are evaluated rather than relying on the default success "
"timestamp-based method. This option is not normally needed unless developers "
"are expected to modify something the external project's build depends on in "
"a way that is not detectable via the step target dependencies (e.g. "
"``SOURCE_DIR`` is used without a download method and developers might modify "
"the sources in ``SOURCE_DIR``)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:699
msgid "``BUILD_BYPRODUCTS <file>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:702
msgid ""
"Specifies files that will be generated by the build command but which might "
"or might not have their modification time updated by subsequent builds. This "
"may also be required to explicitly declare dependencies when using the :"
"generator:`Ninja` generator. These ultimately get passed through as "
"``BYPRODUCTS`` to the build step's own underlying call to :command:"
"`add_custom_command`, which has additional documentation."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:710
msgid "``BUILD_JOB_SERVER_AWARE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:713
msgid ""
"Specifies that the build step is aware of the GNU Make job server. See the :"
"command:`add_custom_command` documentation of its ``JOB_SERVER_AWARE`` "
"option for details.  This option is relevant only when an explicit "
"``BUILD_COMMAND`` is specified."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:719
msgid "Install Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:721
msgid ""
"If the configure step assumed the external project uses CMake as its build "
"system, the install step will also. Otherwise, the install step will assume "
"a Makefile-based build and simply run ``make install`` as the default build "
"step. This can be overridden with custom install commands if required."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:726
msgid "``INSTALL_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:727
msgid ""
"The external project's own install step is invoked as part of the main "
"project's *build*. It is done after the external project's build step and "
"may be before or after the external project's test step (see the "
"``TEST_BEFORE_INSTALL`` option below). The external project's install rules "
"are not part of the main project's install rules, so if anything from the "
"external project should be installed as part of the main build, these need "
"to be specified in the main build as additional :command:`install` commands. "
"The default install step builds the ``install`` target of the external "
"project, but this can be overridden with a custom command using this option "
"(:manual:`generator expressions <cmake-generator-expressions(7)>` are "
"supported). Passing an empty string as the ``<cmd>`` makes the install step "
"do nothing."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:741
msgid "``INSTALL_BYPRODUCTS <file>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:744
msgid ""
"Specifies files that will be generated by the install command but which "
"might or might not have their modification time updated by subsequent "
"installs. This may also be required to explicitly declare dependencies when "
"using the :generator:`Ninja` generator. These ultimately get passed through "
"as ``BYPRODUCTS`` to the install step's own underlying call to :command:"
"`add_custom_command`, which has additional documentation."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:752
msgid "``INSTALL_JOB_SERVER_AWARE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:755
msgid ""
"Specifies that the install step is aware of the GNU Make job server. See "
"the :command:`add_custom_command` documentation of its ``JOB_SERVER_AWARE`` "
"option for details.  This option is relevant only when an explicit "
"``INSTALL_COMMAND`` is specified."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:761
msgid ""
"If the :envvar:`CMAKE_INSTALL_MODE` environment variable is set when the "
"main project is built, it will only have an effect if the following "
"conditions are met:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:765
msgid ""
"The main project's configure step assumed the external project uses CMake as "
"its build system."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:767
msgid ""
"The external project's install command actually runs. Note that due to the "
"way ``ExternalProject`` may use timestamps internally, if nothing the "
"install step depends on needs to be re-executed, the install command might "
"also not need to run."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:772
msgid ""
"Note also that ``ExternalProject`` does not check whether the :envvar:"
"`CMAKE_INSTALL_MODE` environment variable changes from one run to another."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:777
msgid "Test Step Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:779
msgid ""
"The test step is only defined if at least one of the following ``TEST_...`` "
"options are provided."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:782
msgid "``TEST_COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:783
msgid ""
"Overrides the default test command (:manual:`generator expressions <cmake-"
"generator-expressions(7)>` are supported). If this option is not given, the "
"default behavior of the test step is to build the external project's own "
"``test`` target. This option can be specified with ``<cmd>`` as an empty "
"string, which allows the test step to still be defined, but it will do "
"nothing. Do not specify any of the other ``TEST_...`` options if providing "
"an empty string as the test command, but prefer to omit all ``TEST_...`` "
"options altogether if the test step target is not needed."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:793
msgid "``TEST_BEFORE_INSTALL <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:794
msgid ""
"When this option is enabled, the test step will be executed before the "
"install step. The default behavior is for the test step to run after the "
"install step."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:798
msgid "``TEST_AFTER_INSTALL <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:799
msgid ""
"This option is mainly useful as a way to indicate that the test step is "
"desired but all default behavior is sufficient. Specifying this option with "
"a boolean true value ensures the test step is defined and that it comes "
"after the install step. If both ``TEST_BEFORE_INSTALL`` and "
"``TEST_AFTER_INSTALL`` are enabled, the latter is silently ignored."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:805
msgid "``TEST_EXCLUDE_FROM_MAIN <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:808
msgid ""
"If enabled, the main build's default ALL target will not depend on the test "
"step. This can be a useful way of ensuring the test step is defined but only "
"gets invoked when manually requested. This may cause a step target to be "
"created automatically for either the ``install`` or ``build`` step.  See "
"policy :policy:`CMP0114`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:815
msgid "Output Logging Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:817
msgid ""
"Each of the following ``LOG_...`` options can be used to wrap the relevant "
"step in a script to capture its output to files. The log files will be "
"created in ``LOG_DIR`` if supplied or otherwise the ``STAMP_DIR`` directory "
"with step-specific file names."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:822
msgid "``LOG_DOWNLOAD <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:823
msgid "When enabled, the output of the download step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:825
msgid "``LOG_UPDATE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:826
msgid "When enabled, the output of the update step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:828
msgid "``LOG_PATCH <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:831
msgid "When enabled, the output of the patch step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:833
msgid "``LOG_CONFIGURE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:834
msgid "When enabled, the output of the configure step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:836
msgid "``LOG_BUILD <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:837
msgid "When enabled, the output of the build step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:839
msgid "``LOG_INSTALL <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:840
msgid "When enabled, the output of the install step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:842
msgid "``LOG_TEST <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:843
msgid "When enabled, the output of the test step is logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:845
msgid "``LOG_MERGED_STDOUTERR <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:848
msgid ""
"When enabled, stdout and stderr will be merged for any step whose output is "
"being logged to files."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:851
msgid "``LOG_OUTPUT_ON_FAILURE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:854
msgid ""
"This option only has an effect if at least one of the other ``LOG_<step>`` "
"options is enabled.  If an error occurs for a step which has logging to file "
"enabled, that step's output will be printed to the console if "
"``LOG_OUTPUT_ON_FAILURE`` is set to true.  For cases where a large amount of "
"output is recorded, just the end of that output may be printed to the "
"console."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:862
msgid "Terminal Access Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:866
msgid ""
"Steps can be given direct access to the terminal in some cases. Giving a "
"step access to the terminal may allow it to receive terminal input if "
"required, such as for authentication details not provided by other options. "
"With the :generator:`Ninja` generator, these options place the steps in the "
"``console`` :prop_gbl:`job pool <JOB_POOLS>`. Each step can be given access "
"to the terminal individually via the following options:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:873
msgid "``USES_TERMINAL_DOWNLOAD <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:874
msgid "Give the download step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:876
msgid "``USES_TERMINAL_UPDATE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:877
msgid "Give the update step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:879
msgid "``USES_TERMINAL_PATCH <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:882
msgid "Give the patch step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:884
msgid "``USES_TERMINAL_CONFIGURE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:885
msgid "Give the configure step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:887
msgid "``USES_TERMINAL_BUILD <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:888
msgid "Give the build step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:890
msgid "``USES_TERMINAL_INSTALL <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:891
msgid "Give the install step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:893
msgid "``USES_TERMINAL_TEST <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:894
msgid "Give the test step access to the terminal."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:897
msgid "Target Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:899
msgid "``DEPENDS <targets>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:900
msgid ""
"Specify other targets on which the external project depends. The other "
"targets will be brought up to date before any of the external project's "
"steps are executed. Because the external project uses additional custom "
"targets internally for each step, the ``DEPENDS`` option is the most "
"convenient way to ensure all of those steps depend on the other targets. "
"Simply doing :command:`add_dependencies(\\<name\\> \\<targets\\>) "
"<add_dependencies>` will not make any of the steps dependent on "
"``<targets>``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:909
msgid "``EXCLUDE_FROM_ALL <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:910
msgid ""
"When enabled, this option excludes the external project from the default ALL "
"target of the main build."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:913
msgid "``STEP_TARGETS <step-target>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:914
msgid ""
"Generate custom targets for the specified steps. This is required if the "
"steps need to be triggered manually or if they need to be used as "
"dependencies of other targets. If this option is not specified, the default "
"value is taken from the ``EP_STEP_TARGETS`` directory property. See :command:"
"`ExternalProject_Add_StepTargets` below for further discussion of the "
"effects of this option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:921
msgid "``INDEPENDENT_STEP_TARGETS <step-target>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:922
msgid "This is allowed only if policy :policy:`CMP0114` is not set to ``NEW``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:925
msgid ""
"Generates custom targets for the specified steps and prevent these targets "
"from having the usual dependencies applied to them. If this option is not "
"specified, the default value is taken from the "
"``EP_INDEPENDENT_STEP_TARGETS`` directory property. This option is mostly "
"useful for allowing individual steps to be driven independently, such as for "
"a CDash setup where each step should be initiated and reported individually "
"rather than as one whole build. See :command:"
"`ExternalProject_Add_StepTargets` below for further discussion of the "
"effects of this option."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:936
msgid "Miscellaneous Options"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:938
msgid "``LIST_SEPARATOR <sep>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:939
msgid ""
"For any of the various ``..._COMMAND`` options, and ``CMAKE_ARGS``, "
"``ExternalProject`` will replace ``<sep>`` with ``;`` in the specified "
"command lines. This can be used to ensure a command has a literal ``;`` in "
"it where direct usage would otherwise be interpreted as argument separators "
"to CMake APIs instead. Note that the separator should be chosen to avoid "
"being confused for non-list-separator usages of the sequence. For example, "
"using ``LIST_SEPARATOR`` allows for passing list values to CMake cache "
"variables on the command line:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:948
msgid ""
"ExternalProject_Add(example\n"
"  ... # Download options, etc.\n"
"  LIST_SEPARATOR \",\"\n"
"  CMAKE_ARGS \"-DCMAKE_PREFIX_PATH:STRING=${first_prefix},"
"${second_prefix}\"\n"
")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:956
#: ../../../../Modules/ExternalProject.cmake:1024
msgid "``COMMAND <cmd>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:957
msgid ""
"Any of the other ``..._COMMAND`` options can have additional commands "
"appended to them by following them with as many ``COMMAND ...`` options as "
"needed (:manual:`generator expressions <cmake-generator-expressions(7)>` are "
"supported). For example:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:963
msgid ""
"ExternalProject_Add(example\n"
"  ... # Download options, etc.\n"
"  BUILD_COMMAND ${CMAKE_COMMAND} -E echo \"Starting $<CONFIG> build\"\n"
"  COMMAND       ${CMAKE_COMMAND} --build <BINARY_DIR> --config $<CONFIG>\n"
"  COMMAND       ${CMAKE_COMMAND} -E echo \"$<CONFIG> build complete\"\n"
")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:972
msgid ""
"It should also be noted that each build step is created via a call to :"
"command:`ExternalProject_Add_Step`. See that command's documentation for the "
"automatic substitutions that are supported for some options."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:977
msgid "Obtaining Project Properties"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:981
msgid ""
"The ``ExternalProject_Get_Property()`` function retrieves external project "
"target properties:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:984
msgid "ExternalProject_Get_Property(<name> <prop1> [<prop2>...])"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:988
msgid ""
"The function stores property values in variables of the same name. Property "
"names correspond to the keyword argument names of ``ExternalProject_Add()``. "
"For example, the source directory might be retrieved like so:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:992
msgid ""
"ExternalProject_Get_property(myExtProj SOURCE_DIR)\n"
"message(\"Source dir of myExtProj = ${SOURCE_DIR}\")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:998
msgid "Explicit Step Management"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1000
msgid ""
"The ``ExternalProject_Add()`` function on its own is often sufficient for "
"incorporating an external project into the main build. Certain scenarios "
"require additional work to implement desired behavior, such as adding in a "
"custom step or making steps available as manually triggerable targets. The "
"``ExternalProject_Add_Step()``, ``ExternalProject_Add_StepTargets()`` and "
"``ExternalProject_Add_StepDependencies`` functions provide the lower level "
"control needed to implement such step-level capabilities."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1010
msgid ""
"The ``ExternalProject_Add_Step()`` function specifies an additional custom "
"step for an external project defined by an earlier call to :command:"
"`ExternalProject_Add`:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1014
msgid "ExternalProject_Add_Step(<name> <step> [<option>...])"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1018
msgid ""
"``<name>`` is the same as the name passed to the original call to :command:"
"`ExternalProject_Add`. The specified ``<step>`` must not be one of the pre-"
"defined steps (``mkdir``, ``download``, ``update``, ``patch``, "
"``configure``, ``build``, ``install`` or ``test``). The supported options "
"are:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1025
msgid ""
"The command line to be executed by this custom step (:manual:`generator "
"expressions <cmake-generator-expressions(7)>` are supported). This option "
"can be repeated multiple times to specify multiple commands to be executed "
"in order."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1030
msgid "``COMMENT \"<text>...\"``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1031
msgid "Text to be printed when the custom step executes."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1033
msgid "``DEPENDEES <step>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1034
msgid "Other steps (custom or pre-defined) on which this step depends."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1036
msgid "``DEPENDERS <step>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1037
msgid ""
"Other steps (custom or pre-defined) that depend on this new custom step."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1039
msgid "``DEPENDS <file>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1040
msgid "Files on which this custom step depends."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1042
msgid "``INDEPENDENT <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1045
msgid ""
"Specifies whether this step is independent of the external dependencies "
"specified by the :command:`ExternalProject_Add`'s ``DEPENDS`` option. The "
"default is ``FALSE``.  Steps marked as independent may depend only on other "
"steps marked independent.  See policy :policy:`CMP0114`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1050
msgid ""
"Note that this use of the term \"independent\" refers only to independence "
"from external targets specified by the ``DEPENDS`` option and is orthogonal "
"to a step's dependencies on other steps."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1054
msgid ""
"If a step target is created for an independent step by the :command:"
"`ExternalProject_Add` ``STEP_TARGETS`` option or by the :command:"
"`ExternalProject_Add_StepTargets` function, it will not depend on the "
"external targets, but may depend on targets for other steps."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1059
msgid "``BYPRODUCTS <file>...``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1062
msgid ""
"Files that will be generated by this custom step but which might or might "
"not have their modification time updated by subsequent builds. This may also "
"be required to explicitly declare dependencies when using the :generator:"
"`Ninja` generator. This list of files will ultimately be passed through as "
"the ``BYPRODUCTS`` option to the :command:`add_custom_command` used to "
"implement the custom step internally, which has additional documentation."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1070
msgid "``ALWAYS <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1071
msgid ""
"When enabled, this option specifies that the custom step should always be "
"run (i.e. that it is always considered out of date)."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1074
msgid "``JOB_SERVER_AWARE <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1077
msgid ""
"Specifies that the custom step is aware of the GNU Make job server. See the :"
"command:`add_custom_command` documentation of its ``JOB_SERVER_AWARE`` "
"option for details."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1081
msgid "``EXCLUDE_FROM_MAIN <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1082
msgid ""
"When enabled, this option specifies that the external project's main target "
"does not depend on the custom step. This may cause step targets to be "
"created automatically for the steps on which this step depends.  See policy :"
"policy:`CMP0114`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1087
msgid "``WORKING_DIRECTORY <dir>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1088
msgid ""
"Specifies the working directory to set before running the custom step's "
"command. If this option is not specified, the directory will be the value of "
"the :variable:`CMAKE_CURRENT_BINARY_DIR` at the point where "
"``ExternalProject_Add_Step()`` was called."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1093
msgid "``LOG <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1094
msgid ""
"If set, this causes the output from the custom step to be captured to files "
"in the external project's ``LOG_DIR`` if supplied or ``STAMP_DIR``."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1097
msgid "``USES_TERMINAL <bool>``"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1098
msgid ""
"If enabled, this gives the custom step direct access to the terminal if "
"possible."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1101
msgid ""
"The command line, comment, working directory and byproducts of every "
"standard and custom step are processed to replace the tokens "
"``<SOURCE_DIR>``, ``<SOURCE_SUBDIR>``, ``<BINARY_DIR>``, ``<INSTALL_DIR>`` "
"``<TMP_DIR>``, ``<DOWNLOAD_DIR>`` and ``<DOWNLOADED_FILE>`` with their "
"corresponding property values defined in the original call to :command:"
"`ExternalProject_Add`."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1108
msgid "Token replacement is extended to byproducts."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1111
msgid "The ``<DOWNLOAD_DIR>`` substitution token."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1116
msgid ""
"The ``ExternalProject_Add_StepTargets()`` function generates targets for the "
"steps listed. The name of each created target will be of the form ``<name>-"
"<step>``:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1120
msgid "ExternalProject_Add_StepTargets(<name> <step1> [<step2>...])"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1124
msgid ""
"Creating a target for a step allows it to be used as a dependency of another "
"target or to be triggered manually. Having targets for specific steps also "
"allows them to be driven independently of each other by specifying targets "
"on build command lines. For example, you may be submitting to a sub-project "
"based dashboard where you want to drive the configure portion of the build, "
"then submit to the dashboard, followed by the build portion, followed by "
"tests. If you invoke a custom target that depends on a step halfway through "
"the step dependency chain, then all the previous steps will also run to "
"ensure everything is up to date."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1134
msgid ""
"Internally, :command:`ExternalProject_Add` calls :command:"
"`ExternalProject_Add_Step` to create each step. If any ``STEP_TARGETS`` were "
"specified, then ``ExternalProject_Add_StepTargets()`` will also be called "
"after :command:`ExternalProject_Add_Step`.  Even if a step is not mentioned "
"in the ``STEP_TARGETS`` option, ``ExternalProject_Add_StepTargets()`` can "
"still be called later to manually define a target for the step."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1142
msgid ""
"The ``STEP_TARGETS`` option for :command:`ExternalProject_Add` is generally "
"the easiest way to ensure targets are created for specific steps of "
"interest. For custom steps, ``ExternalProject_Add_StepTargets()`` must be "
"called explicitly if a target should also be created for that custom step. "
"An alternative to these two options is to populate the ``EP_STEP_TARGETS`` "
"directory property.  It acts as a default for the step target options and "
"can save having to repeatedly specify the same set of step targets when "
"multiple external projects are being defined."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1151
msgid ""
"If :policy:`CMP0114` is set to ``NEW``, step targets are fully responsible "
"for holding the custom commands implementing their steps.  The primary "
"target created by ``ExternalProject_Add`` depends on the step targets, and "
"the step targets depend on each other.  The target-level dependencies match "
"the file-level dependencies used by the custom commands for each step. The "
"targets for steps created with :command:`ExternalProject_Add_Step`'s "
"``INDEPENDENT`` option do not depend on the external targets specified by :"
"command:`ExternalProject_Add`'s ``DEPENDS`` option.  The predefined steps "
"``mkdir``, ``download``, ``update``, and ``patch`` are independent."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1162
msgid ""
"If :policy:`CMP0114` is not ``NEW``, the following deprecated behavior is "
"available:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1165
msgid ""
"A deprecated ``NO_DEPENDS`` option may be specified immediately after the "
"``<name>`` and before the first step. If the ``NO_DEPENDS`` option is "
"specified, the step target will not depend on the dependencies of the "
"external project (i.e. on any dependencies of the ``<name>`` custom target "
"created by :command:`ExternalProject_Add`). This is usually safe for the "
"``download``, ``update`` and ``patch`` steps, since they do not typically "
"require that the dependencies are updated and built. Using ``NO_DEPENDS`` "
"for any of the other pre-defined steps, however, may break parallel builds. "
"Only use ``NO_DEPENDS`` where it is certain that the named steps genuinely "
"do not have dependencies. For custom steps, consider whether or not the "
"custom commands require the dependencies to be configured, built and "
"installed."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1178
msgid ""
"The ``INDEPENDENT_STEP_TARGETS`` option for :command:`ExternalProject_Add`, "
"or the ``EP_INDEPENDENT_STEP_TARGETS`` directory property, tells the "
"function to call ``ExternalProject_Add_StepTargets()`` internally using the "
"``NO_DEPENDS`` option for the specified steps."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1187
msgid ""
"The ``ExternalProject_Add_StepDependencies()`` function can be used to add "
"dependencies to a step. The dependencies added must be targets CMake already "
"knows about (these can be ordinary executable or library targets, custom "
"targets or even step targets of another external project):"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1192
msgid ""
"ExternalProject_Add_StepDependencies(<name> <step> <target1> [<target2>...])"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1196
msgid ""
"This function takes care to set both target and file level dependencies and "
"will ensure that parallel builds will not break. It should be used instead "
"of :command:`add_dependencies` whenever adding a dependency for some of the "
"step targets generated by the ``ExternalProject`` module."
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1202
msgid "Examples"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1204
msgid ""
"The following example shows how to download and build a hypothetical project "
"called *FooBar* from github:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1207
msgid ""
"include(ExternalProject)\n"
"ExternalProject_Add(foobar\n"
"  GIT_REPOSITORY    git@github.com:FooCo/FooBar.git\n"
"  GIT_TAG           origin/release/1.2.3\n"
")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1215
msgid ""
"For the sake of the example, also define a second hypothetical external "
"project called *SecretSauce*, which is downloaded from a web server. Two "
"URLs are given to take advantage of a faster internal network if available, "
"with a fallback to a slower external server. The project is a typical "
"``Makefile`` project with no configure step, so some of the default commands "
"are overridden. The build is only required to build the *sauce* target:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1222
msgid ""
"find_program(MAKE_EXE NAMES gmake nmake make)\n"
"ExternalProject_Add(secretsauce\n"
"  URL               http://intranet.somecompany.com/artifacts/sauce-2.7.tgz\n"
"                    https://www.somecompany.com/downloads/sauce-2.7.zip\n"
"  URL_HASH          MD5=d41d8cd98f00b204e9800998ecf8427e\n"
"  CONFIGURE_COMMAND \"\"\n"
"  BUILD_COMMAND     ${MAKE_EXE} sauce\n"
")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1233
msgid ""
"Suppose the build step of ``secretsauce`` requires that ``foobar`` must "
"already be built. This could be enforced like so:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1236
msgid "ExternalProject_Add_StepDependencies(secretsauce build foobar)"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1240
msgid ""
"Another alternative would be to create a custom target for ``foobar``'s "
"build step and make ``secretsauce`` depend on that rather than the whole "
"``foobar`` project. This would mean ``foobar`` only needs to be built, it "
"doesn't need to run its install or test steps before ``secretsauce`` can be "
"built. The dependency can also be defined along with the ``secretsauce`` "
"project:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1246
msgid ""
"ExternalProject_Add_StepTargets(foobar build)\n"
"ExternalProject_Add(secretsauce\n"
"  URL               http://intranet.somecompany.com/artifacts/sauce-2.7.tgz\n"
"                    https://www.somecompany.com/downloads/sauce-2.7.zip\n"
"  URL_HASH          MD5=d41d8cd98f00b204e9800998ecf8427e\n"
"  CONFIGURE_COMMAND \"\"\n"
"  BUILD_COMMAND     ${MAKE_EXE} sauce\n"
"  DEPENDS           foobar-build\n"
")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1258
msgid ""
"Instead of calling :command:`ExternalProject_Add_StepTargets`, the target "
"could be defined along with the ``foobar`` project itself:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1261
msgid ""
"ExternalProject_Add(foobar\n"
"  GIT_REPOSITORY git@github.com:FooCo/FooBar.git\n"
"  GIT_TAG        origin/release/1.2.3\n"
"  STEP_TARGETS   build\n"
")"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1269
msgid ""
"If many external projects should have the same set of step targets, setting "
"a directory property may be more convenient. The ``build`` step target could "
"be created automatically by setting the ``EP_STEP_TARGETS`` directory "
"property before creating the external projects with :command:"
"`ExternalProject_Add`:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1274
msgid "set_property(DIRECTORY PROPERTY EP_STEP_TARGETS build)"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1278
msgid ""
"Lastly, suppose that ``secretsauce`` provides a script called ``makedoc`` "
"which can be used to generate its own documentation. Further suppose that "
"the script expects the output directory to be provided as the only parameter "
"and that it should be run from the ``secretsauce`` source directory. A "
"custom step and a custom target to trigger the script can be defined like so:"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1284
msgid ""
"ExternalProject_Add_Step(secretsauce docs\n"
"  COMMAND           <SOURCE_DIR>/makedoc <BINARY_DIR>\n"
"  WORKING_DIRECTORY <SOURCE_DIR>\n"
"  COMMENT           \"Building secretsauce docs\"\n"
"  ALWAYS            TRUE\n"
"  EXCLUDE_FROM_MAIN TRUE\n"
")\n"
"ExternalProject_Add_StepTargets(secretsauce docs)"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1295
msgid "The custom step could then be triggered from the main build like so::"
msgstr ""

#: ../../../../Modules/ExternalProject.cmake:1297
msgid "cmake --build . --target secretsauce-docs"
msgstr ""
