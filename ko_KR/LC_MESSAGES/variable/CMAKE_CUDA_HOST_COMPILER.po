# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../variable/CMAKE_CUDA_HOST_COMPILER.rst:2
msgid "CMAKE_CUDA_HOST_COMPILER"
msgstr ""

#: ../../../variable/CMAKE_CUDA_HOST_COMPILER.rst:6
msgid ""
"When :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is "
"``NVIDIA``, ``CMAKE_CUDA_HOST_COMPILER`` selects the compiler executable to "
"use when compiling host code for ``CUDA`` language files. This maps to the "
"``nvcc -ccbin`` option."
msgstr ""

#: ../../../variable/CMAKE_CUDA_HOST_COMPILER.rst:11
msgid ""
"The ``CMAKE_CUDA_HOST_COMPILER`` variable may be set explicitly before CUDA "
"is first enabled by a :command:`project` or :command:`enable_language` "
"command. This can be done via ``-DCMAKE_CUDA_HOST_COMPILER=...`` on the "
"command line or in a :ref:`toolchain file <Cross Compiling Toolchain>`.  Or, "
"one may set the :envvar:`CUDAHOSTCXX` environment variable to provide a "
"default value."
msgstr ""

#: ../../../variable/CMAKE_CUDA_HOST_COMPILER.rst:17
msgid ""
"Once the CUDA language is enabled, the ``CMAKE_CUDA_HOST_COMPILER`` variable "
"is read-only and changes to it are undefined behavior."
msgstr ""

#: ../../../variable/CMAKE_CUDA_HOST_COMPILER.rst:22
msgid ""
"Since ``CMAKE_CUDA_HOST_COMPILER`` is meaningful only when the :variable:"
"`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``, it does "
"not make sense to set ``CMAKE_CUDA_HOST_COMPILER`` without also setting "
"``CMAKE_CUDA_COMPILER`` to NVCC."
msgstr ""
