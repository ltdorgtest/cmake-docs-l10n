# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.22\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Installing and Testing.rst:2
msgid "Step 4: Installing and Testing"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:4
msgid ""
"Now we can start adding install rules and testing support to our project."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:7
msgid "Install Rules"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:9
msgid ""
"The install rules are fairly simple: for ``MathFunctions`` we want to "
"install the library and header file and for the application we want to "
"install the executable and configured header."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:13
msgid "So to the end of ``MathFunctions/CMakeLists.txt`` we add:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:15
msgid "MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:15
msgid ""
"install(TARGETS MathFunctions DESTINATION lib)\n"
"install(FILES MathFunctions.h DESTINATION include)\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:21
msgid "And to the end of the top-level ``CMakeLists.txt`` we add:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:23 Testing.rst:68
msgid "CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:23
msgid ""
"install(TARGETS Tutorial DESTINATION bin)\n"
"install(FILES \"${PROJECT_BINARY_DIR}/TutorialConfig.h\"\n"
"  DESTINATION include\n"
"  )\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:30
msgid ""
"That is all that is needed to create a basic local install of the tutorial."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:32
msgid ""
"Now run the :manual:`cmake  <cmake(1)>` executable or the :manual:`cmake-gui "
"<cmake-gui(1)>` to configure the project and then build it with your chosen "
"build tool."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:36
msgid ""
"Then run the install step by using the ``install`` option of the :manual:"
"`cmake  <cmake(1)>` command (introduced in 3.15, older versions of CMake "
"must use ``make install``) from the command line. For multi-configuration "
"tools, don't forget to use the ``--config`` argument to specify the "
"configuration. If using an IDE, simply build the ``INSTALL`` target. This "
"step will install the appropriate header files, libraries, and executables. "
"For example:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:44
msgid "cmake --install ."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:48
msgid ""
"The CMake variable :variable:`CMAKE_INSTALL_PREFIX` is used to determine the "
"root of where the files will be installed. If using the ``cmake --install`` "
"command, the installation prefix can be overridden via the ``--prefix`` "
"argument. For example:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:53
msgid "cmake --install . --prefix \"/home/myuser/installdir\""
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:57
msgid ""
"Navigate to the install directory and verify that the installed Tutorial "
"runs."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:62
msgid "Testing Support"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:64
msgid ""
"Next let's test our application. At the end of the top-level ``CMakeLists."
"txt`` file we can enable testing and then add a number of basic tests to "
"verify that the application is working correctly."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:68
msgid ""
"enable_testing()\n"
"\n"
"# does the application run\n"
"add_test(NAME Runs COMMAND Tutorial 25)\n"
"\n"
"# does the usage message work?\n"
"add_test(NAME Usage COMMAND Tutorial)\n"
"set_tests_properties(Usage\n"
"  PROPERTIES PASS_REGULAR_EXPRESSION \"Usage:.*number\"\n"
"  )\n"
"\n"
"# define a function to simplify adding tests\n"
"function(do_test target arg result)\n"
"  add_test(NAME Comp${arg} COMMAND ${target} ${arg})\n"
"  set_tests_properties(Comp${arg}\n"
"    PROPERTIES PASS_REGULAR_EXPRESSION ${result}\n"
"    )\n"
"endfunction()\n"
"\n"
"# do a bunch of result based tests\n"
"do_test(Tutorial 4 \"4 is 2\")\n"
"do_test(Tutorial 9 \"9 is 3\")\n"
"do_test(Tutorial 5 \"5 is 2.236\")\n"
"do_test(Tutorial 7 \"7 is 2.645\")\n"
"do_test(Tutorial 25 \"25 is 5\")\n"
"do_test(Tutorial -25 \"-25 is (-nan|nan|0)\")\n"
"do_test(Tutorial 0.0001 \"0.0001 is 0.01\")\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:74
msgid ""
"The first test simply verifies that the application runs, does not segfault "
"or otherwise crash, and has a zero return value. This is the basic form of a "
"CTest test."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:78
msgid ""
"The next test makes use of the :prop_test:`PASS_REGULAR_EXPRESSION` test "
"property to verify that the output of the test contains certain strings. In "
"this case, verifying that the usage message is printed when an incorrect "
"number of arguments are provided."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:83
msgid ""
"Lastly, we have a function called ``do_test`` that runs the application and "
"verifies that the computed square root is correct for given input. For each "
"invocation of ``do_test``, another test is added to the project with a name, "
"input, and expected results based on the passed arguments."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:88
msgid ""
"Rebuild the application and then cd to the binary directory and run the :"
"manual:`ctest <ctest(1)>` executable: ``ctest -N`` and ``ctest -VV``. For "
"multi-config generators (e.g. Visual Studio), the configuration type must be "
"specified with the ``-C <mode>`` flag.  For example, to run tests in Debug "
"mode use ``ctest -C Debug -VV`` from the binary directory (not the Debug "
"subdirectory!). Release mode would be executed from the same location but "
"with a ``-C Release``.  Alternatively, build the ``RUN_TESTS`` target from "
"the IDE."
msgstr ""
