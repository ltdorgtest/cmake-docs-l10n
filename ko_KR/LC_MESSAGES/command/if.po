# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2019 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/if.rst:2
msgid "if"
msgstr ""

#: ../../../command/if.rst:4
msgid "Conditionally execute a group of commands."
msgstr ""

#: ../../../command/if.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/if.rst:9
msgid ""
"if(<condition>)\n"
"  <commands>\n"
"elseif(<condition>) # optional block, can be repeated\n"
"  <commands>\n"
"else()              # optional block\n"
"  <commands>\n"
"endif()"
msgstr ""

#: ../../../command/if.rst:19
msgid ""
"Evaluates the ``condition`` argument of the ``if`` clause according to the "
"`Condition syntax`_ described below. If the result is true, then the "
"``commands`` in the ``if`` block are executed. Otherwise, optional "
"``elseif`` blocks are processed in the same way. Finally, if no "
"``condition`` is true, ``commands`` in the optional ``else`` block are "
"executed."
msgstr ""

#: ../../../command/if.rst:26
msgid ""
"Per legacy, the :command:`else` and :command:`endif` commands admit an "
"optional ``<condition>`` argument. If used, it must be a verbatim repeat of "
"the argument of the opening ``if`` command."
msgstr ""

#: ../../../command/if.rst:33
msgid "Condition Syntax"
msgstr ""

#: ../../../command/if.rst:35
msgid ""
"The following syntax applies to the ``condition`` argument of the ``if``, "
"``elseif`` and :command:`while` clauses."
msgstr ""

#: ../../../command/if.rst:38
msgid ""
"Compound conditions are evaluated in the following order of precedence: "
"Innermost parentheses are evaluated first. Next come unary tests such as "
"``EXISTS``, ``COMMAND``, and ``DEFINED``.  Then binary tests such as "
"``EQUAL``, ``LESS``, ``LESS_EQUAL``, ``GREATER``, ``GREATER_EQUAL``, "
"``STREQUAL``, ``STRLESS``, ``STRLESS_EQUAL``, ``STRGREATER``, "
"``STRGREATER_EQUAL``, ``VERSION_EQUAL``, ``VERSION_LESS``, "
"``VERSION_LESS_EQUAL``, ``VERSION_GREATER``, ``VERSION_GREATER_EQUAL``, and "
"``MATCHES``.  Then the boolean operators in the order ``NOT``,  ``AND``, and "
"finally ``OR``."
msgstr ""

#: ../../../command/if.rst:48
msgid "Possible conditions are:"
msgstr ""

#: ../../../command/if.rst:57
msgid "``if(<constant>)``"
msgstr ""

#: ../../../command/if.rst:51
msgid ""
"True if the constant is ``1``, ``ON``, ``YES``, ``TRUE``, ``Y``, or a non-"
"zero number.  False if the constant is ``0``, ``OFF``, ``NO``, ``FALSE``, "
"``N``, ``IGNORE``, ``NOTFOUND``, the empty string, or ends in the suffix ``-"
"NOTFOUND``.  Named boolean constants are case-insensitive.  If the argument "
"is not one of these specific constants, it is treated as a variable or "
"string and the following signature is used."
msgstr ""

#: ../../../command/if.rst:61
msgid "``if(<variable|string>)``"
msgstr ""

#: ../../../command/if.rst:60
msgid ""
"True if given a variable that is defined to a value that is not a false "
"constant.  False otherwise.  (Note macro arguments are not variables.)"
msgstr ""

#: ../../../command/if.rst:64
msgid "``if(NOT <condition>)``"
msgstr ""

#: ../../../command/if.rst:64
msgid "True if the condition is not true."
msgstr ""

#: ../../../command/if.rst:67
msgid "``if(<cond1> AND <cond2>)``"
msgstr ""

#: ../../../command/if.rst:67
msgid "True if both conditions would be considered true individually."
msgstr ""

#: ../../../command/if.rst:70
msgid "``if(<cond1> OR <cond2>)``"
msgstr ""

#: ../../../command/if.rst:70
msgid "True if either condition would be considered true individually."
msgstr ""

#: ../../../command/if.rst:74
msgid "``if(COMMAND command-name)``"
msgstr ""

#: ../../../command/if.rst:73
msgid ""
"True if the given name is a command, macro or function that can be invoked."
msgstr ""

#: ../../../command/if.rst:77
msgid "``if(POLICY policy-id)``"
msgstr ""

#: ../../../command/if.rst:77
msgid ""
"True if the given name is an existing policy (of the form ``CMP<NNNN>``)."
msgstr ""

#: ../../../command/if.rst:83
msgid "``if(TARGET target-name)``"
msgstr ""

#: ../../../command/if.rst:80
msgid ""
"True if the given name is an existing logical target name created by a call "
"to the :command:`add_executable`, :command:`add_library`, or :command:"
"`add_custom_target` command that has already been invoked (in any directory)."
msgstr ""

#: ../../../command/if.rst:87
msgid "``if(TEST test-name)``"
msgstr ""

#: ../../../command/if.rst:86
msgid ""
"True if the given name is an existing test name created by the :command:"
"`add_test` command."
msgstr ""

#: ../../../command/if.rst:91
msgid "``if(EXISTS path-to-file-or-directory)``"
msgstr ""

#: ../../../command/if.rst:90
msgid ""
"True if the named file or directory exists.  Behavior is well-defined only "
"for full paths."
msgstr ""

#: ../../../command/if.rst:99
msgid "``if(file1 IS_NEWER_THAN file2)``"
msgstr ""

#: ../../../command/if.rst:94
msgid ""
"True if ``file1`` is newer than ``file2`` or if one of the two files doesn't "
"exist.  Behavior is well-defined only for full paths.  If the file time "
"stamps are exactly the same, an ``IS_NEWER_THAN`` comparison returns true, "
"so that any dependent build operations will occur in the event of a tie.  "
"This includes the case of passing the same file name for both file1 and "
"file2."
msgstr ""

#: ../../../command/if.rst:103
msgid "``if(IS_DIRECTORY path-to-directory)``"
msgstr ""

#: ../../../command/if.rst:102
msgid ""
"True if the given name is a directory.  Behavior is well-defined only for "
"full paths."
msgstr ""

#: ../../../command/if.rst:107
msgid "``if(IS_SYMLINK file-name)``"
msgstr ""

#: ../../../command/if.rst:106
msgid ""
"True if the given name is a symbolic link.  Behavior is well-defined only "
"for full paths."
msgstr ""

#: ../../../command/if.rst:110
msgid "``if(IS_ABSOLUTE path)``"
msgstr ""

#: ../../../command/if.rst:110
msgid "True if the given path is an absolute path."
msgstr ""

#: ../../../command/if.rst:115
msgid "``if(<variable|string> MATCHES regex)``"
msgstr ""

#: ../../../command/if.rst:113
msgid ""
"True if the given string or variable's value matches the given regular "
"condition.  See :ref:`Regex Specification` for regex format. ``()`` groups "
"are captured in :variable:`CMAKE_MATCH_<n>` variables."
msgstr ""

#: ../../../command/if.rst:119
msgid "``if(<variable|string> LESS <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:118
msgid ""
"True if the given string or variable's value is a valid number and less than "
"that on the right."
msgstr ""

#: ../../../command/if.rst:123
msgid "``if(<variable|string> GREATER <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:122
msgid ""
"True if the given string or variable's value is a valid number and greater "
"than that on the right."
msgstr ""

#: ../../../command/if.rst:127
msgid "``if(<variable|string> EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:126
msgid ""
"True if the given string or variable's value is a valid number and equal to "
"that on the right."
msgstr ""

#: ../../../command/if.rst:131
msgid "``if(<variable|string> LESS_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:130
msgid ""
"True if the given string or variable's value is a valid number and less than "
"or equal to that on the right."
msgstr ""

#: ../../../command/if.rst:135
msgid "``if(<variable|string> GREATER_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:134
msgid ""
"True if the given string or variable's value is a valid number and greater "
"than or equal to that on the right."
msgstr ""

#: ../../../command/if.rst:139
msgid "``if(<variable|string> STRLESS <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:138
msgid ""
"True if the given string or variable's value is lexicographically less than "
"the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:143
msgid "``if(<variable|string> STRGREATER <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:142
msgid ""
"True if the given string or variable's value is lexicographically greater "
"than the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:147
msgid "``if(<variable|string> STREQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:146
msgid ""
"True if the given string or variable's value is lexicographically equal to "
"the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:151
msgid "``if(<variable|string> STRLESS_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:150
msgid ""
"True if the given string or variable's value is lexicographically less than "
"or equal to the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:155
msgid "``if(<variable|string> STRGREATER_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:154
msgid ""
"True if the given string or variable's value is lexicographically greater "
"than or equal to the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:161
msgid "``if(<variable|string> VERSION_LESS <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:158 ../../../command/if.rst:164
#: ../../../command/if.rst:170 ../../../command/if.rst:176
#: ../../../command/if.rst:182
msgid ""
"Component-wise integer version number comparison (version format is ``major[."
"minor[.patch[.tweak]]]``, omitted components are treated as zero). Any non-"
"integer version component or non-integer trailing part of a version "
"component effectively truncates the string at that point."
msgstr ""

#: ../../../command/if.rst:167
msgid "``if(<variable|string> VERSION_GREATER <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:173
msgid "``if(<variable|string> VERSION_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:179
msgid "``if(<variable|string> VERSION_LESS_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:185
msgid "``if(<variable|string> VERSION_GREATER_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:188
msgid "``if(<variable|string> IN_LIST <variable>)``"
msgstr ""

#: ../../../command/if.rst:188
msgid "True if the given element is contained in the named list variable."
msgstr ""

#: ../../../command/if.rst:193
msgid "``if(DEFINED <name>|CACHE{<name>}|ENV{<name>})``"
msgstr ""

#: ../../../command/if.rst:191
msgid ""
"True if a variable, cache variable or environment variable with given "
"``<name>`` is defined. The value of the variable does not matter. Note that "
"macro arguments are not variables."
msgstr ""

#: ../../../command/if.rst:199
msgid "``if((condition) AND (condition OR (condition)))``"
msgstr ""

#: ../../../command/if.rst:196
msgid ""
"The conditions inside the parenthesis are evaluated first and then the "
"remaining condition is evaluated as in the previous examples. Where there "
"are nested parenthesis the innermost are evaluated as part of evaluating the "
"condition that contains them."
msgstr ""

#: ../../../command/if.rst:202
msgid "Variable Expansion"
msgstr ""

#: ../../../command/if.rst:204
msgid ""
"The if command was written very early in CMake's history, predating the ``${}"
"`` variable evaluation syntax, and for convenience evaluates variables named "
"by its arguments as shown in the above signatures. Note that normal variable "
"evaluation with ``${}`` applies before the if command even receives the "
"arguments.  Therefore code like"
msgstr ""

#: ../../../command/if.rst:210
msgid ""
"set(var1 OFF)\n"
"set(var2 \"var1\")\n"
"if(${var2})"
msgstr ""

#: ../../../command/if.rst:216
msgid "appears to the if command as"
msgstr ""

#: ../../../command/if.rst:218
msgid "if(var1)"
msgstr ""

#: ../../../command/if.rst:222
msgid ""
"and is evaluated according to the ``if(<variable>)`` case documented above.  "
"The result is ``OFF`` which is false.  However, if we remove the ``${}`` "
"from the example then the command sees"
msgstr ""

#: ../../../command/if.rst:226
msgid "if(var2)"
msgstr ""

#: ../../../command/if.rst:230
msgid ""
"which is true because ``var2`` is defined to \"var1\" which is not a false "
"constant."
msgstr ""

#: ../../../command/if.rst:233
msgid ""
"Automatic evaluation applies in the other cases whenever the above-"
"documented condition syntax accepts ``<variable|string>``:"
msgstr ""

#: ../../../command/if.rst:236
msgid ""
"The left hand argument to ``MATCHES`` is first checked to see if it is a "
"defined variable, if so the variable's value is used, otherwise the original "
"value is used."
msgstr ""

#: ../../../command/if.rst:240
msgid ""
"If the left hand argument to ``MATCHES`` is missing it returns false without "
"error"
msgstr ""

#: ../../../command/if.rst:243
msgid ""
"Both left and right hand arguments to ``LESS``, ``GREATER``, ``EQUAL``, "
"``LESS_EQUAL``, and ``GREATER_EQUAL``, are independently tested to see if "
"they are defined variables, if so their defined values are used otherwise "
"the original value is used."
msgstr ""

#: ../../../command/if.rst:248
msgid ""
"Both left and right hand arguments to ``STRLESS``, ``STRGREATER``, "
"``STREQUAL``, ``STRLESS_EQUAL``, and ``STRGREATER_EQUAL`` are independently "
"tested to see if they are defined variables, if so their defined values are "
"used otherwise the original value is used."
msgstr ""

#: ../../../command/if.rst:253
msgid ""
"Both left and right hand arguments to ``VERSION_LESS``, ``VERSION_GREATER``, "
"``VERSION_EQUAL``, ``VERSION_LESS_EQUAL``, and ``VERSION_GREATER_EQUAL`` are "
"independently tested to see if they are defined variables, if so their "
"defined values are used otherwise the original value is used."
msgstr ""

#: ../../../command/if.rst:259
msgid ""
"The right hand argument to ``NOT`` is tested to see if it is a boolean "
"constant, if so the value is used, otherwise it is assumed to be a variable "
"and it is dereferenced."
msgstr ""

#: ../../../command/if.rst:263
msgid ""
"The left and right hand arguments to ``AND`` and ``OR`` are independently "
"tested to see if they are boolean constants, if so they are used as such, "
"otherwise they are assumed to be variables and are dereferenced."
msgstr ""

#: ../../../command/if.rst:267
msgid ""
"To prevent ambiguity, potential variable or keyword names can be specified "
"in a :ref:`Quoted Argument` or a :ref:`Bracket Argument`. A quoted or "
"bracketed variable or keyword will be interpreted as a string and not "
"dereferenced or interpreted. See policy :policy:`CMP0054`."
msgstr ""

#: ../../../command/if.rst:273
msgid ""
"There is no automatic evaluation for environment or cache :ref:`Variable "
"References`.  Their values must be referenced as ``$ENV{<name>}`` or "
"``$CACHE{<name>}`` wherever the above-documented condition syntax accepts "
"``<variable|string>``."
msgstr ""
