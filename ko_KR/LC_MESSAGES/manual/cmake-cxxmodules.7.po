# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-02 08:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-cxxmodules.7.rst:4
msgid "cmake-cxxmodules(7)"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:8
msgid ""
"C++ 20 introduced the concept of \"modules\" to the language.  The design "
"requires build systems to order compilations among each other to satisfy "
"``import`` statements reliably.  CMake's implementation asks the compiler to "
"scan source files for module dependencies during the build, collates "
"scanning results to infer ordering constraints, and tells the build tool how "
"to dynamically update the build graph."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:16
msgid "Compilation Strategy"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:18
msgid ""
"With C++ modules, compiling a set of C++ sources is no longer embarrassingly "
"parallel. That is, any given source may first require the compilation of "
"another source file first in order to provide a \"CMI\" (compiled module "
"interface) or \"BMI\" (binary module interface) that C++ compilers use to "
"satisfy ``import`` statements in other sources. With headers, sources could "
"share their declarations so that any consumers could compile independently. "
"With modules, declarations are now generated into these BMI files by the "
"compiler during compilation based on the contents of the source file and its "
"``export`` statements."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:28
msgid ""
"The order necessary for compilation requires build-time resolution of the "
"ordering because the order is controlled by the contents of the sources. "
"This means that the ordering needs extracted from the source during the "
"build to avoid regenerating the build graph via a configure and generate "
"phase for every source change to get a correct build."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:34
msgid ""
"The general strategy is to use a \"scanner\" to extract the ordering "
"dependency information and update the build graph with new edges between "
"existing edges by taking the per-source scan results (represented by "
"`P1689R5`_ files) and \"collating\" the dependencies within a target and to "
"modules produced by targets visible to the target. The primary task is to "
"generate \"module map\" files to pass to each compile rule with the paths to "
"the BMIs needed to satisfy ``import`` statements. The collator also has "
"tasks to use the build-time information to fill out information including "
"``install`` rules for the module interface units, their BMIs, and properties "
"for any exported targets with C++ modules."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:49
msgid ""
"CMake is focusing on correct builds before looking at performance "
"improvements. There are known tactics within the chosen strategy which may "
"offer build performance improvements. However, they are being deferred until "
"we have a working model against which to compare them. It is also important "
"to note that a tactic useful in one situation (e.g., clean builds) may not "
"be performant in a different situation (e.g., incremental builds). Finding a "
"balance and offering controls to select the tactics is future work."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:59
msgid "Scanning Control"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:61
msgid ""
"Whether or not sources get scanned for C++ module usage is dependent on the "
"following queries. The first query that provides a yes/no answer is used."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:64
msgid ""
"If the source file belongs to a file set of type ``CXX_MODULES``, it will be "
"scanned."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:66
msgid "If the target does not use at least C++ 20, it will not be scanned."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:67
msgid "If the source file is not the language ``CXX``, it will not be scanned."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:68
msgid ""
"If the :prop_sf:`CXX_SCAN_FOR_MODULES` source file property is set, its "
"value will be used."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:70
msgid ""
"If the :prop_tgt:`CXX_SCAN_FOR_MODULES` target property is set, its value "
"will be used.  Set the :variable:`CMAKE_CXX_SCAN_FOR_MODULES` variable to "
"initialize this property on all targets as they are created."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:73
msgid ""
"Otherwise, the source file will be scanned if the compiler and generator "
"support scanning.  See policy :policy:`CMP0155`."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:76
msgid ""
"Note that any scanned source will be excluded from any unity build (see :"
"prop_tgt:`UNITY_BUILD`) because module-related statements can only happen at "
"one place within a C++ translation unit."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:81
msgid "Compiler Support"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:83
msgid ""
"Compilers which CMake natively supports module dependency scanning include:"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:85
msgid ""
"MSVC toolset 14.34 and newer (provided with Visual Studio 17.4 and newer)"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:86
msgid "LLVM/Clang 16.0 and newer"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:87
msgid "GCC 14 (for the in-development branch, after 2023-09-20) and newer"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:90
msgid "``import std`` Support"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:92
msgid ""
"Support for ``import std`` is limited to the following toolchain and "
"standard library combinations:"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:95
msgid "Clang 18.1.2 and newer with ``-stdlib=libc++``"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:96
msgid ""
"MSVC toolset 14.36 and newer (provided with Visual Studio 17.6 Preview 2 and "
"newer)"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:99
msgid ""
"The :variable:`CMAKE_CXX_COMPILER_IMPORT_STD` variable may be used to detect "
"support for a standard level with the active C++ toolchain."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:104
msgid ""
"This support is provided only when experimental support for ``import std;`` "
"has been enabled by the ``CMAKE_EXPERIMENTAL_CXX_IMPORT_STD`` gate."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:109
msgid "Generator Support"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:111
msgid ""
"The list of generators which support scanning sources for C++ modules "
"include:"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:113
msgid ":generator:`Ninja`"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:114
msgid ":generator:`Ninja Multi-Config`"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:115
msgid ":generator:`Visual Studio 17 2022`"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:118
msgid "Limitations"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:120
msgid ""
"There are a number of known limitations of the current C++ module support in "
"CMake.  This does not document known limitations or bugs in compilers as "
"these can change over time."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:124
msgid "For all generators:"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:126
msgid "Header units are not supported."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:127
msgid ""
"No builtin support for ``import std;`` or other compiler-provided modules."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:129
msgid "For the Ninja Generators:"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:131
msgid "``ninja`` 1.11 or newer is required."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:133
msgid "For the :ref:`Visual Studio Generators`:"
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:135
msgid ""
"Only Visual Studio 2022 and MSVC toolsets 14.34 (Visual Studio 17.4) and "
"newer."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:137
msgid "No support for exporting or installing BMI or module information."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:138
msgid ""
"No support for compiling BMIs from ``IMPORTED`` targets with C++ modules "
"(including ``import std``)."
msgstr ""

#: ../../../manual/cmake-cxxmodules.7.rst:140
msgid ""
"No diagnosis of using modules provided by ``PRIVATE`` sources from "
"``PUBLIC`` module sources."
msgstr ""
