# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.23\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-generator-expressions.7.rst:4
msgid "cmake-generator-expressions(7)"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:7
msgid "Contents"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:13
msgid ""
"Generator expressions are evaluated during build system generation to "
"produce information specific to each build configuration."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:16
msgid ""
"Generator expressions are allowed in the context of many target properties, "
"such as :prop_tgt:`LINK_LIBRARIES`, :prop_tgt:`INCLUDE_DIRECTORIES`, :"
"prop_tgt:`COMPILE_DEFINITIONS` and others.  They may also be used when using "
"commands to populate those properties, such as :command:"
"`target_link_libraries`, :command:`target_include_directories`, :command:"
"`target_compile_definitions` and others."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:23
msgid ""
"They enable conditional linking, conditional definitions used when "
"compiling, conditional include directories, and more.  The conditions may be "
"based on the build configuration, target properties, platform information or "
"any other queryable information."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:28
msgid ""
"Generator expressions have the form ``$<...>``.  To avoid confusion, this "
"page deviates from most of the CMake documentation in that it omits angular "
"brackets ``<...>`` around placeholders like ``condition``, ``string``, "
"``target``, among others."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:33
msgid ""
"Generator expressions can be nested, as shown in most of the examples below."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:38
msgid "Boolean Generator Expressions"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:40
msgid ""
"Boolean expressions evaluate to either ``0`` or ``1``. They are typically "
"used to construct the condition in a :ref:`conditional generator "
"expression<Conditional Generator Expressions>`."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:44
msgid "Available boolean expressions are:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:47
msgid "Logical Operators"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:51
msgid ""
"Converts ``string`` to ``0`` or ``1``. Evaluates to ``0`` if any of the "
"following is true:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:54
msgid "``string`` is empty,"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:55
msgid ""
"``string`` is a case-insensitive equal of ``0``, ``FALSE``, ``OFF``, ``N``, "
"``NO``, ``IGNORE``, or ``NOTFOUND``, or"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:57
msgid "``string`` ends in the suffix ``-NOTFOUND`` (case-sensitive)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:59
msgid "Otherwise evaluates to ``1``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:63
msgid ""
"where ``conditions`` is a comma-separated list of boolean expressions. "
"Evaluates to ``1`` if all conditions are ``1``. Otherwise evaluates to ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:69
msgid ""
"where ``conditions`` is a comma-separated list of boolean expressions. "
"Evaluates to ``1`` if at least one of the conditions is ``1``. Otherwise "
"evaluates to ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:75
msgid "``0`` if ``condition`` is ``1``, else ``1``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:78
msgid "String Comparisons"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:82
msgid ""
"``1`` if ``string1`` and ``string2`` are equal, else ``0``. The comparison "
"is case-sensitive.  For a case-insensitive comparison, combine with a :ref:"
"`string transforming generator expression <String Transforming Generator "
"Expressions>`,"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:87
msgid ""
"$<STREQUAL:$<UPPER_CASE:${foo}>,\"BAR\"> # \"1\" if ${foo} is any of "
"\"BAR\", \"Bar\", \"bar\", ..."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:93
msgid "``1`` if ``value1`` and ``value2`` are numerically equal, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:99
msgid ""
"``1`` if ``string`` is member of the semicolon-separated ``list``, else "
"``0``. Uses case-sensitive comparisons."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:104
msgid "``1`` if ``v1`` is a version less than ``v2``, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:108
msgid "``1`` if ``v1`` is a version greater than ``v2``, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:112
msgid "``1`` if ``v1`` is the same version as ``v2``, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:118
msgid "``1`` if ``v1`` is a version less than or equal to ``v2``, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:124
msgid ""
"``1`` if ``v1`` is a version greater than or equal to ``v2``, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:127
#: ../../../manual/cmake-generator-expressions.7.rst:670
msgid "Variable Queries"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:133
msgid "``1`` if ``target`` exists, else ``0``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:137
msgid ""
"``1`` if config is any one of the entries in comma-separated list ``cfgs``, "
"else ``0``. This is a case-insensitive comparison. The mapping in :prop_tgt:"
"`MAP_IMPORTED_CONFIG_<CONFIG>` is also considered by this expression when it "
"is evaluated on a property on an :prop_tgt:`IMPORTED` target."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:145
msgid ""
"where ``platform_ids`` is a comma-separated list. ``1`` if the CMake's "
"platform id matches any one of the entries in ``platform_ids``, otherwise "
"``0``. See also the :variable:`CMAKE_SYSTEM_NAME` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:152
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the C compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:159
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the CXX compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:168
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the CUDA compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:177
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the Objective-C compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:186
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the Objective-C++ compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:193
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the Fortran compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:202
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the HIP compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:211
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if the CMake's "
"compiler id of the ISPC compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:218
msgid ""
"``1`` if the version of the C compiler matches ``version``, otherwise ``0``. "
"See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:223
#: ../../../manual/cmake-generator-expressions.7.rst:230
msgid ""
"``1`` if the version of the CXX compiler matches ``version``, otherwise "
"``0``. See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:237
msgid ""
"``1`` if the version of the OBJC compiler matches ``version``, otherwise "
"``0``. See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:244
msgid ""
"``1`` if the version of the OBJCXX compiler matches ``version``, otherwise "
"``0``. See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:249
msgid ""
"``1`` if the version of the Fortran compiler matches ``version``, otherwise "
"``0``. See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:256
msgid ""
"``1`` if the version of the HIP compiler matches ``version``, otherwise "
"``0``. See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:263
msgid ""
"``1`` if the version of the ISPC compiler matches ``version``, otherwise "
"``0``. See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:268
msgid ""
"``1`` if the ``policy`` was NEW when the 'head' target was created, else "
"``0``.  If the ``policy`` was not set, the warning message for the policy "
"will be emitted. This generator expression only works for a subset of "
"policies."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:277
msgid ""
"where ``features`` is a comma-spearated list. Evaluates to ``1`` if all of "
"the ``features`` are available for the 'head' target, and ``0`` otherwise. "
"If this expression is used while evaluating the link implementation of a "
"target and if any dependency transitively increases the required :prop_tgt:"
"`C_STANDARD` or :prop_tgt:`CXX_STANDARD` for the 'head' target, an error is "
"reported.  See the :manual:`cmake-compile-features(7)` manual for "
"information on compile features and a list of supported compilers."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:292
msgid ""
"``1`` when the language used for compilation unit matches ``language`` and "
"the CMake's compiler id of the language compiler matches any one of the "
"entries in ``compiler_ids``, otherwise ``0``. This expression is a short "
"form for the combination of ``$<COMPILE_LANGUAGE:language>`` and "
"``$<LANG_COMPILER_ID:compiler_ids>``. This expression may be used to specify "
"compile options, compile definitions, and include directories for source "
"files of a particular language and compiler combination in a target. For "
"example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:300
msgid ""
"add_executable(myapp main.cpp foo.c bar.cpp zot.cu)\n"
"target_compile_definitions(myapp\n"
"  PRIVATE $<$<COMPILE_LANG_AND_ID:CXX,AppleClang,Clang>:"
"COMPILING_CXX_WITH_CLANG>\n"
"          $<$<COMPILE_LANG_AND_ID:CXX,Intel>:COMPILING_CXX_WITH_INTEL>\n"
"          $<$<COMPILE_LANG_AND_ID:C,Clang>:COMPILING_C_WITH_CLANG>\n"
")"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:309
msgid ""
"This specifies the use of different compile definitions based on both the "
"compiler id and compilation language. This example will have a "
"``COMPILING_CXX_WITH_CLANG`` compile definition when Clang is the CXX "
"compiler, and ``COMPILING_CXX_WITH_INTEL`` when Intel is the CXX compiler. "
"Likewise when the C compiler is Clang it will only see the  "
"``COMPILING_C_WITH_CLANG`` definition."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:316
msgid ""
"Without the ``COMPILE_LANG_AND_ID`` generator expression the same logic "
"would be expressed as:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:319
msgid ""
"target_compile_definitions(myapp\n"
"  PRIVATE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:AppleClang,"
"Clang>>:COMPILING_CXX_WITH_CLANG>\n"
"          $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:Intel>>:"
"COMPILING_CXX_WITH_INTEL>\n"
"          $<$<AND:$<COMPILE_LANGUAGE:C>,$<C_COMPILER_ID:Clang>>:"
"COMPILING_C_WITH_CLANG>\n"
")"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:331
msgid ""
"``1`` when the language used for compilation unit matches any of the entries "
"in ``languages``, otherwise ``0``.  This expression may be used to specify "
"compile options, compile definitions, and include directories for source "
"files of a particular language in a target. For example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:336
msgid ""
"add_executable(myapp main.cpp foo.c bar.cpp zot.cu)\n"
"target_compile_options(myapp\n"
"  PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>\n"
")\n"
"target_compile_definitions(myapp\n"
"  PRIVATE $<$<COMPILE_LANGUAGE:CXX>:COMPILING_CXX>\n"
"          $<$<COMPILE_LANGUAGE:CUDA>:COMPILING_CUDA>\n"
")\n"
"target_include_directories(myapp\n"
"  PRIVATE $<$<COMPILE_LANGUAGE:CXX,CUDA>:/opt/foo/headers>\n"
")"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:350
msgid ""
"This specifies the use of the ``-fno-exceptions`` compile option, "
"``COMPILING_CXX`` compile definition, and ``cxx_headers`` include directory "
"for C++ only (compiler id checks elided).  It also specifies a "
"``COMPILING_CUDA`` compile definition for CUDA."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:355
msgid ""
"Note that with :ref:`Visual Studio Generators` and :generator:`Xcode` there "
"is no way to represent target-wide compile definitions or include "
"directories separately for ``C`` and ``CXX`` languages. Also, with :ref:"
"`Visual Studio Generators` there is no way to represent target-wide flags "
"separately for ``C`` and ``CXX`` languages.  Under these generators, "
"expressions for both C and C++ sources will be evaluated using ``CXX`` if "
"there are any C++ sources and otherwise using ``C``. A workaround is to "
"create separate libraries for each source file language instead:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:365
msgid ""
"add_library(myapp_c foo.c)\n"
"add_library(myapp_cxx bar.cpp)\n"
"target_compile_options(myapp_cxx PUBLIC -fno-exceptions)\n"
"add_executable(myapp main.cpp)\n"
"target_link_libraries(myapp myapp_c myapp_cxx)"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:379
msgid ""
"``1`` when the language used for link step matches ``language`` and the "
"CMake's compiler id of the language linker matches any one of the entries in "
"``compiler_ids``, otherwise ``0``. This expression is a short form for the "
"combination of ``$<LINK_LANGUAGE:language>`` and ``$<LANG_COMPILER_ID:"
"compiler_ids>``. This expression may be used to specify link libraries, link "
"options, link directories and link dependencies of a particular language and "
"linker combination in a target. For example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:387
msgid ""
"add_library(libC_Clang ...)\n"
"add_library(libCXX_Clang ...)\n"
"add_library(libC_Intel ...)\n"
"add_library(libCXX_Intel ...)\n"
"\n"
"add_executable(myapp main.c)\n"
"if (CXX_CONFIG)\n"
"  target_sources(myapp PRIVATE file.cxx)\n"
"endif()\n"
"target_link_libraries(myapp\n"
"  PRIVATE $<$<LINK_LANG_AND_ID:CXX,Clang,AppleClang>:libCXX_Clang>\n"
"          $<$<LINK_LANG_AND_ID:C,Clang,AppleClang>:libC_Clang>\n"
"          $<$<LINK_LANG_AND_ID:CXX,Intel>:libCXX_Intel>\n"
"          $<$<LINK_LANG_AND_ID:C,Intel>:libC_Intel>)"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:404
msgid ""
"This specifies the use of different link libraries based on both the "
"compiler id and link language. This example will have target "
"``libCXX_Clang`` as link dependency when ``Clang`` or ``AppleClang`` is the "
"``CXX`` linker, and ``libCXX_Intel`` when ``Intel`` is the ``CXX`` linker. "
"Likewise when the ``C`` linker is ``Clang`` or ``AppleClang``, target "
"``libC_Clang`` will be added as link dependency and ``libC_Intel`` when "
"``Intel`` is the ``C`` linker."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:412
msgid ""
"See :ref:`the note related to <Constraints LINK_LANGUAGE Generator "
"Expression>` ``$<LINK_LANGUAGE:language>`` for constraints about the usage "
"of this generator expression."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:421
msgid ""
"``1`` when the language used for link step matches any of the entries in "
"``languages``, otherwise ``0``.  This expression may be used to specify link "
"libraries, link options, link directories and link dependencies of a "
"particular language in a target. For example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:426
msgid ""
"add_library(api_C ...)\n"
"add_library(api_CXX ...)\n"
"add_library(api INTERFACE)\n"
"target_link_options(api INTERFACE $<$<LINK_LANGUAGE:C>:-opt_c>\n"
"                                    $<$<LINK_LANGUAGE:CXX>:-opt_cxx>)\n"
"target_link_libraries(api INTERFACE $<$<LINK_LANGUAGE:C>:api_C>\n"
"                                    $<$<LINK_LANGUAGE:CXX>:api_CXX>)\n"
"\n"
"add_executable(myapp1 main.c)\n"
"target_link_options(myapp1 PRIVATE api)\n"
"\n"
"add_executable(myapp2 main.cpp)\n"
"target_link_options(myapp2 PRIVATE api)"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:442
msgid ""
"This specifies to use the ``api`` target for linking targets ``myapp1`` and "
"``myapp2``. In practice, ``myapp1`` will link with target ``api_C`` and "
"option ``-opt_c`` because it will use ``C`` as link language. And ``myapp2`` "
"will link with ``api_CXX`` and option ``-opt_cxx`` because ``CXX`` will be "
"the link language."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:452
msgid ""
"To determine the link language of a target, it is required to collect, "
"transitively, all the targets which will be linked to it. So, for link "
"libraries properties, a double evaluation will be done. During the first "
"evaluation, ``$<LINK_LANGUAGE:..>`` expressions will always return ``0``. "
"The link language computed after this first pass will be used to do the "
"second pass. To avoid inconsistency, it is required that the second pass do "
"not change the link language. Moreover, to avoid unexpected side-effects, it "
"is required to specify complete entities as part of the ``$<LINK_LANGUAGE:.."
">`` expression. For example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:462
msgid ""
"add_library(lib STATIC file.cxx)\n"
"add_library(libother STATIC file.c)\n"
"\n"
"# bad usage\n"
"add_executable(myapp1 main.c)\n"
"target_link_libraries(myapp1 PRIVATE lib$<$<LINK_LANGUAGE:C>:other>)\n"
"\n"
"# correct usage\n"
"add_executable(myapp2 main.c)\n"
"target_link_libraries(myapp2 PRIVATE $<$<LINK_LANGUAGE:C>:libother>)"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:475
msgid ""
"In this example, for ``myapp1``, the first pass will, unexpectedly, "
"determine that the link language is ``CXX`` because the evaluation of the "
"generator expression will be an empty string so ``myapp1`` will depends on "
"target ``lib`` which is ``C++``. On the contrary, for ``myapp2``, the first "
"evaluation will give ``C`` as link language, so the second pass will "
"correctly add target ``libother`` as link dependency."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:486
msgid ""
"Returns the list if it is the device link step, an empty list otherwise. The "
"device link step is controlled by :prop_tgt:`CUDA_SEPARABLE_COMPILATION` "
"and :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy :policy:"
"`CMP0105`. This expression can only be used to specify link options."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:496
msgid ""
"Returns the list if it is the normal link step, an empty list otherwise. "
"This expression is mainly useful when a device link step is also involved "
"(see ``$<DEVICE_LINK:list>`` generator expression). This expression can only "
"be used to specify link options."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:502
msgid "String-Valued Generator Expressions"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:504
msgid "These expressions expand to some string. For example,"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:507
msgid "include_directories(/usr/include/$<CXX_COMPILER_ID>/)"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:511
msgid ""
"expands to ``/usr/include/GNU/`` or ``/usr/include/Clang/`` etc, depending "
"on the compiler identifier."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:514
msgid ""
"String-valued expressions may also be combined with other expressions. Here "
"an example for a string-valued expression within a boolean expressions "
"within a conditional expression:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:518
msgid "$<$<VERSION_LESS:$<CXX_COMPILER_VERSION>,4.2.0>:OLD_COMPILER>"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:522
msgid ""
"expands to ``OLD_COMPILER`` if the :variable:`CMAKE_CXX_COMPILER_VERSION "
"<CMAKE_<LANG>_COMPILER_VERSION>` is less than 4.2.0."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:526
msgid "And here two nested string-valued expressions:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:528
msgid "-I$<JOIN:$<TARGET_PROPERTY:INCLUDE_DIRECTORIES>, -I>"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:532
msgid ""
"generates a string of the entries in the :prop_tgt:`INCLUDE_DIRECTORIES` "
"target property with each entry preceded by ``-I``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:535
msgid ""
"Expanding on the previous example, if one first wants to check if the "
"``INCLUDE_DIRECTORIES`` property is non-empty, then it is advisable to "
"introduce a helper variable to keep the code readable:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:539
msgid ""
"set(prop \"$<TARGET_PROPERTY:INCLUDE_DIRECTORIES>\") # helper variable\n"
"$<$<BOOL:${prop}>:-I$<JOIN:${prop}, -I>>"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:544
msgid "The following string-valued generator expressions are available:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:547
msgid "Escaped Characters"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:549
msgid ""
"String literals to escape the special meaning a character would otherwise "
"have:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:553
msgid ""
"A literal ``>``. Used for example to compare strings that contain a ``>``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:557
msgid ""
"A literal ``,``. Used for example to compare strings which contain a ``,``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:561
msgid ""
"A literal ``;``. Used to prevent list expansion on an argument with ``;``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:566
msgid "Conditional Expressions"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:568
msgid ""
"Conditional generator expressions depend on a boolean condition that must be "
"``0`` or ``1``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:573
msgid ""
"Evaluates to ``true_string`` if ``condition`` is ``1``. Otherwise evaluates "
"to the empty string."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:580
msgid ""
"Evaluates to ``true_string`` if ``condition`` is ``1``. Otherwise evaluates "
"to ``false_string``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:583
msgid ""
"Typically, the ``condition`` is a :ref:`boolean generator expression "
"<Boolean Generator Expressions>`.  For instance,"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:586
msgid "$<$<CONFIG:Debug>:DEBUG_MODE>"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:590
msgid ""
"expands to ``DEBUG_MODE`` when the ``Debug`` configuration is used, and "
"otherwise expands to the empty string."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:596
msgid "String Transformations"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:600
msgid "Joins the list with the content of ``string``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:606
msgid "Removes duplicated items in the given ``list``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:612
msgid ""
"Includes or removes items from ``list`` that match the regular expression "
"``regex``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:616
msgid "Content of ``string`` converted to lower case."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:620
msgid "Content of ``string`` converted to upper case."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:626
msgid ""
"Content of ``expr`` evaluated as a generator expression in the current "
"context. This enables consumption of generator expressions whose evaluation "
"results itself in generator expressions."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:634
msgid ""
"Content of ``expr`` evaluated as a generator expression in the context of "
"``tgt`` target. This enables consumption of custom target properties that "
"themselves contain generator expressions."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:638
msgid ""
"Having the capability to evaluate generator expressions is very useful when "
"you want to manage custom properties supporting generator expressions. For "
"example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:642
msgid ""
"add_library(foo ...)\n"
"\n"
"set_property(TARGET foo PROPERTY\n"
"  CUSTOM_KEYS $<$<CONFIG:DEBUG>:FOO_EXTRA_THINGS>\n"
")\n"
"\n"
"add_custom_target(printFooKeys\n"
"  COMMAND ${CMAKE_COMMAND} -E echo $<TARGET_PROPERTY:foo,CUSTOM_KEYS>\n"
")"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:654
msgid ""
"This naive implementation of the ``printFooKeys`` custom command is wrong "
"because ``CUSTOM_KEYS`` target property is not evaluated and the content is "
"passed as is (i.e. ``$<$<CONFIG:DEBUG>:FOO_EXTRA_THINGS>``)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:658
msgid ""
"To have the expected result (i.e. ``FOO_EXTRA_THINGS`` if config is "
"``Debug``), it is required to evaluate the output of ``$<TARGET_PROPERTY:foo,"
"CUSTOM_KEYS>``:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:662
msgid ""
"add_custom_target(printFooKeys\n"
"  COMMAND ${CMAKE_COMMAND} -E\n"
"    echo $<TARGET_GENEX_EVAL:foo,$<TARGET_PROPERTY:foo,CUSTOM_KEYS>>\n"
")"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:674
msgid "Configuration name."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:678
msgid "Configuration name. Deprecated since CMake 3.0. Use ``CONFIG`` instead."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:682
msgid ""
"The current system's CMake platform id. See also the :variable:"
"`CMAKE_SYSTEM_NAME` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:687
msgid ""
"The CMake's compiler id of the C compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:692
msgid ""
"The CMake's compiler id of the CXX compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:697
msgid ""
"The CMake's compiler id of the CUDA compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:704
msgid ""
"The CMake's compiler id of the OBJC compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:711
msgid ""
"The CMake's compiler id of the OBJCXX compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:716
msgid ""
"The CMake's compiler id of the Fortran compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:723
msgid ""
"The CMake's compiler id of the HIP compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:730
msgid ""
"The CMake's compiler id of the ISPC compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:735
msgid ""
"The version of the C compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:740
msgid ""
"The version of the CXX compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:745
msgid ""
"The version of the CUDA compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:752
msgid ""
"The version of the OBJC compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:759
msgid ""
"The version of the OBJCXX compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:764
msgid ""
"The version of the Fortran compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:771
msgid ""
"The version of the HIP compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:778
msgid ""
"The version of the ISPC compiler used. See also the :variable:"
"`CMAKE_<LANG>_COMPILER_VERSION` variable."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:785
msgid ""
"The compile language of source files when evaluating compile options. See :"
"ref:`the related boolean expression <Boolean COMPILE_LANGUAGE Generator "
"Expression>` ``$<COMPILE_LANGUAGE:language>`` for notes about the "
"portability of this generator expression."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:795
msgid ""
"The link language of target when evaluating link options. See :ref:`the "
"related boolean expression <Boolean LINK_LANGUAGE Generator Expression>` "
"``$<LINK_LANGUAGE:language>`` for notes about the portability of this "
"generator expression."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:802
msgid ""
"This generator expression is not supported by the link libraries properties "
"to avoid side-effects due to the double evaluation of these properties."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:809
msgid "Target-Dependent Queries"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:811
msgid ""
"These queries refer to a target ``tgt``. This can be any runtime artifact, "
"namely:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:814
msgid "an executable target created by :command:`add_executable`"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:815
msgid ""
"a shared library target (``.so``, ``.dll`` but not their ``.lib`` import "
"library) created by :command:`add_library`"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:817
msgid "a static library target created by :command:`add_library`"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:819
msgid ""
"In the following, \"the ``tgt`` filename\" means the name of the ``tgt`` "
"binary file. This has to be distinguished from \"the target name\", which is "
"just the string ``tgt``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:827
msgid ""
"The target name ``tgt`` if the target exists, an empty string otherwise."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:829
#: ../../../manual/cmake-generator-expressions.7.rst:854
#: ../../../manual/cmake-generator-expressions.7.rst:865
#: ../../../manual/cmake-generator-expressions.7.rst:876
#: ../../../manual/cmake-generator-expressions.7.rst:917
#: ../../../manual/cmake-generator-expressions.7.rst:929
#: ../../../manual/cmake-generator-expressions.7.rst:943
#: ../../../manual/cmake-generator-expressions.7.rst:1005
#: ../../../manual/cmake-generator-expressions.7.rst:1053
msgid ""
"Note that ``tgt`` is not added as a dependency of the target this expression "
"is evaluated on."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:834
msgid "Full path to the ``tgt`` binary file."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:840
msgid ""
"Base name of ``tgt``, i.e. ``$<TARGET_FILE_NAME:tgt>`` without prefix and "
"suffix. For example, if the ``tgt`` filename is ``libbase.so``, the base "
"name is ``base``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:844
msgid ""
"See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`, :"
"prop_tgt:`LIBRARY_OUTPUT_NAME` and :prop_tgt:`RUNTIME_OUTPUT_NAME` target "
"properties and their configuration specific variants :prop_tgt:"
"`OUTPUT_NAME_<CONFIG>`, :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`, :prop_tgt:"
"`LIBRARY_OUTPUT_NAME_<CONFIG>` and :prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:851
#: ../../../manual/cmake-generator-expressions.7.rst:914
#: ../../../manual/cmake-generator-expressions.7.rst:1002
msgid ""
"The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target "
"properties can also be considered."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:861
msgid "Prefix of the ``tgt`` filename (such as ``lib``)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:863
msgid "See also the :prop_tgt:`PREFIX` target property."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:872
msgid "Suffix of the ``tgt`` filename (extension such as ``.so`` or ``.exe``)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:874
msgid "See also the :prop_tgt:`SUFFIX` target property."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:881
msgid "The ``tgt`` filename."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:883
#: ../../../manual/cmake-generator-expressions.7.rst:890
#: ../../../manual/cmake-generator-expressions.7.rst:950
#: ../../../manual/cmake-generator-expressions.7.rst:957
#: ../../../manual/cmake-generator-expressions.7.rst:967
#: ../../../manual/cmake-generator-expressions.7.rst:974
#: ../../../manual/cmake-generator-expressions.7.rst:1014
#: ../../../manual/cmake-generator-expressions.7.rst:1023
#: ../../../manual/cmake-generator-expressions.7.rst:1033
#: ../../../manual/cmake-generator-expressions.7.rst:1046
msgid ""
"Note that ``tgt`` is not added as a dependency of the target this expression "
"is evaluated on (see policy :policy:`CMP0112`)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:888
msgid "Directory of the ``tgt`` binary file."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:895
msgid ""
"File used when linking to the ``tgt`` target.  This will usually be the "
"library that ``tgt`` represents (``.a``, ``.lib``, ``.so``), but for a "
"shared library on DLL platforms, it would be the ``.lib`` import library "
"associated with the DLL."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:904
msgid ""
"Base name of file used to link the target ``tgt``, i.e. "
"``$<TARGET_LINKER_FILE_NAME:tgt>`` without prefix and suffix. For example, "
"if target file name is ``libbase.a``, the base name is ``base``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:908
msgid ""
"See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`, and :"
"prop_tgt:`LIBRARY_OUTPUT_NAME` target properties and their configuration "
"specific variants :prop_tgt:`OUTPUT_NAME_<CONFIG>`, :prop_tgt:"
"`ARCHIVE_OUTPUT_NAME_<CONFIG>` and :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:924
msgid "Prefix of file used to link target ``tgt``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:926
msgid ""
"See also the :prop_tgt:`PREFIX` and :prop_tgt:`IMPORT_PREFIX` target "
"properties."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:936
msgid "Suffix of file used to link where ``tgt`` is the name of a target."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:938
msgid ""
"The suffix corresponds to the file extension (such as \".so\" or \".lib\")."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:940
msgid ""
"See also the :prop_tgt:`SUFFIX` and :prop_tgt:`IMPORT_SUFFIX` target "
"properties."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:948
msgid "Name of file used to link target ``tgt``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:955
msgid "Directory of file used to link target ``tgt``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:962
msgid "File with soname (``.so.3``) where ``tgt`` is the name of a target."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:965
msgid "Name of file with soname (``.so.3``)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:972
msgid "Directory of with soname (``.so.3``)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:981
msgid ""
"Full path to the linker generated program database file (.pdb) where ``tgt`` "
"is the name of a target."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:984
msgid ""
"See also the :prop_tgt:`PDB_NAME` and :prop_tgt:`PDB_OUTPUT_DIRECTORY` "
"target properties and their configuration specific variants :prop_tgt:"
"`PDB_NAME_<CONFIG>` and :prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:992
msgid ""
"Base name of the linker generated program database file (.pdb) where ``tgt`` "
"is the name of a target."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:995
msgid ""
"The base name corresponds to the target PDB file name (see "
"``$<TARGET_PDB_FILE_NAME:tgt>``) without prefix and suffix. For example, if "
"target file name is ``base.pdb``, the base name is ``base``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:999
msgid ""
"See also the :prop_tgt:`PDB_NAME` target property and its configuration "
"specific variant :prop_tgt:`PDB_NAME_<CONFIG>`."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1012
msgid "Name of the linker generated program database file (.pdb)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1021
msgid "Directory of the linker generated program database file (.pdb)."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1030
msgid ""
"Full path to the bundle directory (``my.app``, ``my.framework``, or ``my."
"bundle``) where ``tgt`` is the name of a target."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1040
msgid ""
"Full path to the bundle content directory where ``tgt`` is the name of a "
"target. For the macOS SDK it leads to ``my.app/Contents``, ``my.framework``, "
"or ``my.bundle/Contents``. For all other SDKs (e.g. iOS) it leads to ``my."
"app``, ``my.framework``, or ``my.bundle`` due to the flat bundle structure."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1051
msgid "Value of the property ``prop`` on the target ``tgt``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1058
msgid ""
"Value of the property ``prop`` on the target for which the expression is "
"being evaluated. Note that for generator expressions in :ref:`Target Usage "
"Requirements` this is the consuming target rather than the target specifying "
"the requirement."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1067
msgid ""
"List of DLLs that the target depends on at runtime. This is determined by "
"the locations of all the ``SHARED`` targets in the target's transitive "
"dependencies. Using this generator expression on targets other than "
"executables, ``SHARED`` libraries, and ``MODULE`` libraries is an error. On "
"non-DLL platforms, it evaluates to an empty string."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1073
msgid ""
"This generator expression can be used to copy all of the DLLs that a target "
"depends on into its output directory in a ``POST_BUILD`` custom command. For "
"example:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1077
msgid ""
"find_package(foo CONFIG REQUIRED) # package generated by install(EXPORT)\n"
"\n"
"add_executable(exe main.c)\n"
"target_link_libraries(exe PRIVATE foo::foo foo::bar)\n"
"add_custom_command(TARGET exe POST_BUILD\n"
"  COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_RUNTIME_DLLS:exe> "
"$<TARGET_FILE_DIR:exe>\n"
"  COMMAND_EXPAND_LISTS\n"
"  )"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1090
msgid ""
":ref:`Imported Targets` are supported only if they know the location of "
"their ``.dll`` files.  An imported ``SHARED`` library must have :prop_tgt:"
"`IMPORTED_LOCATION` set to its ``.dll`` file.  See the :ref:`add_library "
"imported libraries <add_library imported libraries>` section for details.  "
"Many :ref:`Find Modules` produce imported targets with the ``UNKNOWN`` type "
"and therefore will be ignored."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1099
msgid ""
"Content of the install prefix when the target is exported via :command:"
"`install(EXPORT)`, or when evaluated in the :prop_tgt:`INSTALL_NAME_DIR` "
"property or the ``INSTALL_NAME_DIR`` argument of :command:"
"`install(RUNTIME_DEPENDENCY_SET)`, and empty otherwise."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1105
msgid "Output-Related Expressions"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1109
msgid ""
"Marks ``...`` as being the name of a target.  This is required if exporting "
"targets to multiple dependent export sets.  The ``...`` must be a literal "
"name of a target- it may not contain generator expressions."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1117
msgid ""
"Content of ``...`` except when evaluated in a link interface while "
"propagating :ref:`Target Usage Requirements`, in which case it is the empty "
"string. Intended for use only in an :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"target property, perhaps via the :command:`target_link_libraries` command, "
"to specify private link dependencies without other usage requirements."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1126
msgid ""
"Content of ``...`` when the property is exported using :command:"
"`install(EXPORT)`, and empty otherwise."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1131
msgid ""
"Content of ``...`` when the property is exported using :command:`export`, or "
"when the target is used by another target in the same buildsystem. Expands "
"to the empty string otherwise."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1137
msgid ""
"Content of ``...`` converted to a C identifier.  The conversion follows the "
"same behavior as :command:`string(MAKE_C_IDENTIFIER)`."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1144
msgid "List of objects resulting from build of ``objLib``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1150
msgid ""
"Content of ``...`` converted to shell path style. For example, slashes are "
"converted to backslashes in Windows shells and drive letters are converted "
"to posix paths in MSYS shells. The ``...`` must be an absolute path."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1154
msgid ""
"The ``...`` may be a :ref:`semicolon-separated list <CMake Language Lists>` "
"of paths, in which case each path is converted individually and a result "
"list is generated using the shell path separator (``:`` on POSIX and ``;`` "
"on Windows).  Be sure to enclose the argument containing this genex in "
"double quotes in CMake source code so that ``;`` does not split arguments."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1165
msgid ""
"Only valid in :command:`add_custom_command` and :command:`add_custom_target` "
"as the outer-most generator expression in an argument. With the :generator:"
"`Ninja Multi-Config` generator, generator expressions in ``...`` are "
"evaluated using the custom command's \"output config\". With other "
"generators, the content of ``...`` is evaluated normally."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1175
msgid ""
"Only valid in :command:`add_custom_command` and :command:`add_custom_target` "
"as the outer-most generator expression in an argument. With the :generator:"
"`Ninja Multi-Config` generator, generator expressions in ``...`` are "
"evaluated using the custom command's \"command config\". With other "
"generators, the content of ``...`` is evaluated normally."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1182
msgid "Debugging"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1184
msgid ""
"Since generator expressions are evaluated during generation of the "
"buildsystem, and not during processing of ``CMakeLists.txt`` files, it is "
"not possible to inspect their result with the :command:`message()` command."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1188
msgid "One possible way to generate debug messages is to add a custom target,"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1190
msgid ""
"add_custom_target(genexdebug COMMAND ${CMAKE_COMMAND} -E echo \"$<...>\")"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1194
msgid ""
"The shell command ``make genexdebug`` (invoked after execution of ``cmake``) "
"would then print the result of ``$<...>``."
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1197
msgid "Another way is to write debug messages to a file:"
msgstr ""

#: ../../../manual/cmake-generator-expressions.7.rst:1199
msgid "file(GENERATE OUTPUT filename CONTENT \"$<...>\")"
msgstr ""
