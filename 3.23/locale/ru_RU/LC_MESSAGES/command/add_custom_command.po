# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.23\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/add_custom_command.rst:2
msgid "add_custom_command"
msgstr ""

#: ../../../command/add_custom_command.rst:4
msgid "Add a custom build rule to the generated build system."
msgstr ""

#: ../../../command/add_custom_command.rst:6
msgid "There are two main signatures for ``add_custom_command``."
msgstr ""

#: ../../../command/add_custom_command.rst:9
msgid "Generating Files"
msgstr ""

#: ../../../command/add_custom_command.rst:11
msgid ""
"The first signature is for adding a custom command to produce an output:"
msgstr ""

#: ../../../command/add_custom_command.rst:13
msgid ""
"add_custom_command(OUTPUT output1 [output2 ...]\n"
"                   COMMAND command1 [ARGS] [args1...]\n"
"                   [COMMAND command2 [ARGS] [args2...] ...]\n"
"                   [MAIN_DEPENDENCY depend]\n"
"                   [DEPENDS [depends...]]\n"
"                   [BYPRODUCTS [files...]]\n"
"                   [IMPLICIT_DEPENDS <lang1> depend1\n"
"                                    [<lang2> depend2] ...]\n"
"                   [WORKING_DIRECTORY dir]\n"
"                   [COMMENT comment]\n"
"                   [DEPFILE depfile]\n"
"                   [JOB_POOL job_pool]\n"
"                   [VERBATIM] [APPEND] [USES_TERMINAL]\n"
"                   [COMMAND_EXPAND_LISTS])"
msgstr ""

#: ../../../command/add_custom_command.rst:30
msgid ""
"This defines a command to generate specified ``OUTPUT`` file(s). A target "
"created in the same directory (``CMakeLists.txt`` file) that specifies any "
"output of the custom command as a source file is given a rule to generate "
"the file using the command at build time. Do not list the output in more "
"than one independent target that may build in parallel or the two instances "
"of the rule may conflict (instead use the :command:`add_custom_target` "
"command to drive the command and make the other targets depend on that one). "
"In makefile terms this creates a new target in the following form::"
msgstr ""

#: ../../../command/add_custom_command.rst:40
msgid ""
"OUTPUT: MAIN_DEPENDENCY DEPENDS\n"
"        COMMAND"
msgstr ""

#: ../../../command/add_custom_command.rst:43
msgid "The options are:"
msgstr ""

#: ../../../command/add_custom_command.rst:45
msgid "``APPEND``"
msgstr ""

#: ../../../command/add_custom_command.rst:46
msgid ""
"Append the ``COMMAND`` and ``DEPENDS`` option values to the custom command "
"for the first output specified.  There must have already been a previous "
"call to this command with the same output."
msgstr ""

#: ../../../command/add_custom_command.rst:50
msgid ""
"If the previous call specified the output via a generator expression, the "
"output specified by the current call must match in at least one "
"configuration after evaluating generator expressions.  In this case, the "
"appended commands and dependencies apply to all configurations."
msgstr ""

#: ../../../command/add_custom_command.rst:55
msgid ""
"The ``COMMENT``, ``MAIN_DEPENDENCY``, and ``WORKING_DIRECTORY`` options are "
"currently ignored when APPEND is given, but may be used in the future."
msgstr ""

#: ../../../command/add_custom_command.rst:59
msgid "``BYPRODUCTS``"
msgstr ""

#: ../../../command/add_custom_command.rst:62
msgid ""
"Specify the files the command is expected to produce but whose modification "
"time may or may not be newer than the dependencies. If a byproduct name is a "
"relative path it will be interpreted relative to the build tree directory "
"corresponding to the current source directory. Each byproduct file will be "
"marked with the :prop_sf:`GENERATED` source file property automatically."
msgstr ""

#: ../../../command/add_custom_command.rst:70
msgid ""
"Explicit specification of byproducts is supported by the :generator:`Ninja` "
"generator to tell the ``ninja`` build tool how to regenerate byproducts when "
"they are missing.  It is also useful when other build rules (e.g. custom "
"commands) depend on the byproducts.  Ninja requires a build rule for any "
"generated file on which another rule depends even if there are order-only "
"dependencies to ensure the byproducts will be available before their "
"dependents build."
msgstr ""

#: ../../../command/add_custom_command.rst:79
msgid ""
"The :ref:`Makefile Generators` will remove ``BYPRODUCTS`` and other :prop_sf:"
"`GENERATED` files during ``make clean``."
msgstr ""

#: ../../../command/add_custom_command.rst:82
msgid ""
"Arguments to ``BYPRODUCTS`` may use a restricted set of :manual:`generator "
"expressions <cmake-generator-expressions(7)>`. :ref:`Target-dependent "
"expressions <Target-Dependent Queries>` are not permitted."
msgstr ""

#: ../../../command/add_custom_command.rst:88
msgid "``COMMAND``"
msgstr ""

#: ../../../command/add_custom_command.rst:89
msgid ""
"Specify the command-line(s) to execute at build time. If more than one "
"``COMMAND`` is specified they will be executed in order, but *not* "
"necessarily composed into a stateful shell or batch script. (To run a full "
"script, use the :command:`configure_file` command or the :command:"
"`file(GENERATE)` command to create it, and then specify a ``COMMAND`` to "
"launch it.) The optional ``ARGS`` argument is for backward compatibility and "
"will be ignored."
msgstr ""

#: ../../../command/add_custom_command.rst:98
msgid ""
"If ``COMMAND`` specifies an executable target name (created by the :command:"
"`add_executable` command), it will automatically be replaced by the location "
"of the executable created at build time if either of the following is true:"
msgstr ""

#: ../../../command/add_custom_command.rst:103
msgid ""
"The target is not being cross-compiled (i.e. the :variable:"
"`CMAKE_CROSSCOMPILING` variable is not set to true)."
msgstr ""

#: ../../../command/add_custom_command.rst:105
msgid ""
"The target is being cross-compiled and an emulator is provided (i.e. its :"
"prop_tgt:`CROSSCOMPILING_EMULATOR` target property is set). In this case, "
"the contents of :prop_tgt:`CROSSCOMPILING_EMULATOR` will be prepended to the "
"command before the location of the target executable."
msgstr ""

#: ../../../command/add_custom_command.rst:111
msgid ""
"If neither of the above conditions are met, it is assumed that the command "
"name is a program to be found on the ``PATH`` at build time."
msgstr ""

#: ../../../command/add_custom_command.rst:114
msgid ""
"Arguments to ``COMMAND`` may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. Use the :genex:`TARGET_FILE` generator "
"expression to refer to the location of a target later in the command line (i."
"e. as a command argument rather than as the command to execute)."
msgstr ""

#: ../../../command/add_custom_command.rst:120
msgid ""
"Whenever one of the following target based generator expressions are used as "
"a command to execute or is mentioned in a command argument, a target-level "
"dependency will be added automatically so that the mentioned target will be "
"built before any target using this custom command (see policy :policy:"
"`CMP0112`)."
msgstr ""

#: ../../../command/add_custom_command.rst:126
msgid "``TARGET_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:127
msgid "``TARGET_LINKER_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:128
msgid "``TARGET_SONAME_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:129
msgid "``TARGET_PDB_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:131
msgid ""
"This target-level dependency does NOT add a file-level dependency that would "
"cause the custom command to re-run whenever the executable is recompiled. "
"List target names with the ``DEPENDS`` option to add such file-level "
"dependencies."
msgstr ""

#: ../../../command/add_custom_command.rst:137
msgid "``COMMENT``"
msgstr ""

#: ../../../command/add_custom_command.rst:138
msgid ""
"Display the given message before the commands are executed at build time."
msgstr ""

#: ../../../command/add_custom_command.rst:141
msgid "``DEPENDS``"
msgstr ""

#: ../../../command/add_custom_command.rst:142
msgid ""
"Specify files on which the command depends.  Each argument is converted to a "
"dependency as follows:"
msgstr ""

#: ../../../command/add_custom_command.rst:145
msgid ""
"If the argument is the name of a target (created by the :command:"
"`add_custom_target`, :command:`add_executable`, or :command:`add_library` "
"command) a target-level dependency is created to make sure the target is "
"built before any target using this custom command.  Additionally, if the "
"target is an executable or library, a file-level dependency is created to "
"cause the custom command to re-run whenever the target is recompiled."
msgstr ""

#: ../../../command/add_custom_command.rst:154
msgid ""
"If the argument is an absolute path, a file-level dependency is created on "
"that path."
msgstr ""

#: ../../../command/add_custom_command.rst:157
msgid ""
"If the argument is the name of a source file that has been added to a target "
"or on which a source file property has been set, a file-level dependency is "
"created on that source file."
msgstr ""

#: ../../../command/add_custom_command.rst:161
msgid ""
"If the argument is a relative path and it exists in the current source "
"directory, a file-level dependency is created on that file in the current "
"source directory."
msgstr ""

#: ../../../command/add_custom_command.rst:165
msgid ""
"Otherwise, a file-level dependency is created on that path relative to the "
"current binary directory."
msgstr ""

#: ../../../command/add_custom_command.rst:168
msgid ""
"If any dependency is an ``OUTPUT`` of another custom command in the same "
"directory (``CMakeLists.txt`` file), CMake automatically brings the other "
"custom command into the target in which this command is built."
msgstr ""

#: ../../../command/add_custom_command.rst:172
msgid ""
"A target-level dependency is added if any dependency is listed as "
"``BYPRODUCTS`` of a target or any of its build events in the same directory "
"to ensure the byproducts will be available."
msgstr ""

#: ../../../command/add_custom_command.rst:177
msgid ""
"If ``DEPENDS`` is not specified, the command will run whenever the "
"``OUTPUT`` is missing; if the command does not actually create the "
"``OUTPUT``, the rule will always run."
msgstr ""

#: ../../../command/add_custom_command.rst:181
msgid ""
"Arguments to ``DEPENDS`` may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""

#: ../../../command/add_custom_command.rst:185
msgid "``COMMAND_EXPAND_LISTS``"
msgstr ""

#: ../../../command/add_custom_command.rst:188
msgid ""
"Lists in ``COMMAND`` arguments will be expanded, including those created "
"with :manual:`generator expressions <cmake-generator-expressions(7)>`, "
"allowing ``COMMAND`` arguments such as ``${CC} \"-I$<JOIN:$<TARGET_PROPERTY:"
"foo,INCLUDE_DIRECTORIES>,;-I>\" foo.cc`` to be properly expanded."
msgstr ""

#: ../../../command/add_custom_command.rst:195
msgid "``IMPLICIT_DEPENDS``"
msgstr ""

#: ../../../command/add_custom_command.rst:196
msgid ""
"Request scanning of implicit dependencies of an input file. The language "
"given specifies the programming language whose corresponding dependency "
"scanner should be used. Currently only ``C`` and ``CXX`` language scanners "
"are supported. The language has to be specified for every file in the "
"``IMPLICIT_DEPENDS`` list.  Dependencies discovered from the scanning are "
"added to those of the custom command at build time. Note that the "
"``IMPLICIT_DEPENDS`` option is currently supported only for Makefile "
"generators and will be ignored by other generators."
msgstr ""

#: ../../../command/add_custom_command.rst:208
msgid "This option cannot be specified at the same time as ``DEPFILE`` option."
msgstr ""

#: ../../../command/add_custom_command.rst:210
msgid "``JOB_POOL``"
msgstr ""

#: ../../../command/add_custom_command.rst:213
msgid ""
"Specify a :prop_gbl:`pool <JOB_POOLS>` for the :generator:`Ninja` generator. "
"Incompatible with ``USES_TERMINAL``, which implies the ``console`` pool. "
"Using a pool that is not defined by :prop_gbl:`JOB_POOLS` causes an error by "
"ninja at build time."
msgstr ""

#: ../../../command/add_custom_command.rst:219
msgid "``MAIN_DEPENDENCY``"
msgstr ""

#: ../../../command/add_custom_command.rst:220
msgid ""
"Specify the primary input source file to the command.  This is treated just "
"like any value given to the ``DEPENDS`` option but also suggests to Visual "
"Studio generators where to hang the custom command. Each source file may "
"have at most one command specifying it as its main dependency. A compile "
"command (i.e. for a library or an executable) counts as an implicit main "
"dependency which gets silently overwritten by a custom command specification."
msgstr ""

#: ../../../command/add_custom_command.rst:228
msgid "``OUTPUT``"
msgstr ""

#: ../../../command/add_custom_command.rst:229
msgid ""
"Specify the output files the command is expected to produce. If an output "
"name is a relative path it will be interpreted relative to the build tree "
"directory corresponding to the current source directory. Each output file "
"will be marked with the :prop_sf:`GENERATED` source file property "
"automatically. If the output of the custom command is not actually created "
"as a file on disk it should be marked with the :prop_sf:`SYMBOLIC` source "
"file property."
msgstr ""

#: ../../../command/add_custom_command.rst:239
msgid ""
"Arguments to ``OUTPUT`` may use a restricted set of :manual:`generator "
"expressions <cmake-generator-expressions(7)>`. :ref:`Target-dependent "
"expressions <Target-Dependent Queries>` are not permitted."
msgstr ""

#: ../../../command/add_custom_command.rst:245
msgid "``USES_TERMINAL``"
msgstr ""

#: ../../../command/add_custom_command.rst:248
msgid ""
"The command will be given direct access to the terminal if possible. With "
"the :generator:`Ninja` generator, this places the command in the "
"``console`` :prop_gbl:`pool <JOB_POOLS>`."
msgstr ""

#: ../../../command/add_custom_command.rst:252
msgid "``VERBATIM``"
msgstr ""

#: ../../../command/add_custom_command.rst:253
msgid ""
"All arguments to the commands will be escaped properly for the build tool so "
"that the invoked command receives each argument unchanged.  Note that one "
"level of escapes is still used by the CMake language processor before "
"add_custom_command even sees the arguments.  Use of ``VERBATIM`` is "
"recommended as it enables correct behavior.  When ``VERBATIM`` is not given "
"the behavior is platform specific because there is no protection of tool-"
"specific special characters."
msgstr ""

#: ../../../command/add_custom_command.rst:262
msgid "``WORKING_DIRECTORY``"
msgstr ""

#: ../../../command/add_custom_command.rst:263
msgid ""
"Execute the command with the given current working directory. If it is a "
"relative path it will be interpreted relative to the build tree directory "
"corresponding to the current source directory."
msgstr ""

#: ../../../command/add_custom_command.rst:267
msgid ""
"Arguments to ``WORKING_DIRECTORY`` may use :manual:`generator expressions "
"<cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../command/add_custom_command.rst:271
msgid "``DEPFILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:274
msgid ""
"Specify a depfile which holds dependencies for the custom command. It is "
"usually emitted by the custom command itself.  This keyword may only be used "
"if the generator supports it, as detailed below."
msgstr ""

#: ../../../command/add_custom_command.rst:278
msgid ""
"The expected format, compatible with what is generated by ``gcc`` with the "
"option ``-M``, is independent of the generator or platform."
msgstr ""

#: ../../../command/add_custom_command.rst:281
msgid ""
"The formal syntax, as specified using `BNF <https://en.wikipedia.org/wiki/"
"Backus%E2%80%93Naur_form>`_ notation with the regular extensions, is the "
"following:"
msgstr ""

#: ../../../command/add_custom_command.rst:285
msgid "\\begin{small}"
msgstr ""

#: ../../../command/add_custom_command.rst:307
msgid "\\end{small}"
msgstr ""

#: ../../../command/add_custom_command.rst:313
msgid ""
"As part of ``pathname``, any slash and backslash is interpreted as a "
"directory separator."
msgstr ""

#: ../../../command/add_custom_command.rst:316
msgid ""
"The :generator:`Ninja` generator supports ``DEPFILE`` since the keyword was "
"first added."
msgstr ""

#: ../../../command/add_custom_command.rst:320
msgid ""
"Added the :generator:`Ninja Multi-Config` generator, which included support "
"for the ``DEPFILE`` keyword."
msgstr ""

#: ../../../command/add_custom_command.rst:324
msgid "Added support for :ref:`Makefile Generators`."
msgstr ""

#: ../../../command/add_custom_command.rst:329
msgid ""
"``DEPFILE`` cannot be specified at the same time as the ``IMPLICIT_DEPENDS`` "
"option for :ref:`Makefile Generators`."
msgstr ""

#: ../../../command/add_custom_command.rst:332
msgid ""
"Added support for :ref:`Visual Studio Generators` with VS 2012 and above, "
"and for the :generator:`Xcode` generator.  Support for :manual:`generator "
"expressions <cmake-generator-expressions(7)>` was also added."
msgstr ""

#: ../../../command/add_custom_command.rst:338
msgid ""
"Using ``DEPFILE`` with generators other than those listed above is an error."
msgstr ""

#: ../../../command/add_custom_command.rst:340
msgid ""
"If the ``DEPFILE`` argument is relative, it should be relative to :variable:"
"`CMAKE_CURRENT_BINARY_DIR`, and any relative paths inside the ``DEPFILE`` "
"should also be relative to :variable:`CMAKE_CURRENT_BINARY_DIR`. See policy :"
"policy:`CMP0116`, which is always ``NEW`` for :ref:`Makefile Generators`, :"
"ref:`Visual Studio Generators`, and the :generator:`Xcode` generator."
msgstr ""

#: ../../../command/add_custom_command.rst:348
msgid "Examples: Generating Files"
msgstr ""

#: ../../../command/add_custom_command.rst:350
msgid ""
"Custom commands may be used to generate source files. For example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:353
msgid ""
"add_custom_command(\n"
"  OUTPUT out.c\n"
"  COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"                   -o out.c\n"
"  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"  VERBATIM)\n"
"add_library(myLib out.c)"
msgstr ""

#: ../../../command/add_custom_command.rst:363
msgid ""
"adds a custom command to run ``someTool`` to generate ``out.c`` and then "
"compile the generated source as part of a library.  The generation rule will "
"re-run whenever ``in.txt`` changes."
msgstr ""

#: ../../../command/add_custom_command.rst:367
msgid ""
"One may use generator expressions to specify per-configuration outputs. For "
"example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:371
msgid ""
"add_custom_command(\n"
"  OUTPUT \"out-$<CONFIG>.c\"\n"
"  COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"                   -o \"out-$<CONFIG>.c\"\n"
"                   -c \"$<CONFIG>\"\n"
"  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"  VERBATIM)\n"
"add_library(myLib \"out-$<CONFIG>.c\")"
msgstr ""

#: ../../../command/add_custom_command.rst:382
msgid ""
"adds a custom command to run ``someTool`` to generate ``out-<config>.c``, "
"where ``<config>`` is the build configuration, and then compile the "
"generated source as part of a library."
msgstr ""

#: ../../../command/add_custom_command.rst:389
msgid "Build Events"
msgstr ""

#: ../../../command/add_custom_command.rst:391
msgid ""
"The second signature adds a custom command to a target such as a library or "
"executable.  This is useful for performing an operation before or after "
"building the target.  The command becomes part of the target and will only "
"execute when the target itself is built.  If the target is already built, "
"the command will not execute."
msgstr ""

#: ../../../command/add_custom_command.rst:397
msgid ""
"add_custom_command(TARGET <target>\n"
"                   PRE_BUILD | PRE_LINK | POST_BUILD\n"
"                   COMMAND command1 [ARGS] [args1...]\n"
"                   [COMMAND command2 [ARGS] [args2...] ...]\n"
"                   [BYPRODUCTS [files...]]\n"
"                   [WORKING_DIRECTORY dir]\n"
"                   [COMMENT comment]\n"
"                   [VERBATIM] [USES_TERMINAL]\n"
"                   [COMMAND_EXPAND_LISTS])"
msgstr ""

#: ../../../command/add_custom_command.rst:409
msgid ""
"This defines a new command that will be associated with building the "
"specified ``<target>``.  The ``<target>`` must be defined in the current "
"directory; targets defined in other directories may not be specified."
msgstr ""

#: ../../../command/add_custom_command.rst:413
msgid ""
"When the command will happen is determined by which of the following is "
"specified:"
msgstr ""

#: ../../../command/add_custom_command.rst:416
msgid "``PRE_BUILD``"
msgstr ""

#: ../../../command/add_custom_command.rst:417
msgid ""
"On :ref:`Visual Studio Generators`, run before any other rules are executed "
"within the target. On other generators, run just before ``PRE_LINK`` "
"commands."
msgstr ""

#: ../../../command/add_custom_command.rst:420
msgid "``PRE_LINK``"
msgstr ""

#: ../../../command/add_custom_command.rst:421
msgid ""
"Run after sources have been compiled but before linking the binary or "
"running the librarian or archiver tool of a static library. This is not "
"defined for targets created by the :command:`add_custom_target` command."
msgstr ""

#: ../../../command/add_custom_command.rst:425
msgid "``POST_BUILD``"
msgstr ""

#: ../../../command/add_custom_command.rst:426
msgid "Run after all other rules within the target have been executed."
msgstr ""

#: ../../../command/add_custom_command.rst:429
msgid ""
"Because generator expressions can be used in custom commands, it is possible "
"to define ``COMMAND`` lines or whole custom commands which evaluate to empty "
"strings for certain configurations. For **Visual Studio 2010 (and newer)** "
"generators these command lines or custom commands will be omitted for the "
"specific configuration and no \"empty-string-command\" will be added."
msgstr ""

#: ../../../command/add_custom_command.rst:436
msgid "This allows to add individual build events for every configuration."
msgstr ""

#: ../../../command/add_custom_command.rst:438
msgid "Support for target-dependent generator expressions."
msgstr ""

#: ../../../command/add_custom_command.rst:442
msgid "Examples: Build Events"
msgstr ""

#: ../../../command/add_custom_command.rst:444
msgid ""
"A ``POST_BUILD`` event may be used to post-process a binary after linking. "
"For example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:447
msgid ""
"add_executable(myExe myExe.c)\n"
"add_custom_command(\n"
"  TARGET myExe POST_BUILD\n"
"  COMMAND someHasher -i \"$<TARGET_FILE:myExe>\"\n"
"                     -o \"$<TARGET_FILE:myExe>.hash\"\n"
"  VERBATIM)"
msgstr ""

#: ../../../command/add_custom_command.rst:456
msgid ""
"will run ``someHasher`` to produce a ``.hash`` file next to the executable "
"after linking."
msgstr ""

#: ../../../command/add_custom_command.rst:459
msgid ""
"One may use generator expressions to specify per-configuration byproducts. "
"For example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:463
msgid ""
"add_library(myPlugin MODULE myPlugin.c)\n"
"add_custom_command(\n"
"  TARGET myPlugin POST_BUILD\n"
"  COMMAND someHasher -i \"$<TARGET_FILE:myPlugin>\"\n"
"                     --as-code \"myPlugin-hash-$<CONFIG>.c\"\n"
"  BYPRODUCTS \"myPlugin-hash-$<CONFIG>.c\"\n"
"  VERBATIM)\n"
"add_executable(myExe myExe.c \"myPlugin-hash-$<CONFIG>.c\")"
msgstr ""

#: ../../../command/add_custom_command.rst:474
msgid ""
"will run ``someHasher`` after linking ``myPlugin``, e.g. to produce a ``.c`` "
"file containing code to check the hash of ``myPlugin`` that the ``myExe`` "
"executable can use to verify it before loading."
msgstr ""

#: ../../../command/add_custom_command.rst:479
msgid "Ninja Multi-Config"
msgstr ""

#: ../../../command/add_custom_command.rst:483
msgid ""
"``add_custom_command`` supports the :generator:`Ninja Multi-Config` "
"generator's cross-config capabilities. See the generator documentation for "
"more information."
msgstr ""
