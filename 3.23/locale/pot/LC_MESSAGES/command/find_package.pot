# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.23\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/find_package.rst:2
msgid "find_package"
msgstr ""

#: ../../../command/find_package.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/find_package.rst:8
msgid ""
"Find a package (usually provided by something external to the project), and "
"load its package-specific details."
msgstr ""

#: ../../../command/find_package.rst:12
msgid "Search Modes"
msgstr ""

#: ../../../command/find_package.rst:14
msgid "The command has two very distinct ways of conducting the search:"
msgstr ""

#: ../../../command/find_package.rst:16
msgid "**Module mode**"
msgstr ""

#: ../../../command/find_package.rst:17
msgid ""
"In this mode, CMake searches for a file called ``Find<PackageName>.cmake``, "
"looking first in the locations listed in the :variable:`CMAKE_MODULE_PATH`, "
"then among the :ref:`Find Modules` provided by the CMake installation. If "
"the file is found, it is read and processed by CMake.  It is responsible for "
"finding the package, checking the version, and producing any needed "
"messages.  Some Find modules provide limited or no support for versioning; "
"check the Find module's documentation."
msgstr ""

#: ../../../command/find_package.rst:25
msgid ""
"The ``Find<PackageName>.cmake`` file is not typically provided by the "
"package itself.  Rather, it is normally provided by something external to "
"the package, such as the operating system, CMake itself, or even the project "
"from which the ``find_package()`` command was called.  Being externally "
"provided, :ref:`Find Modules` tend to be heuristic in nature and are "
"susceptible to becoming out-of-date.  They typically search for certain "
"libraries, files and other package artifacts."
msgstr ""

#: ../../../command/find_package.rst:33
msgid ""
"Module mode is only supported by the :ref:`basic command signature <Basic "
"Signature>`."
msgstr ""

#: ../../../command/find_package.rst:36
msgid "**Config mode**"
msgstr ""

#: ../../../command/find_package.rst:37
msgid ""
"In this mode, CMake searches for a file called ``<lowercasePackageName>-"
"config.cmake`` or ``<PackageName>Config.cmake``. It will also look for "
"``<lowercasePackageName>-config-version.cmake`` or "
"``<PackageName>ConfigVersion.cmake`` if version details were specified (see :"
"ref:`version selection` for an explanation of how these separate version "
"files are used)."
msgstr ""

#: ../../../command/find_package.rst:44
msgid ""
"In config mode, the command can be given a list of names to search for as "
"package names.  The locations where CMake searches for the config and "
"version files is considerably more complicated than for Module mode (see :"
"ref:`search procedure`)."
msgstr ""

#: ../../../command/find_package.rst:49
msgid ""
"The config and version files are typically installed as part of the package, "
"so they tend to be more reliable than Find modules.  They usually contain "
"direct knowledge of the package contents, so no searching or heuristics are "
"needed within the config or version files themselves."
msgstr ""

#: ../../../command/find_package.rst:54
msgid ""
"Config mode is supported by both the :ref:`basic <Basic Signature>` and :ref:"
"`full <Full Signature>` command signatures."
msgstr ""

#: ../../../command/find_package.rst:57
msgid ""
"The command arguments determine which of the above modes is used.  When the "
"`basic signature`_ is used, the command searches in Module mode first. If "
"the package is not found, the search falls back to Config mode. A user may "
"set the :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` variable to true to "
"reverse the priority and direct CMake to search using Config mode first "
"before falling back to Module mode.  The basic signature can also be forced "
"to use only Module mode with a ``MODULE`` keyword.  If the `full signature`_ "
"is used, the command only searches in Config mode."
msgstr ""

#: ../../../command/find_package.rst:66
msgid ""
"Where possible, user code should generally look for packages using the "
"`basic signature`_, since that allows the package to be found with either "
"mode. Project maintainers wishing to provide a config package should "
"understand the bigger picture, as explained in :ref:`Full Signature` and all "
"subsequent sections on this page."
msgstr ""

#: ../../../command/find_package.rst:75
msgid "Basic Signature"
msgstr ""

#: ../../../command/find_package.rst:77
msgid ""
"find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]\n"
"             [REQUIRED] [[COMPONENTS] [components...]]\n"
"             [OPTIONAL_COMPONENTS components...]\n"
"             [NO_POLICY_SCOPE])"
msgstr ""

#: ../../../command/find_package.rst:84
msgid ""
"The basic signature is supported by both Module and Config modes. The "
"``MODULE`` keyword implies that only Module mode can be used to find the "
"package, with no fallback to Config mode."
msgstr ""

#: ../../../command/find_package.rst:88
msgid ""
"Regardless of the mode used, a ``<PackageName>_FOUND`` variable will be set "
"to indicate whether the package was found.  When the package is found, "
"package-specific information may be provided through other variables and :"
"ref:`Imported Targets` documented by the package itself.  The ``QUIET`` "
"option disables informational messages, including those indicating that the "
"package cannot be found if it is not ``REQUIRED``.  The ``REQUIRED`` option "
"stops processing with an error message if the package cannot be found."
msgstr ""

#: ../../../command/find_package.rst:96
msgid ""
"A package-specific list of required components may be listed after the "
"``COMPONENTS`` keyword.  If any of these components are not able to be "
"satisfied, the package overall is considered to be not found.  If the "
"``REQUIRED`` option is also present, this is treated as a fatal error, "
"otherwise execution still continues.  As a form of shorthand, if the "
"``REQUIRED`` option is present, the ``COMPONENTS`` keyword can be omitted "
"and the required components can be listed directly after ``REQUIRED``."
msgstr ""

#: ../../../command/find_package.rst:104
msgid ""
"Additional optional components may be listed after ``OPTIONAL_COMPONENTS``.  "
"If these cannot be satisfied, the package overall can still be considered "
"found, as long as all required components are satisfied."
msgstr ""

#: ../../../command/find_package.rst:109
msgid ""
"The set of available components and their meaning are defined by the target "
"package.  Formally, it is up to the target package how to interpret the "
"component information given to it, but it should follow the expectations "
"stated above.  For calls where no components are specified, there is no "
"single expected behavior and target packages should clearly define what "
"occurs in such cases.  Common arrangements include assuming it should find "
"all components, no components or some well-defined subset of the available "
"components."
msgstr ""

#: ../../../command/find_package.rst:120
msgid ""
"The ``[version]`` argument requests a version with which the package found "
"should be compatible. There are two possible forms in which it may be "
"specified:"
msgstr ""

#: ../../../command/find_package.rst:124
msgid ""
"A single version with the format ``major[.minor[.patch[.tweak]]]``, where "
"each component is a numeric value."
msgstr ""

#: ../../../command/find_package.rst:126
msgid ""
"A version range with the format ``versionMin...[<]versionMax`` where "
"``versionMin`` and ``versionMax`` have the same format and constraints on "
"components being integers as the single version.  By default, both end "
"points are included.  By specifying ``<``, the upper end point will be "
"excluded. Version ranges are only supported with CMake 3.19 or later."
msgstr ""

#: ../../../command/find_package.rst:132
msgid ""
"The ``EXACT`` option requests that the version be matched exactly. This "
"option is incompatible with the specification of a version range."
msgstr ""

#: ../../../command/find_package.rst:135
msgid ""
"If no ``[version]`` and/or component list is given to a recursive invocation "
"inside a find-module, the corresponding arguments are forwarded "
"automatically from the outer call (including the ``EXACT`` flag for "
"``[version]``).  Version support is currently provided only on a package-by-"
"package basis (see the `Version Selection`_ section below). When a version "
"range is specified but the package is only designed to expect a single "
"version, the package will ignore the upper end point of the range and only "
"take the single version at the lower end of the range into account."
msgstr ""

#: ../../../command/find_package.rst:144
msgid ""
"See the :command:`cmake_policy` command documentation for discussion of the "
"``NO_POLICY_SCOPE`` option."
msgstr ""

#: ../../../command/find_package.rst:150
msgid "Full Signature"
msgstr ""

#: ../../../command/find_package.rst:152
msgid ""
"find_package(<PackageName> [version] [EXACT] [QUIET]\n"
"             [REQUIRED] [[COMPONENTS] [components...]]\n"
"             [OPTIONAL_COMPONENTS components...]\n"
"             [CONFIG|NO_MODULE]\n"
"             [NO_POLICY_SCOPE]\n"
"             [NAMES name1 [name2 ...]]\n"
"             [CONFIGS config1 [config2 ...]]\n"
"             [HINTS path1 [path2 ... ]]\n"
"             [PATHS path1 [path2 ... ]]\n"
"             [PATH_SUFFIXES suffix1 [suffix2 ...]]\n"
"             [NO_DEFAULT_PATH]\n"
"             [NO_PACKAGE_ROOT_PATH]\n"
"             [NO_CMAKE_PATH]\n"
"             [NO_CMAKE_ENVIRONMENT_PATH]\n"
"             [NO_SYSTEM_ENVIRONMENT_PATH]\n"
"             [NO_CMAKE_PACKAGE_REGISTRY]\n"
"             [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing.\n"
"             [NO_CMAKE_SYSTEM_PATH]\n"
"             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]\n"
"             [CMAKE_FIND_ROOT_PATH_BOTH |\n"
"              ONLY_CMAKE_FIND_ROOT_PATH |\n"
"              NO_CMAKE_FIND_ROOT_PATH])"
msgstr ""

#: ../../../command/find_package.rst:177
msgid ""
"The ``CONFIG`` option, the synonymous ``NO_MODULE`` option, or the use of "
"options not specified in the `basic signature`_ all enforce pure Config "
"mode.  In pure Config mode, the command skips Module mode search and "
"proceeds at once with Config mode search."
msgstr ""

#: ../../../command/find_package.rst:182
msgid ""
"Config mode search attempts to locate a configuration file provided by the "
"package to be found.  A cache entry called ``<PackageName>_DIR`` is created "
"to hold the directory containing the file.  By default the command searches "
"for a package with the name ``<PackageName>``.  If the ``NAMES`` option is "
"given the names following it are used instead of ``<PackageName>``. The "
"command searches for a file called ``<PackageName>Config.cmake`` or "
"``<lowercasePackageName>-config.cmake`` for each name specified. A "
"replacement set of possible configuration file names may be given using the "
"``CONFIGS`` option.  The :ref:`search procedure` is specified below. Once "
"found, any :ref:`version constraint <version selection>` is checked, and if "
"satisfied, the configuration file is read and processed by CMake. Since the "
"file is provided by the package it already knows the location of package "
"contents.  The full path to the configuration file is stored in the cmake "
"variable ``<PackageName>_CONFIG``."
msgstr ""

#: ../../../command/find_package.rst:197
msgid ""
"All configuration files which have been considered by CMake while searching "
"for the package with an appropriate version are stored in the "
"``<PackageName>_CONSIDERED_CONFIGS`` variable, and the associated versions "
"in the ``<PackageName>_CONSIDERED_VERSIONS`` variable."
msgstr ""

#: ../../../command/find_package.rst:202
msgid ""
"If the package configuration file cannot be found CMake will generate an "
"error describing the problem unless the ``QUIET`` argument is specified.  If "
"``REQUIRED`` is specified and the package is not found a fatal error is "
"generated and the configure step stops executing.  If ``<PackageName>_DIR`` "
"has been set to a directory not containing a configuration file CMake will "
"ignore it and search from scratch."
msgstr ""

#: ../../../command/find_package.rst:209
msgid ""
"Package maintainers providing CMake package configuration files are "
"encouraged to name and install them such that the :ref:`search procedure` "
"outlined below will find them without requiring use of additional options."
msgstr ""

#: ../../../command/find_package.rst:216
msgid "Config Mode Search Procedure"
msgstr ""

#: ../../../command/find_package.rst:219
msgid ""
"When Config mode is used, this search procedure is applied regardless of "
"whether the :ref:`full <full signature>` or :ref:`basic <basic signature>` "
"signature was given."
msgstr ""

#: ../../../command/find_package.rst:223
msgid ""
"CMake constructs a set of possible installation prefixes for the package.  "
"Under each prefix several directories are searched for a configuration "
"file.  The tables below show the directories searched. Each entry is meant "
"for installation trees following Windows (``W``), UNIX (``U``), or Apple "
"(``A``) conventions::"
msgstr ""

#: ../../../command/find_package.rst:229
msgid ""
"<prefix>/                                                       (W)\n"
"<prefix>/(cmake|CMake)/                                         (W)\n"
"<prefix>/<name>*/                                               (W)\n"
"<prefix>/<name>*/(cmake|CMake)/                                 (W)\n"
"<prefix>/(lib/<arch>|lib*|share)/cmake/<name>*/                 (U)\n"
"<prefix>/(lib/<arch>|lib*|share)/<name>*/                       (U)\n"
"<prefix>/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake)/         (U)\n"
"<prefix>/<name>*/(lib/<arch>|lib*|share)/cmake/<name>*/         (W/U)\n"
"<prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/               (W/U)\n"
"<prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake)/ (W/U)"
msgstr ""

#: ../../../command/find_package.rst:240
msgid ""
"On systems supporting macOS :prop_tgt:`FRAMEWORK` and :prop_tgt:`BUNDLE`, "
"the following directories are searched for Frameworks or Application Bundles "
"containing a configuration file::"
msgstr ""

#: ../../../command/find_package.rst:244
msgid ""
"<prefix>/<name>.framework/Resources/                    (A)\n"
"<prefix>/<name>.framework/Resources/CMake/              (A)\n"
"<prefix>/<name>.framework/Versions/*/Resources/         (A)\n"
"<prefix>/<name>.framework/Versions/*/Resources/CMake/   (A)\n"
"<prefix>/<name>.app/Contents/Resources/                 (A)\n"
"<prefix>/<name>.app/Contents/Resources/CMake/           (A)"
msgstr ""

#: ../../../command/find_package.rst:251
msgid ""
"In all cases the ``<name>`` is treated as case-insensitive and corresponds "
"to any of the names specified (``<PackageName>`` or names given by "
"``NAMES``)."
msgstr ""

#: ../../../command/find_package.rst:254
msgid ""
"Paths with ``lib/<arch>`` are enabled if the :variable:"
"`CMAKE_LIBRARY_ARCHITECTURE` variable is set. ``lib*`` includes one or more "
"of the values ``lib64``, ``lib32``, ``libx32`` or ``lib`` (searched in that "
"order)."
msgstr ""

#: ../../../command/find_package.rst:259
msgid ""
"Paths with ``lib64`` are searched on 64 bit platforms if the :prop_gbl:"
"`FIND_LIBRARY_USE_LIB64_PATHS` property is set to ``TRUE``."
msgstr ""

#: ../../../command/find_package.rst:261
msgid ""
"Paths with ``lib32`` are searched on 32 bit platforms if the :prop_gbl:"
"`FIND_LIBRARY_USE_LIB32_PATHS` property is set to ``TRUE``."
msgstr ""

#: ../../../command/find_package.rst:263
msgid ""
"Paths with ``libx32`` are searched on platforms using the x32 ABI if the :"
"prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS` property is set to ``TRUE``."
msgstr ""

#: ../../../command/find_package.rst:265
msgid "The ``lib`` path is always searched."
msgstr ""

#: ../../../command/find_package.rst:267
msgid ""
"If ``PATH_SUFFIXES`` is specified, the suffixes are appended to each (``W``) "
"or (``U``) directory entry one-by-one."
msgstr ""

#: ../../../command/find_package.rst:270
msgid ""
"This set of directories is intended to work in cooperation with projects "
"that provide configuration files in their installation trees. Directories "
"above marked with (``W``) are intended for installations on Windows where "
"the prefix may point at the top of an application's installation directory.  "
"Those marked with (``U``) are intended for installations on UNIX platforms "
"where the prefix is shared by multiple packages.  This is merely a "
"convention, so all (``W``) and (``U``) directories are still searched on all "
"platforms.  Directories marked with (``A``) are intended for installations "
"on Apple platforms.  The :variable:`CMAKE_FIND_FRAMEWORK` and :variable:"
"`CMAKE_FIND_APPBUNDLE` variables determine the order of preference."
msgstr ""

#: ../../../command/find_package.rst:282
msgid ""
"The set of installation prefixes is constructed using the following steps.  "
"If ``NO_DEFAULT_PATH`` is specified all ``NO_*`` options are enabled."
msgstr ""

#: ../../../command/find_package.rst:286
msgid ""
"Search paths specified in the :variable:`<PackageName>_ROOT` CMake variable "
"and the :envvar:`<PackageName>_ROOT` environment variable, where "
"``<PackageName>`` is the package to be found. The package root variables are "
"maintained as a stack so if called from within a find module, root paths "
"from the parent's find module will also be searched after paths for the "
"current package. This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed "
"or by setting the :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` to ``FALSE``. "
"See policy :policy:`CMP0074`."
msgstr ""

#: ../../../command/find_package.rst:297
msgid ""
"Search paths specified in cmake-specific cache variables.  These are "
"intended to be used on the command line with a ``-DVAR=value``. The values "
"are interpreted as :ref:`semicolon-separated lists <CMake Language Lists>`. "
"This can be skipped if ``NO_CMAKE_PATH`` is passed or by setting the :"
"variable:`CMAKE_FIND_USE_CMAKE_PATH` to ``FALSE``:"
msgstr ""

#: ../../../command/find_package.rst:303
msgid ":variable:`CMAKE_PREFIX_PATH`"
msgstr ""

#: ../../../command/find_package.rst:304
msgid ":variable:`CMAKE_FRAMEWORK_PATH`"
msgstr ""

#: ../../../command/find_package.rst:305
msgid ":variable:`CMAKE_APPBUNDLE_PATH`"
msgstr ""

#: ../../../command/find_package.rst:307
msgid ""
"Search paths specified in cmake-specific environment variables. These are "
"intended to be set in the user's shell configuration, and therefore use the "
"host's native path separator (``;`` on Windows and ``:`` on UNIX). This can "
"be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed or by setting the :"
"variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` to ``FALSE``:"
msgstr ""

#: ../../../command/find_package.rst:314
msgid "``<PackageName>_DIR``"
msgstr ""

#: ../../../command/find_package.rst:315
msgid ":envvar:`CMAKE_PREFIX_PATH`"
msgstr ""

#: ../../../command/find_package.rst:316
msgid "``CMAKE_FRAMEWORK_PATH``"
msgstr ""

#: ../../../command/find_package.rst:317
msgid "``CMAKE_APPBUNDLE_PATH``"
msgstr ""

#: ../../../command/find_package.rst:319
msgid ""
"Search paths specified by the ``HINTS`` option.  These should be paths "
"computed by system introspection, such as a hint provided by the location of "
"another item already found.  Hard-coded guesses should be specified with the "
"``PATHS`` option."
msgstr ""

#: ../../../command/find_package.rst:324
msgid ""
"Search the standard system environment variables.  This can be skipped if "
"``NO_SYSTEM_ENVIRONMENT_PATH`` is passed  or by setting the :variable:"
"`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` to ``FALSE``. Path entries ending "
"in ``/bin`` or ``/sbin`` are automatically converted to their parent "
"directories:"
msgstr ""

#: ../../../command/find_package.rst:330
msgid "``PATH``"
msgstr ""

#: ../../../command/find_package.rst:332
msgid ""
"Search paths stored in the CMake :ref:`User Package Registry`. This can be "
"skipped if ``NO_CMAKE_PACKAGE_REGISTRY`` is passed or by setting the "
"variable :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` to ``FALSE`` or the "
"deprecated variable :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` to "
"``TRUE``."
msgstr ""

#: ../../../command/find_package.rst:338
msgid ""
"See the :manual:`cmake-packages(7)` manual for details on the user package "
"registry."
msgstr ""

#: ../../../command/find_package.rst:341
msgid ""
"Search cmake variables defined in the Platform files for the current "
"system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is passed or by "
"setting the :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` to ``FALSE``:"
msgstr ""

#: ../../../command/find_package.rst:346
msgid ":variable:`CMAKE_SYSTEM_PREFIX_PATH`"
msgstr ""

#: ../../../command/find_package.rst:347
msgid ":variable:`CMAKE_SYSTEM_FRAMEWORK_PATH`"
msgstr ""

#: ../../../command/find_package.rst:348
msgid ":variable:`CMAKE_SYSTEM_APPBUNDLE_PATH`"
msgstr ""

#: ../../../command/find_package.rst:350
msgid ""
"The platform paths that these variables contain are locations that typically "
"include installed software. An example being ``/usr/local`` for UNIX based "
"platforms."
msgstr ""

#: ../../../command/find_package.rst:354
msgid ""
"Search paths stored in the CMake :ref:`System Package Registry`. This can be "
"skipped if ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` is passed or by setting the :"
"variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variable to ``FALSE`` or "
"the deprecated variable :variable:"
"`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` to ``TRUE``."
msgstr ""

#: ../../../command/find_package.rst:360
msgid ""
"See the :manual:`cmake-packages(7)` manual for details on the system package "
"registry."
msgstr ""

#: ../../../command/find_package.rst:363
msgid ""
"Search paths specified by the ``PATHS`` option.  These are typically hard-"
"coded guesses."
msgstr ""

#: ../../../command/find_package.rst:366
msgid ""
"The :variable:`CMAKE_IGNORE_PATH`, :variable:`CMAKE_IGNORE_PREFIX_PATH`, :"
"variable:`CMAKE_SYSTEM_IGNORE_PATH` and :variable:"
"`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables can also cause some of the above "
"locations to be ignored."
msgstr ""

#: ../../../command/find_package.rst:371
msgid ""
"Added the ``CMAKE_FIND_USE_<CATEGORY>`` variables to globally disable "
"various search locations."
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:1
msgid ""
"The CMake variable :variable:`CMAKE_FIND_ROOT_PATH` specifies one or more "
"directories to be prepended to all other search directories.  This "
"effectively \"re-roots\" the entire search under given locations. Paths "
"which are descendants of the :variable:`CMAKE_STAGING_PREFIX` are excluded "
"from this re-rooting, because that variable is always a path on the host "
"system. By default the :variable:`CMAKE_FIND_ROOT_PATH` is empty."
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:8
msgid ""
"The :variable:`CMAKE_SYSROOT` variable can also be used to specify exactly "
"one directory to use as a prefix.  Setting :variable:`CMAKE_SYSROOT` also "
"has other effects.  See the documentation for that variable for more."
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:12
msgid ""
"These variables are especially useful when cross-compiling to point to the "
"root directory of the target environment and CMake will search there too.  "
"By default at first the directories listed in :variable:"
"`CMAKE_FIND_ROOT_PATH` are searched, then the :variable:`CMAKE_SYSROOT` "
"directory is searched, and then the non-rooted directories will be "
"searched.  The default behavior can be adjusted by setting |"
"CMAKE_FIND_ROOT_PATH_MODE_XXX|.  This behavior can be manually overridden on "
"a per-call basis using options:"
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:21
msgid "``CMAKE_FIND_ROOT_PATH_BOTH``"
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:22
msgid "Search in the order described above."
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:24
msgid "``NO_CMAKE_FIND_ROOT_PATH``"
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:25
msgid "Do not use the :variable:`CMAKE_FIND_ROOT_PATH` variable."
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:27
msgid "``ONLY_CMAKE_FIND_ROOT_PATH``"
msgstr ""

#: ../../../command/FIND_XXX_ROOT.txt:28
msgid ""
"Search only the re-rooted directories and directories below :variable:"
"`CMAKE_STAGING_PREFIX`."
msgstr ""

#: ../../../command/FIND_XXX_ORDER.txt:1
msgid ""
"The default search order is designed to be most-specific to least-specific "
"for common use cases. Projects may override the order by simply calling the "
"command multiple times and using the ``NO_*`` options:"
msgstr ""

#: ../../../command/FIND_XXX_ORDER.txt:424
msgid ""
"|FIND_XXX| (|FIND_ARGS_XXX| PATHS paths... NO_DEFAULT_PATH)\n"
"|FIND_XXX| (|FIND_ARGS_XXX|)"
msgstr ""

#: ../../../command/FIND_XXX_ORDER.txt:11
msgid ""
"Once one of the calls succeeds the result variable will be set and stored in "
"the cache so that no call will search again."
msgstr ""

#: ../../../command/find_package.rst:383
msgid ""
"By default the value stored in the result variable will be the path at which "
"the file is found.  The :variable:`CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS` "
"variable may be set to ``TRUE`` before calling ``find_package`` in order to "
"resolve symbolic links and store the real path to the file."
msgstr ""

#: ../../../command/find_package.rst:388
msgid ""
"Every non-REQUIRED ``find_package`` call can be disabled or made REQUIRED:"
msgstr ""

#: ../../../command/find_package.rst:390
msgid ""
"Setting the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` variable to "
"``TRUE`` disables the package."
msgstr ""

#: ../../../command/find_package.rst:393
msgid ""
"Setting the :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` variable to "
"``TRUE`` makes the package REQUIRED."
msgstr ""

#: ../../../command/find_package.rst:396
msgid "Setting both variables to ``TRUE`` simultaneously is an error."
msgstr ""

#: ../../../command/find_package.rst:401
msgid "Config Mode Version Selection"
msgstr ""

#: ../../../command/find_package.rst:404
msgid ""
"When Config mode is used, this version selection process is applied "
"regardless of whether the :ref:`full <full signature>` or :ref:`basic <basic "
"signature>` signature was given."
msgstr ""

#: ../../../command/find_package.rst:408
msgid ""
"When the ``[version]`` argument is given, Config mode will only find a "
"version of the package that claims compatibility with the requested version "
"(see :ref:`format specification <FIND_PACKAGE_VERSION_FORMAT>`). If the "
"``EXACT`` option is given, only a version of the package claiming an exact "
"match of the requested version may be found.  CMake does not establish any "
"convention for the meaning of version numbers.  Package version numbers are "
"checked by \"version\" files provided by the packages themselves.  For a "
"candidate package configuration file ``<config-file>.cmake`` the "
"corresponding version file is located next to it and named either ``<config-"
"file>-version.cmake`` or ``<config-file>Version.cmake``.  If no such version "
"file is available then the configuration file is assumed to not be "
"compatible with any requested version.  A basic version file containing "
"generic version matching code can be created using the :module:"
"`CMakePackageConfigHelpers` module.  When a version file is found it is "
"loaded to check the requested version number.  The version file is loaded in "
"a nested scope in which the following variables have been defined:"
msgstr ""

#: ../../../command/find_package.rst:427
msgid "``PACKAGE_FIND_NAME``"
msgstr ""

#: ../../../command/find_package.rst:428
msgid "The ``<PackageName>``"
msgstr ""

#: ../../../command/find_package.rst:429
msgid "``PACKAGE_FIND_VERSION``"
msgstr ""

#: ../../../command/find_package.rst:430 ../../../command/find_package.rst:551
msgid "Full requested version string"
msgstr ""

#: ../../../command/find_package.rst:431
msgid "``PACKAGE_FIND_VERSION_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:432 ../../../command/find_package.rst:553
msgid "Major version if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:433
msgid "``PACKAGE_FIND_VERSION_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:434 ../../../command/find_package.rst:555
msgid "Minor version if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:435
msgid "``PACKAGE_FIND_VERSION_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:436 ../../../command/find_package.rst:557
msgid "Patch version if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:437
msgid "``PACKAGE_FIND_VERSION_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:438 ../../../command/find_package.rst:559
msgid "Tweak version if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:439
msgid "``PACKAGE_FIND_VERSION_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:440 ../../../command/find_package.rst:517
#: ../../../command/find_package.rst:561
msgid "Number of version components, 0 to 4"
msgstr ""

#: ../../../command/find_package.rst:442 ../../../command/find_package.rst:570
msgid ""
"When a version range is specified, the above version variables will hold "
"values based on the lower end of the version range.  This is to preserve "
"compatibility with packages that have not been implemented to expect version "
"ranges.  In addition, the version range will be described by the following "
"variables:"
msgstr ""

#: ../../../command/find_package.rst:448
msgid "``PACKAGE_FIND_VERSION_RANGE``"
msgstr ""

#: ../../../command/find_package.rst:449 ../../../command/find_package.rst:577
msgid "Full requested version range string"
msgstr ""

#: ../../../command/find_package.rst:450
msgid "``PACKAGE_FIND_VERSION_RANGE_MIN``"
msgstr ""

#: ../../../command/find_package.rst:451
msgid ""
"This specifies whether the lower end point of the version range should be "
"included or excluded.  Currently, the only supported value for this variable "
"is ``INCLUDE``."
msgstr ""

#: ../../../command/find_package.rst:454
msgid "``PACKAGE_FIND_VERSION_RANGE_MAX``"
msgstr ""

#: ../../../command/find_package.rst:455
msgid ""
"This specifies whether the upper end point of the version range should be "
"included or excluded.  The supported values for this variable are "
"``INCLUDE`` and ``EXCLUDE``."
msgstr ""

#: ../../../command/find_package.rst:459
msgid "``PACKAGE_FIND_VERSION_MIN``"
msgstr ""

#: ../../../command/find_package.rst:460 ../../../command/find_package.rst:587
msgid "Full requested version string of the lower end point of the range"
msgstr ""

#: ../../../command/find_package.rst:461
msgid "``PACKAGE_FIND_VERSION_MIN_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:462 ../../../command/find_package.rst:589
msgid "Major version of the lower end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:463
msgid "``PACKAGE_FIND_VERSION_MIN_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:464 ../../../command/find_package.rst:591
msgid "Minor version of the lower end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:465
msgid "``PACKAGE_FIND_VERSION_MIN_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:466 ../../../command/find_package.rst:593
msgid "Patch version of the lower end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:467
msgid "``PACKAGE_FIND_VERSION_MIN_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:468 ../../../command/find_package.rst:595
msgid "Tweak version of the lower end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:469
msgid "``PACKAGE_FIND_VERSION_MIN_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:470 ../../../command/find_package.rst:597
msgid "Number of version components of the lower end point, 0 to 4"
msgstr ""

#: ../../../command/find_package.rst:472
msgid "``PACKAGE_FIND_VERSION_MAX``"
msgstr ""

#: ../../../command/find_package.rst:473 ../../../command/find_package.rst:600
msgid "Full requested version string of the upper end point of the range"
msgstr ""

#: ../../../command/find_package.rst:474
msgid "``PACKAGE_FIND_VERSION_MAX_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:475 ../../../command/find_package.rst:602
msgid "Major version of the upper end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:476
msgid "``PACKAGE_FIND_VERSION_MAX_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:477 ../../../command/find_package.rst:604
msgid "Minor version of the upper end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:478
msgid "``PACKAGE_FIND_VERSION_MAX_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:479 ../../../command/find_package.rst:606
msgid "Patch version of the upper end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:480
msgid "``PACKAGE_FIND_VERSION_MAX_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:481 ../../../command/find_package.rst:608
msgid "Tweak version of the upper end point if requested, else 0"
msgstr ""

#: ../../../command/find_package.rst:482
msgid "``PACKAGE_FIND_VERSION_MAX_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:483 ../../../command/find_package.rst:610
msgid "Number of version components of the upper end point, 0 to 4"
msgstr ""

#: ../../../command/find_package.rst:485
msgid ""
"Regardless of whether a single version or a version range is specified, the "
"variable ``PACKAGE_FIND_VERSION_COMPLETE`` will be defined and will hold the "
"full requested version string as specified."
msgstr ""

#: ../../../command/find_package.rst:489
msgid ""
"The version file checks whether it satisfies the requested version and sets "
"these variables:"
msgstr ""

#: ../../../command/find_package.rst:492
msgid "``PACKAGE_VERSION``"
msgstr ""

#: ../../../command/find_package.rst:493 ../../../command/find_package.rst:507
msgid "Full provided version string"
msgstr ""

#: ../../../command/find_package.rst:494
msgid "``PACKAGE_VERSION_EXACT``"
msgstr ""

#: ../../../command/find_package.rst:495
msgid "True if version is exact match"
msgstr ""

#: ../../../command/find_package.rst:496
msgid "``PACKAGE_VERSION_COMPATIBLE``"
msgstr ""

#: ../../../command/find_package.rst:497
msgid "True if version is compatible"
msgstr ""

#: ../../../command/find_package.rst:498
msgid "``PACKAGE_VERSION_UNSUITABLE``"
msgstr ""

#: ../../../command/find_package.rst:499
msgid "True if unsuitable as any version"
msgstr ""

#: ../../../command/find_package.rst:501
msgid ""
"These variables are checked by the ``find_package`` command to determine "
"whether the configuration file provides an acceptable version.  They are not "
"available after the ``find_package`` call returns.  If the version is "
"acceptable the following variables are set:"
msgstr ""

#: ../../../command/find_package.rst:506
msgid "``<PackageName>_VERSION``"
msgstr ""

#: ../../../command/find_package.rst:508
msgid "``<PackageName>_VERSION_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:509
msgid "Major version if provided, else 0"
msgstr ""

#: ../../../command/find_package.rst:510
msgid "``<PackageName>_VERSION_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:511
msgid "Minor version if provided, else 0"
msgstr ""

#: ../../../command/find_package.rst:512
msgid "``<PackageName>_VERSION_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:513
msgid "Patch version if provided, else 0"
msgstr ""

#: ../../../command/find_package.rst:514
msgid "``<PackageName>_VERSION_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:515
msgid "Tweak version if provided, else 0"
msgstr ""

#: ../../../command/find_package.rst:516
msgid "``<PackageName>_VERSION_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:519
msgid ""
"and the corresponding package configuration file is loaded. When multiple "
"package configuration files are available whose version files claim "
"compatibility with the version requested it is unspecified which one is "
"chosen: unless the variable :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` is set "
"no attempt is made to choose a highest or closest version number."
msgstr ""

#: ../../../command/find_package.rst:525
msgid ""
"To control the order in which ``find_package`` checks for compatibility use "
"the two variables :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` and :variable:"
"`CMAKE_FIND_PACKAGE_SORT_DIRECTION`. For instance in order to select the "
"highest version one can set"
msgstr ""

#: ../../../command/find_package.rst:530
msgid ""
"SET(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)\n"
"SET(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)"
msgstr ""

#: ../../../command/find_package.rst:535
msgid "before calling ``find_package``."
msgstr ""

#: ../../../command/find_package.rst:538
msgid "Package File Interface Variables"
msgstr ""

#: ../../../command/find_package.rst:540
msgid ""
"When loading a find module or package configuration file ``find_package`` "
"defines variables to provide information about the call arguments (and "
"restores their original state before returning):"
msgstr ""

#: ../../../command/find_package.rst:544
msgid "``CMAKE_FIND_PACKAGE_NAME``"
msgstr ""

#: ../../../command/find_package.rst:545
msgid "The ``<PackageName>`` which is searched for"
msgstr ""

#: ../../../command/find_package.rst:546
msgid "``<PackageName>_FIND_REQUIRED``"
msgstr ""

#: ../../../command/find_package.rst:547
msgid "True if ``REQUIRED`` option was given"
msgstr ""

#: ../../../command/find_package.rst:548
msgid "``<PackageName>_FIND_QUIETLY``"
msgstr ""

#: ../../../command/find_package.rst:549
msgid "True if ``QUIET`` option was given"
msgstr ""

#: ../../../command/find_package.rst:550
msgid "``<PackageName>_FIND_VERSION``"
msgstr ""

#: ../../../command/find_package.rst:552
msgid "``<PackageName>_FIND_VERSION_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:554
msgid "``<PackageName>_FIND_VERSION_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:556
msgid "``<PackageName>_FIND_VERSION_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:558
msgid "``<PackageName>_FIND_VERSION_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:560
msgid "``<PackageName>_FIND_VERSION_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:562
msgid "``<PackageName>_FIND_VERSION_EXACT``"
msgstr ""

#: ../../../command/find_package.rst:563
msgid "True if ``EXACT`` option was given"
msgstr ""

#: ../../../command/find_package.rst:564
msgid "``<PackageName>_FIND_COMPONENTS``"
msgstr ""

#: ../../../command/find_package.rst:565
msgid "List of specified components (required and optional)"
msgstr ""

#: ../../../command/find_package.rst:566
msgid "``<PackageName>_FIND_REQUIRED_<c>``"
msgstr ""

#: ../../../command/find_package.rst:567
msgid ""
"True if component ``<c>`` is required, false if component ``<c>`` is optional"
msgstr ""

#: ../../../command/find_package.rst:576
msgid "``<PackageName>_FIND_VERSION_RANGE``"
msgstr ""

#: ../../../command/find_package.rst:578
msgid "``<PackageName>_FIND_VERSION_RANGE_MIN``"
msgstr ""

#: ../../../command/find_package.rst:579
msgid ""
"This specifies whether the lower end point of the version range is included "
"or excluded.  Currently, ``INCLUDE`` is the only supported value."
msgstr ""

#: ../../../command/find_package.rst:581
msgid "``<PackageName>_FIND_VERSION_RANGE_MAX``"
msgstr ""

#: ../../../command/find_package.rst:582
msgid ""
"This specifies whether the upper end point of the version range is included "
"or excluded.  The possible values for this variable are ``INCLUDE`` or "
"``EXCLUDE``."
msgstr ""

#: ../../../command/find_package.rst:586
msgid "``<PackageName>_FIND_VERSION_MIN``"
msgstr ""

#: ../../../command/find_package.rst:588
msgid "``<PackageName>_FIND_VERSION_MIN_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:590
msgid "``<PackageName>_FIND_VERSION_MIN_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:592
msgid "``<PackageName>_FIND_VERSION_MIN_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:594
msgid "``<PackageName>_FIND_VERSION_MIN_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:596
msgid "``<PackageName>_FIND_VERSION_MIN_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:599
msgid "``<PackageName>_FIND_VERSION_MAX``"
msgstr ""

#: ../../../command/find_package.rst:601
msgid "``<PackageName>_FIND_VERSION_MAX_MAJOR``"
msgstr ""

#: ../../../command/find_package.rst:603
msgid "``<PackageName>_FIND_VERSION_MAX_MINOR``"
msgstr ""

#: ../../../command/find_package.rst:605
msgid "``<PackageName>_FIND_VERSION_MAX_PATCH``"
msgstr ""

#: ../../../command/find_package.rst:607
msgid "``<PackageName>_FIND_VERSION_MAX_TWEAK``"
msgstr ""

#: ../../../command/find_package.rst:609
msgid "``<PackageName>_FIND_VERSION_MAX_COUNT``"
msgstr ""

#: ../../../command/find_package.rst:612
msgid ""
"Regardless of whether a single version or a version range is specified, the "
"variable ``<PackageName>_FIND_VERSION_COMPLETE`` will be defined and will "
"hold the full requested version string as specified."
msgstr ""

#: ../../../command/find_package.rst:616
msgid ""
"In Module mode the loaded find module is responsible to honor the request "
"detailed by these variables; see the find module for details. In Config mode "
"``find_package`` handles ``REQUIRED``, ``QUIET``, and ``[version]`` options "
"automatically but leaves it to the package configuration file to handle "
"components in a way that makes sense for the package.  The package "
"configuration file may set ``<PackageName>_FOUND`` to false to tell "
"``find_package`` that component requirements are not satisfied."
msgstr ""
