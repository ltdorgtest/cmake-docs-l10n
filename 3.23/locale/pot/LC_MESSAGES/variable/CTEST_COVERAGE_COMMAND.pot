# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.23\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:2
msgid "CTEST_COVERAGE_COMMAND"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:6
msgid ""
"Specify the CTest ``CoverageCommand`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:10
msgid "Cobertura"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:12
msgid ""
"Using `Cobertura`_ as the coverage generation within your multi-module Java "
"project can generate a series of XML files."
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:15
msgid ""
"The Cobertura Coverage parser expects to read the coverage data from a "
"single XML file which contains the coverage data for all modules. Cobertura "
"has a program with the ability to merge given ``cobertura.ser`` files and "
"then another program to generate a combined XML file from the previous "
"merged file.  For command line testing, this can be done by hand prior to "
"CTest looking for the coverage files. For script builds, set the "
"``CTEST_COVERAGE_COMMAND`` variable to point to a file which will perform "
"these same steps, such as a ``.sh`` or ``.bat`` file."
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:24
msgid "set(CTEST_COVERAGE_COMMAND .../run-coverage-and-consolidate.sh)"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:28
msgid ""
"where the ``run-coverage-and-consolidate.sh`` script is perhaps created by "
"the :command:`configure_file` command and might contain the following code:"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:31
msgid ""
"#!/usr/bin/env bash\n"
"CoberturaFiles=\"$(find \"/path/to/source\" -name \"cobertura.ser\")\"\n"
"SourceDirs=\"$(find \"/path/to/source\" -name \"java\" -type d)\"\n"
"cobertura-merge --datafile coberturamerge.ser $CoberturaFiles\n"
"cobertura-report --datafile coberturamerge.ser --destination . \\\n"
"                 --format xml $SourceDirs"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:40
msgid ""
"The script uses ``find`` to capture the paths to all of the ``cobertura."
"ser`` files found below the project's source directory.  It keeps the list "
"of files and supplies it as an argument to the ``cobertura-merge`` program. "
"The ``--datafile`` argument signifies where the result of the merge will be "
"kept."
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:45
msgid ""
"The combined ``coberturamerge.ser`` file is then used to generate the XML "
"report using the ``cobertura-report`` program.  The call to the cobertura-"
"report program requires some named arguments."
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:49
msgid "``--datafila``"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:50
msgid "path to the merged ``.ser`` file"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:52
msgid "``--destination``"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:53
msgid "path to put the output files(s)"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:55
msgid "``--format``"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:56
msgid "file format to write output in: xml or html"
msgstr ""

#: ../../../variable/CTEST_COVERAGE_COMMAND.rst:58
msgid ""
"The rest of the supplied arguments consist of the full paths to the ``/src/"
"main/java`` directories of each module within the source tree. These "
"directories are needed and should not be forgotten."
msgstr ""
