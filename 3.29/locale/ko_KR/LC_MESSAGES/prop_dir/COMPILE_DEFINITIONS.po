# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2024 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.29\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:2
msgid "COMPILE_DEFINITIONS"
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:4
msgid "Preprocessor definitions for compiling a directory's sources."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:6
msgid ""
"This property specifies the list of options given so far to the :command:"
"`add_compile_definitions` (or :command:`add_definitions`) command."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:9
msgid ""
"The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated "
"list of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``. "
"Function-style definitions are not supported.  CMake will automatically "
"escape the value correctly for the native build system (note that CMake "
"language syntax may require escapes to specify some values)."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:16
msgid ""
"This property will be initialized in each directory by its value in the "
"directory's parent."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:19
msgid ""
"CMake will automatically drop some definitions that are not supported by the "
"native build tool."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:22
msgid "Any leading ``-D`` on an item will be removed."
msgstr ""

#: ../../../include/COMPILE_DEFINITIONS_DISCLAIMER.txt:1
msgid ""
"Disclaimer: Most native build tools have poor support for escaping certain "
"values.  CMake has work-arounds for many cases but some values may just not "
"be possible to pass correctly.  If a value does not seem to be escaped "
"correctly, do not attempt to work-around the problem by adding escape "
"sequences to the value.  Your work-around may break in a future version of "
"CMake that has improved escape support.  Instead consider defining the macro "
"in a (configured) header file.  Then report the limitation.  Known "
"limitations include::"
msgstr ""

#: ../../../include/COMPILE_DEFINITIONS_DISCLAIMER.txt:10
msgid ""
"#          - broken almost everywhere\n"
";          - broken in VS IDE 7.0 and Borland Makefiles\n"
",          - broken in VS IDE\n"
"%          - broken in some cases in NMake\n"
"& |        - broken in some cases on MinGW\n"
"^ < > \\\"   - broken in most Make tools on Windows"
msgstr ""

#: ../../../include/COMPILE_DEFINITIONS_DISCLAIMER.txt:17
msgid ""
"CMake does not reject these values outright because they do work in some "
"cases.  Use with caution."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:27
msgid ""
"Contents of ``COMPILE_DEFINITIONS`` may use \"generator expressions\" with "
"the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""

#: ../../../prop_dir/COMPILE_DEFINITIONS.rst:32
msgid ""
"The corresponding :prop_dir:`COMPILE_DEFINITIONS_<CONFIG>` property may be "
"set to specify per-configuration definitions.  Generator expressions should "
"be preferred instead of setting the alternative property."
msgstr ""
