# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2016 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-language.7.rst:4
msgid "cmake-language(7)"
msgstr ""

#: ../../../manual/cmake-language.7.rst:11
msgid "Organization"
msgstr ""

#: ../../../manual/cmake-language.7.rst:13
msgid ""
"CMake input files are written in the \"CMake Language\" in source files "
"named ``CMakeLists.txt`` or ending in a ``.cmake`` file name extension."
msgstr ""

#: ../../../manual/cmake-language.7.rst:16
msgid "CMake Language source files in a project are organized into:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:18
msgid "`Directories`_ (``CMakeLists.txt``),"
msgstr ""

#: ../../../manual/cmake-language.7.rst:19
msgid "`Scripts`_ (``<script>.cmake``), and"
msgstr ""

#: ../../../manual/cmake-language.7.rst:20
msgid "`Modules`_ (``<module>.cmake``)."
msgstr ""

#: ../../../manual/cmake-language.7.rst:23
msgid "Directories"
msgstr ""

#: ../../../manual/cmake-language.7.rst:25
msgid ""
"When CMake processes a project source tree, the entry point is a source file "
"called ``CMakeLists.txt`` in the top-level source directory.  This file may "
"contain the entire build specification or use the :command:"
"`add_subdirectory` command to add subdirectories to the build.  Each "
"subdirectory added by the command must also contain a ``CMakeLists.txt`` "
"file as the entry point to that directory.  For each source directory whose "
"``CMakeLists.txt`` file is processed CMake generates a corresponding "
"directory in the build tree to act as the default working and output "
"directory."
msgstr ""

#: ../../../manual/cmake-language.7.rst:36
msgid "Scripts"
msgstr ""

#: ../../../manual/cmake-language.7.rst:38
msgid ""
"An individual ``<script>.cmake`` source file may be processed in *script "
"mode* by using the :manual:`cmake(1)` command-line tool with the ``-P`` "
"option.  Script mode simply runs the commands in the given CMake Language "
"source file and does not generate a build system.  It does not allow CMake "
"commands that define build targets or actions."
msgstr ""

#: ../../../manual/cmake-language.7.rst:46
msgid "Modules"
msgstr ""

#: ../../../manual/cmake-language.7.rst:48
msgid ""
"CMake Language code in either `Directories`_ or `Scripts`_ may use the :"
"command:`include` command to load a ``<module>.cmake`` source file in the "
"scope of the including context. See the :manual:`cmake-modules(7)` manual "
"page for documentation of modules included with the CMake distribution. "
"Project source trees may also provide their own modules and specify their "
"location(s) in the :variable:`CMAKE_MODULE_PATH` variable."
msgstr ""

#: ../../../manual/cmake-language.7.rst:58
msgid "Syntax"
msgstr ""

#: ../../../manual/cmake-language.7.rst:63
msgid "Encoding"
msgstr ""

#: ../../../manual/cmake-language.7.rst:65
msgid ""
"A CMake Language source file may be written in 7-bit ASCII text for maximum "
"portability across all supported platforms.  Newlines may be encoded as "
"either ``\\n`` or ``\\r\\n`` but will be converted to ``\\n`` as input files "
"are read."
msgstr ""

#: ../../../manual/cmake-language.7.rst:70
msgid ""
"Note that the implementation is 8-bit clean so source files may be encoded "
"as UTF-8 on platforms with system APIs supporting this encoding.  In "
"addition, CMake 3.2 and above support source files encoded in UTF-8 on "
"Windows (using UTF-16 to call system APIs). Furthermore, CMake 3.0 and above "
"allow a leading UTF-8 `Byte-Order Mark`_ in source files."
msgstr ""

#: ../../../manual/cmake-language.7.rst:80
msgid "Source Files"
msgstr ""

#: ../../../manual/cmake-language.7.rst:82
msgid ""
"A CMake Language source file consists of zero or more `Command Invocations`_ "
"separated by newlines and optionally spaces and `Comments`_:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:86
#: ../../../manual/cmake-language.7.rst:113
#: ../../../manual/cmake-language.7.rst:160
#: ../../../manual/cmake-language.7.rst:180
#: ../../../manual/cmake-language.7.rst:236
#: ../../../manual/cmake-language.7.rst:293
#: ../../../manual/cmake-language.7.rst:349
#: ../../../manual/cmake-language.7.rst:411
#: ../../../manual/cmake-language.7.rst:442
msgid "\\begin{small}"
msgstr ""

#: ../../../manual/cmake-language.7.rst:98
#: ../../../manual/cmake-language.7.rst:125
#: ../../../manual/cmake-language.7.rst:167
#: ../../../manual/cmake-language.7.rst:191
#: ../../../manual/cmake-language.7.rst:247
#: ../../../manual/cmake-language.7.rst:303
#: ../../../manual/cmake-language.7.rst:359
#: ../../../manual/cmake-language.7.rst:418
#: ../../../manual/cmake-language.7.rst:450
msgid "\\end{small}"
msgstr ""

#: ../../../manual/cmake-language.7.rst:102
msgid ""
"Note that any source file line not inside `Command Arguments`_ or a `Bracket "
"Comment`_ can end in a `Line Comment`_."
msgstr ""

#: ../../../manual/cmake-language.7.rst:108
msgid "Command Invocations"
msgstr ""

#: ../../../manual/cmake-language.7.rst:110
msgid ""
"A *command invocation* is a name followed by paren-enclosed arguments "
"separated by whitespace:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:129
#: ../../../manual/cmake-language.7.rst:209
#: ../../../manual/cmake-language.7.rst:256
#: ../../../manual/cmake-language.7.rst:315
#: ../../../manual/cmake-language.7.rst:422
#: ../../../manual/cmake-language.7.rst:454
msgid "For example:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:131
msgid "add_executable(hello world.c)"
msgstr ""

#: ../../../manual/cmake-language.7.rst:135
msgid ""
"Command names are case-insensitive. Nested unquoted parentheses in the "
"arguments must balance. Each ``(`` or ``)`` is given to the command "
"invocation as a literal `Unquoted Argument`_.  This may be used in calls to "
"the :command:`if` command to enclose conditions. For example:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:142
msgid "if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE"
msgstr ""

#: ../../../manual/cmake-language.7.rst:147
msgid ""
"CMake versions prior to 3.0 require command name identifiers to be at least "
"2 characters."
msgstr ""

#: ../../../manual/cmake-language.7.rst:150
msgid ""
"CMake versions prior to 2.8.12 silently accept an `Unquoted Argument`_ or a "
"`Quoted Argument`_ immediately following a `Quoted Argument`_ and not "
"separated by any whitespace.  For compatibility, CMake 2.8.12 and higher "
"accept such code but produce a warning."
msgstr ""

#: ../../../manual/cmake-language.7.rst:156
msgid "Command Arguments"
msgstr ""

#: ../../../manual/cmake-language.7.rst:158
msgid "There are three types of arguments within `Command Invocations`_:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:174
msgid "Bracket Argument"
msgstr ""

#: ../../../manual/cmake-language.7.rst:176
msgid ""
"A *bracket argument*, inspired by `Lua`_ long bracket syntax, encloses "
"content between opening and closing \"brackets\" of the same length:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:195
msgid ""
"An opening bracket of length *len >= 0* is written ``[`` followed by *len* "
"``=`` followed by ``[`` and the corresponding closing bracket is written "
"``]`` followed by *len* ``=`` followed by ``]``. Brackets do not nest.  A "
"unique length may always be chosen for the opening and closing brackets to "
"contain closing brackets of other lengths."
msgstr ""

#: ../../../manual/cmake-language.7.rst:202
msgid ""
"Bracket argument content consists of all text between the opening and "
"closing brackets, except that one newline immediately following the opening "
"bracket, if any, is ignored.  No evaluation of the enclosed content, such as "
"`Escape Sequences`_ or `Variable References`_, is performed.  A bracket "
"argument is always given to the command invocation as exactly one argument."
msgstr ""

#: ../../../manual/cmake-language.7.rst:211
msgid ""
"message([=[\n"
"This is the first line in a bracket argument with bracket length 1.\n"
"No \\-escape sequences or ${variable} references are evaluated.\n"
"This is always one argument even though it contains a ; character.\n"
"The text does not end on a closing bracket of length 0 like ]].\n"
"It does end in a closing bracket of length 1.\n"
"]=])"
msgstr ""

#: ../../../manual/cmake-language.7.rst:222
msgid ""
"CMake versions prior to 3.0 do not support bracket arguments. They interpret "
"the opening bracket as the start of an `Unquoted Argument`_."
msgstr ""

#: ../../../manual/cmake-language.7.rst:231
msgid "Quoted Argument"
msgstr ""

#: ../../../manual/cmake-language.7.rst:233
msgid ""
"A *quoted argument* encloses content between opening and closing double-"
"quote characters:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:251
msgid ""
"Quoted argument content consists of all text between opening and closing "
"quotes.  Both `Escape Sequences`_ and `Variable References`_ are evaluated.  "
"A quoted argument is always given to the command invocation as exactly one "
"argument."
msgstr ""

#: ../../../manual/cmake-language.7.rst:258
msgid ""
"message(\"This is a quoted argument containing multiple lines.\n"
"This is always one argument even though it contains a ; character.\n"
"Both \\\\-escape sequences and ${variable} references are evaluated.\n"
"The text does not end on an escaped double-quote like \\\".\n"
"It does end in an unescaped double quote.\n"
"\")"
msgstr ""

#: ../../../manual/cmake-language.7.rst:267
msgid ""
"The final ``\\`` on any line ending in an odd number of backslashes is "
"treated as a line continuation and ignored along with the immediately "
"following newline character.  For example:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:271
msgid ""
"message(\"\\\n"
"This is the first line of a quoted argument. \\\n"
"In fact it is the only line but since it is long \\\n"
"the source code uses line continuation.\\\n"
"\")"
msgstr ""

#: ../../../manual/cmake-language.7.rst:280
msgid ""
"CMake versions prior to 3.0 do not support continuation with ``\\``. They "
"report errors in quoted arguments containing lines ending in an odd number "
"of ``\\`` characters."
msgstr ""

#: ../../../manual/cmake-language.7.rst:287
msgid "Unquoted Argument"
msgstr ""

#: ../../../manual/cmake-language.7.rst:289
msgid ""
"An *unquoted argument* is not enclosed by any quoting syntax. It may not "
"contain any whitespace, ``(``, ``)``, ``#``, ``\"``, or ``\\`` except when "
"escaped by a backslash:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:307
msgid ""
"Unquoted argument content consists of all text in a contiguous block of "
"allowed or escaped characters.  Both `Escape Sequences`_ and `Variable "
"References`_ are evaluated.  The resulting value is divided in the same way "
"`Lists`_ divide into elements.  Each non-empty element is given to the "
"command invocation as an argument.  Therefore an unquoted argument may be "
"given to a command invocation as zero or more arguments."
msgstr ""

#: ../../../manual/cmake-language.7.rst:317
msgid ""
"foreach(arg\n"
"    NoSpace\n"
"    Escaped\\ Space\n"
"    This;Divides;Into;Five;Arguments\n"
"    Escaped\\;Semicolon\n"
"    )\n"
"  message(\"${arg}\")\n"
"endforeach()"
msgstr ""

#: ../../../manual/cmake-language.7.rst:329
msgid ""
"To support legacy CMake code, unquoted arguments may also contain double-"
"quoted strings (``\"...\"``, possibly enclosing horizontal whitespace), and "
"make-style variable references (``$(MAKEVAR)``). Unescaped double-quotes "
"must balance, may not appear at the beginning of an unquoted argument, and "
"are treated as part of the content.  For example, the unquoted arguments ``-"
"Da=\"b c\"``, ``-Da=$(v)``, and ``a\" \"b\"c\"d`` are each interpreted "
"literally."
msgstr ""

#: ../../../manual/cmake-language.7.rst:337
msgid ""
"The above \"unquoted_legacy\" production represents such arguments. We do "
"not recommend using legacy unquoted arguments in new code. Instead use a "
"`Quoted Argument`_ or a `Bracket Argument`_ to represent the content."
msgstr ""

#: ../../../manual/cmake-language.7.rst:345
msgid "Escape Sequences"
msgstr ""

#: ../../../manual/cmake-language.7.rst:347
msgid "An *escape sequence* is a ``\\`` followed by one character:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:363
msgid ""
"A ``\\`` followed by a non-alphanumeric character simply encodes the literal "
"character without interpreting it as syntax.  A ``\\t``, ``\\r``, or ``\\n`` "
"encodes a tab, carriage return, or newline character, respectively. A ``\\;"
"`` outside of any `Variable References`_  encodes itself but may be used in "
"an `Unquoted Argument`_ to encode the ``;`` without dividing the argument "
"value on it.  A ``\\;`` inside `Variable References`_ encodes the literal ``;"
"`` character.  (See also policy :policy:`CMP0053` documentation for "
"historical considerations.)"
msgstr ""

#: ../../../manual/cmake-language.7.rst:375
msgid "Variable References"
msgstr ""

#: ../../../manual/cmake-language.7.rst:377
msgid ""
"A *variable reference* has the form ``${variable_name}`` and is evaluated "
"inside a `Quoted Argument`_ or an `Unquoted Argument`_. A variable reference "
"is replaced by the value of the variable, or by the empty string if the "
"variable is not set. Variable references can nest and are evaluated from the "
"inside out, e.g. ``${outer_${inner_variable}_variable}``."
msgstr ""

#: ../../../manual/cmake-language.7.rst:384
msgid ""
"Literal variable references may consist of alphanumeric characters, the "
"characters ``/_.+-``, and `Escape Sequences`_.  Nested references may be "
"used to evaluate variables of any name.  (See also policy :policy:`CMP0053` "
"documentation for historical considerations.)"
msgstr ""

#: ../../../manual/cmake-language.7.rst:389
msgid ""
"The `Variables`_ section documents the scope of variable names and how their "
"values are set."
msgstr ""

#: ../../../manual/cmake-language.7.rst:392
msgid ""
"An *environment variable reference* has the form ``$ENV{VAR}`` and is "
"evaluated in the same contexts as a normal variable reference."
msgstr ""

#: ../../../manual/cmake-language.7.rst:396
msgid "Comments"
msgstr ""

#: ../../../manual/cmake-language.7.rst:398
msgid ""
"A comment starts with a ``#`` character that is not inside a `Bracket "
"Argument`_, `Quoted Argument`_, or escaped with ``\\`` as part of an "
"`Unquoted Argument`_.  There are two types of comments: a `Bracket Comment`_ "
"and a `Line Comment`_."
msgstr ""

#: ../../../manual/cmake-language.7.rst:406
msgid "Bracket Comment"
msgstr ""

#: ../../../manual/cmake-language.7.rst:408
msgid ""
"A ``#`` immediately followed by a `Bracket Argument`_ forms a *bracket "
"comment* consisting of the entire bracket enclosure:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:424
msgid ""
"#[[This is a bracket comment.\n"
"It runs until the close bracket.]]\n"
"message(\"First Argument\\n\" #[[Bracket Comment]] \"Second Argument\")"
msgstr ""

#: ../../../manual/cmake-language.7.rst:431
msgid ""
"CMake versions prior to 3.0 do not support bracket comments. They interpret "
"the opening ``#`` as the start of a `Line Comment`_."
msgstr ""

#: ../../../manual/cmake-language.7.rst:437
msgid "Line Comment"
msgstr ""

#: ../../../manual/cmake-language.7.rst:439
msgid ""
"A ``#`` not immediately followed by a `Bracket Argument`_ forms a *line "
"comment* that runs until the end of the line:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:456
msgid ""
"# This is a line comment.\n"
"message(\"First Argument\\n\" # This is a line comment :)\n"
"        \"Second Argument\") # This is a line comment."
msgstr ""

#: ../../../manual/cmake-language.7.rst:463
msgid "Control Structures"
msgstr ""

#: ../../../manual/cmake-language.7.rst:466
msgid "Conditional Blocks"
msgstr ""

#: ../../../manual/cmake-language.7.rst:468
msgid ""
"The :command:`if`/:command:`elseif`/:command:`else`/:command:`endif` "
"commands delimit code blocks to be executed conditionally."
msgstr ""

#: ../../../manual/cmake-language.7.rst:472
msgid "Loops"
msgstr ""

#: ../../../manual/cmake-language.7.rst:474
msgid ""
"The :command:`foreach`/:command:`endforeach` and :command:`while`/:command:"
"`endwhile` commands delimit code blocks to be executed in a loop.  Inside "
"such blocks the :command:`break` command may be used to terminate the loop "
"early whereas the :command:`continue` command may be used to start with the "
"next iteration immediately."
msgstr ""

#: ../../../manual/cmake-language.7.rst:482
msgid "Command Definitions"
msgstr ""

#: ../../../manual/cmake-language.7.rst:484
msgid ""
"The :command:`macro`/:command:`endmacro`, and :command:`function`/:command:"
"`endfunction` commands delimit code blocks to be recorded for later "
"invocation as commands."
msgstr ""

#: ../../../manual/cmake-language.7.rst:491
msgid "Variables"
msgstr ""

#: ../../../manual/cmake-language.7.rst:493
msgid ""
"Variables are the basic unit of storage in the CMake Language. Their values "
"are always of string type, though some commands may interpret the strings as "
"values of other types. The :command:`set` and :command:`unset` commands "
"explicitly set or unset a variable, but other commands have semantics that "
"modify variables as well. Variable names are case-sensitive and may consist "
"of almost any text, but we recommend sticking to names consisting only of "
"alphanumeric characters plus ``_`` and ``-``."
msgstr ""

#: ../../../manual/cmake-language.7.rst:503
msgid ""
"Variables have dynamic scope.  Each variable \"set\" or \"unset\" creates a "
"binding in the current scope:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:511
msgid "Function Scope"
msgstr ""

#: ../../../manual/cmake-language.7.rst:507
msgid ""
"`Command Definitions`_ created by the :command:`function` command create "
"commands that, when invoked, process the recorded commands in a new variable "
"binding scope.  A variable \"set\" or \"unset\" binds in this scope and is "
"visible for the current function and any nested calls, but not after the "
"function returns."
msgstr ""

#: ../../../manual/cmake-language.7.rst:522
msgid "Directory Scope"
msgstr ""

#: ../../../manual/cmake-language.7.rst:514
msgid ""
"Each of the `Directories`_ in a source tree has its own variable bindings.  "
"Before processing the ``CMakeLists.txt`` file for a directory, CMake copies "
"all variable bindings currently defined in the parent directory, if any, to "
"initialize the new directory scope.  CMake `Scripts`_, when processed with "
"``cmake -P``, bind variables in one \"directory\" scope."
msgstr ""

#: ../../../manual/cmake-language.7.rst:521
msgid ""
"A variable \"set\" or \"unset\" not inside a function call binds to the "
"current directory scope."
msgstr ""

#: ../../../manual/cmake-language.7.rst:529
msgid "Persistent Cache"
msgstr ""

#: ../../../manual/cmake-language.7.rst:525
msgid ""
"CMake stores a separate set of \"cache\" variables, or \"cache entries\", "
"whose values persist across multiple runs within a project build tree.  "
"Cache entries have an isolated binding scope modified only by explicit "
"request, such as by the ``CACHE`` option of the :command:`set` and :command:"
"`unset` commands."
msgstr ""

#: ../../../manual/cmake-language.7.rst:531
msgid ""
"When evaluating `Variable References`_, CMake first searches the function "
"call stack, if any, for a binding and then falls back to the binding in the "
"current directory scope, if any.  If a \"set\" binding is found, its value "
"is used.  If an \"unset\" binding is found, or no binding is found, CMake "
"then searches for a cache entry.  If a cache entry is found, its value is "
"used. Otherwise, the variable reference evaluates to an empty string."
msgstr ""

#: ../../../manual/cmake-language.7.rst:539
msgid ""
"The :manual:`cmake-variables(7)` manual documents many variables that are "
"provided by CMake or have meaning to CMake when set by project code."
msgstr ""

#: ../../../manual/cmake-language.7.rst:546
msgid "Lists"
msgstr ""

#: ../../../manual/cmake-language.7.rst:548
msgid ""
"Although all values in CMake are stored as strings, a string may be treated "
"as a list in certain contexts, such as during evaluation of an `Unquoted "
"Argument`_.  In such contexts, a string is divided into list elements by "
"splitting on ``;`` characters not following an unequal number of ``[`` and "
"``]`` characters and not immediately preceded by a ``\\``.  The sequence "
"``\\;`` does not divide a value but is replaced by ``;`` in the resulting "
"element."
msgstr ""

#: ../../../manual/cmake-language.7.rst:556
msgid ""
"A list of elements is represented as a string by concatenating the elements "
"separated by ``;``.  For example, the :command:`set` command stores multiple "
"values into the destination variable as a list:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:561
msgid "set(srcs a.c b.c c.c) # sets \"srcs\" to \"a.c;b.c;c.c\""
msgstr ""

#: ../../../manual/cmake-language.7.rst:565
msgid ""
"Lists are meant for simple use cases such as a list of source files and "
"should not be used for complex data processing tasks. Most commands that "
"construct lists do not escape ``;`` characters in list elements, thus "
"flattening nested lists:"
msgstr ""

#: ../../../manual/cmake-language.7.rst:570
msgid "set(x a \"b;c\") # sets \"x\" to \"a;b;c\", not \"a;b\\;c\""
msgstr ""
