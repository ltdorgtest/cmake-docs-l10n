# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2016 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/install.rst:2
msgid "install"
msgstr ""

#: ../../../command/install.rst:8
msgid "Specify rules to run at install time."
msgstr ""

#: ../../../command/install.rst:11
msgid "Introduction"
msgstr ""

#: ../../../command/install.rst:13
msgid ""
"This command generates installation rules for a project.  Rules specified by "
"calls to this command within a source directory are executed in order during "
"installation.  The order across directories is not defined."
msgstr ""

#: ../../../command/install.rst:18
msgid ""
"There are multiple signatures for this command.  Some of them define "
"installation options for files and targets.  Options common to multiple "
"signatures are covered here but they are valid only for signatures that "
"specify them.  The common options are:"
msgstr ""

#: ../../../command/install.rst:30
msgid "``DESTINATION``"
msgstr ""

#: ../../../command/install.rst:24
msgid ""
"Specify the directory on disk to which a file will be installed. If a full "
"path (with a leading slash or drive letter) is given it is used directly.  "
"If a relative path is given it is interpreted relative to the value of the :"
"variable:`CMAKE_INSTALL_PREFIX` variable. The prefix can be relocated at "
"install time using the ``DESTDIR`` mechanism explained in the :variable:"
"`CMAKE_INSTALL_PREFIX` variable documentation."
msgstr ""

#: ../../../command/install.rst:37
msgid "``PERMISSIONS``"
msgstr ""

#: ../../../command/install.rst:33
msgid ""
"Specify permissions for installed files.  Valid permissions are "
"``OWNER_READ``, ``OWNER_WRITE``, ``OWNER_EXECUTE``, ``GROUP_READ``, "
"``GROUP_WRITE``, ``GROUP_EXECUTE``, ``WORLD_READ``, ``WORLD_WRITE``, "
"``WORLD_EXECUTE``, ``SETUID``, and ``SETGID``.  Permissions that do not make "
"sense on certain platforms are ignored on those platforms."
msgstr ""

#: ../../../command/install.rst:41
msgid "``CONFIGURATIONS``"
msgstr ""

#: ../../../command/install.rst:40
msgid ""
"Specify a list of build configurations for which the install rule applies "
"(Debug, Release, etc.)."
msgstr ""

#: ../../../command/install.rst:51
msgid "``COMPONENT``"
msgstr ""

#: ../../../command/install.rst:44
msgid ""
"Specify an installation component name with which the install rule is "
"associated, such as \"runtime\" or \"development\".  During component-"
"specific installation only install rules associated with the given component "
"name will be executed.  During a full installation all components are "
"installed unless marked with ``EXCLUDE_FROM_ALL``. If ``COMPONENT`` is not "
"provided a default component \"Unspecified\" is created.  The default "
"component name may be controlled with the :variable:"
"`CMAKE_INSTALL_DEFAULT_COMPONENT_NAME` variable."
msgstr ""

#: ../../../command/install.rst:55
msgid "``EXCLUDE_FROM_ALL``"
msgstr ""

#: ../../../command/install.rst:54
msgid ""
"Specify that the file is excluded from a full installation and only "
"installed as part of a component-specific installation"
msgstr ""

#: ../../../command/install.rst:60
msgid "``RENAME``"
msgstr ""

#: ../../../command/install.rst:58
msgid ""
"Specify a name for an installed file that may be different from the original "
"file.  Renaming is allowed only when a single file is installed by the "
"command."
msgstr ""

#: ../../../command/install.rst:64
msgid "``OPTIONAL``"
msgstr ""

#: ../../../command/install.rst:63
msgid ""
"Specify that it is not an error if the file to be installed does not exist."
msgstr ""

#: ../../../command/install.rst:66
msgid ""
"Command signatures that install files may print messages during "
"installation.  Use the :variable:`CMAKE_INSTALL_MESSAGE` variable to control "
"which messages are printed."
msgstr ""

#: ../../../command/install.rst:71
msgid "Installing Targets"
msgstr ""

#: ../../../command/install.rst:75
msgid ""
"install(TARGETS targets... [EXPORT <export-name>]\n"
"        [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|\n"
"          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]\n"
"         [DESTINATION <dir>]\n"
"         [PERMISSIONS permissions...]\n"
"         [CONFIGURATIONS [Debug|Release|...]]\n"
"         [COMPONENT <component>]\n"
"         [OPTIONAL] [EXCLUDE_FROM_ALL]\n"
"         [NAMELINK_ONLY|NAMELINK_SKIP]\n"
"        ] [...]\n"
"        [INCLUDES DESTINATION [<dir> ...]]\n"
"        )"
msgstr ""

#: ../../../command/install.rst:88
msgid ""
"The ``TARGETS`` form specifies rules for installing targets from a project.  "
"There are five kinds of target files that may be installed: ``ARCHIVE``, "
"``LIBRARY``, ``RUNTIME``, ``FRAMEWORK``, and ``BUNDLE``. Executables are "
"treated as ``RUNTIME`` targets, except that those marked with the "
"``MACOSX_BUNDLE`` property are treated as ``BUNDLE`` targets on OS X.  "
"Static libraries are always treated as ``ARCHIVE`` targets.  Module "
"libraries are always treated as ``LIBRARY`` targets. For non-DLL platforms "
"shared libraries are treated as ``LIBRARY`` targets, except that those "
"marked with the ``FRAMEWORK`` property are treated as ``FRAMEWORK`` targets "
"on OS X.  For DLL platforms the DLL part of a shared library is treated as a "
"``RUNTIME`` target and the corresponding import library is treated as an "
"``ARCHIVE`` target. All Windows-based systems including Cygwin are DLL "
"platforms. The ``ARCHIVE``, ``LIBRARY``, ``RUNTIME``, and ``FRAMEWORK`` "
"arguments change the type of target to which the subsequent properties "
"apply. If none is given the installation properties apply to all target "
"types.  If only one is given then only targets of that type will be "
"installed (which can be used to install just a DLL or just an import "
"library)."
msgstr ""

#: ../../../command/install.rst:108
msgid ""
"The ``PRIVATE_HEADER``, ``PUBLIC_HEADER``, and ``RESOURCE`` arguments cause "
"subsequent properties to be applied to installing a ``FRAMEWORK`` shared "
"library target's associated files on non-Apple platforms.  Rules defined by "
"these arguments are ignored on Apple platforms because the associated files "
"are installed into the appropriate locations inside the framework folder.  "
"See documentation of the :prop_tgt:`PRIVATE_HEADER`, :prop_tgt:"
"`PUBLIC_HEADER`, and :prop_tgt:`RESOURCE` target properties for details."
msgstr ""

#: ../../../command/install.rst:117
msgid ""
"Either ``NAMELINK_ONLY`` or ``NAMELINK_SKIP`` may be specified as a "
"``LIBRARY`` option.  On some platforms a versioned shared library has a "
"symbolic link such as::"
msgstr ""

#: ../../../command/install.rst:121
msgid "lib<name>.so -> lib<name>.so.1"
msgstr ""

#: ../../../command/install.rst:123
msgid ""
"where ``lib<name>.so.1`` is the soname of the library and ``lib<name>.so`` "
"is a \"namelink\" allowing linkers to find the library when given ``-"
"l<name>``.  The ``NAMELINK_ONLY`` option causes installation of only the "
"namelink when a library target is installed.  The ``NAMELINK_SKIP`` option "
"causes installation of library files other than the namelink when a library "
"target is installed.  When neither option is given both portions are "
"installed.  On platforms where versioned shared libraries do not have "
"namelinks or when a library is not versioned the ``NAMELINK_SKIP`` option "
"installs the library and the ``NAMELINK_ONLY`` option installs nothing.  See "
"the :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties for "
"details on creating versioned shared libraries."
msgstr ""

#: ../../../command/install.rst:136
msgid ""
"The ``INCLUDES DESTINATION`` specifies a list of directories which will be "
"added to the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property of "
"the ``<targets>`` when exported by the :command:`install(EXPORT)` command.  "
"If a relative path is specified, it is treated as relative to the "
"``$<INSTALL_PREFIX>``. This is independent of the rest of the argument "
"groups and does not actually install anything."
msgstr ""

#: ../../../command/install.rst:144
msgid ""
"One or more groups of properties may be specified in a single call to the "
"``TARGETS`` form of this command.  A target may be installed more than once "
"to different locations.  Consider hypothetical targets ``myExe``, "
"``mySharedLib``, and ``myStaticLib``.  The code:"
msgstr ""

#: ../../../command/install.rst:149
msgid ""
"install(TARGETS myExe mySharedLib myStaticLib\n"
"        RUNTIME DESTINATION bin\n"
"        LIBRARY DESTINATION lib\n"
"        ARCHIVE DESTINATION lib/static)\n"
"install(TARGETS mySharedLib DESTINATION /some/full/path)"
msgstr ""

#: ../../../command/install.rst:157
msgid ""
"will install ``myExe`` to ``<prefix>/bin`` and ``myStaticLib`` to ``<prefix>/"
"lib/static``.  On non-DLL platforms ``mySharedLib`` will be installed to "
"``<prefix>/lib`` and ``/some/full/path``.  On DLL platforms the "
"``mySharedLib`` DLL will be installed to ``<prefix>/bin`` and ``/some/full/"
"path`` and its import library will be installed to ``<prefix>/lib/static`` "
"and ``/some/full/path``."
msgstr ""

#: ../../../command/install.rst:164
msgid ""
"The ``EXPORT`` option associates the installed target files with an export "
"called ``<export-name>``.  It must appear before any ``RUNTIME``, "
"``LIBRARY``, or ``ARCHIVE`` options.  To actually install the export file "
"itself, call ``install(EXPORT)``, documented below."
msgstr ""

#: ../../../command/install.rst:169
msgid ""
"Installing a target with the :prop_tgt:`EXCLUDE_FROM_ALL` target property "
"set to ``TRUE`` has undefined behavior."
msgstr ""

#: ../../../command/install.rst:172
msgid ""
"The install destination given to the target install ``DESTINATION`` may use "
"\"generator expressions\" with the syntax ``$<...>``.  See the :manual:"
"`cmake-generator-expressions(7)` manual for available expressions."
msgstr ""

#: ../../../command/install.rst:177
msgid "Installing Files"
msgstr ""

#: ../../../command/install.rst:181
msgid ""
"install(<FILES|PROGRAMS> files... DESTINATION <dir>\n"
"        [PERMISSIONS permissions...]\n"
"        [CONFIGURATIONS [Debug|Release|...]]\n"
"        [COMPONENT <component>]\n"
"        [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])"
msgstr ""

#: ../../../command/install.rst:187
msgid ""
"The ``FILES`` form specifies rules for installing files for a project. File "
"names given as relative paths are interpreted with respect to the current "
"source directory.  Files installed by this form are by default given "
"permissions ``OWNER_WRITE``, ``OWNER_READ``, ``GROUP_READ``, and "
"``WORLD_READ`` if no ``PERMISSIONS`` argument is given."
msgstr ""

#: ../../../command/install.rst:193
msgid ""
"The ``PROGRAMS`` form is identical to the ``FILES`` form except that the "
"default permissions for the installed file also include ``OWNER_EXECUTE``, "
"``GROUP_EXECUTE``, and ``WORLD_EXECUTE``.  This form is intended to install "
"programs that are not targets, such as shell scripts.  Use the ``TARGETS`` "
"form to install targets built within the project."
msgstr ""

#: ../../../command/install.rst:199
msgid ""
"The list of ``files...`` given to ``FILES`` or ``PROGRAMS`` may use "
"\"generator expressions\" with the syntax ``$<...>``.  See the :manual:"
"`cmake-generator-expressions(7)` manual for available expressions. However, "
"if any item begins in a generator expression it must evaluate to a full path."
msgstr ""

#: ../../../command/install.rst:205
msgid ""
"The install destination given to the files install ``DESTINATION`` may use "
"\"generator expressions\" with the syntax ``$<...>``.  See the :manual:"
"`cmake-generator-expressions(7)` manual for available expressions."
msgstr ""

#: ../../../command/install.rst:210
msgid "Installing Directories"
msgstr ""

#: ../../../command/install.rst:214
msgid ""
"install(DIRECTORY dirs... DESTINATION <dir>\n"
"        [FILE_PERMISSIONS permissions...]\n"
"        [DIRECTORY_PERMISSIONS permissions...]\n"
"        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]\n"
"        [CONFIGURATIONS [Debug|Release|...]]\n"
"        [COMPONENT <component>] [EXCLUDE_FROM_ALL]\n"
"        [FILES_MATCHING]\n"
"        [[PATTERN <pattern> | REGEX <regex>]\n"
"         [EXCLUDE] [PERMISSIONS permissions...]] [...])"
msgstr ""

#: ../../../command/install.rst:224
msgid ""
"The ``DIRECTORY`` form installs contents of one or more directories to a "
"given destination.  The directory structure is copied verbatim to the "
"destination.  The last component of each directory name is appended to the "
"destination directory but a trailing slash may be used to avoid this because "
"it leaves the last component empty.  Directory names given as relative paths "
"are interpreted with respect to the current source directory.  If no input "
"directory names are given the destination directory will be created but "
"nothing will be installed into it.  The ``FILE_PERMISSIONS`` and "
"``DIRECTORY_PERMISSIONS`` options specify permissions given to files and "
"directories in the destination. If ``USE_SOURCE_PERMISSIONS`` is specified "
"and ``FILE_PERMISSIONS`` is not, file permissions will be copied from the "
"source directory structure. If no permissions are specified files will be "
"given the default permissions specified in the ``FILES`` form of the "
"command, and the directories will be given the default permissions specified "
"in the ``PROGRAMS`` form of the command."
msgstr ""

#: ../../../command/install.rst:241
msgid "The ``MESSAGE_NEVER`` option disables file installation status output."
msgstr ""

#: ../../../command/install.rst:243
msgid ""
"Installation of directories may be controlled with fine granularity using "
"the ``PATTERN`` or ``REGEX`` options.  These \"match\" options specify a "
"globbing pattern or regular expression to match directories or files "
"encountered within input directories.  They may be used to apply certain "
"options (see below) to a subset of the files and directories encountered.  "
"The full path to each input file or directory (with forward slashes) is "
"matched against the expression.  A ``PATTERN`` will match only complete file "
"names: the portion of the full path matching the pattern must occur at the "
"end of the file name and be preceded by a slash.  A ``REGEX`` will match any "
"portion of the full path but it may use ``/`` and ``$`` to simulate the "
"``PATTERN`` behavior.  By default all files and directories are installed "
"whether or not they are matched. The ``FILES_MATCHING`` option may be given "
"before the first match option to disable installation of files (but not "
"directories) not matched by any expression.  For example, the code"
msgstr ""

#: ../../../command/install.rst:259
msgid ""
"install(DIRECTORY src/ DESTINATION include/myproj\n"
"        FILES_MATCHING PATTERN \"*.h\")"
msgstr ""

#: ../../../command/install.rst:264
msgid "will extract and install header files from a source tree."
msgstr ""

#: ../../../command/install.rst:266
msgid ""
"Some options may follow a ``PATTERN`` or ``REGEX`` expression and are "
"applied only to files or directories matching them.  The ``EXCLUDE`` option "
"will skip the matched file or directory.  The ``PERMISSIONS`` option "
"overrides the permissions setting for the matched file or directory.  For "
"example the code"
msgstr ""

#: ../../../command/install.rst:272
msgid ""
"install(DIRECTORY icons scripts/ DESTINATION share/myproj\n"
"        PATTERN \"CVS\" EXCLUDE\n"
"        PATTERN \"scripts/*\"\n"
"        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\n"
"                    GROUP_EXECUTE GROUP_READ)"
msgstr ""

#: ../../../command/install.rst:280
msgid ""
"will install the ``icons`` directory to ``share/myproj/icons`` and the "
"``scripts`` directory to ``share/myproj``.  The icons will get default file "
"permissions, the scripts will be given specific permissions, and any ``CVS`` "
"directories will be excluded."
msgstr ""

#: ../../../command/install.rst:285
msgid ""
"The list of ``dirs...`` given to ``DIRECTORY`` and the install destination "
"given to the directory install ``DESTINATION`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions."
msgstr ""

#: ../../../command/install.rst:291
msgid "Custom Installation Logic"
msgstr ""

#: ../../../command/install.rst:295
msgid ""
"install([[SCRIPT <file>] [CODE <code>]]\n"
"        [COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])"
msgstr ""

#: ../../../command/install.rst:298
msgid ""
"The ``SCRIPT`` form will invoke the given CMake script files during "
"installation.  If the script file name is a relative path it will be "
"interpreted with respect to the current source directory.  The ``CODE`` form "
"will invoke the given CMake code during installation.  Code is specified as "
"a single argument inside a double-quoted string.  For example, the code"
msgstr ""

#: ../../../command/install.rst:305
msgid "install(CODE \"MESSAGE(\\\"Sample install message.\\\")\")"
msgstr ""

#: ../../../command/install.rst:309
msgid "will print a message during installation."
msgstr ""

#: ../../../command/install.rst:312
msgid "Installing Exports"
msgstr ""

#: ../../../command/install.rst:316
msgid ""
"install(EXPORT <export-name> DESTINATION <dir>\n"
"        [NAMESPACE <namespace>] [FILE <name>.cmake]\n"
"        [PERMISSIONS permissions...]\n"
"        [CONFIGURATIONS [Debug|Release|...]]\n"
"        [EXPORT_LINK_INTERFACE_LIBRARIES]\n"
"        [COMPONENT <component>]\n"
"        [EXCLUDE_FROM_ALL])"
msgstr ""

#: ../../../command/install.rst:324
msgid ""
"The ``EXPORT`` form generates and installs a CMake file containing code to "
"import targets from the installation tree into another project. Target "
"installations are associated with the export ``<export-name>`` using the "
"``EXPORT`` option of the ``install(TARGETS)`` signature documented above.  "
"The ``NAMESPACE`` option will prepend ``<namespace>`` to the target names as "
"they are written to the import file.  By default the generated file will be "
"called ``<export-name>.cmake`` but the ``FILE`` option may be used to "
"specify a different name.  The value given to the ``FILE`` option must be a "
"file name with the ``.cmake`` extension. If a ``CONFIGURATIONS`` option is "
"given then the file will only be installed when one of the named "
"configurations is installed.  Additionally, the generated import file will "
"reference only the matching target configurations.  The "
"``EXPORT_LINK_INTERFACE_LIBRARIES`` keyword, if present, causes the contents "
"of the properties matching ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?"
"`` to be exported, when policy :policy:`CMP0022` is ``NEW``.  If a "
"``COMPONENT`` option is specified that does not match that given to the "
"targets associated with ``<export-name>`` the behavior is undefined.  If a "
"library target is included in the export but a target to which it links is "
"not included the behavior is unspecified."
msgstr ""

#: ../../../command/install.rst:345
msgid ""
"The ``EXPORT`` form is useful to help outside projects use targets built and "
"installed by the current project.  For example, the code"
msgstr ""

#: ../../../command/install.rst:348
msgid ""
"install(TARGETS myexe EXPORT myproj DESTINATION bin)\n"
"install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)"
msgstr ""

#: ../../../command/install.rst:353
msgid ""
"will install the executable myexe to ``<prefix>/bin`` and code to import it "
"in the file ``<prefix>/lib/myproj/myproj.cmake``.  An outside project may "
"load this file with the include command and reference the ``myexe`` "
"executable from the installation tree using the imported target name "
"``mp_myexe`` as if the target were built in its own tree."
msgstr ""

#: ../../../command/install.rst:360
msgid ""
"This command supercedes the :command:`install_targets` command and the :"
"prop_tgt:`PRE_INSTALL_SCRIPT` and :prop_tgt:`POST_INSTALL_SCRIPT` target "
"properties.  It also replaces the ``FILES`` forms of the :command:"
"`install_files` and :command:`install_programs` commands. The processing "
"order of these install rules relative to those generated by :command:"
"`install_targets`, :command:`install_files`, and :command:`install_programs` "
"commands is not defined."
msgstr ""
