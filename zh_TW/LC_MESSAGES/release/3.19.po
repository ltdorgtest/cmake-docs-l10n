# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.22\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../release/3.19.rst:2
msgid "CMake 3.19 Release Notes"
msgstr ""

#: ../../../release/3.19.rst:5
msgid "Contents"
msgstr ""

#: ../../../release/3.19.rst:8
msgid "Changes made since CMake 3.18 include the following."
msgstr ""

#: ../../../release/3.19.rst:11
msgid "New Features"
msgstr ""

#: ../../../release/3.19.rst:14
msgid "Presets"
msgstr ""

#: ../../../release/3.19.rst:16
msgid ""
":manual:`cmake(1)` and :manual:`cmake-gui(1)` now recognize ``CMakePresets."
"json`` and ``CMakeUserPresets.json`` files (see :manual:`cmake-presets(7)`)."
msgstr ""

#: ../../../release/3.19.rst:21
msgid "Generators"
msgstr ""

#: ../../../release/3.19.rst:23
msgid ""
"The :generator:`Xcode` generator now uses the Xcode \"new build system\" "
"when generating for Xcode 12.0 or higher. See the :variable:"
"`CMAKE_XCODE_BUILD_SYSTEM` variable. One may use ``-T buildsystem=1`` to "
"switch to the legacy build system."
msgstr ""

#: ../../../release/3.19.rst:28
msgid ""
"The :generator:`Xcode` generator gained support for linking libraries and "
"frameworks via the *Link Binaries With Libraries* build phase instead of "
"always by embedding linker flags directly.  This behavior is controlled by a "
"new :prop_tgt:`XCODE_LINK_BUILD_PHASE_MODE` target property, which is "
"initialized by a new :variable:`CMAKE_XCODE_LINK_BUILD_PHASE_MODE` variable."
msgstr ""

#: ../../../release/3.19.rst:35
msgid ""
"The :ref:`Visual Studio Generators` for VS 2015 and above gained support for "
"the Visual Studio Tools for Android.  One may now set :variable:"
"`CMAKE_SYSTEM_NAME` to ``Android`` to generate ``.vcxproj`` files for the "
"Android tools."
msgstr ""

#: ../../../release/3.19.rst:41
msgid "Languages"
msgstr ""

#: ../../../release/3.19.rst:43
msgid ""
"CMake learned to support ``ISPC`` as a first-class language that can be "
"enabled via the :command:`project` and :command:`enable_language` commands. "
"``ISPC`` is currently supported by the :ref:`Makefile Generators` and the :"
"generator:`Ninja` generator on Linux, macOS, and Windows using the Intel "
"ISPC compiler."
msgstr ""

#: ../../../release/3.19.rst:49
msgid "``CUDA`` language support for Clang now includes:"
msgstr ""

#: ../../../release/3.19.rst:51
msgid "separable compilation (:prop_tgt:`CUDA_SEPARABLE_COMPILATION`), and"
msgstr ""

#: ../../../release/3.19.rst:52
msgid "finding scattered toolkit installations when cross-compiling."
msgstr ""

#: ../../../release/3.19.rst:54
msgid "``CUDA`` language support now works on QNX."
msgstr ""

#: ../../../release/3.19.rst:57
msgid "Platforms"
msgstr ""

#: ../../../release/3.19.rst:59
msgid "Apple Silicon is now supported (since CMake 3.19.2):"
msgstr ""

#: ../../../release/3.19.rst:61
msgid ""
"The :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` is selected using ``uname -m``. "
"Since this may vary based on CMake's own architecture and that of the "
"invoking process tree, the :variable:`CMAKE_APPLE_SILICON_PROCESSOR` "
"variable or :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable may "
"be set to specify a host architecture explicitly."
msgstr ""

#: ../../../release/3.19.rst:67
msgid ""
"If :variable:`CMAKE_OSX_ARCHITECTURES` is not set, CMake adds explicit flags "
"to tell the compiler to build for the :variable:"
"`CMAKE_HOST_SYSTEM_PROCESSOR` so the toolchain does not have to guess based "
"on the process tree's architecture."
msgstr ""

#: ../../../release/3.19.rst:73
msgid "File-Based API"
msgstr ""

#: ../../../release/3.19.rst:75
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` field "
"has been updated to 2.2."
msgstr ""

#: ../../../release/3.19.rst:78
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 \"target\" object "
"gained a new ``languageStandard`` field in the ``compileGroups`` objects."
msgstr ""

#: ../../../release/3.19.rst:82
msgid "Command-Line"
msgstr ""

#: ../../../release/3.19.rst:84
msgid ""
"The :manual:`cmake(1)` command-line tool's ``--install`` mode gained a ``--"
"default-directory-permissions`` option."
msgstr ""

#: ../../../release/3.19.rst:87
msgid ""
":manual:`cmake(1)` gained a ``-E create_hardlink`` command-line tool that "
"can be used to create hardlinks between files."
msgstr ""

#: ../../../release/3.19.rst:91
msgid "GUI"
msgstr ""

#: ../../../release/3.19.rst:93
msgid ""
"The :manual:`CMake GUI <cmake-gui(1)>` now has an environment variable "
"editor."
msgstr ""

#: ../../../release/3.19.rst:97
msgid "Commands"
msgstr ""

#: ../../../release/3.19.rst:99
msgid ""
"The :command:`add_test` command now (officially) supports whitespace and "
"other special characters in the name for the test it creates. See policy :"
"policy:`CMP0110`."
msgstr ""

#: ../../../release/3.19.rst:103
msgid ""
"The :command:`cmake_language` command gained a ``DEFER`` mode to schedule "
"command calls to occur at the end of processing a directory."
msgstr ""

#: ../../../release/3.19.rst:106
msgid ""
"The :command:`configure_file` command gained a ``NO_SOURCE_PERMISSIONS`` "
"option to suppress copying the input file's permissions to the output file."
msgstr ""

#: ../../../release/3.19.rst:109
msgid ""
"The :command:`execute_process` command gained a ``COMMAND_ERROR_IS_FATAL`` "
"option to specify a fatal error."
msgstr ""

#: ../../../release/3.19.rst:112
msgid ""
"The :command:`file(ARCHIVE_CREATE)` command gained a ``COMPRESSION_LEVEL`` "
"option to specify the compression level."
msgstr ""

#: ../../../release/3.19.rst:115
msgid ""
"The :command:`file(CHMOD)` and :command:`file(CHMOD_RECURSE)` subcommands "
"were added to set permissions of files and directories."
msgstr ""

#: ../../../release/3.19.rst:118
msgid ""
"The :command:`file(DOWNLOAD)` command ``<file>`` argument is now optional.  "
"If it is not specified, the file is not saved."
msgstr ""

#: ../../../release/3.19.rst:121
msgid ""
"The :command:`file(GENERATE)` command gained a new ``TARGET`` keyword to "
"support resolving target-dependent generator expressions."
msgstr ""

#: ../../../release/3.19.rst:124
msgid ""
"The :command:`file` command gained a new ``REAL_PATH`` sub-command to "
"compute a path with symlinks resolved."
msgstr ""

#: ../../../release/3.19.rst:127
msgid "The :command:`find_package` command learned to handle a version range."
msgstr ""

#: ../../../release/3.19.rst:129
msgid ""
"The :command:`separate_arguments` command gained a new ``PROGRAM`` option. "
"It allows the arguments to be treated as a program invocation and will "
"resolve the executable to a full path if it can be found."
msgstr ""

#: ../../../release/3.19.rst:133
msgid ""
"The ``DIRECTORY`` option of the :command:`set_property`, :command:"
"`get_property`, and :command:`get_directory_property` commands now accepts "
"references to binary directory paths, such as the value of :variable:"
"`CMAKE_CURRENT_BINARY_DIR`."
msgstr ""

#: ../../../release/3.19.rst:138
msgid ""
"The :command:`string` command gained a set of new ``JSON`` sub commands that "
"provide JSON parsing capabilities."
msgstr ""

#: ../../../release/3.19.rst:142
msgid "Variables"
msgstr ""

#: ../../../release/3.19.rst:144
msgid ""
"The :variable:`CMAKE_CLANG_VFS_OVERLAY` variable was added to tell Clang to "
"use a VFS overlay to support the Windows SDK when cross-compiling from hosts "
"with case-sensitive filesystems."
msgstr ""

#: ../../../release/3.19.rst:148
msgid ""
"The :variable:`CMAKE_MFC_FLAG` variable now supports generator expressions."
msgstr ""

#: ../../../release/3.19.rst:150
msgid ""
"The :variable:`CMAKE_OPTIMIZE_DEPENDENCIES` variable was added to initialize "
"the new :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property and avoid "
"unnecessarily building dependencies for a static library."
msgstr ""

#: ../../../release/3.19.rst:154
msgid ""
"The :variable:`CMAKE_PCH_INSTANTIATE_TEMPLATES` variable was added to "
"initialize the new :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` target property."
msgstr ""

#: ../../../release/3.19.rst:157
msgid ""
"The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` variable "
"was added to tell the :ref:`Visual Studio Generators` what maximum version "
"of the Windows SDK to choose."
msgstr ""

#: ../../../release/3.19.rst:162
msgid "Properties"
msgstr ""

#: ../../../release/3.19.rst:164
msgid ""
"The :prop_tgt:`EXCLUDE_FROM_ALL` target property now supports :manual:"
"`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../release/3.19.rst:167
msgid ""
"The :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property was added to avoid "
"unnecessarily building dependencies for a static library."
msgstr ""

#: ../../../release/3.19.rst:170
msgid ""
"The :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` target property was added to "
"enable template instantiation in the precompiled header. This is enabled by "
"default and may significantly improve compile times. Currently only "
"supported for Clang (version 11 or later)."
msgstr ""

#: ../../../release/3.19.rst:175
msgid ""
"The :prop_tgt:`WIN32_EXECUTABLE` target property now supports :manual:"
"`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../release/3.19.rst:179
msgid "Modules"
msgstr ""

#: ../../../release/3.19.rst:181
msgid ""
"The :module:`CheckCompilerFlag` module has been added to generalize :module:"
"`CheckCCompilerFlag` and :module:`CheckCXXCompilerFlag` to more languages. "
"It also supports the ``CUDA`` and ``ISPC`` languages."
msgstr ""

#: ../../../release/3.19.rst:186
msgid ""
"The :module:`CheckLinkerFlag` module now supports the ``CUDA`` language."
msgstr ""

#: ../../../release/3.19.rst:188
msgid ""
"The :module:`CheckSourceCompiles` module has been added to generalize :"
"module:`CheckCSourceCompiles` and :module:`CheckCXXSourceCompiles` to more "
"languages. It also supports the ``CUDA`` and ``ISPC`` languages."
msgstr ""

#: ../../../release/3.19.rst:193
msgid ""
"The :module:`CheckSourceRuns` module has been added to generalize :module:"
"`CheckCSourceRuns` and :module:`CheckCXXSourceRuns` to more languages. It "
"also supports the ``CUDA`` language."
msgstr ""

#: ../../../release/3.19.rst:198
msgid ""
"The :module:`CMakePackageConfigHelpers` module gained support for version "
"ranges."
msgstr ""

#: ../../../release/3.19.rst:201
msgid ""
"The :module:`FindCUDAToolkit` module gained support for finding CUDA "
"toolkits that do not contain ``nvcc``, as well as for finding scattered "
"toolkit installations when cross-compiling."
msgstr ""

#: ../../../release/3.19.rst:205
msgid ""
"The :module:`FindPackageHandleStandardArgs` module learned to handle version "
"ranges. It also gained the ``find_package_check_version()`` command to check "
"the validity of a version against version-related arguments of :command:"
"`find_package` command."
msgstr ""

#: ../../../release/3.19.rst:210
msgid ""
"The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython` "
"modules gained the ability to handle a version range."
msgstr ""

#: ../../../release/3.19.rst:213
msgid ""
"The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython` "
"modules provide, respectively, the variable ``Python3_LINK_OPTIONS``, "
"``Python2_LINK_OPTIONS`` and ``Python_LINK_OPTIONS`` for link options."
msgstr ""

#: ../../../release/3.19.rst:217
msgid "The :module:`FindSDL` module now provides:"
msgstr ""

#: ../../../release/3.19.rst:219
msgid "An imported target ``SDL::SDL``."
msgstr ""

#: ../../../release/3.19.rst:221
msgid "Result variables ``SDL_LIBRARIES`` and ``SDL_INCLUDE_DIRS``."
msgstr ""

#: ../../../release/3.19.rst:223
msgid ""
"Version variables ``SDL_VERSION``, ``SDL_VERSION_MAJOR``, "
"``SDL_VERSION_MINOR``, and ``SDL_VERSION_PATCH``."
msgstr ""

#: ../../../release/3.19.rst:226
msgid ""
"The :module:`FindSWIG` module gained the ability to handle a version range."
msgstr ""

#: ../../../release/3.19.rst:228
msgid ""
"The :module:`FindTIFF` module gained a ``CXX`` component to find the "
"``tiffxx`` library containing C++ bindings."
msgstr ""

#: ../../../release/3.19.rst:231
msgid ""
"The :module:`FindVulkan` module now provides a ``Vulkan::glslc`` imported "
"target and associated ``Vulkan_GLSLC_EXECUTABLE`` variable which contain the "
"path to the GLSL SPIR-V compiler."
msgstr ""

#: ../../../release/3.19.rst:235
msgid ""
"The :module:`UseSWIG` module gained support for new source file properties "
"``OUTPUT_DIR`` and ``OUTFILE_DIR`` to manage output directories on a per-"
"source basis."
msgstr ""

#: ../../../release/3.19.rst:240
msgid "CTest"
msgstr ""

#: ../../../release/3.19.rst:242
msgid ""
":manual:`ctest(1)` now supports the CUDA ``compute-sanitizer`` checker "
"(previously known as ``cuda-memcheck``) as the "
"``CTEST_MEMORYCHECK_COMMAND``. The different tools (``memcheck``, "
"``racecheck``, ``synccheck`` and ``initcheck``) supported by ``compute-"
"sanitizer`` can be selected by adding appropriate flags to the "
"``CTEST_MEMORYCHECK_COMMAND_OPTIONS`` variable.  The default flags are ``--"
"tool memcheck --leak-check full``."
msgstr ""

#: ../../../release/3.19.rst:250
msgid "CPack"
msgstr ""

#: ../../../release/3.19.rst:252
msgid ""
"CPack gained the :variable:`CPACK_PRE_BUILD_SCRIPTS`, :variable:"
"`CPACK_POST_BUILD_SCRIPTS`, and :variable:`CPACK_PACKAGE_FILES` variables."
msgstr ""

#: ../../../release/3.19.rst:256
msgid ""
"The :cpack_gen:`CPack External Generator` gained the :variable:"
"`CPACK_EXTERNAL_BUILT_PACKAGES` variable."
msgstr ""

#: ../../../release/3.19.rst:259
msgid ""
"The :cpack_gen:`CPack WIX Generator` gained a :variable:"
"`CPACK_WIX_CUSTOM_XMLNS` option to specify custom XML namespaces."
msgstr ""

#: ../../../release/3.19.rst:263
msgid "Other"
msgstr ""

#: ../../../release/3.19.rst:265
msgid ""
":ref:`Interface Libraries` may now have source files added via :command:"
"`add_library` or :command:`target_sources`.  Those with sources will be "
"generated as part of the build system."
msgstr ""

#: ../../../release/3.19.rst:270
msgid "Deprecated and Removed Features"
msgstr ""

#: ../../../release/3.19.rst:272
msgid ""
"Compatibility with versions of CMake older than 2.8.12 is now deprecated and "
"will be removed from a future version.  Calls to :command:"
"`cmake_minimum_required` or :command:`cmake_policy` that set the policy "
"version to an older value now issue a deprecation diagnostic."
msgstr ""

#: ../../../release/3.19.rst:277
msgid ""
"An explicit deprecation diagnostic was added for policy ``CMP0071`` "
"(``CMP0071`` and below were already deprecated). The :manual:`cmake-"
"policies(7)` manual explains that the OLD behaviors of all policies are "
"deprecated and that projects should port to the NEW behaviors."
msgstr ""

#: ../../../release/3.19.rst:283
msgid "macOS SDKs older than 10.5 are no longer supported."
msgstr ""

#: ../../../release/3.19.rst:285
msgid ""
":manual:`cmake-gui(1)` now requires Qt5. Support for compiling with Qt4 has "
"been removed."
msgstr ""

#: ../../../release/3.19.rst:288
msgid ""
"The :manual:`cmake(1)` command-line option ``--warn-unused-vars`` has been "
"removed and is now silently ignored.  The option has not worked correctly "
"since CMake 3.3."
msgstr ""

#: ../../../release/3.19.rst:293
msgid "Documentation"
msgstr ""

#: ../../../release/3.19.rst:295
msgid "The following guides have been added:"
msgstr ""

#: ../../../release/3.19.rst:297
msgid ":guide:`IDE Integration Guide`"
msgstr ""

#: ../../../release/3.19.rst:298
msgid ":guide:`Importing and Exporting Guide`"
msgstr ""

#: ../../../release/3.19.rst:301
msgid "Other Changes"
msgstr ""

#: ../../../release/3.19.rst:303
msgid ""
"Building for macOS will now use the latest SDK available on the system, "
"unless the user has explicitly chosen a SDK using :variable:"
"`CMAKE_OSX_SYSROOT`.  The deployment target or system macOS version will not "
"affect the choice of SDK."
msgstr ""

#: ../../../release/3.19.rst:308
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER` variable may now be used to store "
"\"mandatory\" compiler flags like the :envvar:`CC` and other environment "
"variables."
msgstr ""

#: ../../../release/3.19.rst:312
msgid ""
"The :variable:`CMAKE_<LANG>_FLAGS_INIT` variable will now be considered "
"during the compiler identification check if other sources like :variable:"
"`CMAKE_<LANG>_FLAGS` or :envvar:`CFLAGS` are not set."
msgstr ""

#: ../../../release/3.19.rst:316
msgid ""
"The :command:`find_program` command now requires permission to execute but "
"not to read the file found.  See policy :policy:`CMP0109`."
msgstr ""

#: ../../../release/3.19.rst:319
msgid ""
"An imported target missing its location property fails during generation if "
"the location is used.  See policy :policy:`CMP0111`."
msgstr ""

#: ../../../release/3.19.rst:322
msgid ""
"The following target-based generator expressions that query for directory or "
"file name components no longer add a dependency on the evaluated target. See "
"policy :policy:`CMP0112`."
msgstr ""

#: ../../../release/3.19.rst:326
msgid "``TARGET_FILE_DIR``"
msgstr ""

#: ../../../release/3.19.rst:327
msgid "``TARGET_LINKER_FILE_BASE_NAME``"
msgstr ""

#: ../../../release/3.19.rst:328
msgid "``TARGET_LINKER_FILE_NAME``"
msgstr ""

#: ../../../release/3.19.rst:329
msgid "``TARGET_LINKER_FILE_DIR``"
msgstr ""

#: ../../../release/3.19.rst:330
msgid "``TARGET_SONAME_FILE_NAME``"
msgstr ""

#: ../../../release/3.19.rst:331
msgid "``TARGET_SONAME_FILE_DIR``"
msgstr ""

#: ../../../release/3.19.rst:332
msgid "``TARGET_PDB_FILE_NAME``"
msgstr ""

#: ../../../release/3.19.rst:333
msgid "``TARGET_PDB_FILE_DIR``"
msgstr ""

#: ../../../release/3.19.rst:334
msgid "``TARGET_BUNDLE_DIR``"
msgstr ""

#: ../../../release/3.19.rst:335
msgid "``TARGET_BUNDLE_CONTENT_DIR``"
msgstr ""

#: ../../../release/3.19.rst:337
msgid ""
":ref:`Makefile Generators` no longer repeat custom commands from target "
"dependencies.  See policy :policy:`CMP0113`."
msgstr ""

#: ../../../release/3.19.rst:340
msgid ""
"The :module:`ExternalProject` module handling of step target dependencies "
"has been revised.  See policy :policy:`CMP0114`."
msgstr ""

#: ../../../release/3.19.rst:343
msgid ""
"The :prop_tgt:`OSX_ARCHITECTURES` target property is now respected for the "
"``ASM`` language."
msgstr ""

#: ../../../release/3.19.rst:346
msgid ""
"If ``CUDA`` compiler detection fails with user-specified :variable:"
"`CMAKE_CUDA_ARCHITECTURES` or :variable:`CMAKE_CUDA_HOST_COMPILER`, an error "
"is raised."
msgstr ""

#: ../../../release/3.19.rst:351
msgid "Updates"
msgstr ""

#: ../../../release/3.19.rst:353
msgid "Changes made since CMake 3.19.0 include the following."
msgstr ""

#: ../../../release/3.19.rst:356
msgid "3.19.1"
msgstr ""

#: ../../../release/3.19.rst:358
msgid ""
"CMake 3.19.0 compiles source files with the :prop_sf:`LANGUAGE` property by "
"passing an explicit language flag such as ``-x c``. This is consistent with "
"the property's documented meaning that the source file is written in the "
"specified language.  However, it can break projects that were using the "
"property only to cause the specified language's compiler to be used.  This "
"has been reverted to restore behavior from CMake 3.18 and below."
msgstr ""

#: ../../../release/3.19.rst:366
msgid "CUDA 11.1 support for Clang."
msgstr ""

#: ../../../release/3.19.rst:369
msgid "3.19.2"
msgstr ""

#: ../../../release/3.19.rst:371
msgid ""
"The precompiled macOS binary provided on ``cmake.org`` is now a universal "
"binary with ``x86_64`` and ``arm64`` architectures. It requires macOS 10.10 "
"or newer. The package file naming pattern has been changed from ``cmake-$ver-"
"Darwin-x86_64`` to ``cmake-$ver-macos-universal``."
msgstr ""

#: ../../../release/3.19.rst:377
msgid ""
"Apple Silicon host architecture selection support was updated. CMake 3.19.0 "
"and 3.19.1 always chose ``arm64`` as the host architecture. CMake 3.19.2 "
"returns to using ``uname -m`` as CMake 3.18 and below did. Since this may "
"vary based on CMake's own architecture and that of the invoking process "
"tree, the :variable:`CMAKE_APPLE_SILICON_PROCESSOR` variable or :envvar:"
"`CMAKE_APPLE_SILICON_PROCESSOR` environment variable may be set to specify a "
"host architecture explicitly."
msgstr ""

#: ../../../release/3.19.rst:385
msgid ""
"The :variable:`CMAKE_ISPC_HEADER_SUFFIX` variable and corresponding :"
"prop_tgt:`ISPC_HEADER_SUFFIX` target property were added to control the "
"header suffix used by ``ISPC`` compiler generated headers."
msgstr ""

#: ../../../release/3.19.rst:390
msgid "3.19.3"
msgstr ""

#: ../../../release/3.19.rst:392
msgid ""
"A precompiled Linux ``aarch64`` binary is now provided on ``cmake.org``."
msgstr ""

#: ../../../release/3.19.rst:394
msgid "Two precompiled macOS binaries are now provided on ``cmake.org``:"
msgstr ""

#: ../../../release/3.19.rst:396
msgid ""
"The naming pattern ``cmake-$ver-macos-universal`` is a universal binary with "
"``x86_64`` and ``arm64`` architectures.  It requires macOS 10.13 or newer."
msgstr ""

#: ../../../release/3.19.rst:400
msgid ""
"The naming pattern ``cmake-$ver-macos10.10-universal`` is a universal binary "
"with ``x86_64`` and ``arm64`` architectures.  It requires macOS 10.10 or "
"newer."
msgstr ""

#: ../../../release/3.19.rst:405
msgid "3.19.4"
msgstr ""

#: ../../../release/3.19.rst:407
msgid ""
"The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` variable "
"introduced in 3.19.0 previously worked only with the :generator:`Visual "
"Studio 14 2015` generator.  It has now been fixed to work with :ref:`Visual "
"Studio Generators` for later VS versions too."
msgstr ""

#: ../../../release/3.19.rst:413
msgid "3.19.5"
msgstr ""

#: ../../../release/3.19.rst:415
msgid ""
"When :prop_tgt:`IOS_INSTALL_COMBINED` is enabled and the :generator:`Xcode` "
"generator is used, it is now possible to initiate an install or package "
"creation by running ``cmake --install`` or ``cpack`` from the command line. "
"When using the Xcode new build system, these are the only supported methods "
"due to a limitation of Xcode.  Initiating these operations by building the "
"``install`` or ``package`` targets in Xcode is only supported when using the "
"legacy build system."
msgstr ""

#: ../../../release/3.19.rst:423
msgid ""
"The framework handling introduced in 3.19.0 as part of supporting Xcode's "
"*Link Binaries With Libraries* build phase broke the ability to switch "
"between device and simulator builds without reconfiguring.  That capability "
"has now been restored."
msgstr ""

#: ../../../release/3.19.rst:429
msgid "3.19.6"
msgstr ""

#: ../../../release/3.19.rst:431
msgid ""
"The :manual:`cmake-presets(7)` feature no longer allows comments in "
"``CMakePresets.json`` or ``CMakeUserPresets.json`` files. This was "
"mistakenly allowed by the implementation in CMake 3.19.0 through CMake "
"3.19.5, and was not documented."
msgstr ""

#: ../../../release/3.19.rst:437
msgid "3.19.7"
msgstr ""

#: ../../../release/3.19.rst:439
msgid ""
"With :ref:`Visual Studio Generators` for VS 2017 and higher, the :variable:"
"`CMAKE_GENERATOR_TOOLSET` field ``version=`` now accepts three-component "
"MSVC toolset versions such as ``14.28.29910``. See the :variable:"
"`CMAKE_VS_PLATFORM_TOOLSET_VERSION` variable."
msgstr ""
