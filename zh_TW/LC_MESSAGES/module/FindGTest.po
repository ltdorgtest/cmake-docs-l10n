# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2015 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindGTest.cmake:3
msgid "FindGTest"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:5
msgid "Locate the Google C++ Testing Framework."
msgstr ""

#: ../../../../Modules/FindGTest.cmake:7
msgid "Defines the following variables:"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:11
msgid ""
"GTEST_FOUND - Found the Google Testing framework\n"
"GTEST_INCLUDE_DIRS - Include directories"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:16
msgid ""
"Also defines the library variables below as normal variables.  These contain "
"debug/optimized keywords when a debugging library is found."
msgstr ""

#: ../../../../Modules/FindGTest.cmake:21
msgid ""
"GTEST_BOTH_LIBRARIES - Both libgtest & libgtest-main\n"
"GTEST_LIBRARIES - libgtest\n"
"GTEST_MAIN_LIBRARIES - libgtest-main"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:27
msgid "Accepts the following variables as input:"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:31
msgid ""
"GTEST_ROOT - (as a CMake or environment variable)\n"
"             The root directory of the gtest install prefix"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:38
msgid ""
"GTEST_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n"
"                    \"MD\" or \"MT\" to enable searching a GTest build tree\n"
"                    (defaults: \"MD\")"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:44
msgid "Example Usage:"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:48
msgid ""
"enable_testing()\n"
"find_package(GTest REQUIRED)\n"
"include_directories(${GTEST_INCLUDE_DIRS})"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:56
msgid ""
"add_executable(foo foo.cc)\n"
"target_link_libraries(foo ${GTEST_BOTH_LIBRARIES})"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:63
msgid "add_test(AllTestsInFoo foo)"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:69
msgid ""
"If you would like each Google test to show up in CTest as a test you may use "
"the following macro.  NOTE: It will slow down your tests by running an "
"executable for each test and test fixture.  You will also have to rerun "
"CMake after adding or removing tests or test fixtures."
msgstr ""

#: ../../../../Modules/FindGTest.cmake:74
msgid "GTEST_ADD_TESTS(executable extra_args ARGN)"
msgstr ""

#: ../../../../Modules/FindGTest.cmake:78
msgid ""
"executable = The path to the test executable\n"
"extra_args = Pass a list of extra arguments to be passed to\n"
"             executable enclosed in quotes (or \"\" for none)\n"
"ARGN =       A list of source files to search for tests & test\n"
"             fixtures. Or AUTO to find them from executable target."
msgstr ""

#: ../../../../Modules/FindGTest.cmake:88
msgid ""
"Example:\n"
"   set(FooTestArgs --foo 1 --bar 2)\n"
"   add_executable(FooTest FooUnitTest.cc)\n"
"   GTEST_ADD_TESTS(FooTest \"${FooTestArgs}\" AUTO)"
msgstr ""
