# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2017 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindQt4.cmake:6
msgid "FindQt4"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:9
msgid "Finding and Using Qt4"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:11
msgid ""
"This module can be used to find Qt4.  The most important issue is that the "
"Qt4 qmake is available via the system path.  This qmake is then used to "
"detect basically everything else.  This module defines a number of :prop_tgt:"
"`IMPORTED` targets, macros and variables."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:16
msgid "Typical usage could be something like:"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:18
msgid ""
"set(CMAKE_AUTOMOC ON)\n"
"set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
"find_package(Qt4 4.4.3 REQUIRED QtGui QtXml)\n"
"add_executable(myexe main.cpp)\n"
"target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:28
msgid ""
"When using :prop_tgt:`IMPORTED` targets, the qtmain.lib static library is "
"automatically linked on Windows for :prop_tgt:`WIN32 <WIN32_EXECUTABLE>` "
"executables. To disable that globally, set the ``QT4_NO_LINK_QTMAIN`` "
"variable before finding Qt4. To disable that for a particular executable, "
"set the ``QT4_NO_LINK_QTMAIN`` target property to ``TRUE`` on the executable."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:36
msgid "Qt Build Tools"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:38
msgid ""
"Qt relies on some bundled tools for code generation, such as ``moc`` for "
"meta-object code generation,``uic`` for widget layout and population, and "
"``rcc`` for virtual filesystem content generation.  These tools may be "
"automatically invoked by :manual:`cmake(1)` if the appropriate conditions "
"are met.  See :manual:`cmake-qt(7)` for more."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:45
msgid "Qt Macros"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:47
msgid ""
"In some cases it can be necessary or useful to invoke the Qt build tools in "
"a more-manual way. Several macros are available to add targets for such uses."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:52
msgid ""
"macro QT4_WRAP_CPP(outfiles inputfile ... [TARGET tgt] OPTIONS ...)\n"
"      create moc code from a list of files containing Qt class with\n"
"      the Q_OBJECT declaration.  Per-directory preprocessor definitions\n"
"      are also added.  If the <tgt> is specified, the\n"
"      INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from\n"
"      the <tgt> are passed to moc.  Options may be given to moc, such as\n"
"      those found when executing \"moc -help\"."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:63
msgid ""
"macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)\n"
"      create code from a list of Qt designer ui files.\n"
"      Options may be given to uic, such as those found\n"
"      when executing \"uic -help\""
msgstr ""

#: ../../../../Modules/FindQt4.cmake:71
msgid ""
"macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)\n"
"      create code from a list of Qt resource files.\n"
"      Options may be given to rcc, such as those found\n"
"      when executing \"rcc -help\""
msgstr ""

#: ../../../../Modules/FindQt4.cmake:79
msgid ""
"macro QT4_GENERATE_MOC(inputfile outputfile [TARGET tgt])\n"
"      creates a rule to run moc on infile and create outfile.\n"
"      Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.\n"
"      because you need a custom filename for the moc file or something\n"
"      similar.  If the <tgt> is specified, the\n"
"      INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from\n"
"      the <tgt> are passed to moc."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:90
msgid ""
"macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)\n"
"      Create the interface header and implementation files with the\n"
"      given basename from the given interface xml file and add it to\n"
"      the list of sources.\n"
"\n"
"      You can pass additional parameters to the qdbusxml2cpp call by "
"setting\n"
"      properties on the input file:\n"
"\n"
"      INCLUDE the given file will be included in the generate interface "
"header\n"
"\n"
"      CLASSNAME the generated class is named accordingly\n"
"\n"
"      NO_NAMESPACE the generated class is not wrapped in a namespace"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:107
msgid ""
"macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )\n"
"      Create the interface header and implementation files\n"
"      for all listed interface xml files.\n"
"      The basename will be automatically determined from the name\n"
"      of the xml file.\n"
"\n"
"      The source file properties described for\n"
"      QT4_ADD_DBUS_INTERFACE also apply here."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:119
msgid ""
"macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname\n"
"                           [basename] [classname])\n"
"      create a dbus adaptor (header and implementation file) from the xml "
"file\n"
"      describing the interface, and add it to the list of sources. The "
"adaptor\n"
"      forwards the calls to a parent class, defined in parentheader and "
"named\n"
"      parentclassname. The name of the generated files will be\n"
"      <basename>adaptor.{cpp,h} where basename defaults to the basename of "
"the\n"
"      xml file.\n"
"      If <classname> is provided, then it will be used as the classname of "
"the\n"
"      adaptor itself."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:133
msgid ""
"macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)\n"
"      generate the xml interface file from the given header.\n"
"      If the optional argument interfacename is omitted, the name of the\n"
"      interface file is constructed from the basename of the header with\n"
"      the suffix .xml appended.\n"
"      Options may be given to qdbuscpp2xml, such as those found when\n"
"      executing \"qdbuscpp2xml --help\""
msgstr ""

#: ../../../../Modules/FindQt4.cmake:144
msgid ""
"macro QT4_CREATE_TRANSLATION( qm_files directories ... sources ...\n"
"                              ts_files ... OPTIONS ...)\n"
"      out: qm_files\n"
"      in:  directories sources ts_files\n"
"      options: flags to pass to lupdate, such as -extensions to specify\n"
"      extensions for a directory scan.\n"
"      generates commands to create .ts (vie lupdate) and .qm\n"
"      (via lrelease) - files from directories and/or sources. The ts files "
"are\n"
"      created and/or updated in the source tree (unless given with full "
"paths).\n"
"      The qm files are generated in the build tree.\n"
"      Updating the translations can be done by adding the qm_files\n"
"      to the source list of your library/executable, so they are\n"
"      always updated, or by adding a custom target to control when\n"
"      they get updated/generated."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:162
msgid ""
"macro QT4_ADD_TRANSLATION( qm_files ts_files ... )\n"
"      out: qm_files\n"
"      in:  ts_files\n"
"      generates commands to create .qm from .ts - files. The generated\n"
"      filenames can be found in qm_files. The ts_files\n"
"      must exist and are not updated in any way."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:172
msgid ""
"macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... [TARGET tgt])\n"
"      The qt4_automoc macro is obsolete.  Use the CMAKE_AUTOMOC feature "
"instead.\n"
"      This macro is still experimental.\n"
"      It can be used to have moc automatically handled.\n"
"      So if you have the files foo.h and foo.cpp, and in foo.h a\n"
"      a class uses the Q_OBJECT macro, moc has to run on it. If you don't\n"
"      want to use QT4_WRAP_CPP() (which is reliable and mature), you can "
"insert\n"
"      #include \"foo.moc\"\n"
"      in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This "
"will\n"
"      scan all listed files at cmake-time for such included moc files and if "
"it\n"
"      finds them cause a rule to be generated to run moc at build time on "
"the\n"
"      accompanying header file foo.h.\n"
"      If a source file has the SKIP_AUTOMOC property set it will be ignored "
"by\n"
"      this macro.\n"
"      If the <tgt> is specified, the INTERFACE_INCLUDE_DIRECTORIES and\n"
"      INTERFACE_COMPILE_DEFINITIONS from the <tgt> are passed to moc."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:192
msgid ""
"function QT4_USE_MODULES( target [link_type] modules...)\n"
"       This function is obsolete. Use target_link_libraries with IMPORTED "
"targets\n"
"       instead.\n"
"       Make <target> use the <modules> from Qt. Using a Qt module means\n"
"       to link to the library, add the relevant include directories for the\n"
"       module, and add the relevant compiler defines for using the module.\n"
"       Modules are roughly equivalent to components of Qt4, so usage would "
"be\n"
"       something like:\n"
"        qt4_use_modules(myexe Core Gui Declarative)\n"
"       to use QtCore, QtGui and QtDeclarative. The optional <link_type> "
"argument\n"
"       can be specified as either LINK_PUBLIC or LINK_PRIVATE to specify "
"the\n"
"       same argument to the target_link_libraries call."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:207
msgid "IMPORTED Targets"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:209
msgid ""
"A particular Qt library may be used by using the corresponding :prop_tgt:"
"`IMPORTED` target with the :command:`target_link_libraries` command:"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:213
msgid "target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:217
msgid ""
"Using a target in this way causes :cmake(1)` to use the appropriate include "
"directories and compile definitions for the target when compiling ``myexe``."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:220
msgid ""
"Targets are aware of their dependencies, so for example it is not necessary "
"to list ``Qt4::QtCore`` if another Qt library is listed, and it is not "
"necessary to list ``Qt4::QtGui`` if ``Qt4::QtDeclarative`` is listed. "
"Targets may be tested for existence in the usual way with the :command:"
"`if(TARGET)` command."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:226
msgid ""
"The Qt toolkit may contain both debug and release libraries. :manual:"
"`cmake(1)` will choose the appropriate version based on the build "
"configuration."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:230
msgid "``Qt4::QtCore``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:231
msgid "The QtCore target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:232
msgid "``Qt4::QtGui``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:233
msgid "The QtGui target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:234
msgid "``Qt4::Qt3Support``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:235
msgid "The Qt3Support target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:236
msgid "``Qt4::QtAssistant``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:237
msgid "The QtAssistant target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:238
msgid "``Qt4::QtAssistantClient``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:239
msgid "The QtAssistantClient target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:240
msgid "``Qt4::QAxContainer``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:241
msgid "The QAxContainer target (Windows only)"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:242
msgid "``Qt4::QAxServer``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:243
msgid "The QAxServer target (Windows only)"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:244
msgid "``Qt4::QtDBus``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:245
msgid "The QtDBus target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:246
msgid "``Qt4::QtDeclarative``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:247
msgid "The QtDeclarative target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:248
msgid "``Qt4::QtDesigner``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:249
msgid "The QtDesigner target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:250
msgid "``Qt4::QtDesignerComponents``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:251
msgid "The QtDesignerComponents target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:252
msgid "``Qt4::QtHelp``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:253
msgid "The QtHelp target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:254
msgid "``Qt4::QtMotif``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:255
msgid "The QtMotif target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:256
msgid "``Qt4::QtMultimedia``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:257
msgid "The QtMultimedia target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:258
msgid "``Qt4::QtNetwork``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:259
msgid "The QtNetwork target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:260
msgid "``Qt4::QtNsPLugin``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:261
msgid "The QtNsPLugin target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:262
msgid "``Qt4::QtOpenGL``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:263
msgid "The QtOpenGL target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:264
msgid "``Qt4::QtScript``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:265
msgid "The QtScript target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:266
msgid "``Qt4::QtScriptTools``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:267
msgid "The QtScriptTools target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:268
msgid "``Qt4::QtSql``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:269
msgid "The QtSql target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:270
msgid "``Qt4::QtSvg``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:271
msgid "The QtSvg target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:272
msgid "``Qt4::QtTest``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:273
msgid "The QtTest target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:274
msgid "``Qt4::QtUiTools``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:275
msgid "The QtUiTools target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:276
msgid "``Qt4::QtWebKit``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:277
msgid "The QtWebKit target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:278
msgid "``Qt4::QtXml``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:279
msgid "The QtXml target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:280
msgid "``Qt4::QtXmlPatterns``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:281
msgid "The QtXmlPatterns target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:283
msgid "``Qt4::phonon``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:283
msgid "The phonon target"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:286
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:288
msgid "Below is a detailed list of variables that FindQt4.cmake sets."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:290
msgid "``Qt4_FOUND``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:291
msgid "If false, don't try to use Qt 4."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:292
msgid "``QT_FOUND``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:293
msgid "If false, don't try to use Qt. This variable is for compatibility only."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:294
msgid "``QT4_FOUND``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:295
msgid ""
"If false, don't try to use Qt 4. This variable is for compatibility only."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:296
msgid "``QT_VERSION_MAJOR``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:297
msgid "The major version of Qt found."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:298
msgid "``QT_VERSION_MINOR``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:299
msgid "The minor version of Qt found."
msgstr ""

#: ../../../../Modules/FindQt4.cmake:1344
msgid "``QT_VERSION_PATCH``"
msgstr ""

#: ../../../../Modules/FindQt4.cmake:301
msgid "The patch version of Qt found."
msgstr ""
