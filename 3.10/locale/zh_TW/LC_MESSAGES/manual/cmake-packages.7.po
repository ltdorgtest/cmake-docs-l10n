# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2017 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-packages.7.rst:4
msgid "cmake-packages(7)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:7
msgid "Contents"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:13
msgid ""
"Packages provide dependency information to CMake based buildsystems.  "
"Packages are found with the :command:`find_package` command.  The result of "
"using ``find_package`` is either a set of :prop_tgt:`IMPORTED` targets, or a "
"set of variables corresponding to build-relevant information."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:19
msgid "Using Packages"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:21
msgid ""
"CMake provides direct support for two forms of packages, `Config-file "
"Packages`_ and `Find-module Packages`_. Indirect support for ``pkg-config`` "
"packages is also provided via the :module:`FindPkgConfig` module.  In all "
"cases, the basic form of :command:`find_package` calls is the same:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:27
msgid ""
"find_package(Qt4 4.7.0 REQUIRED) # CMake provides a Qt4 find-module\n"
"find_package(Qt5Core 5.1.0 REQUIRED) # Qt provides a Qt5 package config "
"file.\n"
"find_package(LibXml2 REQUIRED) # Use pkg-config via the LibXml2 find-module"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:33
msgid ""
"In cases where it is known that a package configuration file is provided by "
"upstream, and only that should be used, the ``CONFIG`` keyword may be passed "
"to :command:`find_package`:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:37
msgid ""
"find_package(Qt5Core 5.1.0 CONFIG REQUIRED)\n"
"find_package(Qt5Gui 5.1.0 CONFIG)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:42
msgid "Similarly, the ``MODULE`` keyword says to use only a find-module:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:44
msgid "find_package(Qt4 4.7.0 MODULE REQUIRED)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:48
msgid ""
"Specifying the type of package explicitly improves the error message shown "
"to the user if it is not found."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:51
msgid ""
"Both types of packages also support specifying components of a package, "
"either after the ``REQUIRED`` keyword:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:54
msgid "find_package(Qt5 5.1.0 CONFIG REQUIRED Widgets Xml Sql)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:58
msgid "or as a separate ``COMPONENTS`` list:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:60
msgid "find_package(Qt5 5.1.0 COMPONENTS Widgets Xml Sql)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:64
msgid "or as a separate ``OPTIONAL_COMPONENTS`` list:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:66
msgid ""
"find_package(Qt5 5.1.0 COMPONENTS Widgets\n"
"                       OPTIONAL_COMPONENTS Xml Sql\n"
")"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:72
msgid ""
"Handling of ``COMPONENTS`` and ``OPTIONAL_COMPONENTS`` is defined by the "
"package."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:75
msgid ""
"By setting the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` variable "
"to ``TRUE``, the ``PackageName`` package will not be searched, and will "
"always be ``NOTFOUND``."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:82
msgid "Config-file Packages"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:84
msgid ""
"A config-file package is a set of files provided by upstreams for "
"downstreams to use. CMake searches in a number of locations for package "
"configuration files, as described in the :command:`find_package` "
"documentation.  The most simple way for a CMake user to tell :manual:"
"`cmake(1)` to search in a non-standard prefix for a package is to set the "
"``CMAKE_PREFIX_PATH`` cache variable."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:90
msgid ""
"Config-file packages are provided by upstream vendors as part of development "
"packages, that is, they belong with the header files and any other files "
"provided to assist downstreams in using the package."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:94
msgid ""
"A set of variables which provide package status information are also set "
"automatically when using a config-file package.  The ``<Package>_FOUND`` "
"variable is set to true or false, depending on whether the package was "
"found.  The ``<Package>_DIR`` cache variable is set to the location of the "
"package configuration file."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:101
msgid "Find-module Packages"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:103
msgid ""
"A find module is a file with a set of rules for finding the required pieces "
"of a dependency, primarily header files and libraries.  Typically, a find "
"module is needed when the upstream is not built with CMake, or is not CMake-"
"aware enough to otherwise provide a package configuration file.  Unlike a "
"package configuration file, it is not shipped with upstream, but is used by "
"downstream to find the files by guessing locations of files with platform-"
"specific hints."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:110
msgid ""
"Unlike the case of an upstream-provided package configuration file, no "
"single point of reference identifies the package as being found, so the "
"``<Package>_FOUND`` variable is not automatically set by the :command:"
"`find_package` command.  It can still be expected to be set by convention "
"however and should be set by the author of the Find-module.  Similarly there "
"is no ``<Package>_DIR`` variable, but each of the artifacts such as library "
"locations and header file locations provide a separate cache variable."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:118
msgid ""
"See the :manual:`cmake-developer(7)` manual for more information about "
"creating Find-module files."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:122
msgid "Package Layout"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:124
msgid ""
"A config-file package consists of a `Package Configuration File`_ and "
"optionally a `Package Version File`_ provided with the project distribution."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:128
msgid "Package Configuration File"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:130
msgid "Consider a project ``Foo`` that installs the following files::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:132
msgid ""
"<prefix>/include/foo-1.2/foo.h\n"
"<prefix>/lib/foo-1.2/libfoo.a"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:135
msgid "It may also provide a CMake package configuration file::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:137
msgid "<prefix>/lib/cmake/foo-1.2/FooConfig.cmake"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:139
msgid ""
"with content defining :prop_tgt:`IMPORTED` targets, or defining variables, "
"such as:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:142
msgid ""
"# ...\n"
"# (compute PREFIX relative to file location)\n"
"# ...\n"
"set(Foo_INCLUDE_DIRS ${PREFIX}/include/foo-1.2)\n"
"set(Foo_LIBRARIES ${PREFIX}/lib/foo-1.2/libfoo.a)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:150
msgid ""
"If another project wishes to use ``Foo`` it need only to locate the "
"``FooConfig.cmake`` file and load it to get all the information it needs "
"about package content locations.  Since the package configuration file is "
"provided by the package installation it already knows all the file locations."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:155
msgid ""
"The :command:`find_package` command may be used to search for the package "
"configuration file.  This command constructs a set of installation prefixes "
"and searches under each prefix in several locations.  Given the name "
"``Foo``, it looks for a file called ``FooConfig.cmake`` or ``foo-config."
"cmake``. The full set of locations is specified in the :command:"
"`find_package` command documentation. One place it looks is::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:162
msgid "<prefix>/lib/cmake/Foo*/"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:164
msgid ""
"where ``Foo*`` is a case-insensitive globbing expression.  In our example "
"the globbing expression will match ``<prefix>/lib/cmake/foo-1.2`` and the "
"package configuration file will be found."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:168
msgid ""
"Once found, a package configuration file is immediately loaded.  It, "
"together with a package version file, contains all the information the "
"project needs to use the package."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:173
msgid "Package Version File"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:175
msgid ""
"When the :command:`find_package` command finds a candidate package "
"configuration file it looks next to it for a version file. The version file "
"is loaded to test whether the package version is an acceptable match for the "
"version requested. If the version file claims compatibility the "
"configuration file is accepted. Otherwise it is ignored."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:181
msgid ""
"The name of the package version file must match that of the package "
"configuration file but has either ``-version`` or ``Version`` appended to "
"the name before the ``.cmake`` extension.  For example, the files::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:185
msgid ""
"<prefix>/lib/cmake/foo-1.3/foo-config.cmake\n"
"<prefix>/lib/cmake/foo-1.3/foo-config-version.cmake"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:188
msgid "and::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:190
msgid ""
"<prefix>/lib/cmake/bar-4.2/BarConfig.cmake\n"
"<prefix>/lib/cmake/bar-4.2/BarConfigVersion.cmake"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:193
msgid ""
"are each pairs of package configuration files and corresponding package "
"version files."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:196
msgid ""
"When the :command:`find_package` command loads a version file it first sets "
"the following variables:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:200
msgid "``PACKAGE_FIND_NAME``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:200
msgid "The <package> name"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:203
msgid "``PACKAGE_FIND_VERSION``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:203
msgid "Full requested version string"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:206
msgid "``PACKAGE_FIND_VERSION_MAJOR``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:206
msgid "Major version if requested, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:209
msgid "``PACKAGE_FIND_VERSION_MINOR``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:209
msgid "Minor version if requested, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:212
msgid "``PACKAGE_FIND_VERSION_PATCH``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:212
msgid "Patch version if requested, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:215
msgid "``PACKAGE_FIND_VERSION_TWEAK``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:215
msgid "Tweak version if requested, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:218
msgid "``PACKAGE_FIND_VERSION_COUNT``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:218
#: ../../../manual/cmake-packages.7.rst:259
msgid "Number of version components, 0 to 4"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:220
msgid ""
"The version file must use these variables to check whether it is compatible "
"or an exact match for the requested version and set the following variables "
"with results:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:225
msgid "``PACKAGE_VERSION``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:225
#: ../../../manual/cmake-packages.7.rst:244
msgid "Full provided version string"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:228
msgid "``PACKAGE_VERSION_EXACT``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:228
msgid "True if version is exact match"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:231
msgid "``PACKAGE_VERSION_COMPATIBLE``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:231
msgid "True if version is compatible"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:234
msgid "``PACKAGE_VERSION_UNSUITABLE``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:234
msgid "True if unsuitable as any version"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:236
msgid ""
"Version files are loaded in a nested scope so they are free to set any "
"variables they wish as part of their computation. The find_package command "
"wipes out the scope when the version file has completed and it has checked "
"the output variables. When the version file claims to be an acceptable match "
"for the requested version the find_package command sets the following "
"variables for use by the project:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:244
msgid "``<package>_VERSION``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:247
msgid "``<package>_VERSION_MAJOR``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:247
msgid "Major version if provided, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:250
msgid "``<package>_VERSION_MINOR``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:250
msgid "Minor version if provided, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:253
msgid "``<package>_VERSION_PATCH``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:253
msgid "Patch version if provided, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:256
msgid "``<package>_VERSION_TWEAK``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:256
msgid "Tweak version if provided, else 0"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:259
msgid "``<package>_VERSION_COUNT``"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:261
msgid ""
"The variables report the version of the package that was actually found. The "
"``<package>`` part of their name matches the argument given to the :command:"
"`find_package` command."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:268
msgid "Creating Packages"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:270
msgid ""
"Usually, the upstream depends on CMake itself and can use some CMake "
"facilities for creating the package files. Consider an upstream which "
"provides a single shared library:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:274
msgid ""
"project(UpstreamLib)\n"
"\n"
"set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
"set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)\n"
"\n"
"set(Upstream_VERSION 3.4.1)\n"
"\n"
"include(GenerateExportHeader)\n"
"\n"
"add_library(ClimbingStats SHARED climbingstats.cpp)\n"
"generate_export_header(ClimbingStats)\n"
"set_property(TARGET ClimbingStats PROPERTY VERSION ${Upstream_VERSION})\n"
"set_property(TARGET ClimbingStats PROPERTY SOVERSION 3)\n"
"set_property(TARGET ClimbingStats PROPERTY\n"
"  INTERFACE_ClimbingStats_MAJOR_VERSION 3)\n"
"set_property(TARGET ClimbingStats APPEND PROPERTY\n"
"  COMPATIBLE_INTERFACE_STRING ClimbingStats_MAJOR_VERSION\n"
")\n"
"\n"
"install(TARGETS ClimbingStats EXPORT ClimbingStatsTargets\n"
"  LIBRARY DESTINATION lib\n"
"  ARCHIVE DESTINATION lib\n"
"  RUNTIME DESTINATION bin\n"
"  INCLUDES DESTINATION include\n"
")\n"
"install(\n"
"  FILES\n"
"    climbingstats.h\n"
"    \"${CMAKE_CURRENT_BINARY_DIR}/climbingstats_export.h\"\n"
"  DESTINATION\n"
"    include\n"
"  COMPONENT\n"
"    Devel\n"
")\n"
"\n"
"include(CMakePackageConfigHelpers)\n"
"write_basic_package_version_file(\n"
"  \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion."
"cmake\"\n"
"  VERSION ${Upstream_VERSION}\n"
"  COMPATIBILITY AnyNewerVersion\n"
")\n"
"\n"
"export(EXPORT ClimbingStatsTargets\n"
"  FILE \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsTargets."
"cmake\"\n"
"  NAMESPACE Upstream::\n"
")\n"
"configure_file(cmake/ClimbingStatsConfig.cmake\n"
"  \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfig.cmake\"\n"
"  COPYONLY\n"
")\n"
"\n"
"set(ConfigPackageLocation lib/cmake/ClimbingStats)\n"
"install(EXPORT ClimbingStatsTargets\n"
"  FILE\n"
"    ClimbingStatsTargets.cmake\n"
"  NAMESPACE\n"
"    Upstream::\n"
"  DESTINATION\n"
"    ${ConfigPackageLocation}\n"
")\n"
"install(\n"
"  FILES\n"
"    cmake/ClimbingStatsConfig.cmake\n"
"    \"${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion."
"cmake\"\n"
"  DESTINATION\n"
"    ${ConfigPackageLocation}\n"
"  COMPONENT\n"
"    Devel\n"
")"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:346
msgid ""
"The :module:`CMakePackageConfigHelpers` module provides a macro for creating "
"a simple ``ConfigVersion.cmake`` file.  This file sets the version of the "
"package.  It is read by CMake when :command:`find_package` is called to "
"determine the compatibility with the requested version, and to set some "
"version-specific variables ``<Package>_VERSION``, "
"``<Package>_VERSION_MAJOR``, ``<Package>_VERSION_MINOR`` etc.  The :command:"
"`install(EXPORT)` command is used to export the targets in the "
"``ClimbingStatsTargets`` export-set, defined previously by the :command:"
"`install(TARGETS)` command. This command generates the "
"``ClimbingStatsTargets.cmake`` file to contain :prop_tgt:`IMPORTED` targets, "
"suitable for use by downstreams and arranges to install it to ``lib/cmake/"
"ClimbingStats``.  The generated ``ClimbingStatsConfigVersion.cmake`` and a "
"``cmake/ClimbingStatsConfig.cmake`` are installed to the same location, "
"completing the package."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:360
msgid ""
"The generated :prop_tgt:`IMPORTED` targets have appropriate properties set "
"to define their :ref:`usage requirements <Target Usage Requirements>`, such "
"as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, :prop_tgt:"
"`INTERFACE_COMPILE_DEFINITIONS` and other relevant built-in ``INTERFACE_`` "
"properties.  The ``INTERFACE`` variant of user-defined properties listed in :"
"prop_tgt:`COMPATIBLE_INTERFACE_STRING` and other :ref:`Compatible Interface "
"Properties` are also propagated to the generated :prop_tgt:`IMPORTED` "
"targets.  In the above case, ``ClimbingStats_MAJOR_VERSION`` is defined as a "
"string which must be compatible among the dependencies of any depender.  By "
"setting this custom defined user property in this version and in the next "
"version of ``ClimbingStats``, :manual:`cmake(1)` will issue a diagnostic if "
"there is an attempt to use version 3 together with version 4.  Packages can "
"choose to employ such a pattern if different major versions of the package "
"are designed to be incompatible."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:376
msgid ""
"A ``NAMESPACE`` with double-colons is specified when exporting the targets "
"for installation.  This convention of double-colons gives CMake a hint that "
"the name is an :prop_tgt:`IMPORTED` target when it is used by downstreams "
"with the :command:`target_link_libraries` command.  This way, CMake can "
"issue a diagnostic if the package providing it has not yet been found."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:382
msgid ""
"In this case, when using :command:`install(TARGETS)` the ``INCLUDES "
"DESTINATION`` was specified.  This causes the ``IMPORTED`` targets to have "
"their :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` populated with the "
"``include`` directory in the :variable:`CMAKE_INSTALL_PREFIX`.  When the "
"``IMPORTED`` target is used by downstream, it automatically consumes the "
"entries from that property."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:390
msgid "Creating a Package Configuration File"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:392
msgid ""
"In this case, the ``ClimbingStatsConfig.cmake`` file could be as simple as:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:394
msgid "include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake\")"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:398
msgid ""
"As this allows downstreams to use the ``IMPORTED`` targets.  If any macros "
"should be provided by the ``ClimbingStats`` package, they should be in a "
"separate file which is installed to the same location as the "
"``ClimbingStatsConfig.cmake`` file, and included from there."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:403
msgid "This can also be extended to cover dependencies:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:405
msgid ""
"# ...\n"
"add_library(ClimbingStats SHARED climbingstats.cpp)\n"
"generate_export_header(ClimbingStats)\n"
"\n"
"find_package(Stats 2.6.4 REQUIRED)\n"
"target_link_libraries(ClimbingStats PUBLIC Stats::Types)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:414
msgid ""
"As the ``Stats::Types`` target is a ``PUBLIC`` dependency of "
"``ClimbingStats``, downstreams must also find the ``Stats`` package and link "
"to the ``Stats::Types`` library.  The ``Stats`` package should be found in "
"the ``ClimbingStatsConfig.cmake`` file to ensure this.  The "
"``find_dependency`` macro from the :module:`CMakeFindDependencyMacro` helps "
"with this by propagating whether the package is ``REQUIRED``, or ``QUIET`` "
"etc.  All ``REQUIRED`` dependencies of a package should be found in the "
"``Config.cmake`` file:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:422
msgid ""
"include(CMakeFindDependencyMacro)\n"
"find_dependency(Stats 2.6.4)\n"
"\n"
"include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake\")\n"
"include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake\")"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:430
msgid ""
"The ``find_dependency`` macro also sets ``ClimbingStats_FOUND`` to ``False`` "
"if the dependency is not found, along with a diagnostic that the "
"``ClimbingStats`` package can not be used without the ``Stats`` package."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:434
msgid ""
"If ``COMPONENTS`` are specified when the downstream uses :command:"
"`find_package`, they are listed in the ``<Package>_FIND_COMPONENTS`` "
"variable. If a particular component is non-optional, then the "
"``<Package>_FIND_REQUIRED_<comp>`` will be true. This can be tested with "
"logic in the package configuration file:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:439
msgid ""
"include(CMakeFindDependencyMacro)\n"
"find_dependency(Stats 2.6.4)\n"
"\n"
"include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsTargets.cmake\")\n"
"include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStatsMacros.cmake\")\n"
"\n"
"set(_supported_components Plot Table)\n"
"\n"
"foreach(_comp ${ClimbingStats_FIND_COMPONENTS})\n"
"  if (NOT \";${_supported_components};\" MATCHES _comp)\n"
"    set(ClimbingStats_FOUND False)\n"
"    set(ClimbingStats_NOT_FOUND_MESSAGE \"Unsupported component: "
"${_comp}\")\n"
"  endif()\n"
"  include(\"${CMAKE_CURRENT_LIST_DIR}/ClimbingStats${_comp}Targets.cmake\")\n"
"endforeach()"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:457
msgid ""
"Here, the ``ClimbingStats_NOT_FOUND_MESSAGE`` is set to a diagnosis that the "
"package could not be found because an invalid component was specified.  This "
"message variable can be set for any case where the ``_FOUND`` variable is "
"set to ``False``, and will be displayed to the user."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:463
msgid "Creating a Package Configuration File for the Build Tree"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:465
msgid ""
"The :command:`export(EXPORT)` command creates an :prop_tgt:`IMPORTED` "
"targets definition file which is specific to the build-tree, and is not "
"relocatable. This can similarly be used with a suitable package "
"configuration file and package version file to define a package for the "
"build tree which may be used without installation.  Consumers of the build "
"tree can simply ensure that the :variable:`CMAKE_PREFIX_PATH` contains the "
"build directory, or set the ``ClimbingStats_DIR`` to ``<build_dir>/"
"ClimbingStats`` in the cache."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:476
msgid "Creating Relocatable Packages"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:478
msgid ""
"A relocatable package must not reference absolute paths of files on the "
"machine where the package is built that will not exist on the machines where "
"the package may be installed."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:482
msgid ""
"Packages created by :command:`install(EXPORT)` are designed to be "
"relocatable, using paths relative to the location of the package itself.  "
"When defining the interface of a target for ``EXPORT``, keep in mind that "
"the include directories should be specified as relative paths which are "
"relative to the :variable:`CMAKE_INSTALL_PREFIX`:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:488
msgid ""
"target_include_directories(tgt INTERFACE\n"
"  # Wrong, not relocatable:\n"
"  $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/TgtName>\n"
")\n"
"\n"
"target_include_directories(tgt INTERFACE\n"
"  # Ok, relocatable:\n"
"  $<INSTALL_INTERFACE:include/TgtName>\n"
")"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:500
msgid ""
"The ``$<INSTALL_PREFIX>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` may be used as a placeholder for the install prefix without "
"resulting in a non-relocatable package.  This is necessary if complex "
"generator expressions are used:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:505
msgid ""
"target_include_directories(tgt INTERFACE\n"
"  # Ok, relocatable:\n"
"  $<INSTALL_INTERFACE:$<$<CONFIG:Debug>:$<INSTALL_PREFIX>/include/TgtName>>\n"
")"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:512
msgid ""
"This also applies to paths referencing external dependencies. It is not "
"advisable to populate any properties which may contain paths, such as :"
"prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` and :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES`, with paths relevant to dependencies. For "
"example, this code may not work well for a relocatable package:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:518
msgid ""
"target_link_libraries(ClimbingStats INTERFACE\n"
"  ${Foo_LIBRARIES} ${Bar_LIBRARIES}\n"
"  )\n"
"target_include_directories(ClimbingStats INTERFACE\n"
"  \"$<INSTALL_INTERFACE:${Foo_INCLUDE_DIRS};${Bar_INCLUDE_DIRS}>\"\n"
"  )"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:527
msgid ""
"The referenced variables may contain the absolute paths to libraries and "
"include directories **as found on the machine the package was made on**. "
"This would create a package with hard-coded paths to dependencies and not "
"suitable for relocation."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:532
msgid ""
"Ideally such dependencies should be used through their own :ref:`IMPORTED "
"targets <Imported Targets>` that have their own :prop_tgt:"
"`IMPORTED_LOCATION` and usage requirement properties such as :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES` populated appropriately.  Those imported "
"targets may then be used with the :command:`target_link_libraries` command "
"for ``ClimbingStats``:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:539
msgid "target_link_libraries(ClimbingStats INTERFACE Foo::Foo Bar::Bar)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:543
msgid ""
"With this approach the package references its external dependencies only "
"through the names of :ref:`IMPORTED targets <Imported Targets>`. When a "
"consumer uses the installed package, the consumer will run the appropriate :"
"command:`find_package` commands (via the ``find_dependency`` macro described "
"above) to find the dependencies and populate the imported targets with "
"appropriate paths on their own machine."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:550
msgid ""
"Unfortunately many :manual:`modules <cmake-modules(7)>` shipped with CMake "
"do not yet provide :ref:`IMPORTED targets <Imported Targets>` because their "
"development pre-dated this approach.  This may improve incrementally over "
"time.  Workarounds to create relocatable packages using such modules include:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:556
msgid ""
"When building the package, specify each ``Foo_LIBRARY`` cache entry as just "
"a library name, e.g. ``-DFoo_LIBRARY=foo``.  This tells the corresponding "
"find module to populate the ``Foo_LIBRARIES`` with just ``foo`` to ask the "
"linker to search for the library instead of hard-coding a path."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:562
msgid ""
"Or, after installing the package content but before creating the package "
"installation binary for redistribution, manually replace the absolute paths "
"with placeholders for substitution by the installation tool when the package "
"is installed."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:570
msgid "Package Registry"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:572
msgid ""
"CMake provides two central locations to register packages that have been "
"built or installed anywhere on a system:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:575
msgid "`User Package Registry`_"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:576
msgid "`System Package Registry`_"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:578
msgid ""
"The registries are especially useful to help projects find packages in non-"
"standard install locations or directly in their own build trees. A project "
"may populate either the user or system registry (using its own means, see "
"below) to refer to its location. In either case the package should store at "
"the registered location a `Package Configuration File`_ (``<package>Config."
"cmake``) and optionally a `Package Version File`_ (``<package>ConfigVersion."
"cmake``)."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:586
msgid ""
"The :command:`find_package` command searches the two package registries as "
"two of the search steps specified in its documentation.  If it has "
"sufficient permissions it also removes stale package registry entries that "
"refer to directories that do not exist or do not contain a matching package "
"configuration file."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:595
msgid "User Package Registry"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:597
msgid ""
"The User Package Registry is stored in a per-user location. The :command:"
"`export(PACKAGE)` command may be used to register a project build tree in "
"the user package registry.  CMake currently provides no interface to add "
"install trees to the user package registry.  Installers must be manually "
"taught to register their packages if desired."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:603
msgid ""
"On Windows the user package registry is stored in the Windows registry under "
"a key in ``HKEY_CURRENT_USER``."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:606
msgid "A ``<package>`` may appear under registry key::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:608
msgid "HKEY_CURRENT_USER\\Software\\Kitware\\CMake\\Packages\\<package>"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:610
#: ../../../manual/cmake-packages.7.rst:637
msgid ""
"as a ``REG_SZ`` value, with arbitrary name, that specifies the directory "
"containing the package configuration file."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:613
msgid ""
"On UNIX platforms the user package registry is stored in the user home "
"directory under ``~/.cmake/packages``.  A ``<package>`` may appear under the "
"directory::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:617
msgid "~/.cmake/packages/<package>"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:619
msgid ""
"as a file, with arbitrary name, whose content specifies the directory "
"containing the package configuration file."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:625
msgid "System Package Registry"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:627
msgid ""
"The System Package Registry is stored in a system-wide location. CMake "
"currently provides no interface to add to the system package registry. "
"Installers must be manually taught to register their packages if desired."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:631
msgid ""
"On Windows the system package registry is stored in the Windows registry "
"under a key in ``HKEY_LOCAL_MACHINE``.  A ``<package>`` may appear under "
"registry key::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:635
msgid "HKEY_LOCAL_MACHINE\\Software\\Kitware\\CMake\\Packages\\<package>"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:640
msgid "There is no system package registry on non-Windows platforms."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:645
msgid "Disabling the Package Registry"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:647
msgid ""
"In some cases using the Package Registries is not desirable. CMake allows "
"one to disable them using the following variables:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:650
msgid ""
":variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` disables the :command:"
"`export(PACKAGE)` command."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:652
msgid ""
":variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` disables the User Package "
"Registry in all the :command:`find_package` calls."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:654
msgid ""
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` disables the "
"System Package Registry in all the :command:`find_package` calls."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:658
msgid "Package Registry Example"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:660
msgid ""
"A simple convention for naming package registry entries is to use content "
"hashes.  They are deterministic and unlikely to collide (:command:"
"`export(PACKAGE)` uses this approach). The name of an entry referencing a "
"specific directory is simply the content hash of the directory path itself."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:666
msgid "If a project arranges for package registry entries to exist, such as::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:668
msgid ""
"> reg query HKCU\\Software\\Kitware\\CMake\\Packages\\MyPackage\n"
"HKEY_CURRENT_USER\\Software\\Kitware\\CMake\\Packages\\MyPackage\n"
" 45e7d55f13b87179bb12f907c8de6fc4 REG_SZ c:/Users/Me/Work/lib/cmake/"
"MyPackage\n"
" 7b4a9844f681c80ce93190d4e3185db9 REG_SZ c:/Users/Me/Work/MyPackage-build"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:673
msgid "or::"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:675
msgid ""
"$ cat ~/.cmake/packages/MyPackage/7d1fb77e07ce59a81bed093bbee945bd\n"
"/home/me/work/lib/cmake/MyPackage\n"
"$ cat ~/.cmake/packages/MyPackage/f92c1db873a1937f3100706657c63e07\n"
"/home/me/work/MyPackage-build"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:680
msgid "then the ``CMakeLists.txt`` code:"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:682
msgid "find_package(MyPackage)"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:686
msgid ""
"will search the registered locations for package configuration files "
"(``MyPackageConfig.cmake``).  The search order among package registry "
"entries for a single package is unspecified and the entry names (hashes in "
"this example) have no meaning.  Registered locations may contain package "
"version files (``MyPackageConfigVersion.cmake``) to tell :command:"
"`find_package` whether a specific location is suitable for the version "
"requested."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:695
msgid "Package Registry Ownership"
msgstr ""

#: ../../../manual/cmake-packages.7.rst:697
msgid ""
"Package registry entries are individually owned by the project installations "
"that they reference.  A package installer is responsible for adding its own "
"entry and the corresponding uninstaller is responsible for removing it."
msgstr ""

#: ../../../manual/cmake-packages.7.rst:701
msgid ""
"The :command:`export(PACKAGE)` command populates the user package registry "
"with the location of a project build tree.  Build trees tend to be deleted "
"by developers and have no \"uninstall\" event that could trigger removal of "
"their entries.  In order to keep the registries clean the :command:"
"`find_package` command automatically removes stale entries it encounters if "
"it has sufficient permissions.  CMake provides no interface to remove an "
"entry referencing an existing build tree once :command:`export(PACKAGE)` has "
"been invoked. However, if the project removes its package configuration file "
"from the build tree then the entry referencing the location will be "
"considered stale."
msgstr ""
