# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2019 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindFLEX.cmake:6
msgid "FindFLEX"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:8
msgid ""
"Find flex executable and provides a macro to generate custom build rules"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:12
msgid "The module defines the following variables:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:16
msgid ""
"FLEX_FOUND - true is flex executable is found\n"
"FLEX_EXECUTABLE - the path to the flex executable\n"
"FLEX_VERSION - the version of flex\n"
"FLEX_LIBRARIES - The flex libraries\n"
"FLEX_INCLUDE_DIRS - The path to the flex headers"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:24
msgid ""
"The minimum required version of flex can be specified using the standard "
"syntax, e.g.  find_package(FLEX 2.5.13)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:29
msgid "If flex is found on the system, the module provides the macro:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:33
msgid ""
"FLEX_TARGET(Name FlexInput FlexOutput\n"
"            [COMPILE_FLAGS <string>]\n"
"            [DEFINES_FILE <string>]\n"
"            )"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:38
msgid ""
"which creates a custom command to generate the <FlexOutput> file from the "
"<FlexInput> file.  If COMPILE_FLAGS option is specified, the next parameter "
"is added to the flex command line. If flex is configured to output a header "
"file, the DEFINES_FILE option may be used to specify its name. Name is an "
"alias used to get details of this custom command. Indeed the macro defines "
"the following variables:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:47
msgid ""
"FLEX_${Name}_DEFINED - true is the macro ran successfully\n"
"FLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an\n"
"alias for FlexOutput\n"
"FLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}\n"
"FLEX_${Name}_OUTPUT_HEADER - the header flex output, if any."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:55
msgid ""
"Flex scanners often use tokens defined by Bison: the code generated by Flex "
"depends of the header generated by Bison.  This module also defines a macro:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:61
msgid "ADD_FLEX_BISON_DEPENDENCY(FlexTarget BisonTarget)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:63
msgid ""
"which adds the required dependency between a scanner and a parser where "
"<FlexTarget> and <BisonTarget> are the first parameters of respectively "
"FLEX_TARGET and BISON_TARGET macros."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:69
msgid ""
"====================================================================\n"
"Example:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:76
msgid ""
"find_package(BISON)\n"
"find_package(FLEX)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:83
msgid ""
"BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)\n"
"FLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp)\n"
"ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:91
msgid ""
" include_directories(${CMAKE_CURRENT_BINARY_DIR})\n"
" add_executable(Foo\n"
"    Foo.cc\n"
"    ${BISON_MyParser_OUTPUTS}\n"
"    ${FLEX_MyScanner_OUTPUTS}\n"
" )\n"
"===================================================================="
msgstr ""
