# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2017 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/cmake_parse_arguments.rst:2
msgid "cmake_parse_arguments"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:4
msgid ""
"``cmake_parse_arguments`` is intended to be used in macros or functions for "
"parsing the arguments given to that macro or function.  It processes the "
"arguments and defines a set of variables which hold the values of the "
"respective options."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:11
msgid ""
"cmake_parse_arguments(<prefix> <options> <one_value_keywords>\n"
"                      <multi_value_keywords> args...)\n"
"\n"
"cmake_parse_arguments(PARSE_ARGV N <prefix> <options> <one_value_keywords>\n"
"                      <multi_value_keywords>)"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:17
msgid ""
"The first signature reads processes arguments passed in the ``args...``. "
"This may be used in either a :command:`macro` or a :command:`function`."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:20
msgid ""
"The ``PARSE_ARGV`` signature is only for use in a :command:`function` body.  "
"In this case the arguments that are parsed come from the ``ARGV#`` variables "
"of the calling function.  The parsing starts with the Nth argument, where "
"``N`` is an unsigned integer.  This allows for the values to have special "
"characters like ``;`` in them."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:26
msgid ""
"The ``<options>`` argument contains all options for the respective macro, i."
"e.  keywords which can be used when calling the macro without any value "
"following, like e.g.  the ``OPTIONAL`` keyword of the :command:`install` "
"command."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:31
msgid ""
"The ``<one_value_keywords>`` argument contains all keywords for this macro "
"which are followed by one value, like e.g. ``DESTINATION`` keyword of the :"
"command:`install` command."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:35
msgid ""
"The ``<multi_value_keywords>`` argument contains all keywords for this macro "
"which can be followed by more than one value, like e.g. the ``TARGETS`` or "
"``FILES`` keywords of the :command:`install` command."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:41
msgid ""
"All keywords shall be unique. I.e. every keyword shall only be specified "
"once in either ``<options>``, ``<one_value_keywords>`` or "
"``<multi_value_keywords>``. A warning will be emitted if uniqueness is "
"violated."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:46
msgid ""
"When done, ``cmake_parse_arguments`` will have defined for each of the "
"keywords listed in ``<options>``, ``<one_value_keywords>`` and "
"``<multi_value_keywords>`` a variable composed of the given ``<prefix>`` "
"followed by ``\"_\"`` and the name of the respective keyword.  These "
"variables will then hold the respective value from the argument list. For "
"the ``<options>`` keywords this will be ``TRUE`` or ``FALSE``."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:53
msgid ""
"All remaining arguments are collected in a variable "
"``<prefix>_UNPARSED_ARGUMENTS``, this can be checked afterwards to see "
"whether your macro was called with unrecognized parameters."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:57
msgid ""
"As an example here a ``my_install()`` macro, which takes similar arguments "
"as the real :command:`install` command:"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:60
msgid ""
"function(MY_INSTALL)\n"
"    set(options OPTIONAL FAST)\n"
"    set(oneValueArgs DESTINATION RENAME)\n"
"    set(multiValueArgs TARGETS CONFIGURATIONS)\n"
"    cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\"\n"
"                          \"${multiValueArgs}\" ${ARGN} )\n"
"\n"
"    # ..."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:71
msgid "Assume ``my_install()`` has been called like this:"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:73
msgid "my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:77
msgid ""
"After the ``cmake_parse_arguments`` call the macro will have set the "
"following variables::"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:80
msgid ""
"MY_INSTALL_OPTIONAL = TRUE\n"
"MY_INSTALL_FAST = FALSE (was not used in call to my_install)\n"
"MY_INSTALL_DESTINATION = \"bin\"\n"
"MY_INSTALL_RENAME = \"\" (was not used)\n"
"MY_INSTALL_TARGETS = \"foo;bar\"\n"
"MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n"
"MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (nothing expected after "
"\"OPTIONAL\")"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:88
msgid "You can then continue and process these variables."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:90
msgid ""
"Keywords terminate lists of values, e.g.  if directly after a "
"one_value_keyword another recognized keyword follows, this is interpreted as "
"the beginning of the new option.  E.g. ``my_install(TARGETS foo DESTINATION "
"OPTIONAL)`` would result in ``MY_INSTALL_DESTINATION`` set to "
"``\"OPTIONAL\"``, but as ``OPTIONAL`` is a keyword itself "
"``MY_INSTALL_DESTINATION`` will be empty and ``MY_INSTALL_OPTIONAL`` will "
"therefore be set to ``TRUE``."
msgstr ""
