# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2017 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CheckTypeSize.cmake:6
msgid "CheckTypeSize"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:8
msgid "Check sizeof a type"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:12
msgid ""
"CHECK_TYPE_SIZE(TYPE VARIABLE [BUILTIN_TYPES_ONLY]\n"
"                              [LANGUAGE <language>])"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:15
msgid ""
"Check if the type exists and determine its size.  On return, "
"\"HAVE_${VARIABLE}\" holds the existence of the type, and \"${VARIABLE}\" "
"holds one of the following:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:21
msgid ""
"<size> = type has non-zero size <size>\n"
"\"0\"    = type has arch-dependent size (see below)\n"
"\"\"     = type does not exist"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:25
msgid ""
"Both ``HAVE_${VARIABLE}`` and ``${VARIABLE}`` will be created as internal "
"cache variables."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:28
msgid ""
"Furthermore, the variable \"${VARIABLE}_CODE\" holds C preprocessor code to "
"define the macro \"${VARIABLE}\" to the size of the type, or leave the macro "
"undefined if the type does not exist."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:32
msgid ""
"The variable \"${VARIABLE}\" may be \"0\" when CMAKE_OSX_ARCHITECTURES has "
"multiple architectures for building OS X universal binaries.  This indicates "
"that the type size varies across architectures.  In this case \"${VARIABLE}"
"_CODE\" contains C preprocessor tests mapping from each architecture macro "
"to the corresponding type size.  The list of architecture macros is stored "
"in \"${VARIABLE}_KEYS\", and the value for each key is stored in "
"\"${VARIABLE}-${KEY}\"."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:40
msgid ""
"If the BUILTIN_TYPES_ONLY option is not given, the macro checks for headers "
"<sys/types.h>, <stdint.h>, and <stddef.h>, and saves results in "
"HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H.  The type size check "
"automatically includes the available headers, thus supporting checks of "
"types defined in the headers."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:46
msgid ""
"If LANGUAGE is set, the specified compiler will be used to perform the "
"check. Acceptable values are C and CXX"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:49
msgid ""
"Despite the name of the macro you may use it to check the size of more "
"complex expressions, too.  To check e.g.  for the size of a struct member "
"you can do something like this:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:55
msgid "check_type_size(\"((struct something*)0)->member\" SIZEOF_MEMBER)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:59
msgid ""
"The following variables may be set before calling this macro to modify the "
"way the check is run:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:64
msgid ""
"CMAKE_REQUIRED_FLAGS = string of compile command line flags\n"
"CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n"
"CMAKE_REQUIRED_INCLUDES = list of include directories\n"
"CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n"
"CMAKE_REQUIRED_QUIET = execute quietly without messages\n"
"CMAKE_EXTRA_INCLUDE_FILES = list of extra headers to include"
msgstr ""
