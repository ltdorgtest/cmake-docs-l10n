# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.19\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/file.rst:2
msgid "file"
msgstr ""

#: ../../../command/file.rst:4
msgid "File manipulation command."
msgstr ""

#: ../../../command/file.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/file.rst:11
msgid ""
"`Reading`_\n"
"  file(`READ`_ <filename> <out-var> [...])\n"
"  file(`STRINGS`_ <filename> <out-var> [...])\n"
"  file(`\\<HASH\\> <HASH_>`_ <filename> <out-var>)\n"
"  file(`TIMESTAMP`_ <filename> <out-var> [...])\n"
"  file(`GET_RUNTIME_DEPENDENCIES`_ [...])\n"
"\n"
"`Writing`_\n"
"  file({`WRITE`_ | `APPEND`_} <filename> <content>...)\n"
"  file({`TOUCH`_ | `TOUCH_NOCREATE`_} [<file>...])\n"
"  file(`GENERATE`_ OUTPUT <output-file> [...])\n"
"  file(`CONFIGURE`_ OUTPUT <output-file> CONTENT <content> [...])\n"
"\n"
"`Filesystem`_\n"
"  file({`GLOB`_ | `GLOB_RECURSE`_} <out-var> [...] [<globbing-expr>...])\n"
"  file(`RENAME`_ <oldname> <newname>)\n"
"  file({`REMOVE`_ | `REMOVE_RECURSE`_ } [<files>...])\n"
"  file(`MAKE_DIRECTORY`_ [<dir>...])\n"
"  file({`COPY`_ | `INSTALL`_} <file>... DESTINATION <dir> [...])\n"
"  file(`SIZE`_ <filename> <out-var>)\n"
"  file(`READ_SYMLINK`_ <linkname> <out-var>)\n"
"  file(`CREATE_LINK`_ <original> <linkname> [...])\n"
"  file(`CHMOD`_ <files>... <directories>... PERMISSIONS <permissions>... "
"[...])\n"
"  file(`CHMOD_RECURSE`_ <files>... <directories>... PERMISSIONS "
"<permissions>... [...])\n"
"\n"
"`Path Conversion`_\n"
"  file(`REAL_PATH`_ <path> <out-var> [BASE_DIRECTORY <dir>])\n"
"  file(`RELATIVE_PATH`_ <out-var> <directory> <file>)\n"
"  file({`TO_CMAKE_PATH`_ | `TO_NATIVE_PATH`_} <path> <out-var>)\n"
"\n"
"`Transfer`_\n"
"  file(`DOWNLOAD`_ <url> [<file>] [...])\n"
"  file(`UPLOAD`_ <file> <url> [...])\n"
"\n"
"`Locking`_\n"
"  file(`LOCK`_ <path> [...])\n"
"\n"
"`Archiving`_\n"
"  file(`ARCHIVE_CREATE`_ OUTPUT <archive> PATHS <paths>... [...])\n"
"  file(`ARCHIVE_EXTRACT`_ INPUT <archive> [...])"
msgstr ""

#: ../../../command/file.rst:53
msgid "Reading"
msgstr ""

#: ../../../command/file.rst:57
msgid ""
"file(READ <filename> <variable>\n"
"     [OFFSET <offset>] [LIMIT <max-in>] [HEX])"
msgstr ""

#: ../../../command/file.rst:62
msgid ""
"Read content from a file called ``<filename>`` and store it in a "
"``<variable>``.  Optionally start from the given ``<offset>`` and read at "
"most ``<max-in>`` bytes.  The ``HEX`` option causes data to be converted to "
"a hexadecimal representation (useful for binary data). If the ``HEX`` option "
"is specified, letters in the output (``a`` through ``f``) are in lowercase."
msgstr ""

#: ../../../command/file.rst:71
msgid "file(STRINGS <filename> <variable> [<options>...])"
msgstr ""

#: ../../../command/file.rst:75
msgid ""
"Parse a list of ASCII strings from ``<filename>`` and store it in "
"``<variable>``.  Binary data in the file are ignored.  Carriage return "
"(``\\r``, CR) characters are ignored.  The options are:"
msgstr ""

#: ../../../command/file.rst:79
msgid "``LENGTH_MAXIMUM <max-len>``"
msgstr ""

#: ../../../command/file.rst:80
msgid "Consider only strings of at most a given length."
msgstr ""

#: ../../../command/file.rst:82
msgid "``LENGTH_MINIMUM <min-len>``"
msgstr ""

#: ../../../command/file.rst:83
msgid "Consider only strings of at least a given length."
msgstr ""

#: ../../../command/file.rst:85
msgid "``LIMIT_COUNT <max-num>``"
msgstr ""

#: ../../../command/file.rst:86
msgid "Limit the number of distinct strings to be extracted."
msgstr ""

#: ../../../command/file.rst:88
msgid "``LIMIT_INPUT <max-in>``"
msgstr ""

#: ../../../command/file.rst:89
msgid "Limit the number of input bytes to read from the file."
msgstr ""

#: ../../../command/file.rst:91
msgid "``LIMIT_OUTPUT <max-out>``"
msgstr ""

#: ../../../command/file.rst:92
msgid "Limit the number of total bytes to store in the ``<variable>``."
msgstr ""

#: ../../../command/file.rst:94
msgid "``NEWLINE_CONSUME``"
msgstr ""

#: ../../../command/file.rst:95
msgid ""
"Treat newline characters (``\\n``, LF) as part of string content instead of "
"terminating at them."
msgstr ""

#: ../../../command/file.rst:98
msgid "``NO_HEX_CONVERSION``"
msgstr ""

#: ../../../command/file.rst:99
msgid ""
"Intel Hex and Motorola S-record files are automatically converted to binary "
"while reading unless this option is given."
msgstr ""

#: ../../../command/file.rst:102
msgid "``REGEX <regex>``"
msgstr ""

#: ../../../command/file.rst:103
msgid "Consider only strings that match the given regular expression."
msgstr ""

#: ../../../command/file.rst:105
msgid "``ENCODING <encoding-type>``"
msgstr ""

#: ../../../command/file.rst:106
msgid ""
"Consider strings of a given encoding.  Currently supported encodings are: "
"UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, UTF-32BE.  If the ENCODING option is "
"not provided and the file has a Byte Order Mark, the ENCODING option will be "
"defaulted to respect the Byte Order Mark."
msgstr ""

#: ../../../command/file.rst:111
msgid "For example, the code"
msgstr ""

#: ../../../command/file.rst:113
msgid "file(STRINGS myfile.txt myfile)"
msgstr ""

#: ../../../command/file.rst:117
msgid ""
"stores a list in the variable ``myfile`` in which each item is a line from "
"the input file."
msgstr ""

#: ../../../command/file.rst:122
msgid "file(<HASH> <filename> <variable>)"
msgstr ""

#: ../../../command/file.rst:126
msgid ""
"Compute a cryptographic hash of the content of ``<filename>`` and store it "
"in a ``<variable>``.  The supported ``<HASH>`` algorithm names are those "
"listed by the :ref:`string(\\<HASH\\>) <Supported Hash Algorithms>` command."
msgstr ""

#: ../../../command/file.rst:133
msgid "file(TIMESTAMP <filename> <variable> [<format>] [UTC])"
msgstr ""

#: ../../../command/file.rst:137
msgid ""
"Compute a string representation of the modification time of ``<filename>`` "
"and store it in ``<variable>``.  Should the command be unable to obtain a "
"timestamp variable will be set to the empty string (\"\")."
msgstr ""

#: ../../../command/file.rst:141
msgid ""
"See the :command:`string(TIMESTAMP)` command for documentation of the "
"``<format>`` and ``UTC`` options."
msgstr ""

#: ../../../command/file.rst:146
msgid ""
"file(GET_RUNTIME_DEPENDENCIES\n"
"  [RESOLVED_DEPENDENCIES_VAR <deps_var>]\n"
"  [UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>]\n"
"  [CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>]\n"
"  [EXECUTABLES [<executable_files>...]]\n"
"  [LIBRARIES [<library_files>...]]\n"
"  [MODULES [<module_files>...]]\n"
"  [DIRECTORIES [<directories>...]]\n"
"  [BUNDLE_EXECUTABLE <bundle_executable_file>]\n"
"  [PRE_INCLUDE_REGEXES [<regexes>...]]\n"
"  [PRE_EXCLUDE_REGEXES [<regexes>...]]\n"
"  [POST_INCLUDE_REGEXES [<regexes>...]]\n"
"  [POST_EXCLUDE_REGEXES [<regexes>...]]\n"
"  )"
msgstr ""

#: ../../../command/file.rst:163
msgid "Recursively get the list of libraries depended on by the given files."
msgstr ""

#: ../../../command/file.rst:165
msgid ""
"Please note that this sub-command is not intended to be used in project "
"mode. Instead, use it in an :command:`install(CODE)` or :command:"
"`install(SCRIPT)` block. For example:"
msgstr ""

#: ../../../command/file.rst:169
msgid ""
"install(CODE [[\n"
"  file(GET_RUNTIME_DEPENDENCIES\n"
"    # ...\n"
"    )\n"
"  ]])"
msgstr ""

#: ../../../command/file.rst:177
msgid "The arguments are as follows:"
msgstr ""

#: ../../../command/file.rst:179
msgid "``RESOLVED_DEPENDENCIES_VAR <deps_var>``"
msgstr ""

#: ../../../command/file.rst:180
msgid ""
"Name of the variable in which to store the list of resolved dependencies."
msgstr ""

#: ../../../command/file.rst:182
msgid "``UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>``"
msgstr ""

#: ../../../command/file.rst:183
msgid ""
"Name of the variable in which to store the list of unresolved dependencies. "
"If this variable is not specified, and there are any unresolved "
"dependencies, an error is issued."
msgstr ""

#: ../../../command/file.rst:187
msgid "``CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>``"
msgstr ""

#: ../../../command/file.rst:188
msgid ""
"Variable prefix in which to store conflicting dependency information. "
"Dependencies are conflicting if two files with the same name are found in "
"two different directories. The list of filenames that conflict are stored in "
"``<conflicting_deps_prefix>_FILENAMES``. For each filename, the list of "
"paths that were found for that filename are stored in "
"``<conflicting_deps_prefix>_<filename>``."
msgstr ""

#: ../../../command/file.rst:195
msgid "``EXECUTABLES <executable_files>``"
msgstr ""

#: ../../../command/file.rst:196
msgid ""
"List of executable files to read for dependencies. These are executables "
"that are typically created with :command:`add_executable`, but they do not "
"have to be created by CMake. On Apple platforms, the paths to these files "
"determine the value of ``@executable_path`` when recursively resolving the "
"libraries. Specifying any kind of library (``STATIC``, ``MODULE``, or "
"``SHARED``) here will result in undefined behavior."
msgstr ""

#: ../../../command/file.rst:203
msgid "``LIBRARIES <library_files>``"
msgstr ""

#: ../../../command/file.rst:204
msgid ""
"List of library files to read for dependencies. These are libraries that are "
"typically created with :command:`add_library(SHARED)`, but they do not have "
"to be created by CMake. Specifying ``STATIC`` libraries, ``MODULE`` "
"libraries, or executables here will result in undefined behavior."
msgstr ""

#: ../../../command/file.rst:209
msgid "``MODULES <module_files>``"
msgstr ""

#: ../../../command/file.rst:210
msgid ""
"List of loadable module files to read for dependencies. These are modules "
"that are typically created with :command:`add_library(MODULE)`, but they do "
"not have to be created by CMake. They are typically used by calling "
"``dlopen()`` at runtime rather than linked at link time with ``ld -l``. "
"Specifying ``STATIC`` libraries, ``SHARED`` libraries, or executables here "
"will result in undefined behavior."
msgstr ""

#: ../../../command/file.rst:217
msgid "``DIRECTORIES <directories>``"
msgstr ""

#: ../../../command/file.rst:218
msgid ""
"List of additional directories to search for dependencies. On Linux "
"platforms, these directories are searched if the dependency is not found in "
"any of the other usual paths. If it is found in such a directory, a warning "
"is issued, because it means that the file is incomplete (it does not list "
"all of the directories that contain its dependencies). On Windows platforms, "
"these directories are searched if the dependency is not found in any of the "
"other search paths, but no warning is issued, because searching other paths "
"is a normal part of Windows dependency resolution. On Apple platforms, this "
"argument has no effect."
msgstr ""

#: ../../../command/file.rst:228
msgid "``BUNDLE_EXECUTABLE <bundle_executable_file>``"
msgstr ""

#: ../../../command/file.rst:229
msgid ""
"Executable to treat as the \"bundle executable\" when resolving libraries. "
"On Apple platforms, this argument determines the value of "
"``@executable_path`` when recursively resolving libraries for ``LIBRARIES`` "
"and ``MODULES`` files. It has no effect on ``EXECUTABLES`` files. On other "
"platforms, it has no effect. This is typically (but not always) one of the "
"executables in the ``EXECUTABLES`` argument which designates the \"main\" "
"executable of the package."
msgstr ""

#: ../../../command/file.rst:237
msgid ""
"The following arguments specify filters for including or excluding libraries "
"to be resolved. See below for a full description of how they work."
msgstr ""

#: ../../../command/file.rst:240
msgid "``PRE_INCLUDE_REGEXES <regexes>``"
msgstr ""

#: ../../../command/file.rst:241
msgid ""
"List of pre-include regexes through which to filter the names of not-yet-"
"resolved dependencies."
msgstr ""

#: ../../../command/file.rst:244
msgid "``PRE_EXCLUDE_REGEXES <regexes>``"
msgstr ""

#: ../../../command/file.rst:245
msgid ""
"List of pre-exclude regexes through which to filter the names of not-yet-"
"resolved dependencies."
msgstr ""

#: ../../../command/file.rst:248
msgid "``POST_INCLUDE_REGEXES <regexes>``"
msgstr ""

#: ../../../command/file.rst:249
msgid ""
"List of post-include regexes through which to filter the names of resolved "
"dependencies."
msgstr ""

#: ../../../command/file.rst:252
msgid "``POST_EXCLUDE_REGEXES <regexes>``"
msgstr ""

#: ../../../command/file.rst:253
msgid ""
"List of post-exclude regexes through which to filter the names of resolved "
"dependencies."
msgstr ""

#: ../../../command/file.rst:256
msgid ""
"These arguments can be used to exclude unwanted system libraries when "
"resolving the dependencies, or to include libraries from a specific "
"directory. The filtering works as follows:"
msgstr ""

#: ../../../command/file.rst:260
msgid ""
"If the not-yet-resolved dependency matches any of the "
"``PRE_INCLUDE_REGEXES``, steps 2 and 3 are skipped, and the dependency "
"resolution proceeds to step 4."
msgstr ""

#: ../../../command/file.rst:263
msgid ""
"If the not-yet-resolved dependency matches any of the "
"``PRE_EXCLUDE_REGEXES``, dependency resolution stops for that dependency."
msgstr ""

#: ../../../command/file.rst:265
msgid "Otherwise, dependency resolution proceeds."
msgstr ""

#: ../../../command/file.rst:266
msgid ""
"``file(GET_RUNTIME_DEPENDENCIES)`` searches for the dependency according to "
"the linking rules of the platform (see below)."
msgstr ""

#: ../../../command/file.rst:268
msgid ""
"If the dependency is found, and its full path matches one of the "
"``POST_INCLUDE_REGEXES``, the full path is added to the resolved "
"dependencies, and ``file(GET_RUNTIME_DEPENDENCIES)`` recursively resolves "
"that library's own dependencies. Otherwise, resolution proceeds to step 6."
msgstr ""

#: ../../../command/file.rst:272
msgid ""
"If the dependency is found, but its full path matches one of the "
"``POST_EXCLUDE_REGEXES``, it is not added to the resolved dependencies, and "
"dependency resolution stops for that dependency."
msgstr ""

#: ../../../command/file.rst:275
msgid ""
"If the dependency is found, and its full path does not match either "
"``POST_INCLUDE_REGEXES`` or ``POST_EXCLUDE_REGEXES``, the full path is added "
"to the resolved dependencies, and ``file(GET_RUNTIME_DEPENDENCIES)`` "
"recursively resolves that library's own dependencies."
msgstr ""

#: ../../../command/file.rst:280
msgid ""
"Different platforms have different rules for how dependencies are resolved. "
"These specifics are described here."
msgstr ""

#: ../../../command/file.rst:283
msgid "On Linux platforms, library resolution works as follows:"
msgstr ""

#: ../../../command/file.rst:285
msgid ""
"If the depending file does not have any ``RUNPATH`` entries, and the library "
"exists in one of the depending file's ``RPATH`` entries, or its parents', in "
"that order, the dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:288
msgid ""
"Otherwise, if the depending file has any ``RUNPATH`` entries, and the "
"library exists in one of those entries, the dependency is resolved to that "
"file."
msgstr ""

#: ../../../command/file.rst:291
msgid ""
"Otherwise, if the library exists in one of the directories listed by "
"``ldconfig``, the dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:293
msgid ""
"Otherwise, if the library exists in one of the ``DIRECTORIES`` entries, the "
"dependency is resolved to that file. In this case, a warning is issued, "
"because finding a file in one of the ``DIRECTORIES`` means that the "
"depending file is not complete (it does not list all the directories from "
"which it pulls dependencies)."
msgstr ""

#: ../../../command/file.rst:298 ../../../command/file.rst:346
#: ../../../command/file.rst:368
msgid "Otherwise, the dependency is unresolved."
msgstr ""

#: ../../../command/file.rst:300
msgid "On Windows platforms, library resolution works as follows:"
msgstr ""

#: ../../../command/file.rst:302
msgid ""
"The dependent DLL name is converted to lowercase. Windows DLL names are case-"
"insensitive, and some linkers mangle the case of the DLL dependency names. "
"However, this makes it more difficult for ``PRE_INCLUDE_REGEXES``, "
"``PRE_EXCLUDE_REGEXES``, ``POST_INCLUDE_REGEXES``, and "
"``POST_EXCLUDE_REGEXES`` to properly filter DLL names - every regex would "
"have to check for both uppercase and lowercase letters. For example:"
msgstr ""

#: ../../../command/file.rst:309
msgid ""
"file(GET_RUNTIME_DEPENDENCIES\n"
"  # ...\n"
"  PRE_INCLUDE_REGEXES \"^[Mm][Yy][Ll][Ii][Bb][Rr][Aa][Rr][Yy]\\\\.[Dd][Ll]"
"[Ll]$\"\n"
"  )"
msgstr ""

#: ../../../command/file.rst:316
msgid ""
"Converting the DLL name to lowercase allows the regexes to only match "
"lowercase names, thus simplifying the regex. For example:"
msgstr ""

#: ../../../command/file.rst:319
msgid ""
"file(GET_RUNTIME_DEPENDENCIES\n"
"  # ...\n"
"  PRE_INCLUDE_REGEXES \"^mylibrary\\\\.dll$\"\n"
"  )"
msgstr ""

#: ../../../command/file.rst:326
msgid ""
"This regex will match ``mylibrary.dll`` regardless of how it is cased, "
"either on disk or in the depending file. (For example, it will match "
"``mylibrary.dll``, ``MyLibrary.dll``, and ``MYLIBRARY.DLL``.)"
msgstr ""

#: ../../../command/file.rst:330
msgid ""
"Please note that the directory portion of any resolved DLLs retains its "
"casing and is not converted to lowercase. Only the filename portion is "
"converted."
msgstr ""

#: ../../../command/file.rst:334
msgid ""
"(**Not yet implemented**) If the depending file is a Windows Store app, and "
"the dependency is listed as a dependency in the application's package "
"manifest, the dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:337
msgid ""
"Otherwise, if the library exists in the same directory as the depending "
"file, the dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:339
msgid ""
"Otherwise, if the library exists in either the operating system's "
"``system32`` directory or the ``Windows`` directory, in that order, the "
"dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:342
msgid ""
"Otherwise, if the library exists in one of the directories specified by "
"``DIRECTORIES``, in the order they are listed, the dependency is resolved to "
"that file. In this case, a warning is not issued, because searching other "
"directories is a normal part of Windows library resolution."
msgstr ""

#: ../../../command/file.rst:348
msgid "On Apple platforms, library resolution works as follows:"
msgstr ""

#: ../../../command/file.rst:350
msgid ""
"If the dependency starts with ``@executable_path/``, and an ``EXECUTABLES`` "
"argument is in the process of being resolved, and replacing "
"``@executable_path/`` with the directory of the executable yields an "
"existing file, the dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:354
msgid ""
"Otherwise, if the dependency starts with ``@executable_path/``, and there is "
"a ``BUNDLE_EXECUTABLE`` argument, and replacing ``@executable_path/`` with "
"the directory of the bundle executable yields an existing file, the "
"dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:358
msgid ""
"Otherwise, if the dependency starts with ``@loader_path/``, and replacing "
"``@loader_path/`` with the directory of the depending file yields an "
"existing file, the dependency is resolved to that file."
msgstr ""

#: ../../../command/file.rst:361
msgid ""
"Otherwise, if the dependency starts with ``@rpath/``, and replacing ``@rpath/"
"`` with one of the ``RPATH`` entries of the depending file yields an "
"existing file, the dependency is resolved to that file. Note that ``RPATH`` "
"entries that start with ``@executable_path/`` or ``@loader_path/`` also have "
"these items replaced with the appropriate path."
msgstr ""

#: ../../../command/file.rst:366
msgid ""
"Otherwise, if the dependency is an absolute file that exists, the dependency "
"is resolved to that file."
msgstr ""

#: ../../../command/file.rst:370
msgid ""
"This function accepts several variables that determine which tool is used "
"for dependency resolution:"
msgstr ""

#: ../../../command/file.rst:375
msgid ""
"Determines which operating system and executable format the files are built "
"for. This could be one of several values:"
msgstr ""

#: ../../../command/file.rst:378 ../../../command/file.rst:394
msgid "``linux+elf``"
msgstr ""

#: ../../../command/file.rst:379 ../../../command/file.rst:395
#: ../../../command/file.rst:396
msgid "``windows+pe``"
msgstr ""

#: ../../../command/file.rst:380 ../../../command/file.rst:397
msgid "``macos+macho``"
msgstr ""

#: ../../../command/file.rst:382 ../../../command/file.rst:400
msgid ""
"If this variable is not specified, it is determined automatically by system "
"introspection."
msgstr ""

#: ../../../command/file.rst:387
msgid ""
"Determines the tool to use for dependency resolution. It could be one of "
"several values, depending on the value of :variable:"
"`CMAKE_GET_RUNTIME_DEPENDENCIES_PLATFORM`:"
msgstr ""

#: ../../../command/file.rst:392
msgid "``CMAKE_GET_RUNTIME_DEPENDENCIES_PLATFORM``"
msgstr ""

#: ../../../command/file.rst:392
msgid "``CMAKE_GET_RUNTIME_DEPENDENCIES_TOOL``"
msgstr ""

#: ../../../command/file.rst:394 ../../../command/file.rst:396
msgid "``objdump``"
msgstr ""

#: ../../../command/file.rst:395
msgid "``dumpbin``"
msgstr ""

#: ../../../command/file.rst:397
msgid "``otool``"
msgstr ""

#: ../../../command/file.rst:405
msgid ""
"Determines the path to the tool to use for dependency resolution. This is "
"the actual path to ``objdump``, ``dumpbin``, or ``otool``."
msgstr ""

#: ../../../command/file.rst:408
msgid ""
"If this variable is not specified, it is determined by the value of "
"``CMAKE_OBJDUMP`` if set, else by system introspection."
msgstr ""

#: ../../../command/file.rst:412
msgid "Writing"
msgstr ""

#: ../../../command/file.rst:417
msgid ""
"file(WRITE <filename> <content>...)\n"
"file(APPEND <filename> <content>...)"
msgstr ""

#: ../../../command/file.rst:422
msgid ""
"Write ``<content>`` into a file called ``<filename>``.  If the file does not "
"exist, it will be created.  If the file already exists, ``WRITE`` mode will "
"overwrite it and ``APPEND`` mode will append to the end. Any directories in "
"the path specified by ``<filename>`` that do not exist will be created."
msgstr ""

#: ../../../command/file.rst:428
msgid ""
"If the file is a build input, use the :command:`configure_file` command to "
"update the file only when its content changes."
msgstr ""

#: ../../../command/file.rst:434
msgid ""
"file(TOUCH [<files>...])\n"
"file(TOUCH_NOCREATE [<files>...])"
msgstr ""

#: ../../../command/file.rst:439
msgid ""
"Create a file with no content if it does not yet exist. If the file already "
"exists, its access and/or modification will be updated to the time when the "
"function call is executed."
msgstr ""

#: ../../../command/file.rst:443
msgid ""
"Use TOUCH_NOCREATE to touch a file if it exists but not create it. If a file "
"does not exist it will be silently ignored."
msgstr ""

#: ../../../command/file.rst:446
msgid ""
"With TOUCH and TOUCH_NOCREATE the contents of an existing file will not be "
"modified."
msgstr ""

#: ../../../command/file.rst:451
msgid ""
"file(GENERATE OUTPUT output-file\n"
"     <INPUT input-file|CONTENT content>\n"
"     [CONDITION expression] [TARGET target])"
msgstr ""

#: ../../../command/file.rst:457
msgid ""
"Generate an output file for each build configuration supported by the "
"current :manual:`CMake Generator <cmake-generators(7)>`.  Evaluate :manual:"
"`generator expressions <cmake-generator-expressions(7)>` from the input "
"content to produce the output content.  The options are:"
msgstr ""

#: ../../../command/file.rst:462
msgid "``CONDITION <condition>``"
msgstr ""

#: ../../../command/file.rst:463
msgid ""
"Generate the output file for a particular configuration only if the "
"condition is true.  The condition must be either ``0`` or ``1`` after "
"evaluating generator expressions."
msgstr ""

#: ../../../command/file.rst:467 ../../../command/file.rst:522
msgid "``CONTENT <content>``"
msgstr ""

#: ../../../command/file.rst:468
msgid "Use the content given explicitly as input."
msgstr ""

#: ../../../command/file.rst:470
msgid "``INPUT <input-file>``"
msgstr ""

#: ../../../command/file.rst:471
msgid ""
"Use the content from a given file as input. A relative path is treated with "
"respect to the value of :variable:`CMAKE_CURRENT_SOURCE_DIR`.  See policy :"
"policy:`CMP0070`."
msgstr ""

#: ../../../command/file.rst:475 ../../../command/file.rst:517
msgid "``OUTPUT <output-file>``"
msgstr ""

#: ../../../command/file.rst:476
msgid ""
"Specify the output file name to generate.  Use generator expressions such as "
"``$<CONFIG>`` to specify a configuration-specific output file name.  "
"Multiple configurations may generate the same output file only if the "
"generated content is identical.  Otherwise, the ``<output-file>`` must "
"evaluate to an unique name for each configuration. A relative path (after "
"evaluating generator expressions) is treated with respect to the value of :"
"variable:`CMAKE_CURRENT_BINARY_DIR`. See policy :policy:`CMP0070`."
msgstr ""

#: ../../../command/file.rst:485
msgid "``TARGET <target>``"
msgstr ""

#: ../../../command/file.rst:486
msgid ""
"Specify which target to use when evaluating generator expressions that "
"require a target for evaluation (e.g. ``$<COMPILE_FEATURES:...>``, "
"``$<TARGET_PROPERTY:prop>``)."
msgstr ""

#: ../../../command/file.rst:490
msgid ""
"Exactly one ``CONTENT`` or ``INPUT`` option must be given.  A specific "
"``OUTPUT`` file may be named by at most one invocation of "
"``file(GENERATE)``. Generated files are modified and their timestamp updated "
"on subsequent cmake runs only if their content is changed."
msgstr ""

#: ../../../command/file.rst:495
msgid ""
"Note also that ``file(GENERATE)`` does not create the output file until the "
"generation phase. The output file will not yet have been written when the "
"``file(GENERATE)`` command returns, it is written only after processing all "
"of a project's ``CMakeLists.txt`` files."
msgstr ""

#: ../../../command/file.rst:502
msgid ""
"file(CONFIGURE OUTPUT output-file\n"
"     CONTENT content\n"
"     [ESCAPE_QUOTES] [@ONLY]\n"
"     [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])"
msgstr ""

#: ../../../command/file.rst:509
msgid ""
"Generate an output file using the input given by ``CONTENT`` and substitute "
"variable values referenced as ``@VAR@`` or ``${VAR}`` contained therein. The "
"substitution rules behave the same as the :command:`configure_file` command. "
"In order to match :command:`configure_file`'s behavior, generator "
"expressions are not supported for both ``OUTPUT`` and ``CONTENT``."
msgstr ""

#: ../../../command/file.rst:515
msgid "The arguments are:"
msgstr ""

#: ../../../command/file.rst:518
msgid ""
"Specify the output file name to generate. A relative path is treated with "
"respect to the value of :variable:`CMAKE_CURRENT_BINARY_DIR`. ``<output-"
"file>`` does not support generator expressions."
msgstr ""

#: ../../../command/file.rst:523
msgid ""
"Use the content given explicitly as input. ``<content>`` does not support "
"generator expressions."
msgstr ""

#: ../../../command/file.rst:526
msgid "``ESCAPE_QUOTES``"
msgstr ""

#: ../../../command/file.rst:527
msgid "Escape any substituted quotes with backslashes (C-style)."
msgstr ""

#: ../../../command/file.rst:529
msgid "``@ONLY``"
msgstr ""

#: ../../../command/file.rst:530
msgid ""
"Restrict variable replacement to references of the form ``@VAR@``. This is "
"useful for configuring scripts that use ``${VAR}`` syntax."
msgstr ""

#: ../../../command/file.rst:533
msgid "``NEWLINE_STYLE <style>``"
msgstr ""

#: ../../../command/file.rst:534
msgid ""
"Specify the newline style for the output file.  Specify ``UNIX`` or ``LF`` "
"for ``\\n`` newlines, or specify ``DOS``, ``WIN32``, or ``CRLF`` for "
"``\\r\\n`` newlines."
msgstr ""

#: ../../../command/file.rst:539
msgid "Filesystem"
msgstr ""

#: ../../../command/file.rst:544
msgid ""
"file(GLOB <variable>\n"
"     [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS]\n"
"     [<globbing-expressions>...])\n"
"file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS]\n"
"     [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS]\n"
"     [<globbing-expressions>...])"
msgstr ""

#: ../../../command/file.rst:553
msgid ""
"Generate a list of files that match the ``<globbing-expressions>`` and store "
"it into the ``<variable>``.  Globbing expressions are similar to regular "
"expressions, but much simpler.  If ``RELATIVE`` flag is specified, the "
"results will be returned as relative paths to the given path.  The results "
"will be ordered lexicographically."
msgstr ""

#: ../../../command/file.rst:559
msgid ""
"On Windows and macOS, globbing is case-insensitive even if the underlying "
"filesystem is case-sensitive (both filenames and globbing expressions are "
"converted to lowercase before matching).  On other platforms, globbing is "
"case-sensitive."
msgstr ""

#: ../../../command/file.rst:564
msgid ""
"If the ``CONFIGURE_DEPENDS`` flag is specified, CMake will add logic to the "
"main build system check target to rerun the flagged ``GLOB`` commands at "
"build time. If any of the outputs change, CMake will regenerate the build "
"system."
msgstr ""

#: ../../../command/file.rst:569
msgid ""
"By default ``GLOB`` lists directories - directories are omitted in result if "
"``LIST_DIRECTORIES`` is set to false."
msgstr ""

#: ../../../command/file.rst:573
msgid ""
"We do not recommend using GLOB to collect a list of source files from your "
"source tree.  If no CMakeLists.txt file changes when a source is added or "
"removed then the generated build system cannot know when to ask CMake to "
"regenerate. The ``CONFIGURE_DEPENDS`` flag may not work reliably on all "
"generators, or if a new generator is added in the future that cannot support "
"it, projects using it will be stuck. Even if ``CONFIGURE_DEPENDS`` works "
"reliably, there is still a cost to perform the check on every rebuild."
msgstr ""

#: ../../../command/file.rst:582
msgid "Examples of globbing expressions include::"
msgstr ""

#: ../../../command/file.rst:584
msgid ""
"*.cxx      - match all files with extension cxx\n"
"*.vt?      - match all files with extension vta,...,vtz\n"
"f[3-5].txt - match files f3.txt, f4.txt, f5.txt"
msgstr ""

#: ../../../command/file.rst:588
msgid ""
"The ``GLOB_RECURSE`` mode will traverse all the subdirectories of the "
"matched directory and match the files.  Subdirectories that are symlinks are "
"only traversed if ``FOLLOW_SYMLINKS`` is given or policy :policy:`CMP0009` "
"is not set to ``NEW``."
msgstr ""

#: ../../../command/file.rst:593
msgid ""
"By default ``GLOB_RECURSE`` omits directories from result list - setting "
"``LIST_DIRECTORIES`` to true adds directories to result list. If "
"``FOLLOW_SYMLINKS`` is given or policy :policy:`CMP0009` is not set to "
"``NEW`` then ``LIST_DIRECTORIES`` treats symlinks as directories."
msgstr ""

#: ../../../command/file.rst:598
msgid "Examples of recursive globbing include::"
msgstr ""

#: ../../../command/file.rst:600
msgid "/dir/*.py  - match all python files in /dir and subdirectories"
msgstr ""

#: ../../../command/file.rst:604
msgid "file(RENAME <oldname> <newname>)"
msgstr ""

#: ../../../command/file.rst:608
msgid ""
"Move a file or directory within a filesystem from ``<oldname>`` to "
"``<newname>``, replacing the destination atomically."
msgstr ""

#: ../../../command/file.rst:614
msgid ""
"file(REMOVE [<files>...])\n"
"file(REMOVE_RECURSE [<files>...])"
msgstr ""

#: ../../../command/file.rst:619
msgid ""
"Remove the given files.  The ``REMOVE_RECURSE`` mode will remove the given "
"files and directories, also non-empty directories. No error is emitted if a "
"given file does not exist.  Relative input paths are evaluated with respect "
"to the current source directory.  Empty input paths are ignored with a "
"warning."
msgstr ""

#: ../../../command/file.rst:626
msgid "file(MAKE_DIRECTORY [<directories>...])"
msgstr ""

#: ../../../command/file.rst:630
msgid "Create the given directories and their parents as needed."
msgstr ""

#: ../../../command/file.rst:635
msgid ""
"file(<COPY|INSTALL> <files>... DESTINATION <dir>\n"
"     [FILE_PERMISSIONS <permissions>...]\n"
"     [DIRECTORY_PERMISSIONS <permissions>...]\n"
"     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\n"
"     [FOLLOW_SYMLINK_CHAIN]\n"
"     [FILES_MATCHING]\n"
"     [[PATTERN <pattern> | REGEX <regex>]\n"
"      [EXCLUDE] [PERMISSIONS <permissions>...]] [...])"
msgstr ""

#: ../../../command/file.rst:646
msgid ""
"The ``COPY`` signature copies files, directories, and symlinks to a "
"destination folder.  Relative input paths are evaluated with respect to the "
"current source directory, and a relative destination is evaluated with "
"respect to the current build directory.  Copying preserves input file "
"timestamps, and optimizes out a file if it exists at the destination with "
"the same timestamp.  Copying preserves input permissions unless explicit "
"permissions or ``NO_SOURCE_PERMISSIONS`` are given (default is "
"``USE_SOURCE_PERMISSIONS``)."
msgstr ""

#: ../../../command/file.rst:655
msgid ""
"If ``FOLLOW_SYMLINK_CHAIN`` is specified, ``COPY`` will recursively resolve "
"the symlinks at the paths given until a real file is found, and install a "
"corresponding symlink in the destination for each symlink encountered. For "
"each symlink that is installed, the resolution is stripped of the directory, "
"leaving only the filename, meaning that the new symlink points to a file in "
"the same directory as the symlink. This feature is useful on some Unix "
"systems, where libraries are installed as a chain of symlinks with version "
"numbers, with less specific versions pointing to more specific versions. "
"``FOLLOW_SYMLINK_CHAIN`` will install all of these symlinks and the library "
"itself into the destination directory. For example, if you have the "
"following directory structure:"
msgstr ""

#: ../../../command/file.rst:667
msgid "``/opt/foo/lib/libfoo.so.1.2.3``"
msgstr ""

#: ../../../command/file.rst:668
msgid "``/opt/foo/lib/libfoo.so.1.2 -> libfoo.so.1.2.3``"
msgstr ""

#: ../../../command/file.rst:669
msgid "``/opt/foo/lib/libfoo.so.1 -> libfoo.so.1.2``"
msgstr ""

#: ../../../command/file.rst:670
msgid "``/opt/foo/lib/libfoo.so -> libfoo.so.1``"
msgstr ""

#: ../../../command/file.rst:672
msgid "and you do:"
msgstr ""

#: ../../../command/file.rst:674
msgid "file(COPY /opt/foo/lib/libfoo.so DESTINATION lib FOLLOW_SYMLINK_CHAIN)"
msgstr ""

#: ../../../command/file.rst:678
msgid ""
"This will install all of the symlinks and ``libfoo.so.1.2.3`` itself into "
"``lib``."
msgstr ""

#: ../../../command/file.rst:681
msgid ""
"See the :command:`install(DIRECTORY)` command for documentation of "
"permissions, ``FILES_MATCHING``, ``PATTERN``, ``REGEX``, and ``EXCLUDE`` "
"options.  Copying directories preserves the structure of their content even "
"if options are used to select a subset of files."
msgstr ""

#: ../../../command/file.rst:687
msgid ""
"The ``INSTALL`` signature differs slightly from ``COPY``: it prints status "
"messages (subject to the :variable:`CMAKE_INSTALL_MESSAGE` variable), and "
"``NO_SOURCE_PERMISSIONS`` is default. Installation scripts generated by the :"
"command:`install` command use this signature (with some undocumented options "
"for internal use)."
msgstr ""

#: ../../../command/file.rst:695
msgid "file(SIZE <filename> <variable>)"
msgstr ""

#: ../../../command/file.rst:699
msgid ""
"Determine the file size of the ``<filename>`` and put the result in "
"``<variable>`` variable. Requires that ``<filename>`` is a valid path "
"pointing to a file and is readable."
msgstr ""

#: ../../../command/file.rst:705
msgid "file(READ_SYMLINK <linkname> <variable>)"
msgstr ""

#: ../../../command/file.rst:709
msgid ""
"This subcommand queries the symlink ``<linkname>`` and stores the path it "
"points to in the result ``<variable>``.  If ``<linkname>`` does not exist or "
"is not a symlink, CMake issues a fatal error."
msgstr ""

#: ../../../command/file.rst:713
msgid ""
"Note that this command returns the raw symlink path and does not resolve a "
"relative path.  The following is an example of how to ensure that an "
"absolute path is obtained:"
msgstr ""

#: ../../../command/file.rst:717
msgid ""
"set(linkname \"/path/to/foo.sym\")\n"
"file(READ_SYMLINK \"${linkname}\" result)\n"
"if(NOT IS_ABSOLUTE \"${result}\")\n"
"  get_filename_component(dir \"${linkname}\" DIRECTORY)\n"
"  set(result \"${dir}/${result}\")\n"
"endif()"
msgstr ""

#: ../../../command/file.rst:728
msgid ""
"file(CREATE_LINK <original> <linkname>\n"
"     [RESULT <result>] [COPY_ON_ERROR] [SYMBOLIC])"
msgstr ""

#: ../../../command/file.rst:733
msgid ""
"Create a link ``<linkname>`` that points to ``<original>``. It will be a "
"hard link by default, but providing the ``SYMBOLIC`` option results in a "
"symbolic link instead.  Hard links require that ``original`` exists and is a "
"file, not a directory.  If ``<linkname>`` already exists, it will be "
"overwritten."
msgstr ""

#: ../../../command/file.rst:739
msgid ""
"The ``<result>`` variable, if specified, receives the status of the "
"operation. It is set to ``0`` upon success or an error message otherwise.  "
"If ``RESULT`` is not specified and the operation fails, a fatal error is "
"emitted."
msgstr ""

#: ../../../command/file.rst:743
msgid ""
"Specifying ``COPY_ON_ERROR`` enables copying the file as a fallback if "
"creating the link fails.  It can be useful for handling situations such as "
"``<original>`` and ``<linkname>`` being on different drives or mount points, "
"which would make them unable to support a hard link."
msgstr ""

#: ../../../command/file.rst:750
msgid ""
"file(CHMOD <files>... <directories>...\n"
"    [PERMISSIONS <permissions>...]\n"
"    [FILE_PERMISSIONS <permissions>...]\n"
"    [DIRECTORY_PERMISSIONS <permissions>...])"
msgstr ""

#: ../../../command/file.rst:757
msgid ""
"Set the permissions for the ``<files>...`` and ``<directories>...`` "
"specified. Valid permissions are  ``OWNER_READ``, ``OWNER_WRITE``, "
"``OWNER_EXECUTE``, ``GROUP_READ``, ``GROUP_WRITE``, ``GROUP_EXECUTE``, "
"``WORLD_READ``, ``WORLD_WRITE``, ``WORLD_EXECUTE``."
msgstr ""

#: ../../../command/file.rst:762
msgid "Valid combination of keywords are:"
msgstr ""

#: ../../../command/file.rst:764
msgid "``PERMISSIONS``"
msgstr ""

#: ../../../command/file.rst:765
msgid "All items are changed."
msgstr ""

#: ../../../command/file.rst:767
msgid "``FILE_PERMISSIONS``"
msgstr ""

#: ../../../command/file.rst:768
msgid "Only files are changed."
msgstr ""

#: ../../../command/file.rst:770
msgid "``DIRECTORY_PERMISSIONS``"
msgstr ""

#: ../../../command/file.rst:771
msgid "Only directories are changed."
msgstr ""

#: ../../../command/file.rst:773
msgid "``PERMISSIONS`` and ``FILE_PERMISSIONS``"
msgstr ""

#: ../../../command/file.rst:774
msgid "``FILE_PERMISSIONS`` overrides ``PERMISSIONS`` for files."
msgstr ""

#: ../../../command/file.rst:776
msgid "``PERMISSIONS`` and ``DIRECTORY_PERMISSIONS``"
msgstr ""

#: ../../../command/file.rst:777
msgid "``DIRECTORY_PERMISSIONS`` overrides ``PERMISSIONS`` for directories."
msgstr ""

#: ../../../command/file.rst:779
msgid "``FILE_PERMISSIONS`` and ``DIRECTORY_PERMISSIONS``"
msgstr ""

#: ../../../command/file.rst:780
msgid ""
"Use ``FILE_PERMISSIONS`` for files and ``DIRECTORY_PERMISSIONS`` for "
"directories."
msgstr ""

#: ../../../command/file.rst:786
msgid ""
"file(CHMOD_RECURSE <files>... <directories>...\n"
"     [PERMISSIONS <permissions>...]\n"
"     [FILE_PERMISSIONS <permissions>...]\n"
"     [DIRECTORY_PERMISSIONS <permissions>...])"
msgstr ""

#: ../../../command/file.rst:793
msgid ""
"Same as `CHMOD`_, but change the permissions of files and directories "
"present in the ``<directories>...`` recursively."
msgstr ""

#: ../../../command/file.rst:797
msgid "Path Conversion"
msgstr ""

#: ../../../command/file.rst:801
msgid "file(REAL_PATH <path> <out-var> [BASE_DIRECTORY <dir>])"
msgstr ""

#: ../../../command/file.rst:805
msgid ""
"Compute the absolute path to an existing file or directory with symlinks "
"resolved."
msgstr ""

#: ../../../command/file.rst:808
msgid ""
"If the provided ``<path>`` is a relative path, it is evaluated relative to "
"the given base directory ``<dir>``. If no base directory is provided, the "
"default base directory will be :variable:`CMAKE_CURRENT_SOURCE_DIR`."
msgstr ""

#: ../../../command/file.rst:814
msgid "file(RELATIVE_PATH <variable> <directory> <file>)"
msgstr ""

#: ../../../command/file.rst:818
msgid ""
"Compute the relative path from a ``<directory>`` to a ``<file>`` and store "
"it in the ``<variable>``."
msgstr ""

#: ../../../command/file.rst:824
msgid ""
"file(TO_CMAKE_PATH \"<path>\" <variable>)\n"
"file(TO_NATIVE_PATH \"<path>\" <variable>)"
msgstr ""

#: ../../../command/file.rst:829
msgid ""
"The ``TO_CMAKE_PATH`` mode converts a native ``<path>`` into a cmake-style "
"path with forward-slashes (``/``).  The input can be a single path or a "
"system search path like ``$ENV{PATH}``.  A search path will be converted to "
"a cmake-style list separated by ``;`` characters."
msgstr ""

#: ../../../command/file.rst:834
msgid ""
"The ``TO_NATIVE_PATH`` mode converts a cmake-style ``<path>`` into a native "
"path with platform-specific slashes (``\\`` on Windows and ``/`` elsewhere)."
msgstr ""

#: ../../../command/file.rst:837
msgid ""
"Always use double quotes around the ``<path>`` to be sure it is treated as a "
"single argument to this command."
msgstr ""

#: ../../../command/file.rst:841
msgid "Transfer"
msgstr ""

#: ../../../command/file.rst:846
msgid ""
"file(DOWNLOAD <url> [<file>] [<options>...])\n"
"file(UPLOAD   <file> <url> [<options>...])"
msgstr ""

#: ../../../command/file.rst:851
msgid ""
"The ``DOWNLOAD`` subcommand downloads the given ``<url>`` to a local "
"``<file>``. If ``<file>`` is not specified for ``file(DOWNLOAD)``, the file "
"is not saved. This can be useful if you want to know if a file can be "
"downloaded (for example, to check that it exists) without actually saving it "
"anywhere. The ``UPLOAD`` mode uploads a local ``<file>`` to a given "
"``<url>``."
msgstr ""

#: ../../../command/file.rst:857
msgid "Options to both ``DOWNLOAD`` and ``UPLOAD`` are:"
msgstr ""

#: ../../../command/file.rst:859
msgid "``INACTIVITY_TIMEOUT <seconds>``"
msgstr ""

#: ../../../command/file.rst:860
msgid "Terminate the operation after a period of inactivity."
msgstr ""

#: ../../../command/file.rst:862
msgid "``LOG <variable>``"
msgstr ""

#: ../../../command/file.rst:863
msgid "Store a human-readable log of the operation in a variable."
msgstr ""

#: ../../../command/file.rst:865
msgid "``SHOW_PROGRESS``"
msgstr ""

#: ../../../command/file.rst:866
msgid ""
"Print progress information as status messages until the operation is "
"complete."
msgstr ""

#: ../../../command/file.rst:869
msgid "``STATUS <variable>``"
msgstr ""

#: ../../../command/file.rst:870
msgid ""
"Store the resulting status of the operation in a variable. The status is a "
"``;`` separated list of length 2. The first element is the numeric return "
"value for the operation, and the second element is a string value for the "
"error. A ``0`` numeric error means no error in the operation."
msgstr ""

#: ../../../command/file.rst:876
msgid "``TIMEOUT <seconds>``"
msgstr ""

#: ../../../command/file.rst:877
msgid "Terminate the operation after a given total time has elapsed."
msgstr ""

#: ../../../command/file.rst:879
msgid "``USERPWD <username>:<password>``"
msgstr ""

#: ../../../command/file.rst:880
msgid "Set username and password for operation."
msgstr ""

#: ../../../command/file.rst:882
msgid "``HTTPHEADER <HTTP-header>``"
msgstr ""

#: ../../../command/file.rst:883
msgid "HTTP header for operation. Suboption can be repeated several times."
msgstr ""

#: ../../../command/file.rst:885
msgid "``NETRC <level>``"
msgstr ""

#: ../../../command/file.rst:886
msgid ""
"Specify whether the .netrc file is to be used for operation.  If this option "
"is not specified, the value of the ``CMAKE_NETRC`` variable will be used "
"instead. Valid levels are:"
msgstr ""

#: ../../../command/file.rst:891
msgid "``IGNORED``"
msgstr ""

#: ../../../command/file.rst:892
msgid "The .netrc file is ignored. This is the default."
msgstr ""

#: ../../../command/file.rst:894
msgid "``OPTIONAL``"
msgstr ""

#: ../../../command/file.rst:895
msgid ""
"The .netrc file is optional, and information in the URL is preferred. The "
"file will be scanned to find which ever information is not specified in the "
"URL."
msgstr ""

#: ../../../command/file.rst:898
msgid "``REQUIRED``"
msgstr ""

#: ../../../command/file.rst:899
msgid "The .netrc file is required, and information in the URL is ignored."
msgstr ""

#: ../../../command/file.rst:901
msgid "``NETRC_FILE <file>``"
msgstr ""

#: ../../../command/file.rst:902
msgid ""
"Specify an alternative .netrc file to the one in your home directory, if the "
"``NETRC`` level is ``OPTIONAL`` or ``REQUIRED``. If this option is not "
"specified, the value of the ``CMAKE_NETRC_FILE`` variable will be used "
"instead."
msgstr ""

#: ../../../command/file.rst:907
msgid ""
"If neither ``NETRC`` option is given CMake will check variables "
"``CMAKE_NETRC`` and ``CMAKE_NETRC_FILE``, respectively."
msgstr ""

#: ../../../command/file.rst:910
msgid "``TLS_VERIFY <ON|OFF>``"
msgstr ""

#: ../../../command/file.rst:911
msgid ""
"Specify whether to verify the server certificate for ``https://`` URLs. The "
"default is to *not* verify."
msgstr ""

#: ../../../command/file.rst:914
msgid "``TLS_CAINFO <file>``"
msgstr ""

#: ../../../command/file.rst:915
msgid "Specify a custom Certificate Authority file for ``https://`` URLs."
msgstr ""

#: ../../../command/file.rst:917
msgid ""
"For ``https://`` URLs CMake must be built with OpenSSL support.  ``TLS/SSL`` "
"certificates are not checked by default.  Set ``TLS_VERIFY`` to ``ON`` to "
"check certificates. If neither ``TLS`` option is given CMake will check "
"variables ``CMAKE_TLS_VERIFY`` and ``CMAKE_TLS_CAINFO``, respectively."
msgstr ""

#: ../../../command/file.rst:922
msgid "Additional options to ``DOWNLOAD`` are:"
msgstr ""

#: ../../../command/file.rst:924
msgid "``EXPECTED_HASH ALGO=<value>``"
msgstr ""

#: ../../../command/file.rst:926
msgid ""
"Verify that the downloaded content hash matches the expected value, where "
"``ALGO`` is one of the algorithms supported by ``file(<HASH>)``. If it does "
"not match, the operation fails with an error. It is an error to specify this "
"if ``DOWNLOAD`` is not given a ``<file>``."
msgstr ""

#: ../../../command/file.rst:931
msgid "``EXPECTED_MD5 <value>``"
msgstr ""

#: ../../../command/file.rst:932
msgid ""
"Historical short-hand for ``EXPECTED_HASH MD5=<value>``. It is an error to "
"specify this if ``DOWNLOAD`` is not given a ``<file>``."
msgstr ""

#: ../../../command/file.rst:936
msgid "Locking"
msgstr ""

#: ../../../command/file.rst:940
msgid ""
"file(LOCK <path> [DIRECTORY] [RELEASE]\n"
"     [GUARD <FUNCTION|FILE|PROCESS>]\n"
"     [RESULT_VARIABLE <variable>]\n"
"     [TIMEOUT <seconds>])"
msgstr ""

#: ../../../command/file.rst:947
msgid ""
"Lock a file specified by ``<path>`` if no ``DIRECTORY`` option present and "
"file ``<path>/cmake.lock`` otherwise. File will be locked for scope defined "
"by ``GUARD`` option (default value is ``PROCESS``). ``RELEASE`` option can "
"be used to unlock file explicitly. If option ``TIMEOUT`` is not specified "
"CMake will wait until lock succeed or until fatal error occurs. If "
"``TIMEOUT`` is set to ``0`` lock will be tried once and result will be "
"reported immediately. If ``TIMEOUT`` is not ``0`` CMake will try to lock "
"file for the period specified by ``<seconds>`` value. Any errors will be "
"interpreted as fatal if there is no ``RESULT_VARIABLE`` option. Otherwise "
"result will be stored in ``<variable>`` and will be ``0`` on success or "
"error message on failure."
msgstr ""

#: ../../../command/file.rst:958
msgid ""
"Note that lock is advisory - there is no guarantee that other processes will "
"respect this lock, i.e. lock synchronize two or more CMake instances sharing "
"some modifiable resources. Similar logic applied to ``DIRECTORY`` option - "
"locking parent directory doesn't prevent other ``LOCK`` commands to lock any "
"child directory or file."
msgstr ""

#: ../../../command/file.rst:964
msgid ""
"Trying to lock file twice is not allowed.  Any intermediate directories and "
"file itself will be created if they not exist.  ``GUARD`` and ``TIMEOUT`` "
"options ignored on ``RELEASE`` operation."
msgstr ""

#: ../../../command/file.rst:969
msgid "Archiving"
msgstr ""

#: ../../../command/file.rst:973
msgid ""
"file(ARCHIVE_CREATE OUTPUT <archive>\n"
"  PATHS <paths>...\n"
"  [FORMAT <format>]\n"
"  [COMPRESSION <compression> [COMPRESSION_LEVEL <compression-level>]]\n"
"  [MTIME <mtime>]\n"
"  [VERBOSE])"
msgstr ""

#: ../../../command/file.rst:982
msgid ""
"Creates the specified ``<archive>`` file with the files and directories "
"listed in ``<paths>``.  Note that ``<paths>`` must list actual files or "
"directories, wildcards are not supported."
msgstr ""

#: ../../../command/file.rst:986
msgid ""
"Use the ``FORMAT`` option to specify the archive format.  Supported values "
"for ``<format>`` are ``7zip``, ``gnutar``, ``pax``, ``paxr``, ``raw`` and "
"``zip``.  If ``FORMAT`` is not given, the default format is ``paxr``."
msgstr ""

#: ../../../command/file.rst:990
msgid ""
"Some archive formats allow the type of compression to be specified. The "
"``7zip`` and ``zip`` archive formats already imply a specific type of "
"compression.  The other formats use no compression by default, but can be "
"directed to do so with the ``COMPRESSION`` option.  Valid values for "
"``<compression>`` are ``None``, ``BZip2``, ``GZip``, ``XZ``, and ``Zstd``."
msgstr ""

#: ../../../command/file.rst:996
msgid ""
"The compression level can be specified with the ``COMPRESSION_LEVEL`` "
"option. The ``<compression-level>`` should be between 0-9, with the default "
"being 0. The ``COMPRESSION`` option must be present when "
"``COMPRESSION_LEVEL`` is given."
msgstr ""

#: ../../../command/file.rst:1001
msgid ""
"With ``FORMAT`` set to ``raw`` only one file will be compressed with the "
"compression type specified by ``COMPRESSION``."
msgstr ""

#: ../../../command/file.rst:1004
msgid ""
"The ``VERBOSE`` option enables verbose output for the archive operation."
msgstr ""

#: ../../../command/file.rst:1006
msgid ""
"To specify the modification time recorded in tarball entries, use the "
"``MTIME`` option."
msgstr ""

#: ../../../command/file.rst:1011
msgid ""
"file(ARCHIVE_EXTRACT INPUT <archive>\n"
"  [DESTINATION <dir>]\n"
"  [PATTERNS <patterns>...]\n"
"  [LIST_ONLY]\n"
"  [VERBOSE])"
msgstr ""

#: ../../../command/file.rst:1019
msgid "Extracts or lists the content of the specified ``<archive>``."
msgstr ""

#: ../../../command/file.rst:1021
msgid ""
"The directory where the content of the archive will be extracted to can be "
"specified using the ``DESTINATION`` option.  If the directory does not "
"exist, it will be created.  If ``DESTINATION`` is not given, the current "
"binary directory will be used."
msgstr ""

#: ../../../command/file.rst:1026
msgid ""
"If required, you may select which files and directories to list or extract "
"from the archive using the specified ``<patterns>``.  Wildcards are "
"supported. If the ``PATTERNS`` option is not given, the entire archive will "
"be listed or extracted."
msgstr ""

#: ../../../command/file.rst:1031
msgid ""
"``LIST_ONLY`` will list the files in the archive rather than extract them."
msgstr ""

#: ../../../command/file.rst:1033
msgid "With ``VERBOSE``, the command will produce verbose output."
msgstr ""
