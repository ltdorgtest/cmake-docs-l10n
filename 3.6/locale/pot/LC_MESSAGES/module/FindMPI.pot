# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2016 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindMPI.cmake:3
msgid "FindMPI"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:5
msgid "Find a Message Passing Interface (MPI) implementation"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:7
msgid ""
"The Message Passing Interface (MPI) is a library used to write high-"
"performance distributed-memory parallel applications, and is typically "
"deployed on a cluster.  MPI is a standard interface (defined by the MPI "
"forum) for which many implementations are available.  All of them have "
"somewhat different include paths, libraries to link against, etc., and this "
"module tries to smooth out those differences."
msgstr ""

#: ../../../../Modules/FindMPI.cmake:15
msgid "Variables"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:17
msgid ""
"This module will set the following variables per language in your project, "
"where <lang> is one of C, CXX, or Fortran:"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:22
msgid ""
"MPI_<lang>_FOUND           TRUE if FindMPI found MPI flags for <lang>\n"
"MPI_<lang>_COMPILER        MPI Compiler wrapper for <lang>\n"
"MPI_<lang>_COMPILE_FLAGS   Compilation flags for MPI programs\n"
"MPI_<lang>_INCLUDE_PATH    Include path(s) for MPI header\n"
"MPI_<lang>_LINK_FLAGS      Linking flags for MPI programs\n"
"MPI_<lang>_LIBRARIES       All libraries to link MPI programs against"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:29
msgid ""
"Additionally, FindMPI sets the following variables for running MPI programs "
"from the command line:"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:34
msgid ""
"MPIEXEC                    Executable for running MPI programs\n"
"MPIEXEC_NUMPROC_FLAG       Flag to pass to MPIEXEC before giving\n"
"                           it the number of processors to run on\n"
"MPIEXEC_PREFLAGS           Flags to pass to MPIEXEC directly\n"
"                           before the executable to run.\n"
"MPIEXEC_POSTFLAGS          Flags to pass to MPIEXEC after other flags"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:42
msgid "Usage"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:44
msgid ""
"To use this module, simply call FindMPI from a CMakeLists.txt file, or run "
"``find_package(MPI)``, then run CMake.  If you are happy with the auto-"
"detected configuration for your language, then you're done.  If not, you "
"have two options:"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:51
msgid ""
"1. Set MPI_<lang>_COMPILER to the MPI wrapper (mpicc, etc.) of your\n"
"   choice and reconfigure.  FindMPI will attempt to determine all the\n"
"   necessary variables using THAT compiler's compile and link flags.\n"
"2. If this fails, or if your MPI implementation does not come with\n"
"   a compiler wrapper, then set both MPI_<lang>_LIBRARIES and\n"
"   MPI_<lang>_INCLUDE_PATH.  You may also set any other variables\n"
"   listed above, but these two are required.  This will circumvent\n"
"   autodetection entirely."
msgstr ""

#: ../../../../Modules/FindMPI.cmake:60
msgid ""
"When configuration is successful, ``MPI_<lang>_COMPILER`` will be set to the "
"compiler wrapper for <lang>, if it was found.  ``MPI_<lang>_FOUND`` and "
"other variables above will be set if any MPI implementation was found for "
"<lang>, regardless of whether a compiler was found."
msgstr ""

#: ../../../../Modules/FindMPI.cmake:65
msgid ""
"When using ``MPIEXEC`` to execute MPI applications, you should typically use "
"all of the ``MPIEXEC`` flags as follows:"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:70
msgid ""
"${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} PROCS\n"
"  ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:73
msgid ""
"where ``PROCS`` is the number of processors on which to execute the program, "
"``EXECUTABLE`` is the MPI program, and ``ARGS`` are the arguments to pass to "
"the MPI program."
msgstr ""

#: ../../../../Modules/FindMPI.cmake:78
msgid "Backward Compatibility"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:80
msgid ""
"For backward compatibility with older versions of FindMPI, these variables "
"are set, but deprecated:"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:85
msgid ""
"MPI_FOUND           MPI_COMPILER        MPI_LIBRARY\n"
"MPI_COMPILE_FLAGS   MPI_INCLUDE_PATH    MPI_EXTRA_LIBRARY\n"
"MPI_LINK_FLAGS      MPI_LIBRARIES"
msgstr ""

#: ../../../../Modules/FindMPI.cmake:89
msgid "In new projects, please use the ``MPI_<lang>_XXX`` equivalents."
msgstr ""
