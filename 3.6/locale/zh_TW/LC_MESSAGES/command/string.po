# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2016 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/string.rst:2
msgid "string"
msgstr ""

#: ../../../command/string.rst:8
msgid "String operations."
msgstr ""

#: ../../../command/string.rst:11
msgid "Search and Replace"
msgstr ""

#: ../../../command/string.rst:14
msgid "FIND"
msgstr ""

#: ../../../command/string.rst:18
msgid "string(FIND <string> <substring> <output variable> [REVERSE])"
msgstr ""

#: ../../../command/string.rst:20
msgid ""
"Return the position where the given substring was found in the supplied "
"string.  If the ``REVERSE`` flag was used, the command will search for the "
"position of the last occurrence of the specified substring.  If the "
"substring is not found, a position of -1 is returned."
msgstr ""

#: ../../../command/string.rst:26
msgid "REPLACE"
msgstr ""

#: ../../../command/string.rst:30
msgid ""
"string(REPLACE <match_string>\n"
"       <replace_string> <output variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:34
msgid ""
"Replace all occurrences of ``match_string`` in the input with "
"``replace_string`` and store the result in the output."
msgstr ""

#: ../../../command/string.rst:38
msgid "Regular Expressions"
msgstr ""

#: ../../../command/string.rst:41
msgid "REGEX MATCH"
msgstr ""

#: ../../../command/string.rst:45
msgid ""
"string(REGEX MATCH <regular_expression>\n"
"       <output variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:48
msgid ""
"Match the regular expression once and store the match in the output "
"variable. All ``<input>`` arguments are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:52
msgid "REGEX MATCHALL"
msgstr ""

#: ../../../command/string.rst:56
msgid ""
"string(REGEX MATCHALL <regular_expression>\n"
"       <output variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:59
msgid ""
"Match the regular expression as many times as possible and store the matches "
"in the output variable as a list. All ``<input>`` arguments are concatenated "
"before matching."
msgstr ""

#: ../../../command/string.rst:64
msgid "REGEX REPLACE"
msgstr ""

#: ../../../command/string.rst:68
msgid ""
"string(REGEX REPLACE <regular_expression>\n"
"       <replace_expression> <output variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:72
msgid ""
"Match the regular expression as many times as possible and substitute the "
"replacement expression for the match in the output. All ``<input>`` "
"arguments are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:76
msgid ""
"The replace expression may refer to paren-delimited subexpressions of the "
"match using ``\\1``, ``\\2``, ..., ``\\9``.  Note that two backslashes (``\\"
"\\1``) are required in CMake code to get a backslash through argument "
"parsing."
msgstr ""

#: ../../../command/string.rst:81
msgid "Regex Specification"
msgstr ""

#: ../../../command/string.rst:83
msgid "The following characters have special meaning in regular expressions:"
msgstr ""

#: ../../../command/string.rst:87
msgid ""
"^         Matches at beginning of input\n"
"$         Matches at end of input\n"
".         Matches any single character\n"
"[ ]       Matches any character(s) inside the brackets\n"
"[^ ]      Matches any character(s) not inside the brackets\n"
" -        Inside brackets, specifies an inclusive range between\n"
"          characters on either side e.g. [a-f] is [abcdef]\n"
"          To match a literal - using brackets, make it the first\n"
"          or the last character e.g. [+*/-] matches basic\n"
"          mathematical operators.\n"
"*         Matches preceding pattern zero or more times\n"
"+         Matches preceding pattern one or more times\n"
"?         Matches preceding pattern zero or once only\n"
"|         Matches a pattern on either side of the |\n"
"()        Saves a matched subexpression, which can be referenced\n"
"          in the REGEX REPLACE operation. Additionally it is saved\n"
"          by all regular expression-related commands, including\n"
"          e.g. if( MATCHES ), in the variables CMAKE_MATCH_(0..9)."
msgstr ""

#: ../../../command/string.rst:106
msgid ""
"``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|`` has "
"lower precedence than concatenation.  This means that the regular expression "
"``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular expression "
"``^(ab|cd)$`` matches ``ab`` but not ``abd``."
msgstr ""

#: ../../../command/string.rst:112
msgid "Manipulation"
msgstr ""

#: ../../../command/string.rst:115
msgid "APPEND"
msgstr ""

#: ../../../command/string.rst:119
msgid "string(APPEND <string variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:121
msgid "Append all the input arguments to the string."
msgstr ""

#: ../../../command/string.rst:124
msgid "CONCAT"
msgstr ""

#: ../../../command/string.rst:128
msgid "string(CONCAT <output variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:130
msgid ""
"Concatenate all the input arguments together and store the result in the "
"named output variable."
msgstr ""

#: ../../../command/string.rst:134
msgid "TOLOWER"
msgstr ""

#: ../../../command/string.rst:138
msgid "string(TOLOWER <string1> <output variable>)"
msgstr ""

#: ../../../command/string.rst:140
msgid "Convert string to lower characters."
msgstr ""

#: ../../../command/string.rst:143
msgid "TOUPPER"
msgstr ""

#: ../../../command/string.rst:147
msgid "string(TOUPPER <string1> <output variable>)"
msgstr ""

#: ../../../command/string.rst:149
msgid "Convert string to upper characters."
msgstr ""

#: ../../../command/string.rst:152
msgid "LENGTH"
msgstr ""

#: ../../../command/string.rst:156
msgid "string(LENGTH <string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:158
msgid "Store in an output variable a given string's length."
msgstr ""

#: ../../../command/string.rst:161
msgid "SUBSTRING"
msgstr ""

#: ../../../command/string.rst:165
msgid "string(SUBSTRING <string> <begin> <length> <output variable>)"
msgstr ""

#: ../../../command/string.rst:167
msgid ""
"Store in an output variable a substring of a given string.  If length is "
"``-1`` the remainder of the string starting at begin will be returned. If "
"string is shorter than length then end of string is used instead."
msgstr ""

#: ../../../command/string.rst:172
msgid ""
"CMake 3.1 and below reported an error if length pointed past the end of "
"string."
msgstr ""

#: ../../../command/string.rst:176
msgid "STRIP"
msgstr ""

#: ../../../command/string.rst:180
msgid "string(STRIP <string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:182
msgid ""
"Store in an output variable a substring of a given string with leading and "
"trailing spaces removed."
msgstr ""

#: ../../../command/string.rst:186
msgid "GENEX_STRIP"
msgstr ""

#: ../../../command/string.rst:190
msgid "string(GENEX_STRIP <input string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:192
msgid ""
"Strip any :manual:`generator expressions <cmake-generator-expressions(7)>` "
"from the ``input string`` and store the result in the ``output variable``."
msgstr ""

#: ../../../command/string.rst:196
msgid "Comparison"
msgstr ""

#: ../../../command/string.rst:200
msgid ""
"string(COMPARE EQUAL <string1> <string2> <output variable>)\n"
"string(COMPARE NOTEQUAL <string1> <string2> <output variable>)\n"
"string(COMPARE LESS <string1> <string2> <output variable>)\n"
"string(COMPARE GREATER <string1> <string2> <output variable>)"
msgstr ""

#: ../../../command/string.rst:205
msgid "Compare the strings and store true or false in the output variable."
msgstr ""

#: ../../../command/string.rst:208
msgid "Hashing"
msgstr ""

#: ../../../command/string.rst:212
msgid ""
"string(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512>\n"
"       <output variable> <input>)"
msgstr ""

#: ../../../command/string.rst:215
msgid "Compute a cryptographic hash of the input string."
msgstr ""

#: ../../../command/string.rst:218
msgid "Generation"
msgstr ""

#: ../../../command/string.rst:221
msgid "ASCII"
msgstr ""

#: ../../../command/string.rst:225
msgid "string(ASCII <number> [<number> ...] <output variable>)"
msgstr ""

#: ../../../command/string.rst:227
msgid "Convert all numbers into corresponding ASCII characters."
msgstr ""

#: ../../../command/string.rst:230
msgid "CONFIGURE"
msgstr ""

#: ../../../command/string.rst:234
msgid ""
"string(CONFIGURE <string1> <output variable>\n"
"       [@ONLY] [ESCAPE_QUOTES])"
msgstr ""

#: ../../../command/string.rst:237
msgid "Transform a string like :command:`configure_file` transforms a file."
msgstr ""

#: ../../../command/string.rst:240
msgid "RANDOM"
msgstr ""

#: ../../../command/string.rst:244
msgid ""
"string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]\n"
"       [RANDOM_SEED <seed>] <output variable>)"
msgstr ""

#: ../../../command/string.rst:247
msgid ""
"Return a random string of given length consisting of characters from the "
"given alphabet.  Default length is 5 characters and default alphabet is all "
"numbers and upper and lower case letters. If an integer ``RANDOM_SEED`` is "
"given, its value will be used to seed the random number generator."
msgstr ""

#: ../../../command/string.rst:254
msgid "TIMESTAMP"
msgstr ""

#: ../../../command/string.rst:258
msgid "string(TIMESTAMP <output variable> [<format string>] [UTC])"
msgstr ""

#: ../../../command/string.rst:260
msgid ""
"Write a string representation of the current date and/or time to the output "
"variable."
msgstr ""

#: ../../../command/string.rst:263
msgid ""
"Should the command be unable to obtain a timestamp the output variable will "
"be set to the empty string \"\"."
msgstr ""

#: ../../../command/string.rst:266
msgid ""
"The optional ``UTC`` flag requests the current date/time representation to "
"be in Coordinated Universal Time (UTC) rather than local time."
msgstr ""

#: ../../../command/string.rst:269
msgid ""
"The optional ``<format string>`` may contain the following format specifiers:"
msgstr ""

#: ../../../command/string.rst:274
msgid ""
"%d        The day of the current month (01-31).\n"
"%H        The hour on a 24-hour clock (00-23).\n"
"%I        The hour on a 12-hour clock (01-12).\n"
"%j        The day of the current year (001-366).\n"
"%m        The month of the current year (01-12).\n"
"%M        The minute of the current hour (00-59).\n"
"%s        Seconds since midnight (UTC) 1-Jan-1970 (UNIX time).\n"
"%S        The second of the current minute.\n"
"          60 represents a leap second. (00-60)\n"
"%U        The week number of the current year (00-53).\n"
"%w        The day of the current week. 0 is Sunday. (0-6)\n"
"%y        The last two digits of the current year (00-99)\n"
"%Y        The current year."
msgstr ""

#: ../../../command/string.rst:288
msgid ""
"Unknown format specifiers will be ignored and copied to the output as-is."
msgstr ""

#: ../../../command/string.rst:291
msgid "If no explicit ``<format string>`` is given it will default to:"
msgstr ""

#: ../../../command/string.rst:295
msgid ""
"%Y-%m-%dT%H:%M:%S    for local time.\n"
"%Y-%m-%dT%H:%M:%SZ   for UTC."
msgstr ""

#: ../../../command/string.rst:301
msgid "string(MAKE_C_IDENTIFIER <input string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:303
msgid "Write a string which can be used as an identifier in C."
msgstr ""

#: ../../../command/string.rst:306
msgid "UUID"
msgstr ""

#: ../../../command/string.rst:310
msgid ""
"string(UUID <output variable> NAMESPACE <namespace> NAME <name>\n"
"       TYPE <MD5|SHA1> [UPPER])"
msgstr ""

#: ../../../command/string.rst:313
msgid ""
"Create a univerally unique identifier (aka GUID) as per RFC4122 based on the "
"hash of the combined values of ``<namespace>`` (which itself has to be a "
"valid UUID) and ``<name>``. The hash algorithm can be either ``MD5`` "
"(Version 3 UUID) or ``SHA1`` (Version 5 UUID). A UUID has the format "
"``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`` where each `x` represents a lower "
"case hexadecimal character. Where required an uppercase representation can "
"be requested with the optional ``UPPER`` flag."
msgstr ""
