# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.22\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/string.rst:2
msgid "string"
msgstr ""

#: ../../../command/string.rst:4
msgid "String operations."
msgstr ""

#: ../../../command/string.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/string.rst:11
msgid ""
"`Search and Replace`_\n"
"  string(`FIND`_ <string> <substring> <out-var> [...])\n"
"  string(`REPLACE`_ <match-string> <replace-string> <out-var> <input>...)\n"
"  string(`REGEX MATCH`_ <match-regex> <out-var> <input>...)\n"
"  string(`REGEX MATCHALL`_ <match-regex> <out-var> <input>...)\n"
"  string(`REGEX REPLACE`_ <match-regex> <replace-expr> <out-var> "
"<input>...)\n"
"\n"
"`Manipulation`_\n"
"  string(`APPEND`_ <string-var> [<input>...])\n"
"  string(`PREPEND`_ <string-var> [<input>...])\n"
"  string(`CONCAT`_ <out-var> [<input>...])\n"
"  string(`JOIN`_ <glue> <out-var> [<input>...])\n"
"  string(`TOLOWER`_ <string> <out-var>)\n"
"  string(`TOUPPER`_ <string> <out-var>)\n"
"  string(`LENGTH`_ <string> <out-var>)\n"
"  string(`SUBSTRING`_ <string> <begin> <length> <out-var>)\n"
"  string(`STRIP`_ <string> <out-var>)\n"
"  string(`GENEX_STRIP`_ <string> <out-var>)\n"
"  string(`REPEAT`_ <string> <count> <out-var>)\n"
"\n"
"`Comparison`_\n"
"  string(`COMPARE`_ <op> <string1> <string2> <out-var>)\n"
"\n"
"`Hashing`_\n"
"  string(`\\<HASH\\> <HASH_>`_ <out-var> <input>)\n"
"\n"
"`Generation`_\n"
"  string(`ASCII`_ <number>... <out-var>)\n"
"  string(`HEX`_ <string> <out-var>)\n"
"  string(`CONFIGURE`_ <string> <out-var> [...])\n"
"  string(`MAKE_C_IDENTIFIER`_ <string> <out-var>)\n"
"  string(`RANDOM`_ [<option>...] <out-var>)\n"
"  string(`TIMESTAMP`_ <out-var> [<format string>] [UTC])\n"
"  string(`UUID`_ <out-var> ...)\n"
"\n"
"`JSON`_\n"
"  string(JSON <out-var> [ERROR_VARIABLE <error-var>]\n"
"         {`GET`_ | `TYPE`_ | :ref:`LENGTH <JSONLENGTH>` | `REMOVE`_}\n"
"         <json-string> <member|index> [<member|index> ...])\n"
"  string(JSON <out-var> [ERROR_VARIABLE <error-var>]\n"
"         `MEMBER`_ <json-string>\n"
"         [<member|index> ...] <index>)\n"
"  string(JSON <out-var> [ERROR_VARIABLE <error-var>]\n"
"         `SET`_ <json-string>\n"
"         <member|index> [<member|index> ...] <value>)\n"
"  string(JSON <out-var> [ERROR_VARIABLE <error-var>]\n"
"         `EQUAL`_ <json-string1> <json-string2>)"
msgstr ""

#: ../../../command/string.rst:60
msgid "Search and Replace"
msgstr ""

#: ../../../command/string.rst:63
msgid "Search and Replace With Plain Strings"
msgstr ""

#: ../../../command/string.rst:67
msgid "string(FIND <string> <substring> <output_variable> [REVERSE])"
msgstr ""

#: ../../../command/string.rst:71
msgid ""
"Return the position where the given ``<substring>`` was found in the "
"supplied ``<string>``.  If the ``REVERSE`` flag was used, the command will "
"search for the position of the last occurrence of the specified "
"``<substring>``.  If the ``<substring>`` is not found, a position of -1 is "
"returned."
msgstr ""

#: ../../../command/string.rst:77
msgid ""
"The ``string(FIND)`` subcommand treats all strings as ASCII-only characters. "
"The index stored in ``<output_variable>`` will also be counted in bytes, so "
"strings containing multi-byte characters may lead to unexpected results."
msgstr ""

#: ../../../command/string.rst:83
msgid ""
"string(REPLACE <match_string>\n"
"       <replace_string> <output_variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:89
msgid ""
"Replace all occurrences of ``<match_string>`` in the ``<input>`` with "
"``<replace_string>`` and store the result in the ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:93
msgid "Search and Replace With Regular Expressions"
msgstr ""

#: ../../../command/string.rst:97
msgid ""
"string(REGEX MATCH <regular_expression>\n"
"       <output_variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:102
msgid ""
"Match the ``<regular_expression>`` once and store the match in the "
"``<output_variable>``. All ``<input>`` arguments are concatenated before "
"matching. Regular expressions are specified in the subsection just below."
msgstr ""

#: ../../../command/string.rst:109
msgid ""
"string(REGEX MATCHALL <regular_expression>\n"
"       <output_variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:114
msgid ""
"Match the ``<regular_expression>`` as many times as possible and store the "
"matches in the ``<output_variable>`` as a list. All ``<input>`` arguments "
"are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:120
msgid ""
"string(REGEX REPLACE <regular_expression>\n"
"       <replacement_expression> <output_variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:126
msgid ""
"Match the ``<regular_expression>`` as many times as possible and substitute "
"the ``<replacement_expression>`` for the match in the output. All "
"``<input>`` arguments are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:130
msgid ""
"The ``<replacement_expression>`` may refer to parenthesis-delimited "
"subexpressions of the match using ``\\1``, ``\\2``, ..., ``\\9``.  Note that "
"two backslashes (``\\\\1``) are required in CMake code to get a backslash "
"through argument parsing."
msgstr ""

#: ../../../command/string.rst:138
msgid "Regex Specification"
msgstr ""

#: ../../../command/string.rst:140
msgid "The following characters have special meaning in regular expressions:"
msgstr ""

#: ../../../command/string.rst:142
msgid "``^``"
msgstr ""

#: ../../../command/string.rst:143
msgid "Matches at beginning of input"
msgstr ""

#: ../../../command/string.rst:144
msgid "``$``"
msgstr ""

#: ../../../command/string.rst:145
msgid "Matches at end of input"
msgstr ""

#: ../../../command/string.rst:146
msgid "``.``"
msgstr ""

#: ../../../command/string.rst:147
msgid "Matches any single character"
msgstr ""

#: ../../../command/string.rst:148
msgid "``\\<char>``"
msgstr ""

#: ../../../command/string.rst:149
msgid ""
"Matches the single character specified by ``<char>``.  Use this to match "
"special regex characters, e.g. ``\\.`` for a literal ``.`` or ``\\\\`` for a "
"literal backslash ``\\``.  Escaping a non-special character is unnecessary "
"but allowed, e.g. ``\\a`` matches ``a``."
msgstr ""

#: ../../../command/string.rst:153
msgid "``[ ]``"
msgstr ""

#: ../../../command/string.rst:154
msgid "Matches any character(s) inside the brackets"
msgstr ""

#: ../../../command/string.rst:155
msgid "``[^ ]``"
msgstr ""

#: ../../../command/string.rst:156
msgid "Matches any character(s) not inside the brackets"
msgstr ""

#: ../../../command/string.rst:157
msgid "``-``"
msgstr ""

#: ../../../command/string.rst:158
msgid ""
"Inside brackets, specifies an inclusive range between characters on either "
"side e.g. ``[a-f]`` is ``[abcdef]`` To match a literal ``-`` using brackets, "
"make it the first or the last character e.g. ``[+*/-]`` matches basic "
"mathematical operators."
msgstr ""

#: ../../../command/string.rst:163
msgid "``*``"
msgstr ""

#: ../../../command/string.rst:164
msgid "Matches preceding pattern zero or more times"
msgstr ""

#: ../../../command/string.rst:165
msgid "``+``"
msgstr ""

#: ../../../command/string.rst:166
msgid "Matches preceding pattern one or more times"
msgstr ""

#: ../../../command/string.rst:167
msgid "``?``"
msgstr ""

#: ../../../command/string.rst:168
msgid "Matches preceding pattern zero or once only"
msgstr ""

#: ../../../command/string.rst:169
msgid "``|``"
msgstr ""

#: ../../../command/string.rst:170
msgid "Matches a pattern on either side of the ``|``"
msgstr ""

#: ../../../command/string.rst:171
msgid "``()``"
msgstr ""

#: ../../../command/string.rst:172
msgid ""
"Saves a matched subexpression, which can be referenced in the ``REGEX "
"REPLACE`` operation."
msgstr ""

#: ../../../command/string.rst:175
msgid ""
"All regular expression-related commands, including e.g. :command:"
"`if(MATCHES)`, save subgroup matches in the variables :variable:"
"`CMAKE_MATCH_<n>` for ``<n>`` 0..9."
msgstr ""

#: ../../../command/string.rst:180
msgid ""
"``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|`` has "
"lower precedence than concatenation.  This means that the regular expression "
"``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular expression "
"``^(ab|cd)$`` matches ``ab`` but not ``abd``."
msgstr ""

#: ../../../command/string.rst:185
msgid ""
"CMake language :ref:`Escape Sequences` such as ``\\t``, ``\\r``, ``\\n``, "
"and ``\\\\`` may be used to construct literal tabs, carriage returns, "
"newlines, and backslashes (respectively) to pass in a regex.  For example:"
msgstr ""

#: ../../../command/string.rst:189
msgid ""
"The quoted argument ``\"[ \\t\\r\\n]\"`` specifies a regex that matches any "
"single whitespace character."
msgstr ""

#: ../../../command/string.rst:191
msgid ""
"The quoted argument ``\"[/\\\\]\"`` specifies a regex that matches a single "
"forward slash ``/`` or backslash ``\\``."
msgstr ""

#: ../../../command/string.rst:193
msgid ""
"The quoted argument ``\"[A-Za-z0-9_]\"`` specifies a regex that matches any "
"single \"word\" character in the C locale."
msgstr ""

#: ../../../command/string.rst:195
msgid ""
"The quoted argument ``\"\\\\(\\\\a\\\\+b\\\\)\"`` specifies a regex that "
"matches the exact string ``(a+b)``.  Each ``\\\\`` is parsed in a quoted "
"argument as just ``\\``, so the regex itself is actually ``\\(\\a\\+"
"\\b\\)``.  This can alternatively be specified in a :ref:`bracket argument` "
"without having to escape the backslashes, e.g. ``[[\\(\\a\\+\\b\\)]]``."
msgstr ""

#: ../../../command/string.rst:202
msgid "Manipulation"
msgstr ""

#: ../../../command/string.rst:206
msgid "string(APPEND <string_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:212
msgid "Append all the ``<input>`` arguments to the string."
msgstr ""

#: ../../../command/string.rst:216
msgid "string(PREPEND <string_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:222
msgid "Prepend all the ``<input>`` arguments to the string."
msgstr ""

#: ../../../command/string.rst:226
msgid "string(CONCAT <output_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:230
msgid ""
"Concatenate all the ``<input>`` arguments together and store the result in "
"the named ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:235
msgid "string(JOIN <glue> <output_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:241
msgid ""
"Join all the ``<input>`` arguments together using the ``<glue>`` string and "
"store the result in the named ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:244
msgid ""
"To join a list's elements, prefer to use the ``JOIN`` operator from the :"
"command:`list` command.  This allows for the elements to have special "
"characters like ``;`` in them."
msgstr ""

#: ../../../command/string.rst:250
msgid "string(TOLOWER <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:254
msgid "Convert ``<string>`` to lower characters."
msgstr ""

#: ../../../command/string.rst:258
msgid "string(TOUPPER <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:262
msgid "Convert ``<string>`` to upper characters."
msgstr ""

#: ../../../command/string.rst:266
msgid "string(LENGTH <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:270
msgid ""
"Store in an ``<output_variable>`` a given string's length in bytes. Note "
"that this means if ``<string>`` contains multi-byte characters, the result "
"stored in ``<output_variable>`` will *not* be the number of characters."
msgstr ""

#: ../../../command/string.rst:276
msgid "string(SUBSTRING <string> <begin> <length> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:280
msgid ""
"Store in an ``<output_variable>`` a substring of a given ``<string>``.  If "
"``<length>`` is ``-1`` the remainder of the string starting at ``<begin>`` "
"will be returned."
msgstr ""

#: ../../../command/string.rst:284
msgid ""
"If ``<string>`` is shorter than ``<length>`` then the end of the string is "
"used instead.  Previous versions of CMake reported an error in this case."
msgstr ""

#: ../../../command/string.rst:288
msgid ""
"Both ``<begin>`` and ``<length>`` are counted in bytes, so care must be "
"exercised if ``<string>`` could contain multi-byte characters."
msgstr ""

#: ../../../command/string.rst:293
msgid "string(STRIP <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:297
msgid ""
"Store in an ``<output_variable>`` a substring of a given ``<string>`` with "
"leading and trailing spaces removed."
msgstr ""

#: ../../../command/string.rst:302
msgid "string(GENEX_STRIP <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:308
msgid ""
"Strip any :manual:`generator expressions <cmake-generator-expressions(7)>` "
"from the input ``<string>`` and store the result in the "
"``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:313
msgid "string(REPEAT <string> <count> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:319
msgid ""
"Produce the output string as the input ``<string>`` repeated ``<count>`` "
"times."
msgstr ""

#: ../../../command/string.rst:322
msgid "Comparison"
msgstr ""

#: ../../../command/string.rst:326
msgid ""
"string(COMPARE LESS <string1> <string2> <output_variable>)\n"
"string(COMPARE GREATER <string1> <string2> <output_variable>)\n"
"string(COMPARE EQUAL <string1> <string2> <output_variable>)\n"
"string(COMPARE NOTEQUAL <string1> <string2> <output_variable>)\n"
"string(COMPARE LESS_EQUAL <string1> <string2> <output_variable>)\n"
"string(COMPARE GREATER_EQUAL <string1> <string2> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:335
msgid ""
"Compare the strings and store true or false in the ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:337
msgid "Added the ``LESS_EQUAL`` and ``GREATER_EQUAL`` options."
msgstr ""

#: ../../../command/string.rst:343
msgid "Hashing"
msgstr ""

#: ../../../command/string.rst:347
msgid "string(<HASH> <output_variable> <input>)"
msgstr ""

#: ../../../command/string.rst:351
msgid ""
"Compute a cryptographic hash of the ``<input>`` string. The supported "
"``<HASH>`` algorithm names are:"
msgstr ""

#: ../../../command/string.rst:354
msgid "``MD5``"
msgstr ""

#: ../../../command/string.rst:355
msgid "Message-Digest Algorithm 5, RFC 1321."
msgstr ""

#: ../../../command/string.rst:356
msgid "``SHA1``"
msgstr ""

#: ../../../command/string.rst:357
msgid "US Secure Hash Algorithm 1, RFC 3174."
msgstr ""

#: ../../../command/string.rst:358
msgid "``SHA224``"
msgstr ""

#: ../../../command/string.rst:359 ../../../command/string.rst:361
#: ../../../command/string.rst:363 ../../../command/string.rst:365
msgid "US Secure Hash Algorithms, RFC 4634."
msgstr ""

#: ../../../command/string.rst:360
msgid "``SHA256``"
msgstr ""

#: ../../../command/string.rst:362
msgid "``SHA384``"
msgstr ""

#: ../../../command/string.rst:364
msgid "``SHA512``"
msgstr ""

#: ../../../command/string.rst:366
msgid "``SHA3_224``"
msgstr ""

#: ../../../command/string.rst:367 ../../../command/string.rst:369
#: ../../../command/string.rst:371 ../../../command/string.rst:373
msgid "Keccak SHA-3."
msgstr ""

#: ../../../command/string.rst:368
msgid "``SHA3_256``"
msgstr ""

#: ../../../command/string.rst:370
msgid "``SHA3_384``"
msgstr ""

#: ../../../command/string.rst:372
msgid "``SHA3_512``"
msgstr ""

#: ../../../command/string.rst:375
msgid "Added the ``SHA3_*`` hash algorithms."
msgstr ""

#: ../../../command/string.rst:379
msgid "Generation"
msgstr ""

#: ../../../command/string.rst:383
msgid "string(ASCII <number> [<number> ...] <output_variable>)"
msgstr ""

#: ../../../command/string.rst:387
msgid "Convert all numbers into corresponding ASCII characters."
msgstr ""

#: ../../../command/string.rst:391
msgid "string(HEX <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:397
msgid ""
"Convert each byte in the input ``<string>`` to its hexadecimal "
"representation and store the concatenated hex digits in the "
"``<output_variable>``. Letters in the output (``a`` through ``f``) are in "
"lowercase."
msgstr ""

#: ../../../command/string.rst:403
msgid ""
"string(CONFIGURE <string> <output_variable>\n"
"       [@ONLY] [ESCAPE_QUOTES])"
msgstr ""

#: ../../../command/string.rst:408
msgid ""
"Transform a ``<string>`` like :command:`configure_file` transforms a file."
msgstr ""

#: ../../../command/string.rst:412
msgid "string(MAKE_C_IDENTIFIER <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:416
msgid ""
"Convert each non-alphanumeric character in the input ``<string>`` to an "
"underscore and store the result in the ``<output_variable>``.  If the first "
"character of the ``<string>`` is a digit, an underscore will also be "
"prepended to the result."
msgstr ""

#: ../../../command/string.rst:423
msgid ""
"string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]\n"
"       [RANDOM_SEED <seed>] <output_variable>)"
msgstr ""

#: ../../../command/string.rst:428
msgid ""
"Return a random string of given ``<length>`` consisting of characters from "
"the given ``<alphabet>``.  Default length is 5 characters and default "
"alphabet is all numbers and upper and lower case letters. If an integer "
"``RANDOM_SEED`` is given, its value will be used to seed the random number "
"generator."
msgstr ""

#: ../../../command/string.rst:436
msgid "string(TIMESTAMP <output_variable> [<format_string>] [UTC])"
msgstr ""

#: ../../../command/string.rst:440
msgid ""
"Write a string representation of the current date and/or time to the "
"``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:443
msgid ""
"If the command is unable to obtain a timestamp, the ``<output_variable>`` "
"will be set to the empty string ``\"\"``."
msgstr ""

#: ../../../command/string.rst:446
msgid ""
"The optional ``UTC`` flag requests the current date/time representation to "
"be in Coordinated Universal Time (UTC) rather than local time."
msgstr ""

#: ../../../command/string.rst:449
msgid ""
"The optional ``<format_string>`` may contain the following format specifiers:"
msgstr ""

#: ../../../command/string.rst:452
msgid "``%%``"
msgstr ""

#: ../../../command/string.rst:455
msgid "A literal percent sign (%)."
msgstr ""

#: ../../../command/string.rst:457
msgid "``%d``"
msgstr ""

#: ../../../command/string.rst:458
msgid "The day of the current month (01-31)."
msgstr ""

#: ../../../command/string.rst:460
msgid "``%H``"
msgstr ""

#: ../../../command/string.rst:461
msgid "The hour on a 24-hour clock (00-23)."
msgstr ""

#: ../../../command/string.rst:463
msgid "``%I``"
msgstr ""

#: ../../../command/string.rst:464
msgid "The hour on a 12-hour clock (01-12)."
msgstr ""

#: ../../../command/string.rst:466
msgid "``%j``"
msgstr ""

#: ../../../command/string.rst:467
msgid "The day of the current year (001-366)."
msgstr ""

#: ../../../command/string.rst:469
msgid "``%m``"
msgstr ""

#: ../../../command/string.rst:470
msgid "The month of the current year (01-12)."
msgstr ""

#: ../../../command/string.rst:472
msgid "``%b``"
msgstr ""

#: ../../../command/string.rst:475
msgid "Abbreviated month name (e.g. Oct)."
msgstr ""

#: ../../../command/string.rst:477
msgid "``%B``"
msgstr ""

#: ../../../command/string.rst:480
msgid "Full month name (e.g. October)."
msgstr ""

#: ../../../command/string.rst:482
msgid "``%M``"
msgstr ""

#: ../../../command/string.rst:483
msgid "The minute of the current hour (00-59)."
msgstr ""

#: ../../../command/string.rst:485
msgid "``%s``"
msgstr ""

#: ../../../command/string.rst:488
msgid "Seconds since midnight (UTC) 1-Jan-1970 (UNIX time)."
msgstr ""

#: ../../../command/string.rst:490
msgid "``%S``"
msgstr ""

#: ../../../command/string.rst:491
msgid "The second of the current minute.  60 represents a leap second. (00-60)"
msgstr ""

#: ../../../command/string.rst:493
msgid "``%U``"
msgstr ""

#: ../../../command/string.rst:494
msgid "The week number of the current year (00-53)."
msgstr ""

#: ../../../command/string.rst:496
msgid "``%V``"
msgstr ""

#: ../../../command/string.rst:499
msgid "The ISO 8601 week number of the current year (01-53)."
msgstr ""

#: ../../../command/string.rst:501
msgid "``%w``"
msgstr ""

#: ../../../command/string.rst:502
msgid "The day of the current week. 0 is Sunday. (0-6)"
msgstr ""

#: ../../../command/string.rst:504
msgid "``%a``"
msgstr ""

#: ../../../command/string.rst:507
msgid "Abbreviated weekday name (e.g. Fri)."
msgstr ""

#: ../../../command/string.rst:509
msgid "``%A``"
msgstr ""

#: ../../../command/string.rst:512
msgid "Full weekday name (e.g. Friday)."
msgstr ""

#: ../../../command/string.rst:514
msgid "``%y``"
msgstr ""

#: ../../../command/string.rst:515
msgid "The last two digits of the current year (00-99)."
msgstr ""

#: ../../../command/string.rst:517
msgid "``%Y``"
msgstr ""

#: ../../../command/string.rst:518
msgid "The current year."
msgstr ""

#: ../../../command/string.rst:520
msgid ""
"Unknown format specifiers will be ignored and copied to the output as-is."
msgstr ""

#: ../../../command/string.rst:523
msgid "If no explicit ``<format_string>`` is given, it will default to:"
msgstr ""

#: ../../../command/string.rst:527
msgid ""
"%Y-%m-%dT%H:%M:%S    for local time.\n"
"%Y-%m-%dT%H:%M:%SZ   for UTC."
msgstr ""

#: ../../../command/string.rst:530
msgid ""
"If the ``SOURCE_DATE_EPOCH`` environment variable is set, its value will be "
"used instead of the current time. See https://reproducible-builds.org/specs/"
"source-date-epoch/ for details."
msgstr ""

#: ../../../command/string.rst:537
msgid ""
"string(UUID <output_variable> NAMESPACE <namespace> NAME <name>\n"
"       TYPE <MD5|SHA1> [UPPER])"
msgstr ""

#: ../../../command/string.rst:544
msgid ""
"Create a universally unique identifier (aka GUID) as per RFC4122 based on "
"the hash of the combined values of ``<namespace>`` (which itself has to be a "
"valid UUID) and ``<name>``. The hash algorithm can be either ``MD5`` "
"(Version 3 UUID) or ``SHA1`` (Version 5 UUID). A UUID has the format "
"``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`` where each ``x`` represents a lower "
"case hexadecimal character. Where required, an uppercase representation can "
"be requested with the optional ``UPPER`` flag."
msgstr ""

#: ../../../command/string.rst:557
msgid "JSON"
msgstr ""

#: ../../../command/string.rst:561
msgid "Functionality for querying a JSON string."
msgstr ""

#: ../../../command/string.rst:564
msgid ""
"In each of the following JSON-related subcommands, if the optional "
"``ERROR_VARIABLE`` argument is given, errors will be reported in ``<error-"
"variable>`` and the ``<out-var>`` will be set to ``<member|index>-[<member|"
"index>...]-NOTFOUND`` with the path elements up to the point where the error "
"occurred, or just ``NOTFOUND`` if there is no relevant path.  If an error "
"occurs but the ``ERROR_VARIABLE`` option is not present, a fatal error "
"message is generated.  If no error occurs, the ``<error-variable>`` will be "
"set to ``NOTFOUND``."
msgstr ""

#: ../../../command/string.rst:574
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-variable>]\n"
"       GET <json-string> <member|index> [<member|index> ...])"
msgstr ""

#: ../../../command/string.rst:579
msgid ""
"Get an element from ``<json-string>`` at the location given by the list of "
"``<member|index>`` arguments. Array and object elements will be returned as "
"a JSON string. Boolean elements will be returned as ``ON`` or ``OFF``. Null "
"elements will be returned as an empty string. Number and string types will "
"be returned as strings."
msgstr ""

#: ../../../command/string.rst:587
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-variable>]\n"
"       TYPE <json-string> <member|index> [<member|index> ...])"
msgstr ""

#: ../../../command/string.rst:592
msgid ""
"Get the type of an element in ``<json-string>`` at the location given by the "
"list of ``<member|index>`` arguments. The ``<out-var>`` will be set to one "
"of ``NULL``, ``NUMBER``, ``STRING``, ``BOOLEAN``, ``ARRAY``, or ``OBJECT``."
msgstr ""

#: ../../../command/string.rst:598
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-var>]\n"
"       MEMBER <json-string>\n"
"       [<member|index> ...] <index>)"
msgstr ""

#: ../../../command/string.rst:604
msgid ""
"Get the name of the ``<index>``-th member in ``<json-string>`` at the "
"location given by the list of ``<member|index>`` arguments. Requires an "
"element of object type."
msgstr ""

#: ../../../command/string.rst:609
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-variable>]\n"
"       LENGTH <json-string> <member|index> [<member|index> ...])"
msgstr ""

#: ../../../command/string.rst:614
msgid ""
"Get the length of an element in ``<json-string>`` at the location given by "
"the list of ``<member|index>`` arguments. Requires an element of array or "
"object type."
msgstr ""

#: ../../../command/string.rst:619
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-variable>]\n"
"       REMOVE <json-string> <member|index> [<member|index> ...])"
msgstr ""

#: ../../../command/string.rst:624
msgid ""
"Remove an element from ``<json-string>`` at the location given by the list "
"of ``<member|index>`` arguments. The JSON string without the removed element "
"will be stored in ``<out-var>``."
msgstr ""

#: ../../../command/string.rst:629
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-variable>]\n"
"       SET <json-string> <member|index> [<member|index> ...] <value>)"
msgstr ""

#: ../../../command/string.rst:634
msgid ""
"Set an element in ``<json-string>`` at the location given by the list of "
"``<member|index>`` arguments to ``<value>``. The contents of ``<value>`` "
"should be valid JSON."
msgstr ""

#: ../../../command/string.rst:639
msgid ""
"string(JSON <out-var> [ERROR_VARIABLE <error-var>]\n"
"       EQUAL <json-string1> <json-string2>)"
msgstr ""

#: ../../../command/string.rst:644
msgid ""
"Compare the two JSON objects given by ``<json-string1>`` and ``<json-"
"string2>`` for equality.  The contents of ``<json-string1>`` and ``<json-"
"string2>`` should be valid JSON.  The ``<out-var>`` will be set to a true "
"value if the JSON objects are considered equal, or a false value otherwise."
msgstr ""
