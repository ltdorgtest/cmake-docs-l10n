# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2024 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.30\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../generator/Ninja Multi-Config.rst:2
msgid "Ninja Multi-Config"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:6
msgid "Generates multiple ``build-<Config>.ninja`` files."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:8
msgid ""
"This generator is very much like the :generator:`Ninja` generator, but with "
"some key differences. Only these differences will be discussed in this "
"document."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:12
msgid ""
"Unlike the :generator:`Ninja` generator, ``Ninja Multi-Config`` generates "
"multiple configurations at once with :variable:`CMAKE_CONFIGURATION_TYPES` "
"instead of only one configuration with :variable:`CMAKE_BUILD_TYPE`. One "
"``build-<Config>.ninja`` file will be generated for each of these "
"configurations (with ``<Config>`` being the configuration name.) These files "
"are intended to be run with ``ninja -f build-<Config>.ninja``. A ``build."
"ninja`` file is also generated, using the configuration from either :"
"variable:`CMAKE_DEFAULT_BUILD_TYPE` or the first item from :variable:"
"`CMAKE_CONFIGURATION_TYPES`."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:22
msgid ""
"``cmake --build . --config <Config>`` will always use ``build-<Config>."
"ninja`` to build. If no :option:`--config <cmake--build --config>` argument "
"is specified, :option:`cmake --build . <cmake --build>` will use ``build."
"ninja``."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:26
msgid ""
"Each ``build-<Config>.ninja`` file contains ``<target>`` targets as well as "
"``<target>:<Config>`` targets, where ``<Config>`` is the same as the "
"configuration specified in ``build-<Config>.ninja`` Additionally, if cross-"
"config mode is enabled, ``build-<Config>.ninja`` may contain ``<target>:"
"<OtherConfig>`` targets, where ``<OtherConfig>`` is a cross-config, as well "
"as ``<target>:all``, which builds the target in all cross-configs. See below "
"for how to enable cross-config mode."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:34
msgid ""
"The ``Ninja Multi-Config`` generator recognizes the following variables:"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:36
msgid ":variable:`CMAKE_CONFIGURATION_TYPES`"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:37
msgid ""
"Specifies the total set of configurations to build. Unlike with other multi-"
"config generators, this variable has a value of ``Debug;Release;"
"RelWithDebInfo`` by default."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:41
msgid ":variable:`CMAKE_CROSS_CONFIGS`"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:42
msgid ""
"Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of "
"configurations available from all ``build-<Config>.ninja`` files."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:45
msgid ":variable:`CMAKE_DEFAULT_BUILD_TYPE`"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:46
msgid ""
"Specifies the configuration to use by default in a ``build.ninja`` file."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:48
msgid ":variable:`CMAKE_DEFAULT_CONFIGS`"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:49
msgid ""
"Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of "
"configurations to build for a target in ``build.ninja`` if no ``:<Config>`` "
"suffix is specified."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:53
msgid "Consider the following example:"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:55
msgid ""
"cmake_minimum_required(VERSION 3.16)\n"
"project(MultiConfigNinja C)\n"
"\n"
"add_executable(generator generator.c)\n"
"add_custom_command(OUTPUT generated.c COMMAND generator generated.c)\n"
"add_library(generated ${CMAKE_BINARY_DIR}/generated.c)"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:64
msgid ""
"Now assume you configure the project with ``Ninja Multi-Config`` and run one "
"of the following commands:"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:67
msgid ""
"ninja -f build-Debug.ninja generated\n"
"# OR\n"
"cmake --build . --config Debug --target generated"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:73
msgid ""
"This would build the ``Debug`` configuration of ``generator``, which would "
"be used to generate ``generated.c``, which would be used to build the "
"``Debug`` configuration of ``generated``."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:77
msgid ""
"But if :variable:`CMAKE_CROSS_CONFIGS` is set to ``all``, and you run the "
"following instead:"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:80
msgid ""
"ninja -f build-Release.ninja generated:Debug\n"
"# OR\n"
"cmake --build . --config Release --target generated:Debug"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:86
msgid ""
"This would build the ``Release`` configuration of ``generator``, which would "
"be used to generate ``generated.c``, which would be used to build the "
"``Debug`` configuration of ``generated``. This is useful for running a "
"release-optimized version of a generator utility while still building the "
"debug version of the targets built with the generated code."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:93
msgid "Custom Commands"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:97
msgid ""
"The ``Ninja Multi-Config`` generator adds extra capabilities to :command:"
"`add_custom_command` and :command:`add_custom_target` through its cross-"
"config mode. The ``COMMAND``, ``DEPENDS``, and ``WORKING_DIRECTORY`` "
"arguments can be evaluated in the context of either the \"command "
"config\" (the \"native\" configuration of the ``build-<Config>.ninja`` file "
"in use) or the \"output config\" (the configuration used to evaluate the "
"``OUTPUT`` and ``BYPRODUCTS``)."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:105
msgid ""
"If either ``OUTPUT`` or ``BYPRODUCTS`` names a path that is common to more "
"than one configuration (e.g. it does not use any generator expressions), all "
"arguments are evaluated in the command config by default. If all ``OUTPUT`` "
"and ``BYPRODUCTS`` paths are unique to each configuration (e.g. by using "
"the :genex:`$<CONFIG>` generator expression), the first argument of "
"``COMMAND`` is still evaluated in the command config by default, while all "
"subsequent arguments, as well as the arguments to ``DEPENDS`` and "
"``WORKING_DIRECTORY``, are evaluated in the output config. These defaults "
"can be overridden with the :genex:`$<OUTPUT_CONFIG:...>` and :genex:"
"`$<COMMAND_CONFIG:...>` generator-expressions. Note that if a target is "
"specified by its name in ``DEPENDS``, or as the first argument of "
"``COMMAND``, it is always evaluated in the command config, even if it is "
"wrapped in :genex:`$<OUTPUT_CONFIG:...>` (because its plain name is not a "
"generator expression)."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:119
msgid "As an example, consider the following:"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:121
msgid ""
"add_custom_command(\n"
"  OUTPUT \"$<CONFIG>.txt\"\n"
"  COMMAND\n"
"    generator \"$<CONFIG>.txt\"\n"
"              \"$<OUTPUT_CONFIG:$<CONFIG>>\"\n"
"              \"$<COMMAND_CONFIG:$<CONFIG>>\"\n"
"  DEPENDS\n"
"    tgt1\n"
"    \"$<TARGET_FILE:tgt2>\"\n"
"    \"$<OUTPUT_CONFIG:$<TARGET_FILE:tgt3>>\"\n"
"    \"$<COMMAND_CONFIG:$<TARGET_FILE:tgt4>>\"\n"
"  )"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:136
msgid ""
"Assume that ``generator``, ``tgt1``, ``tgt2``, ``tgt3``, and ``tgt4`` are "
"all executable targets, and assume that ``$<CONFIG>.txt`` is built in the "
"``Debug`` output config using the ``Release`` command config. The "
"``Release`` build of the ``generator`` target is called with ``Debug.txt "
"Debug Release`` as arguments. The command depends on the ``Release`` builds "
"of ``tgt1`` and ``tgt4``, and the ``Debug`` builds of ``tgt2`` and ``tgt3``."
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:143
msgid ""
"``PRE_BUILD``, ``PRE_LINK``, and ``POST_BUILD`` custom commands for targets "
"only get run in their \"native\" configuration (the ``Release`` "
"configuration in the ``build-Release.ninja`` file) unless they have no "
"``BYPRODUCTS`` or their ``BYPRODUCTS`` are unique per config. Consider the "
"following example:"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:148
msgid ""
"add_executable(exe main.c)\n"
"add_custom_command(\n"
"  TARGET exe\n"
"  POST_BUILD\n"
"  COMMAND\n"
"    ${CMAKE_COMMAND} -E echo \"Running no-byproduct command\"\n"
"  )\n"
"add_custom_command(\n"
"  TARGET exe\n"
"  POST_BUILD\n"
"  COMMAND\n"
"    ${CMAKE_COMMAND} -E echo\n"
"    \"Running separate-byproduct command for $<CONFIG>\"\n"
"  BYPRODUCTS $<CONFIG>.txt\n"
"  )\n"
"add_custom_command(\n"
"  TARGET exe\n"
"  POST_BUILD\n"
"  COMMAND\n"
"    ${CMAKE_COMMAND} -E echo\n"
"    \"Running common-byproduct command for $<CONFIG>\"\n"
"  BYPRODUCTS exe.txt\n"
"  )"
msgstr ""

#: ../../../generator/Ninja Multi-Config.rst:174
msgid ""
"In this example, if you build ``exe:Debug`` in ``build-Release.ninja``, the "
"first and second custom commands get run, since their byproducts are unique "
"per-config, but the last custom command does not. However, if you build "
"``exe:Release`` in ``build-Release.ninja``, all three custom commands get "
"run."
msgstr ""
