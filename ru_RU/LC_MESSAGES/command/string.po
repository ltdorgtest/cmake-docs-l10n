# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2019 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/string.rst:2
msgid "string"
msgstr ""

#: ../../../command/string.rst:4
msgid "String operations."
msgstr ""

#: ../../../command/string.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/string.rst:11
msgid ""
"`Search and Replace`_\n"
"  string(`FIND`_ <string> <substring> <out-var> [...])\n"
"  string(`REPLACE`_ <match-string> <replace-string> <out-var> <input>...)\n"
"\n"
"`Regular Expressions`_\n"
"  string(`REGEX MATCH`_ <match-regex> <out-var> <input>...)\n"
"  string(`REGEX MATCHALL`_ <match-regex> <out-var> <input>...)\n"
"  string(`REGEX REPLACE`_ <match-regex> <replace-expr> <out-var> "
"<input>...)\n"
"\n"
"`Manipulation`_\n"
"  string(`APPEND`_ <string-var> [<input>...])\n"
"  string(`PREPEND`_ <string-var> [<input>...])\n"
"  string(`CONCAT`_ <out-var> [<input>...])\n"
"  string(`JOIN`_ <glue> <out-var> [<input>...])\n"
"  string(`TOLOWER`_ <string1> <out-var>)\n"
"  string(`TOUPPER`_ <string1> <out-var>)\n"
"  string(`LENGTH`_ <string> <out-var>)\n"
"  string(`SUBSTRING`_ <string> <begin> <length> <out-var>)\n"
"  string(`STRIP`_ <string> <out-var>)\n"
"  string(`GENEX_STRIP`_ <string> <out-var>)\n"
"  string(`REPEAT`_ <string> <count> <out-var>)\n"
"\n"
"`Comparison`_\n"
"  string(`COMPARE`_ <op> <string1> <string2> <out-var>)\n"
"\n"
"`Hashing`_\n"
"  string(`\\<HASH\\> <HASH_>`_ <out-var> <input>)\n"
"\n"
"`Generation`_\n"
"  string(`ASCII`_ <number>... <out-var>)\n"
"  string(`CONFIGURE`_ <string1> <out-var> [...])\n"
"  string(`MAKE_C_IDENTIFIER`_ <string> <out-var>)\n"
"  string(`RANDOM`_ [<option>...] <out-var>)\n"
"  string(`TIMESTAMP`_ <out-var> [<format string>] [UTC])\n"
"  string(`UUID`_ <out-var> ...)"
msgstr ""

#: ../../../command/string.rst:48
msgid "Search and Replace"
msgstr ""

#: ../../../command/string.rst:52
msgid "string(FIND <string> <substring> <output variable> [REVERSE])"
msgstr ""

#: ../../../command/string.rst:56
msgid ""
"Return the position where the given substring was found in the supplied "
"string.  If the ``REVERSE`` flag was used, the command will search for the "
"position of the last occurrence of the specified substring.  If the "
"substring is not found, a position of -1 is returned."
msgstr ""

#: ../../../command/string.rst:63
msgid ""
"string(REPLACE <match_string>\n"
"       <replace_string> <output variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:69
msgid ""
"Replace all occurrences of ``match_string`` in the input with "
"``replace_string`` and store the result in the output."
msgstr ""

#: ../../../command/string.rst:73
msgid "Regular Expressions"
msgstr ""

#: ../../../command/string.rst:77
msgid ""
"string(REGEX MATCH <regular_expression>\n"
"       <output variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:82
msgid ""
"Match the regular expression once and store the match in the output "
"variable. All ``<input>`` arguments are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:87
msgid ""
"string(REGEX MATCHALL <regular_expression>\n"
"       <output variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:92
msgid ""
"Match the regular expression as many times as possible and store the matches "
"in the output variable as a list. All ``<input>`` arguments are concatenated "
"before matching."
msgstr ""

#: ../../../command/string.rst:98
msgid ""
"string(REGEX REPLACE <regular_expression>\n"
"       <replace_expression> <output variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:104
msgid ""
"Match the regular expression as many times as possible and substitute the "
"replacement expression for the match in the output. All ``<input>`` "
"arguments are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:108
msgid ""
"The replace expression may refer to paren-delimited subexpressions of the "
"match using ``\\1``, ``\\2``, ..., ``\\9``.  Note that two backslashes (``\\"
"\\1``) are required in CMake code to get a backslash through argument "
"parsing."
msgstr ""

#: ../../../command/string.rst:115
msgid "Regex Specification"
msgstr ""

#: ../../../command/string.rst:117
msgid "The following characters have special meaning in regular expressions:"
msgstr ""

#: ../../../command/string.rst:119
msgid "``^``"
msgstr ""

#: ../../../command/string.rst:120
msgid "Matches at beginning of input"
msgstr ""

#: ../../../command/string.rst:121
msgid "``$``"
msgstr ""

#: ../../../command/string.rst:122
msgid "Matches at end of input"
msgstr ""

#: ../../../command/string.rst:123
msgid "``.``"
msgstr ""

#: ../../../command/string.rst:124
msgid "Matches any single character"
msgstr ""

#: ../../../command/string.rst:128
msgid "``\\<char>``"
msgstr ""

#: ../../../command/string.rst:126
msgid ""
"Matches the single character specified by ``<char>``.  Use this to match "
"special regex characters, e.g. ``\\.`` for a literal ``.`` or ``\\\\`` for a "
"literal backslash ``\\``.  Escaping a non-special character is unnecessary "
"but allowed, e.g. ``\\a`` matches ``a``."
msgstr ""

#: ../../../command/string.rst:130
msgid "``[ ]``"
msgstr ""

#: ../../../command/string.rst:131
msgid "Matches any character(s) inside the brackets"
msgstr ""

#: ../../../command/string.rst:132
msgid "``[^ ]``"
msgstr ""

#: ../../../command/string.rst:133
msgid "Matches any character(s) not inside the brackets"
msgstr ""

#: ../../../command/string.rst:138
msgid "``-``"
msgstr ""

#: ../../../command/string.rst:135
msgid ""
"Inside brackets, specifies an inclusive range between characters on either "
"side e.g. ``[a-f]`` is ``[abcdef]`` To match a literal ``-`` using brackets, "
"make it the first or the last character e.g. ``[+*/-]`` matches basic "
"mathematical operators."
msgstr ""

#: ../../../command/string.rst:140
msgid "``*``"
msgstr ""

#: ../../../command/string.rst:141
msgid "Matches preceding pattern zero or more times"
msgstr ""

#: ../../../command/string.rst:142
msgid "``+``"
msgstr ""

#: ../../../command/string.rst:143
msgid "Matches preceding pattern one or more times"
msgstr ""

#: ../../../command/string.rst:144
msgid "``?``"
msgstr ""

#: ../../../command/string.rst:145
msgid "Matches preceding pattern zero or once only"
msgstr ""

#: ../../../command/string.rst:146
msgid "``|``"
msgstr ""

#: ../../../command/string.rst:147
msgid "Matches a pattern on either side of the ``|``"
msgstr ""

#: ../../../command/string.rst:153
msgid "``()``"
msgstr ""

#: ../../../command/string.rst:149
msgid ""
"Saves a matched subexpression, which can be referenced in the ``REGEX "
"REPLACE`` operation. Additionally it is saved by all regular expression-"
"related commands, including e.g. :command:`if(MATCHES)`, in the variables :"
"variable:`CMAKE_MATCH_<n>` for ``<n>`` 0..9."
msgstr ""

#: ../../../command/string.rst:155
msgid ""
"``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|`` has "
"lower precedence than concatenation.  This means that the regular expression "
"``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular expression "
"``^(ab|cd)$`` matches ``ab`` but not ``abd``."
msgstr ""

#: ../../../command/string.rst:160
msgid ""
"CMake language :ref:`Escape Sequences` such as ``\\t``, ``\\r``, ``\\n``, "
"and ``\\\\`` may be used to construct literal tabs, carriage returns, "
"newlines, and backslashes (respectively) to pass in a regex.  For example:"
msgstr ""

#: ../../../command/string.rst:164
msgid ""
"The quoted argument ``\"[ \\t\\r\\n]\"`` specifies a regex that matches any "
"single whitespace character."
msgstr ""

#: ../../../command/string.rst:166
msgid ""
"The quoted argument ``\"[/\\\\]\"`` specifies a regex that matches a single "
"forward slash ``/`` or backslash ``\\``."
msgstr ""

#: ../../../command/string.rst:168
msgid ""
"The quoted argument ``\"[A-Za-z0-9_]\"`` specifies a regex that matches any "
"single \"word\" character in the C locale."
msgstr ""

#: ../../../command/string.rst:170
msgid ""
"The quoted argument ``\"\\\\(\\\\a\\\\+b\\\\)\"`` specifies a regex that "
"matches the exact string ``(a+b)``.  Each ``\\\\`` is parsed in a quoted "
"argument as just ``\\``, so the regex itself is actually ``\\(\\a\\+"
"\\b\\)``.  This can alternatively be specified in a :ref:`bracket argument` "
"without having to escape the backslashes, e.g. ``[[\\(\\a\\+\\b\\)]]``."
msgstr ""

#: ../../../command/string.rst:177
msgid "Manipulation"
msgstr ""

#: ../../../command/string.rst:181
msgid "string(APPEND <string variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:185
msgid "Append all the input arguments to the string."
msgstr ""

#: ../../../command/string.rst:189
msgid "string(PREPEND <string variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:193
msgid "Prepend all the input arguments to the string."
msgstr ""

#: ../../../command/string.rst:197
msgid "string(CONCAT <output variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:201
msgid ""
"Concatenate all the input arguments together and store the result in the "
"named output variable."
msgstr ""

#: ../../../command/string.rst:206
msgid "string(JOIN <glue> <output variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:210
msgid ""
"Join all the input arguments together using the glue string and store the "
"result in the named output variable."
msgstr ""

#: ../../../command/string.rst:213
msgid ""
"To join list's elements, use preferably the ``JOIN`` operator from :command:"
"`list` command. This allows for the elements to have special characters like "
"``;`` in them."
msgstr ""

#: ../../../command/string.rst:219
msgid "string(TOLOWER <string1> <output variable>)"
msgstr ""

#: ../../../command/string.rst:223
msgid "Convert string to lower characters."
msgstr ""

#: ../../../command/string.rst:227
msgid "string(TOUPPER <string1> <output variable>)"
msgstr ""

#: ../../../command/string.rst:231
msgid "Convert string to upper characters."
msgstr ""

#: ../../../command/string.rst:235
msgid "string(LENGTH <string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:239
msgid "Store in an output variable a given string's length."
msgstr ""

#: ../../../command/string.rst:243
msgid "string(SUBSTRING <string> <begin> <length> <output variable>)"
msgstr ""

#: ../../../command/string.rst:247
msgid ""
"Store in an output variable a substring of a given string.  If length is "
"``-1`` the remainder of the string starting at begin will be returned. If "
"string is shorter than length then end of string is used instead."
msgstr ""

#: ../../../command/string.rst:252
msgid ""
"CMake 3.1 and below reported an error if length pointed past the end of "
"string."
msgstr ""

#: ../../../command/string.rst:257
msgid "string(STRIP <string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:261
msgid ""
"Store in an output variable a substring of a given string with leading and "
"trailing spaces removed."
msgstr ""

#: ../../../command/string.rst:266
msgid "string(GENEX_STRIP <input string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:270
msgid ""
"Strip any :manual:`generator expressions <cmake-generator-expressions(7)>` "
"from the ``input string`` and store the result in the ``output variable``."
msgstr ""

#: ../../../command/string.rst:275
msgid "string(REPEAT <input string> <count> <output variable>)"
msgstr ""

#: ../../../command/string.rst:279
msgid ""
"Produce the output string as repetion of ``input string`` ``count`` times."
msgstr ""

#: ../../../command/string.rst:282
msgid "Comparison"
msgstr ""

#: ../../../command/string.rst:286
msgid ""
"string(COMPARE LESS <string1> <string2> <output variable>)\n"
"string(COMPARE GREATER <string1> <string2> <output variable>)\n"
"string(COMPARE EQUAL <string1> <string2> <output variable>)\n"
"string(COMPARE NOTEQUAL <string1> <string2> <output variable>)\n"
"string(COMPARE LESS_EQUAL <string1> <string2> <output variable>)\n"
"string(COMPARE GREATER_EQUAL <string1> <string2> <output variable>)"
msgstr ""

#: ../../../command/string.rst:295
msgid "Compare the strings and store true or false in the output variable."
msgstr ""

#: ../../../command/string.rst:300
msgid "Hashing"
msgstr ""

#: ../../../command/string.rst:304
msgid "string(<HASH> <output variable> <input>)"
msgstr ""

#: ../../../command/string.rst:308
msgid ""
"Compute a cryptographic hash of the input string. The supported ``<HASH>`` "
"algorithm names are:"
msgstr ""

#: ../../../command/string.rst:311
msgid "``MD5``"
msgstr ""

#: ../../../command/string.rst:312
msgid "Message-Digest Algorithm 5, RFC 1321."
msgstr ""

#: ../../../command/string.rst:313
msgid "``SHA1``"
msgstr ""

#: ../../../command/string.rst:314
msgid "US Secure Hash Algorithm 1, RFC 3174."
msgstr ""

#: ../../../command/string.rst:315
msgid "``SHA224``"
msgstr ""

#: ../../../command/string.rst:316 ../../../command/string.rst:318
#: ../../../command/string.rst:320 ../../../command/string.rst:322
msgid "US Secure Hash Algorithms, RFC 4634."
msgstr ""

#: ../../../command/string.rst:317
msgid "``SHA256``"
msgstr ""

#: ../../../command/string.rst:319
msgid "``SHA384``"
msgstr ""

#: ../../../command/string.rst:321
msgid "``SHA512``"
msgstr ""

#: ../../../command/string.rst:323
msgid "``SHA3_224``"
msgstr ""

#: ../../../command/string.rst:324 ../../../command/string.rst:326
#: ../../../command/string.rst:328 ../../../command/string.rst:330
msgid "Keccak SHA-3."
msgstr ""

#: ../../../command/string.rst:325
msgid "``SHA3_256``"
msgstr ""

#: ../../../command/string.rst:327
msgid "``SHA3_384``"
msgstr ""

#: ../../../command/string.rst:330
msgid "``SHA3_512``"
msgstr ""

#: ../../../command/string.rst:333
msgid "Generation"
msgstr ""

#: ../../../command/string.rst:337
msgid "string(ASCII <number> [<number> ...] <output variable>)"
msgstr ""

#: ../../../command/string.rst:341
msgid "Convert all numbers into corresponding ASCII characters."
msgstr ""

#: ../../../command/string.rst:345
msgid ""
"string(CONFIGURE <string1> <output variable>\n"
"       [@ONLY] [ESCAPE_QUOTES])"
msgstr ""

#: ../../../command/string.rst:350
msgid "Transform a string like :command:`configure_file` transforms a file."
msgstr ""

#: ../../../command/string.rst:354
msgid "string(MAKE_C_IDENTIFIER <input string> <output variable>)"
msgstr ""

#: ../../../command/string.rst:358
msgid ""
"Convert each non-alphanumeric character in the ``<input string>`` to an "
"underscore and store the result in the ``<output variable>``.  If the first "
"character of the string is a digit, an underscore will also be prepended to "
"the result."
msgstr ""

#: ../../../command/string.rst:365
msgid ""
"string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]\n"
"       [RANDOM_SEED <seed>] <output variable>)"
msgstr ""

#: ../../../command/string.rst:370
msgid ""
"Return a random string of given length consisting of characters from the "
"given alphabet.  Default length is 5 characters and default alphabet is all "
"numbers and upper and lower case letters. If an integer ``RANDOM_SEED`` is "
"given, its value will be used to seed the random number generator."
msgstr ""

#: ../../../command/string.rst:378
msgid "string(TIMESTAMP <output variable> [<format string>] [UTC])"
msgstr ""

#: ../../../command/string.rst:382
msgid ""
"Write a string representation of the current date and/or time to the output "
"variable."
msgstr ""

#: ../../../command/string.rst:385
msgid ""
"Should the command be unable to obtain a timestamp the output variable will "
"be set to the empty string \"\"."
msgstr ""

#: ../../../command/string.rst:388
msgid ""
"The optional ``UTC`` flag requests the current date/time representation to "
"be in Coordinated Universal Time (UTC) rather than local time."
msgstr ""

#: ../../../command/string.rst:391
msgid ""
"The optional ``<format string>`` may contain the following format specifiers:"
msgstr ""

#: ../../../command/string.rst:396
msgid ""
"%%        A literal percent sign (%).\n"
"%d        The day of the current month (01-31).\n"
"%H        The hour on a 24-hour clock (00-23).\n"
"%I        The hour on a 12-hour clock (01-12).\n"
"%j        The day of the current year (001-366).\n"
"%m        The month of the current year (01-12).\n"
"%b        Abbreviated month name (e.g. Oct).\n"
"%B        Full month name (e.g. October).\n"
"%M        The minute of the current hour (00-59).\n"
"%s        Seconds since midnight (UTC) 1-Jan-1970 (UNIX time).\n"
"%S        The second of the current minute.\n"
"          60 represents a leap second. (00-60)\n"
"%U        The week number of the current year (00-53).\n"
"%w        The day of the current week. 0 is Sunday. (0-6)\n"
"%a        Abbreviated weekday name (e.g. Fri).\n"
"%A        Full weekday name (e.g. Friday).\n"
"%y        The last two digits of the current year (00-99)\n"
"%Y        The current year."
msgstr ""

#: ../../../command/string.rst:415
msgid ""
"Unknown format specifiers will be ignored and copied to the output as-is."
msgstr ""

#: ../../../command/string.rst:418
msgid "If no explicit ``<format string>`` is given it will default to:"
msgstr ""

#: ../../../command/string.rst:422
msgid ""
"%Y-%m-%dT%H:%M:%S    for local time.\n"
"%Y-%m-%dT%H:%M:%SZ   for UTC."
msgstr ""

#: ../../../command/string.rst:427
msgid ""
"If the ``SOURCE_DATE_EPOCH`` environment variable is set, its value will be "
"used instead of the current time. See https://reproducible-builds.org/specs/"
"source-date-epoch/ for details."
msgstr ""

#: ../../../command/string.rst:433
msgid ""
"string(UUID <output variable> NAMESPACE <namespace> NAME <name>\n"
"       TYPE <MD5|SHA1> [UPPER])"
msgstr ""

#: ../../../command/string.rst:438
msgid ""
"Create a universally unique identifier (aka GUID) as per RFC4122 based on "
"the hash of the combined values of ``<namespace>`` (which itself has to be a "
"valid UUID) and ``<name>``. The hash algorithm can be either ``MD5`` "
"(Version 3 UUID) or ``SHA1`` (Version 5 UUID). A UUID has the format "
"``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`` where each `x` represents a lower "
"case hexadecimal character. Where required an uppercase representation can "
"be requested with the optional ``UPPER`` flag."
msgstr ""
