# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/if.rst:2
msgid "if"
msgstr ""

#: ../../../command/if.rst:4
msgid "Conditionally execute a group of commands."
msgstr ""

#: ../../../command/if.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/if.rst:9
msgid ""
"if(<condition>)\n"
"  <commands>\n"
"elseif(<condition>) # optional block, can be repeated\n"
"  <commands>\n"
"else()              # optional block\n"
"  <commands>\n"
"endif()"
msgstr ""

#: ../../../command/if.rst:19
msgid ""
"Evaluates the ``condition`` argument of the ``if`` clause according to the "
"`Condition syntax`_ described below. If the result is true, then the "
"``commands`` in the ``if`` block are executed. Otherwise, optional "
"``elseif`` blocks are processed in the same way. Finally, if no "
"``condition`` is true, ``commands`` in the optional ``else`` block are "
"executed."
msgstr ""

#: ../../../command/if.rst:26
msgid ""
"Per legacy, the :command:`else` and :command:`endif` commands admit an "
"optional ``<condition>`` argument. If used, it must be a verbatim repeat of "
"the argument of the opening ``if`` command."
msgstr ""

#: ../../../command/if.rst:35
msgid "Condition Syntax"
msgstr ""

#: ../../../command/if.rst:37
msgid ""
"The following syntax applies to the ``condition`` argument of the ``if``, "
"``elseif`` and :command:`while` clauses."
msgstr ""

#: ../../../command/if.rst:40
msgid "Compound conditions are evaluated in the following order of precedence:"
msgstr ""

#: ../../../command/if.rst:42
msgid "Parentheses."
msgstr ""

#: ../../../command/if.rst:44
msgid "Unary tests such as `EXISTS`_, `COMMAND`_, and `DEFINED`_."
msgstr ""

#: ../../../command/if.rst:46
msgid ""
"Binary tests such as `EQUAL`_, `LESS`_, `LESS_EQUAL`_, `GREATER`_, "
"`GREATER_EQUAL`_, `STREQUAL`_, `STRLESS`_, `STRLESS_EQUAL`_, `STRGREATER`_, "
"`STRGREATER_EQUAL`_, `VERSION_EQUAL`_, `VERSION_LESS`_, "
"`VERSION_LESS_EQUAL`_, `VERSION_GREATER`_, `VERSION_GREATER_EQUAL`_, "
"`PATH_EQUAL`_, and `MATCHES`_."
msgstr ""

#: ../../../command/if.rst:52
msgid "Unary logical operator `NOT`_."
msgstr ""

#: ../../../command/if.rst:54
msgid ""
"Binary logical operators `AND`_ and `OR`_, from left to right, without any "
"short-circuit."
msgstr ""

#: ../../../command/if.rst:58
msgid "Basic Expressions"
msgstr ""

#: ../../../command/if.rst:60
msgid "``if(<constant>)``"
msgstr ""

#: ../../../command/if.rst:61
msgid ""
"True if the constant is ``1``, ``ON``, ``YES``, ``TRUE``, ``Y``, or a non-"
"zero number (including floating point numbers). False if the constant is "
"``0``, ``OFF``, ``NO``, ``FALSE``, ``N``, ``IGNORE``, ``NOTFOUND``, the "
"empty string, or ends in the suffix ``-NOTFOUND``.  Named boolean constants "
"are case-insensitive.  If the argument is not one of these specific "
"constants, it is treated as a variable or string (see `Variable Expansion`_ "
"further below) and one of the following two forms applies."
msgstr ""

#: ../../../command/if.rst:70
msgid "``if(<variable>)``"
msgstr ""

#: ../../../command/if.rst:71
msgid ""
"True if given a variable that is defined to a value that is not a false "
"constant.  False otherwise, including if the variable is undefined. Note "
"that macro arguments are not variables. :ref:`Environment Variables <CMake "
"Language Environment Variables>` also cannot be tested this way, e.g. "
"``if(ENV{some_var})`` will always evaluate to false."
msgstr ""

#: ../../../command/if.rst:78
msgid "``if(<string>)``"
msgstr ""

#: ../../../command/if.rst:79
msgid "A quoted string always evaluates to false unless:"
msgstr ""

#: ../../../command/if.rst:81
msgid "The string's value is one of the true constants, or"
msgstr ""

#: ../../../command/if.rst:82
msgid ""
"Policy :policy:`CMP0054` is not set to ``NEW`` and the string's value "
"happens to be a variable name that is affected by :policy:`CMP0054`'s "
"behavior."
msgstr ""

#: ../../../command/if.rst:87
msgid "Logic Operators"
msgstr ""

#: ../../../command/if.rst:91
msgid "``if(NOT <condition>)``"
msgstr ""

#: ../../../command/if.rst:92
msgid "True if the condition is not true."
msgstr ""

#: ../../../command/if.rst:96
msgid "``if(<cond1> AND <cond2>)``"
msgstr ""

#: ../../../command/if.rst:97
msgid "True if both conditions would be considered true individually."
msgstr ""

#: ../../../command/if.rst:101
msgid "``if(<cond1> OR <cond2>)``"
msgstr ""

#: ../../../command/if.rst:102
msgid "True if either condition would be considered true individually."
msgstr ""

#: ../../../command/if.rst:104
msgid "``if((condition) AND (condition OR (condition)))``"
msgstr ""

#: ../../../command/if.rst:105
msgid ""
"The conditions inside the parenthesis are evaluated first and then the "
"remaining condition is evaluated as in the other examples. Where there are "
"nested parenthesis the innermost are evaluated as part of evaluating the "
"condition that contains them."
msgstr ""

#: ../../../command/if.rst:111
msgid "Existence Checks"
msgstr ""

#: ../../../command/if.rst:115
msgid "``if(COMMAND command-name)``"
msgstr ""

#: ../../../command/if.rst:116
msgid ""
"True if the given name is a command, macro or function that can be invoked."
msgstr ""

#: ../../../command/if.rst:119
msgid "``if(POLICY policy-id)``"
msgstr ""

#: ../../../command/if.rst:120
msgid ""
"True if the given name is an existing policy (of the form ``CMP<NNNN>``)."
msgstr ""

#: ../../../command/if.rst:122
msgid "``if(TARGET target-name)``"
msgstr ""

#: ../../../command/if.rst:123
msgid ""
"True if the given name is an existing logical target name created by a call "
"to the :command:`add_executable`, :command:`add_library`, or :command:"
"`add_custom_target` command that has already been invoked (in any directory)."
msgstr ""

#: ../../../command/if.rst:128
msgid "``if(TEST test-name)``"
msgstr ""

#: ../../../command/if.rst:129
msgid ""
"True if the given name is an existing test name created by the :command:"
"`add_test` command."
msgstr ""

#: ../../../command/if.rst:135
msgid "``if(DEFINED <name>|CACHE{<name>}|ENV{<name>})``"
msgstr ""

#: ../../../command/if.rst:136
msgid ""
"True if a variable, cache variable or environment variable with given "
"``<name>`` is defined. The value of the variable does not matter. Note the "
"following caveats:"
msgstr ""

#: ../../../command/if.rst:140
msgid "Macro arguments are not variables."
msgstr ""

#: ../../../command/if.rst:141
msgid ""
"It is not possible to test directly whether a `<name>` is a non-cache "
"variable.  The expression ``if(DEFINED someName)`` will evaluate to true if "
"either a cache or non-cache variable ``someName`` exists.  In comparison, "
"the expression ``if(DEFINED CACHE{someName})`` will only evaluate to true if "
"a cache variable ``someName`` exists.  Both expressions need to be tested if "
"you need to know whether a non-cache variable exists: ``if(DEFINED someName "
"AND NOT DEFINED CACHE{someName})``."
msgstr ""

#: ../../../command/if.rst:149
msgid "Added support for ``CACHE{<name>}`` variables."
msgstr ""

#: ../../../command/if.rst:152
msgid "``if(<variable|string> IN_LIST <variable>)``"
msgstr ""

#: ../../../command/if.rst:153
msgid "True if the given element is contained in the named list variable."
msgstr ""

#: ../../../command/if.rst:157
msgid "File Operations"
msgstr ""

#: ../../../command/if.rst:161
msgid "``if(EXISTS path-to-file-or-directory)``"
msgstr ""

#: ../../../command/if.rst:162
msgid ""
"True if the named file or directory exists.  Behavior is well-defined only "
"for explicit full paths (a leading ``~/`` is not expanded as a home "
"directory and is considered a relative path). Resolves symbolic links, i.e. "
"if the named file or directory is a symbolic link, returns true if the "
"target of the symbolic link exists."
msgstr ""

#: ../../../command/if.rst:168 ../../../command/if.rst:182
msgid "False if the given path is an empty string."
msgstr ""

#: ../../../command/if.rst:170
msgid "``if(file1 IS_NEWER_THAN file2)``"
msgstr ""

#: ../../../command/if.rst:171
msgid ""
"True if ``file1`` is newer than ``file2`` or if one of the two files doesn't "
"exist.  Behavior is well-defined only for full paths.  If the file time "
"stamps are exactly the same, an ``IS_NEWER_THAN`` comparison returns true, "
"so that any dependent build operations will occur in the event of a tie.  "
"This includes the case of passing the same file name for both file1 and "
"file2."
msgstr ""

#: ../../../command/if.rst:178
msgid "``if(IS_DIRECTORY path)``"
msgstr ""

#: ../../../command/if.rst:179
msgid ""
"True if ``path`` is a directory.  Behavior is well-defined only for full "
"paths."
msgstr ""

#: ../../../command/if.rst:184
msgid "``if(IS_SYMLINK file-name)``"
msgstr ""

#: ../../../command/if.rst:185
msgid ""
"True if the given name is a symbolic link.  Behavior is well-defined only "
"for full paths."
msgstr ""

#: ../../../command/if.rst:188
msgid "``if(IS_ABSOLUTE path)``"
msgstr ""

#: ../../../command/if.rst:189
msgid ""
"True if the given path is an absolute path.  Note the following special "
"cases:"
msgstr ""

#: ../../../command/if.rst:192
msgid "An empty ``path`` evaluates to false."
msgstr ""

#: ../../../command/if.rst:193
msgid ""
"On Windows hosts, any ``path`` that begins with a drive letter and colon (e."
"g. ``C:``), a forward slash or a backslash will evaluate to true. This means "
"a path like ``C:no\\base\\dir`` will evaluate to true, even though the non-"
"drive part of the path is relative."
msgstr ""

#: ../../../command/if.rst:197
msgid ""
"On non-Windows hosts, any ``path`` that begins with a tilde (``~``) "
"evaluates to true."
msgstr ""

#: ../../../command/if.rst:201
msgid "Comparisons"
msgstr ""

#: ../../../command/if.rst:205
msgid "``if(<variable|string> MATCHES regex)``"
msgstr ""

#: ../../../command/if.rst:206
msgid ""
"True if the given string or variable's value matches the given regular "
"expression.  See :ref:`Regex Specification` for regex format."
msgstr ""

#: ../../../command/if.rst:209
msgid "``()`` groups are captured in :variable:`CMAKE_MATCH_<n>` variables."
msgstr ""

#: ../../../command/if.rst:214
msgid "``if(<variable|string> LESS <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:215
msgid ""
"True if the given string or variable's value is a valid number and less than "
"that on the right."
msgstr ""

#: ../../../command/if.rst:220
msgid "``if(<variable|string> GREATER <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:221
msgid ""
"True if the given string or variable's value is a valid number and greater "
"than that on the right."
msgstr ""

#: ../../../command/if.rst:226
msgid "``if(<variable|string> EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:227
msgid ""
"True if the given string or variable's value is a valid number and equal to "
"that on the right."
msgstr ""

#: ../../../command/if.rst:232
msgid "``if(<variable|string> LESS_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:233
msgid ""
"True if the given string or variable's value is a valid number and less than "
"or equal to that on the right."
msgstr ""

#: ../../../command/if.rst:239
msgid "``if(<variable|string> GREATER_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:240
msgid ""
"True if the given string or variable's value is a valid number and greater "
"than or equal to that on the right."
msgstr ""

#: ../../../command/if.rst:246
msgid "``if(<variable|string> STRLESS <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:247
msgid ""
"True if the given string or variable's value is lexicographically less than "
"the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:252
msgid "``if(<variable|string> STRGREATER <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:253
msgid ""
"True if the given string or variable's value is lexicographically greater "
"than the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:258
msgid "``if(<variable|string> STREQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:259
msgid ""
"True if the given string or variable's value is lexicographically equal to "
"the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:264
msgid "``if(<variable|string> STRLESS_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:265
msgid ""
"True if the given string or variable's value is lexicographically less than "
"or equal to the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:271
msgid "``if(<variable|string> STRGREATER_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:272
msgid ""
"True if the given string or variable's value is lexicographically greater "
"than or equal to the string or variable on the right."
msgstr ""

#: ../../../command/if.rst:277
msgid "Version Comparisons"
msgstr ""

#: ../../../command/if.rst:281
msgid "``if(<variable|string> VERSION_LESS <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:282 ../../../command/if.rst:290
#: ../../../command/if.rst:298 ../../../command/if.rst:306
#: ../../../command/if.rst:315
msgid ""
"Component-wise integer version number comparison (version format is ``major[."
"minor[.patch[.tweak]]]``, omitted components are treated as zero). Any non-"
"integer version component or non-integer trailing part of a version "
"component effectively truncates the string at that point."
msgstr ""

#: ../../../command/if.rst:289
msgid "``if(<variable|string> VERSION_GREATER <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:297
msgid "``if(<variable|string> VERSION_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:305
msgid "``if(<variable|string> VERSION_LESS_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:314
msgid "``if(<variable|string> VERSION_GREATER_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:322
msgid "Path Comparisons"
msgstr ""

#: ../../../command/if.rst:326
msgid "``if(<variable|string> PATH_EQUAL <variable|string>)``"
msgstr ""

#: ../../../command/if.rst:329
msgid ""
"Compares the two paths component-by-component.  Only if every component of "
"both paths match will the two paths compare equal.  Multiple path separators "
"are effectively collapsed into a single separator, but note that backslashes "
"are not converted to forward slashes.  No other :ref:`path normalization "
"<Normalization>` is performed."
msgstr ""

#: ../../../command/if.rst:335
msgid ""
"Component-wise comparison is superior to string-based comparison due to the "
"handling of multiple path separators.  In the following example, the "
"expression evaluates to true using ``PATH_EQUAL``, but false with "
"``STREQUAL``:"
msgstr ""

#: ../../../command/if.rst:340
msgid ""
"# comparison is TRUE\n"
"if (\"/a//b/c\" PATH_EQUAL \"/a/b/c\")\n"
"   ...\n"
"endif()\n"
"\n"
"# comparison is FALSE\n"
"if (\"/a//b/c\" STREQUAL \"/a/b/c\")\n"
"   ...\n"
"endif()"
msgstr ""

#: ../../../command/if.rst:352
msgid "See :ref:`cmake_path(COMPARE) <Path COMPARE>` for more details."
msgstr ""

#: ../../../command/if.rst:355
msgid "Variable Expansion"
msgstr ""

#: ../../../command/if.rst:357
msgid ""
"The if command was written very early in CMake's history, predating the ``${}"
"`` variable evaluation syntax, and for convenience evaluates variables named "
"by its arguments as shown in the above signatures. Note that normal variable "
"evaluation with ``${}`` applies before the if command even receives the "
"arguments.  Therefore code like"
msgstr ""

#: ../../../command/if.rst:363
msgid ""
"set(var1 OFF)\n"
"set(var2 \"var1\")\n"
"if(${var2})"
msgstr ""

#: ../../../command/if.rst:369
msgid "appears to the if command as"
msgstr ""

#: ../../../command/if.rst:371
msgid "if(var1)"
msgstr ""

#: ../../../command/if.rst:375
msgid ""
"and is evaluated according to the ``if(<variable>)`` case documented above.  "
"The result is ``OFF`` which is false.  However, if we remove the ``${}`` "
"from the example then the command sees"
msgstr ""

#: ../../../command/if.rst:379
msgid "if(var2)"
msgstr ""

#: ../../../command/if.rst:383
msgid ""
"which is true because ``var2`` is defined to ``var1`` which is not a false "
"constant."
msgstr ""

#: ../../../command/if.rst:386
msgid ""
"Automatic evaluation applies in the other cases whenever the above-"
"documented condition syntax accepts ``<variable|string>``:"
msgstr ""

#: ../../../command/if.rst:389
msgid ""
"The left hand argument to ``MATCHES`` is first checked to see if it is a "
"defined variable, if so the variable's value is used, otherwise the original "
"value is used."
msgstr ""

#: ../../../command/if.rst:393
msgid ""
"If the left hand argument to ``MATCHES`` is missing it returns false without "
"error"
msgstr ""

#: ../../../command/if.rst:396
msgid ""
"Both left and right hand arguments to ``LESS``, ``GREATER``, ``EQUAL``, "
"``LESS_EQUAL``, and ``GREATER_EQUAL``, are independently tested to see if "
"they are defined variables, if so their defined values are used otherwise "
"the original value is used."
msgstr ""

#: ../../../command/if.rst:401
msgid ""
"Both left and right hand arguments to ``STRLESS``, ``STRGREATER``, "
"``STREQUAL``, ``STRLESS_EQUAL``, and ``STRGREATER_EQUAL`` are independently "
"tested to see if they are defined variables, if so their defined values are "
"used otherwise the original value is used."
msgstr ""

#: ../../../command/if.rst:406
msgid ""
"Both left and right hand arguments to ``VERSION_LESS``, ``VERSION_GREATER``, "
"``VERSION_EQUAL``, ``VERSION_LESS_EQUAL``, and ``VERSION_GREATER_EQUAL`` are "
"independently tested to see if they are defined variables, if so their "
"defined values are used otherwise the original value is used."
msgstr ""

#: ../../../command/if.rst:412
msgid ""
"The right hand argument to ``NOT`` is tested to see if it is a boolean "
"constant, if so the value is used, otherwise it is assumed to be a variable "
"and it is dereferenced."
msgstr ""

#: ../../../command/if.rst:416
msgid ""
"The left and right hand arguments to ``AND`` and ``OR`` are independently "
"tested to see if they are boolean constants, if so they are used as such, "
"otherwise they are assumed to be variables and are dereferenced."
msgstr ""

#: ../../../command/if.rst:420
msgid ""
"To prevent ambiguity, potential variable or keyword names can be specified "
"in a :ref:`Quoted Argument` or a :ref:`Bracket Argument`. A quoted or "
"bracketed variable or keyword will be interpreted as a string and not "
"dereferenced or interpreted. See policy :policy:`CMP0054`."
msgstr ""

#: ../../../command/if.rst:427
msgid ""
"There is no automatic evaluation for environment or cache :ref:`Variable "
"References`.  Their values must be referenced as ``$ENV{<name>}`` or "
"``$CACHE{<name>}`` wherever the above-documented condition syntax accepts "
"``<variable|string>``."
msgstr ""

#: ../../../command/if.rst:433
msgid "See also"
msgstr ""

#: ../../../command/if.rst:435
msgid ":command:`else`"
msgstr ""

#: ../../../command/if.rst:436
msgid ":command:`elseif`"
msgstr ""

#: ../../../command/if.rst:437
msgid ":command:`endif`"
msgstr ""
