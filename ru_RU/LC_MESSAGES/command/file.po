# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2017 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/file.rst:2
msgid "file"
msgstr ""

#: ../../../command/file.rst:4
msgid "File manipulation command."
msgstr ""

#: ../../../command/file.rst:10
msgid ""
"file(WRITE <filename> <content>...)\n"
"file(APPEND <filename> <content>...)"
msgstr ""

#: ../../../command/file.rst:13
msgid ""
"Write ``<content>`` into a file called ``<filename>``.  If the file does not "
"exist, it will be created.  If the file already exists, ``WRITE`` mode will "
"overwrite it and ``APPEND`` mode will append to the end. Any directories in "
"the path specified by ``<filename>`` that do not exist will be created."
msgstr ""

#: ../../../command/file.rst:19
msgid ""
"If the file is a build input, use the :command:`configure_file` command to "
"update the file only when its content changes."
msgstr ""

#: ../../../command/file.rst:26
msgid ""
"file(READ <filename> <variable>\n"
"     [OFFSET <offset>] [LIMIT <max-in>] [HEX])"
msgstr ""

#: ../../../command/file.rst:29
msgid ""
"Read content from a file called ``<filename>`` and store it in a "
"``<variable>``.  Optionally start from the given ``<offset>`` and read at "
"most ``<max-in>`` bytes.  The ``HEX`` option causes data to be converted to "
"a hexadecimal representation (useful for binary data)."
msgstr ""

#: ../../../command/file.rst:38
msgid "file(STRINGS <filename> <variable> [<options>...])"
msgstr ""

#: ../../../command/file.rst:40
msgid ""
"Parse a list of ASCII strings from ``<filename>`` and store it in "
"``<variable>``.  Binary data in the file are ignored.  Carriage return "
"(``\\r``, CR) characters are ignored.  The options are:"
msgstr ""

#: ../../../command/file.rst:45
msgid "``LENGTH_MAXIMUM <max-len>``"
msgstr ""

#: ../../../command/file.rst:45
msgid "Consider only strings of at most a given length."
msgstr ""

#: ../../../command/file.rst:48
msgid "``LENGTH_MINIMUM <min-len>``"
msgstr ""

#: ../../../command/file.rst:48
msgid "Consider only strings of at least a given length."
msgstr ""

#: ../../../command/file.rst:51
msgid "``LIMIT_COUNT <max-num>``"
msgstr ""

#: ../../../command/file.rst:51
msgid "Limit the number of distinct strings to be extracted."
msgstr ""

#: ../../../command/file.rst:54
msgid "``LIMIT_INPUT <max-in>``"
msgstr ""

#: ../../../command/file.rst:54
msgid "Limit the number of input bytes to read from the file."
msgstr ""

#: ../../../command/file.rst:57
msgid "``LIMIT_OUTPUT <max-out>``"
msgstr ""

#: ../../../command/file.rst:57
msgid "Limit the number of total bytes to store in the ``<variable>``."
msgstr ""

#: ../../../command/file.rst:61
msgid "``NEWLINE_CONSUME``"
msgstr ""

#: ../../../command/file.rst:60
msgid ""
"Treat newline characters (``\\n``, LF) as part of string content instead of "
"terminating at them."
msgstr ""

#: ../../../command/file.rst:65
msgid "``NO_HEX_CONVERSION``"
msgstr ""

#: ../../../command/file.rst:64
msgid ""
"Intel Hex and Motorola S-record files are automatically converted to binary "
"while reading unless this option is given."
msgstr ""

#: ../../../command/file.rst:68
msgid "``REGEX <regex>``"
msgstr ""

#: ../../../command/file.rst:68
msgid "Consider only strings that match the given regular expression."
msgstr ""

#: ../../../command/file.rst:74
msgid "``ENCODING <encoding-type>``"
msgstr ""

#: ../../../command/file.rst:71
msgid ""
"Consider strings of a given encoding.  Currently supported encodings are: "
"UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, UTF-32BE.  If the ENCODING option is "
"not provided and the file has a Byte Order Mark, the ENCODING option will be "
"defaulted to respect the Byte Order Mark."
msgstr ""

#: ../../../command/file.rst:76
msgid "For example, the code"
msgstr ""

#: ../../../command/file.rst:78
msgid "file(STRINGS myfile.txt myfile)"
msgstr ""

#: ../../../command/file.rst:82
msgid ""
"stores a list in the variable ``myfile`` in which each item is a line from "
"the input file."
msgstr ""

#: ../../../command/file.rst:89
msgid "file(<HASH> <filename> <variable>)"
msgstr ""

#: ../../../command/file.rst:91
msgid ""
"Compute a cryptographic hash of the content of ``<filename>`` and store it "
"in a ``<variable>``.  The supported ``<HASH>`` algorithm names are those "
"listed by the :ref:`string(\\<HASH\\>) <Supported Hash Algorithms>` command."
msgstr ""

#: ../../../command/file.rst:100
msgid ""
"file(GLOB <variable>\n"
"     [LIST_DIRECTORIES true|false] [RELATIVE <path>]\n"
"     [<globbing-expressions>...])\n"
"file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS]\n"
"     [LIST_DIRECTORIES true|false] [RELATIVE <path>]\n"
"     [<globbing-expressions>...])"
msgstr ""

#: ../../../command/file.rst:107
msgid ""
"Generate a list of files that match the ``<globbing-expressions>`` and store "
"it into the ``<variable>``.  Globbing expressions are similar to regular "
"expressions, but much simpler.  If ``RELATIVE`` flag is specified, the "
"results will be returned as relative paths to the given path.  The results "
"will be ordered lexicographically."
msgstr ""

#: ../../../command/file.rst:113
msgid ""
"By default ``GLOB`` lists directories - directories are omited in result if "
"``LIST_DIRECTORIES`` is set to false."
msgstr ""

#: ../../../command/file.rst:117
msgid ""
"We do not recommend using GLOB to collect a list of source files from your "
"source tree.  If no CMakeLists.txt file changes when a source is added or "
"removed then the generated build system cannot know when to ask CMake to "
"regenerate."
msgstr ""

#: ../../../command/file.rst:122
msgid "Examples of globbing expressions include::"
msgstr ""

#: ../../../command/file.rst:124
msgid ""
"*.cxx      - match all files with extension cxx\n"
"*.vt?      - match all files with extension vta,...,vtz\n"
"f[3-5].txt - match files f3.txt, f4.txt, f5.txt"
msgstr ""

#: ../../../command/file.rst:128
msgid ""
"The ``GLOB_RECURSE`` mode will traverse all the subdirectories of the "
"matched directory and match the files.  Subdirectories that are symlinks are "
"only traversed if ``FOLLOW_SYMLINKS`` is given or policy :policy:`CMP0009` "
"is not set to ``NEW``."
msgstr ""

#: ../../../command/file.rst:133
msgid ""
"By default ``GLOB_RECURSE`` omits directories from result list - setting "
"``LIST_DIRECTORIES`` to true adds directories to result list. If "
"``FOLLOW_SYMLINKS`` is given or policy :policy:`CMP0009` is not set to "
"``OLD`` then ``LIST_DIRECTORIES`` treats symlinks as directories."
msgstr ""

#: ../../../command/file.rst:138
msgid "Examples of recursive globbing include::"
msgstr ""

#: ../../../command/file.rst:140
msgid "/dir/*.py  - match all python files in /dir and subdirectories"
msgstr ""

#: ../../../command/file.rst:146
msgid "file(RENAME <oldname> <newname>)"
msgstr ""

#: ../../../command/file.rst:148
msgid ""
"Move a file or directory within a filesystem from ``<oldname>`` to "
"``<newname>``, replacing the destination atomically."
msgstr ""

#: ../../../command/file.rst:155
msgid ""
"file(REMOVE [<files>...])\n"
"file(REMOVE_RECURSE [<files>...])"
msgstr ""

#: ../../../command/file.rst:158
msgid ""
"Remove the given files.  The ``REMOVE_RECURSE`` mode will remove the given "
"files and directories, also non-empty directories. No error is emitted if a "
"given file does not exist."
msgstr ""

#: ../../../command/file.rst:166
msgid "file(MAKE_DIRECTORY [<directories>...])"
msgstr ""

#: ../../../command/file.rst:168
msgid "Create the given directories and their parents as needed."
msgstr ""

#: ../../../command/file.rst:174
msgid "file(RELATIVE_PATH <variable> <directory> <file>)"
msgstr ""

#: ../../../command/file.rst:176
msgid ""
"Compute the relative path from a ``<directory>`` to a ``<file>`` and store "
"it in the ``<variable>``."
msgstr ""

#: ../../../command/file.rst:183
msgid ""
"file(TO_CMAKE_PATH \"<path>\" <variable>)\n"
"file(TO_NATIVE_PATH \"<path>\" <variable>)"
msgstr ""

#: ../../../command/file.rst:186
msgid ""
"The ``TO_CMAKE_PATH`` mode converts a native ``<path>`` into a cmake-style "
"path with forward-slashes (``/``).  The input can be a single path or a "
"system search path like ``$ENV{PATH}``.  A search path will be converted to "
"a cmake-style list separated by ``;`` characters."
msgstr ""

#: ../../../command/file.rst:191
msgid ""
"The ``TO_NATIVE_PATH`` mode converts a cmake-style ``<path>`` into a native "
"path with platform-specific slashes (``\\`` on Windows and ``/`` elsewhere)."
msgstr ""

#: ../../../command/file.rst:194
msgid ""
"Always use double quotes around the ``<path>`` to be sure it is treated as a "
"single argument to this command."
msgstr ""

#: ../../../command/file.rst:201
msgid ""
"file(DOWNLOAD <url> <file> [<options>...])\n"
"file(UPLOAD   <file> <url> [<options>...])"
msgstr ""

#: ../../../command/file.rst:204
msgid ""
"The ``DOWNLOAD`` mode downloads the given ``<url>`` to a local ``<file>``. "
"The ``UPLOAD`` mode uploads a local ``<file>`` to a given ``<url>``."
msgstr ""

#: ../../../command/file.rst:207
msgid "Options to both ``DOWNLOAD`` and ``UPLOAD`` are:"
msgstr ""

#: ../../../command/file.rst:210
msgid "``INACTIVITY_TIMEOUT <seconds>``"
msgstr ""

#: ../../../command/file.rst:210
msgid "Terminate the operation after a period of inactivity."
msgstr ""

#: ../../../command/file.rst:213
msgid "``LOG <variable>``"
msgstr ""

#: ../../../command/file.rst:213
msgid "Store a human-readable log of the operation in a variable."
msgstr ""

#: ../../../command/file.rst:217
msgid "``SHOW_PROGRESS``"
msgstr ""

#: ../../../command/file.rst:216
msgid ""
"Print progress information as status messages until the operation is "
"complete."
msgstr ""

#: ../../../command/file.rst:224
msgid "``STATUS <variable>``"
msgstr ""

#: ../../../command/file.rst:220
msgid ""
"Store the resulting status of the operation in a variable. The status is a "
"``;`` separated list of length 2. The first element is the numeric return "
"value for the operation, and the second element is a string value for the "
"error. A ``0`` numeric error means no error in the operation."
msgstr ""

#: ../../../command/file.rst:227
msgid "``TIMEOUT <seconds>``"
msgstr ""

#: ../../../command/file.rst:227
msgid "Terminate the operation after a given total time has elapsed."
msgstr ""

#: ../../../command/file.rst:230
msgid "``USERPWD <username>:<password>``"
msgstr ""

#: ../../../command/file.rst:230
msgid "Set username and password for operation."
msgstr ""

#: ../../../command/file.rst:233
msgid "``HTTPHEADER <HTTP-header>``"
msgstr ""

#: ../../../command/file.rst:233
msgid "HTTP header for operation. Suboption can be repeated several times."
msgstr ""

#: ../../../command/file.rst:235
msgid "Additional options to ``DOWNLOAD`` are:"
msgstr ""

#: ../../../command/file.rst:237
msgid "``EXPECTED_HASH ALGO=<value>``"
msgstr ""

#: ../../../command/file.rst:239
msgid ""
"Verify that the downloaded content hash matches the expected value, where "
"``ALGO`` is one of the algorithms supported by ``file(<HASH>)``. If it does "
"not match, the operation fails with an error."
msgstr ""

#: ../../../command/file.rst:244
msgid "``EXPECTED_MD5 <value>``"
msgstr ""

#: ../../../command/file.rst:244
msgid "Historical short-hand for ``EXPECTED_HASH MD5=<value>``."
msgstr ""

#: ../../../command/file.rst:248
msgid "``TLS_VERIFY <ON|OFF>``"
msgstr ""

#: ../../../command/file.rst:247
msgid ""
"Specify whether to verify the server certificate for ``https://`` URLs. The "
"default is to *not* verify."
msgstr ""

#: ../../../command/file.rst:251
msgid "``TLS_CAINFO <file>``"
msgstr ""

#: ../../../command/file.rst:251
msgid "Specify a custom Certificate Authority file for ``https://`` URLs."
msgstr ""

#: ../../../command/file.rst:253
msgid ""
"For ``https://`` URLs CMake must be built with OpenSSL support.  ``TLS/SSL`` "
"certificates are not checked by default.  Set ``TLS_VERIFY`` to ``ON`` to "
"check certificates and/or use ``EXPECTED_HASH`` to verify downloaded "
"content. If neither ``TLS`` option is given CMake will check variables "
"``CMAKE_TLS_VERIFY`` and ``CMAKE_TLS_CAINFO``, respectively."
msgstr ""

#: ../../../command/file.rst:263
msgid "file(TIMESTAMP <filename> <variable> [<format>] [UTC])"
msgstr ""

#: ../../../command/file.rst:265
msgid ""
"Compute a string representation of the modification time of ``<filename>`` "
"and store it in ``<variable>``.  Should the command be unable to obtain a "
"timestamp variable will be set to the empty string (\"\")."
msgstr ""

#: ../../../command/file.rst:269
msgid ""
"See the :command:`string(TIMESTAMP)` command for documentation of the "
"``<format>`` and ``UTC`` options."
msgstr ""

#: ../../../command/file.rst:276
msgid ""
"file(GENERATE OUTPUT output-file\n"
"     <INPUT input-file|CONTENT content>\n"
"     [CONDITION expression])"
msgstr ""

#: ../../../command/file.rst:280
msgid ""
"Generate an output file for each build configuration supported by the "
"current :manual:`CMake Generator <cmake-generators(7)>`.  Evaluate :manual:"
"`generator expressions <cmake-generator-expressions(7)>` from the input "
"content to produce the output content.  The options are:"
msgstr ""

#: ../../../command/file.rst:288
msgid "``CONDITION <condition>``"
msgstr ""

#: ../../../command/file.rst:286
msgid ""
"Generate the output file for a particular configuration only if the "
"condition is true.  The condition must be either ``0`` or ``1`` after "
"evaluating generator expressions."
msgstr ""

#: ../../../command/file.rst:291
msgid "``CONTENT <content>``"
msgstr ""

#: ../../../command/file.rst:291
msgid "Use the content given explicitly as input."
msgstr ""

#: ../../../command/file.rst:296
msgid "``INPUT <input-file>``"
msgstr ""

#: ../../../command/file.rst:294
msgid ""
"Use the content from a given file as input. A relative path is treated with "
"respect to the value of :variable:`CMAKE_CURRENT_SOURCE_DIR`.  See policy :"
"policy:`CMP0070`."
msgstr ""

#: ../../../command/file.rst:306
msgid "``OUTPUT <output-file>``"
msgstr ""

#: ../../../command/file.rst:299
msgid ""
"Specify the output file name to generate.  Use generator expressions such as "
"``$<CONFIG>`` to specify a configuration-specific output file name.  "
"Multiple configurations may generate the same output file only if the "
"generated content is identical.  Otherwise, the ``<output-file>`` must "
"evaluate to an unique name for each configuration. A relative path (after "
"evaluating generator expressions) is treated with respect to the value of :"
"variable:`CMAKE_CURRENT_BINARY_DIR`. See policy :policy:`CMP0070`."
msgstr ""

#: ../../../command/file.rst:308
msgid ""
"Exactly one ``CONTENT`` or ``INPUT`` option must be given.  A specific "
"``OUTPUT`` file may be named by at most one invocation of "
"``file(GENERATE)``. Generated files are modified and their timestamp updated "
"on subsequent cmake runs only if their content is changed."
msgstr ""

#: ../../../command/file.rst:313
msgid ""
"Note also that ``file(GENERATE)`` does not create the output file until the "
"generation phase. The output file will not yet have been written when the "
"``file(GENERATE)`` command returns, it is written only after processing all "
"of a project's ``CMakeLists.txt`` files."
msgstr ""

#: ../../../command/file.rst:322
msgid ""
"file(<COPY|INSTALL> <files>... DESTINATION <dir>\n"
"     [FILE_PERMISSIONS <permissions>...]\n"
"     [DIRECTORY_PERMISSIONS <permissions>...]\n"
"     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\n"
"     [FILES_MATCHING]\n"
"     [[PATTERN <pattern> | REGEX <regex>]\n"
"      [EXCLUDE] [PERMISSIONS <permissions>...]] [...])"
msgstr ""

#: ../../../command/file.rst:330
msgid ""
"The ``COPY`` signature copies files, directories, and symlinks to a "
"destination folder.  Relative input paths are evaluated with respect to the "
"current source directory, and a relative destination is evaluated with "
"respect to the current build directory.  Copying preserves input file "
"timestamps, and optimizes out a file if it exists at the destination with "
"the same timestamp.  Copying preserves input permissions unless explicit "
"permissions or ``NO_SOURCE_PERMISSIONS`` are given (default is "
"``USE_SOURCE_PERMISSIONS``)."
msgstr ""

#: ../../../command/file.rst:339
msgid ""
"See the :command:`install(DIRECTORY)` command for documentation of "
"permissions, ``FILES_MATCHING``, ``PATTERN``, ``REGEX``, and ``EXCLUDE`` "
"options.  Copying directories preserves the structure of their content even "
"if options are used to select a subset of files."
msgstr ""

#: ../../../command/file.rst:345
msgid ""
"The ``INSTALL`` signature differs slightly from ``COPY``: it prints status "
"messages (subject to the :variable:`CMAKE_INSTALL_MESSAGE` variable), and "
"``NO_SOURCE_PERMISSIONS`` is default. Installation scripts generated by the :"
"command:`install` command use this signature (with some undocumented options "
"for internal use)."
msgstr ""

#: ../../../command/file.rst:355
msgid ""
"file(LOCK <path> [DIRECTORY] [RELEASE]\n"
"     [GUARD <FUNCTION|FILE|PROCESS>]\n"
"     [RESULT_VARIABLE <variable>]\n"
"     [TIMEOUT <seconds>])"
msgstr ""

#: ../../../command/file.rst:360
msgid ""
"Lock a file specified by ``<path>`` if no ``DIRECTORY`` option present and "
"file ``<path>/cmake.lock`` otherwise. File will be locked for scope defined "
"by ``GUARD`` option (default value is ``PROCESS``). ``RELEASE`` option can "
"be used to unlock file explicitly. If option ``TIMEOUT`` is not specified "
"CMake will wait until lock succeed or until fatal error occurs. If "
"``TIMEOUT`` is set to ``0`` lock will be tried once and result will be "
"reported immediately. If ``TIMEOUT`` is not ``0`` CMake will try to lock "
"file for the period specified by ``<seconds>`` value. Any errors will be "
"interpreted as fatal if there is no ``RESULT_VARIABLE`` option. Otherwise "
"result will be stored in ``<variable>`` and will be ``0`` on success or "
"error message on failure."
msgstr ""

#: ../../../command/file.rst:371
msgid ""
"Note that lock is advisory - there is no guarantee that other processes will "
"respect this lock, i.e. lock synchronize two or more CMake instances sharing "
"some modifiable resources. Similar logic applied to ``DIRECTORY`` option - "
"locking parent directory doesn't prevent other ``LOCK`` commands to lock any "
"child directory or file."
msgstr ""

#: ../../../command/file.rst:377
msgid ""
"Trying to lock file twice is not allowed.  Any intermediate directories and "
"file itself will be created if they not exist.  ``GUARD`` and ``TIMEOUT`` "
"options ignored on ``RELEASE`` operation."
msgstr ""
