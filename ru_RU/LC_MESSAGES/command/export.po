# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.25\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/export.rst:2
msgid "export"
msgstr ""

#: ../../../command/export.rst:4
msgid ""
"Export targets or packages for outside projects to use them directly from "
"the current project's build tree, without installation."
msgstr ""

#: ../../../command/export.rst:7
msgid ""
"See the :command:`install(EXPORT)` command to export targets from an install "
"tree."
msgstr ""

#: ../../../command/export.rst:11
msgid "Synopsis"
msgstr ""

#: ../../../command/export.rst:15
msgid ""
"export(`TARGETS`_ <target>... [...])\n"
"export(`EXPORT`_ <export-name> [...])\n"
"export(`PACKAGE`_ <PackageName>)"
msgstr ""

#: ../../../command/export.rst:20
msgid "Exporting Targets"
msgstr ""

#: ../../../command/export.rst:25
msgid ""
"export(TARGETS <target>... [NAMESPACE <namespace>]\n"
"       [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES]\n"
"       [CXX_MODULES_DIRECTORY <directory>])"
msgstr ""

#: ../../../command/export.rst:31
msgid ""
"Creates a file ``<filename>`` that may be included by outside projects to "
"import targets named by ``<target>...`` from the current project's build "
"tree. This is useful during cross-compiling to build utility executables "
"that can run on the host platform in one project and then import them into "
"another project being compiled for the target platform."
msgstr ""

#: ../../../command/export.rst:37
msgid ""
"The file created by this command is specific to the build tree and should "
"never be installed.  See the :command:`install(EXPORT)` command to export "
"targets from an install tree."
msgstr ""

#: ../../../command/export.rst:41
msgid "The options are:"
msgstr ""

#: ../../../command/export.rst:43
msgid "``NAMESPACE <namespace>``"
msgstr ""

#: ../../../command/export.rst:44
msgid ""
"Prepend the ``<namespace>`` string to all target names written to the file."
msgstr ""

#: ../../../command/export.rst:46
msgid "``APPEND``"
msgstr ""

#: ../../../command/export.rst:47
msgid ""
"Append to the file instead of overwriting it.  This can be used to "
"incrementally export multiple targets to the same file."
msgstr ""

#: ../../../command/export.rst:50
msgid "``EXPORT_LINK_INTERFACE_LIBRARIES``"
msgstr ""

#: ../../../command/export.rst:51
msgid ""
"Include the contents of the properties named with the pattern ``(IMPORTED_)?"
"LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` in the export, even when policy :"
"policy:`CMP0022` is NEW.  This is useful to support consumers using CMake "
"versions older than 2.8.12."
msgstr ""

#: ../../../command/export.rst:56
msgid "``CXX_MODULES_DIRECTORY <directory>``"
msgstr ""

#: ../../../command/export.rst:60
msgid "Experimental. Gated by ``CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API``"
msgstr ""

#: ../../../command/export.rst:62
msgid ""
"Export C++ module properties to files under the given directory. Each file "
"will be named according to the target's export name (without any namespace). "
"These files will automatically be included from the export file."
msgstr ""

#: ../../../command/export.rst:66
msgid ""
"This signature requires all targets to be listed explicitly.  If a library "
"target is included in the export, but a target to which it links is not "
"included, the behavior is unspecified.  See the `export(EXPORT)`_ signature "
"to automatically export the same targets from the build tree as :command:"
"`install(EXPORT)` would from an install tree."
msgstr ""

#: ../../../command/export.rst:74
msgid ""
":ref:`Object Libraries` under :generator:`Xcode` have special handling if "
"multiple architectures are listed in :variable:`CMAKE_OSX_ARCHITECTURES`. In "
"this case they will be exported as :ref:`Interface Libraries` with no object "
"files available to clients.  This is sufficient to satisfy transitive usage "
"requirements of other targets that link to the object libraries in their "
"implementation."
msgstr ""

#: ../../../command/export.rst:82
msgid "Exporting Targets to Android.mk"
msgstr ""

#: ../../../command/export.rst:84
msgid "export(TARGETS <target>... ANDROID_MK <filename>)"
msgstr ""

#: ../../../command/export.rst:90
msgid ""
"This signature exports cmake built targets to the android ndk build system "
"by creating an ``Android.mk`` file that references the prebuilt targets. The "
"Android NDK supports the use of prebuilt libraries, both static and shared. "
"This allows cmake to build the libraries of a project and make them "
"available to an ndk build system complete with transitive dependencies, "
"include flags and defines required to use the libraries. The signature takes "
"a list of targets and puts them in the ``Android.mk`` file specified by the "
"``<filename>`` given. This signature can only be used if policy :policy:"
"`CMP0022` is NEW for all targets given. A error will be issued if that "
"policy is set to OLD for one of the targets."
msgstr ""

#: ../../../command/export.rst:102
msgid "Exporting Targets matching install(EXPORT)"
msgstr ""

#: ../../../command/export.rst:107
msgid ""
"export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>]\n"
"       [CXX_MODULES_DIRECTORY <directory>])"
msgstr ""

#: ../../../command/export.rst:112
msgid ""
"Creates a file ``<filename>`` that may be included by outside projects to "
"import targets from the current project's build tree.  This is the same as "
"the `export(TARGETS)`_ signature, except that the targets are not explicitly "
"listed.  Instead, it exports the targets associated with the installation "
"export ``<export-name>``.  Target installations may be associated with the "
"export ``<export-name>`` using the ``EXPORT`` option of the :command:"
"`install(TARGETS)` command."
msgstr ""

#: ../../../command/export.rst:121
msgid "Exporting Packages"
msgstr ""

#: ../../../command/export.rst:126
msgid "export(PACKAGE <PackageName>)"
msgstr ""

#: ../../../command/export.rst:130
msgid ""
"Store the current build directory in the CMake user package registry for "
"package ``<PackageName>``.  The :command:`find_package` command may consider "
"the directory while searching for package ``<PackageName>``.  This helps "
"dependent projects find and use a package from the current project's build "
"tree without help from the user.  Note that the entry in the package "
"registry that this command creates works only in conjunction with a package "
"configuration file (``<PackageName>Config.cmake``) that works with the build "
"tree. In some cases, for example for packaging and for system wide "
"installations, it is not desirable to write the user package registry."
msgstr ""

#: ../../../command/export.rst:141
msgid ""
"If the :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable is enabled, the "
"``export(PACKAGE)`` command will do nothing."
msgstr ""

#: ../../../command/export.rst:145
msgid ""
"By default the ``export(PACKAGE)`` command does nothing (see policy :policy:"
"`CMP0090`) because populating the user package registry has effects outside "
"the source and build trees.  Set the :variable:"
"`CMAKE_EXPORT_PACKAGE_REGISTRY` variable to add build directories to the "
"CMake user package registry."
msgstr ""
