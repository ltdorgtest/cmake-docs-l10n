# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-21 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/target_precompile_headers.rst:2
msgid "target_precompile_headers"
msgstr ""

#: ../../../command/target_precompile_headers.rst:6
msgid "Add a list of header files to precompile."
msgstr ""

#: ../../../command/target_precompile_headers.rst:8
msgid ""
"Precompiling header files can speed up compilation by creating a partially "
"processed version of some header files, and then using that version during "
"compilations rather than repeatedly parsing the original headers."
msgstr ""

#: ../../../command/target_precompile_headers.rst:13
msgid "Main Form"
msgstr ""

#: ../../../command/target_precompile_headers.rst:15
msgid ""
"target_precompile_headers(<target>\n"
"  <INTERFACE|PUBLIC|PRIVATE> [header1...]\n"
"  [<INTERFACE|PUBLIC|PRIVATE> [header2...] ...])"
msgstr ""

#: ../../../command/target_precompile_headers.rst:21
msgid ""
"The command adds header files to the :prop_tgt:`PRECOMPILE_HEADERS` and/or :"
"prop_tgt:`INTERFACE_PRECOMPILE_HEADERS` target properties of ``<target>``. "
"The named ``<target>`` must have been created by a command such as :command:"
"`add_executable` or :command:`add_library` and must not be an :ref:`ALIAS "
"target <Alias Targets>`."
msgstr ""

#: ../../../command/target_precompile_headers.rst:27
msgid ""
"The ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to "
"specify the :ref:`scope <Target Command Scope>` of the following arguments. "
"``PRIVATE`` and ``PUBLIC`` items will populate the :prop_tgt:"
"`PRECOMPILE_HEADERS` property of ``<target>``.  ``PUBLIC`` and ``INTERFACE`` "
"items will populate the :prop_tgt:`INTERFACE_PRECOMPILE_HEADERS` property of "
"``<target>`` (:ref:`IMPORTED targets <Imported Targets>` only support "
"``INTERFACE`` items). Repeated calls for the same ``<target>`` will append "
"items in the order called."
msgstr ""

#: ../../../command/target_precompile_headers.rst:35
msgid ""
"Projects should generally avoid using ``PUBLIC`` or ``INTERFACE`` for "
"targets that will be :command:`exported <install(EXPORT)>`, or they should "
"at least use the :genex:`$<BUILD_INTERFACE:...>` generator expression to "
"prevent precompile headers from appearing in an installed exported target.  "
"Consumers of a target should typically be in control of what precompile "
"headers they use, not have precompile headers forced on them by the targets "
"being consumed (since precompile headers are not typically usage "
"requirements).  A notable exception to this is where an :ref:`interface "
"library <Interface Libraries>` is created to define a commonly used set of "
"precompile headers in one place and then other targets link to that "
"interface library privately.  In this case, the interface library exists "
"specifically to propagate the precompile headers to its consumers and the "
"consumer is effectively still in control, since it decides whether to link "
"to the interface library or not."
msgstr ""

#: ../../../command/target_precompile_headers.rst:49
msgid ""
"The list of header files is used to generate a header file named ``cmake_pch."
"h|xx`` which is used to generate the precompiled header file (``.pch``, ``."
"gch``, ``.pchi``) artifact.  The ``cmake_pch.h|xx`` header file will be "
"force included (``-include`` for GCC, ``/FI`` for MSVC) to all source files, "
"so sources do not need to have ``#include \"pch.h\"``."
msgstr ""

#: ../../../command/target_precompile_headers.rst:55
msgid ""
"Header file names specified with angle brackets (e.g. ``<unordered_map>``) "
"or explicit double quotes (escaped for the :manual:`cmake-language(7)`, e.g. "
"``[[\"other_header.h\"]]``) will be treated as is, and include directories "
"must be available for the compiler to find them.  Other header file names (e."
"g. ``project_header.h``) are interpreted as being relative to the current "
"source directory (e.g. :variable:`CMAKE_CURRENT_SOURCE_DIR`) and will be "
"included by absolute path.  For example:"
msgstr ""

#: ../../../command/target_precompile_headers.rst:63
msgid ""
"target_precompile_headers(myTarget\n"
"  PUBLIC\n"
"    project_header.h\n"
"  PRIVATE\n"
"    [[\"other_header.h\"]]\n"
"    <unordered_map>\n"
")"
msgstr ""

#: ../../../command/include/GENEX_NOTE.rst:1
msgid "for more on defining buildsystem properties."
msgstr ""

#: ../../../command/include/GENEX_NOTE.rst:3
msgid ""
"Arguments to |command_name| may use generator expressions with the syntax "
"``$<...>``. See the :manual:`cmake-generator-expressions(7)` manual for "
"available expressions.  |more_see_also|"
msgstr ""

#: ../../../command/target_precompile_headers.rst:84
msgid ""
"target_precompile_headers(mylib PRIVATE\n"
"  \"$<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/cxx_only.h>\"\n"
"  \"$<$<COMPILE_LANGUAGE:C>:<stddef.h$<ANGLE-R>>\"\n"
"  \"$<$<COMPILE_LANGUAGE:CXX>:<cstddef$<ANGLE-R>>\"\n"
")"
msgstr ""

#: ../../../command/target_precompile_headers.rst:94
msgid "Reusing Precompile Headers"
msgstr ""

#: ../../../command/target_precompile_headers.rst:96
msgid ""
"The command also supports a second signature which can be used to specify "
"that one target reuses a precompiled header file artifact from another "
"target instead of generating its own:"
msgstr ""

#: ../../../command/target_precompile_headers.rst:100
msgid "target_precompile_headers(<target> REUSE_FROM <other_target>)"
msgstr ""

#: ../../../command/target_precompile_headers.rst:104
msgid ""
"This form sets the :prop_tgt:`PRECOMPILE_HEADERS_REUSE_FROM` property to "
"``<other_target>`` and adds a dependency such that ``<target>`` will depend "
"on ``<other_target>``.  CMake will halt with an error if the :prop_tgt:"
"`PRECOMPILE_HEADERS` property of ``<target>`` is already set when the "
"``REUSE_FROM`` form is used."
msgstr ""

#: ../../../command/target_precompile_headers.rst:112
msgid ""
"The ``REUSE_FROM`` form requires the same set of compiler options, compiler "
"flags and compiler definitions for both ``<target>`` and "
"``<other_target>``.  Some compilers (e.g. GCC) may issue a warning if the "
"precompiled header file cannot be used (``-Winvalid-pch``)."
msgstr ""

#: ../../../command/target_precompile_headers.rst:118
msgid "See Also"
msgstr ""

#: ../../../command/target_precompile_headers.rst:120
msgid ""
"To disable precompile headers for specific targets, see the :prop_tgt:"
"`DISABLE_PRECOMPILE_HEADERS` target property."
msgstr ""

#: ../../../command/target_precompile_headers.rst:123
msgid ""
"To prevent precompile headers from being used when compiling a specific "
"source file, see the :prop_sf:`SKIP_PRECOMPILE_HEADERS` source file property."
msgstr ""

#: ../../../command/target_precompile_headers.rst:126
msgid ":command:`target_compile_definitions`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:127
msgid ":command:`target_compile_features`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:128
msgid ":command:`target_compile_options`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:129
msgid ":command:`target_include_directories`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:130
msgid ":command:`target_link_libraries`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:131
msgid ":command:`target_link_directories`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:132
msgid ":command:`target_link_options`"
msgstr ""

#: ../../../command/target_precompile_headers.rst:133
msgid ":command:`target_sources`"
msgstr ""
