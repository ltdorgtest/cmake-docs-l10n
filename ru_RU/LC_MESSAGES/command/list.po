# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2019 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/list.rst:2
msgid "list"
msgstr ""

#: ../../../command/list.rst:4
msgid "List operations."
msgstr ""

#: ../../../command/list.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/list.rst:11
msgid ""
"`Reading`_\n"
"  list(`LENGTH`_ <list> <out-var>)\n"
"  list(`GET`_ <list> <element index> [<index> ...] <out-var>)\n"
"  list(`JOIN`_ <list> <glue> <out-var>)\n"
"  list(`SUBLIST`_ <list> <begin> <length> <out-var>)\n"
"\n"
"`Search`_\n"
"  list(`FIND`_ <list> <value> <out-var>)\n"
"\n"
"`Modification`_\n"
"  list(`APPEND`_ <list> [<element>...])\n"
"  list(`FILTER`_ <list> {INCLUDE | EXCLUDE} REGEX <regex>)\n"
"  list(`INSERT`_ <list> <index> [<element>...])\n"
"  list(`POP_BACK`_ <list> [<out-var>...])\n"
"  list(`POP_FRONT`_ <list> [<out-var>...])\n"
"  list(`PREPEND`_ <list> [<element>...])\n"
"  list(`REMOVE_ITEM`_ <list> <value>...)\n"
"  list(`REMOVE_AT`_ <list> <index>...)\n"
"  list(`REMOVE_DUPLICATES`_ <list>)\n"
"  list(`TRANSFORM`_ <list> <ACTION> [...])\n"
"\n"
"`Ordering`_\n"
"  list(`REVERSE`_ <list>)\n"
"  list(`SORT`_ <list> [...])"
msgstr ""

#: ../../../command/list.rst:37
msgid "Introduction"
msgstr ""

#: ../../../command/list.rst:39
msgid ""
"The list subcommands ``APPEND``, ``INSERT``, ``FILTER``, ``PREPEND``, "
"``POP_BACK``, ``POP_FRONT``, ``REMOVE_AT``, ``REMOVE_ITEM``, "
"``REMOVE_DUPLICATES``, ``REVERSE`` and ``SORT`` may create new values for "
"the list within the current CMake variable scope.  Similar to the :command:"
"`set` command, the LIST command creates new variable values in the current "
"scope, even if the list itself is actually defined in a parent scope.  To "
"propagate the results of these operations upwards, use :command:`set` with "
"``PARENT_SCOPE``, :command:`set` with ``CACHE INTERNAL``, or some other "
"means of value propagation."
msgstr ""

#: ../../../command/list.rst:51
msgid ""
"A list in cmake is a ``;`` separated group of strings.  To create a list the "
"set command can be used.  For example, ``set(var a b c d e)`` creates a list "
"with ``a;b;c;d;e``, and ``set(var \"a b c d e\")`` creates a string or a "
"list with one item in it.   (Note macro arguments are not variables, and "
"therefore cannot be used in LIST commands.)"
msgstr ""

#: ../../../command/list.rst:59
msgid ""
"When specifying index values, if ``<element index>`` is 0 or greater, it is "
"indexed from the beginning of the list, with 0 representing the first list "
"element.  If ``<element index>`` is -1 or lesser, it is indexed from the end "
"of the list, with -1 representing the last list element. Be careful when "
"counting with negative indices: they do not start from 0.  -0 is equivalent "
"to 0, the first list element."
msgstr ""

#: ../../../command/list.rst:67
msgid "Reading"
msgstr ""

#: ../../../command/list.rst:71
msgid "list(LENGTH <list> <output variable>)"
msgstr ""

#: ../../../command/list.rst:75
msgid "Returns the list's length."
msgstr ""

#: ../../../command/list.rst:79
msgid ""
"list(GET <list> <element index> [<element index> ...] <output variable>)"
msgstr ""

#: ../../../command/list.rst:83
msgid "Returns the list of elements specified by indices from the list."
msgstr ""

#: ../../../command/list.rst:87
msgid "list(JOIN <list> <glue> <output variable>)"
msgstr ""

#: ../../../command/list.rst:91
msgid ""
"Returns a string joining all list's elements using the glue string. To join "
"multiple strings, which are not part of a list, use ``JOIN`` operator from :"
"command:`string` command."
msgstr ""

#: ../../../command/list.rst:97
msgid "list(SUBLIST <list> <begin> <length> <output variable>)"
msgstr ""

#: ../../../command/list.rst:101
msgid ""
"Returns a sublist of the given list. If ``<length>`` is 0, an empty list "
"will be returned. If ``<length>`` is -1 or the list is smaller than "
"``<begin>+<length>`` then the remaining elements of the list starting at "
"``<begin>`` will be returned."
msgstr ""

#: ../../../command/list.rst:107
msgid "Search"
msgstr ""

#: ../../../command/list.rst:111
msgid "list(FIND <list> <value> <output variable>)"
msgstr ""

#: ../../../command/list.rst:115
msgid ""
"Returns the index of the element specified in the list or -1 if it wasn't "
"found."
msgstr ""

#: ../../../command/list.rst:119
msgid "Modification"
msgstr ""

#: ../../../command/list.rst:123
msgid "list(APPEND <list> [<element> ...])"
msgstr ""

#: ../../../command/list.rst:127
msgid "Appends elements to the list."
msgstr ""

#: ../../../command/list.rst:131
msgid "list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)"
msgstr ""

#: ../../../command/list.rst:135
msgid ""
"Includes or removes items from the list that match the mode's pattern. In "
"``REGEX`` mode, items will be matched against the given regular expression."
msgstr ""

#: ../../../command/list.rst:138
msgid ""
"For more information on regular expressions see also the :command:`string` "
"command."
msgstr ""

#: ../../../command/list.rst:143
msgid "list(INSERT <list> <element_index> <element> [<element> ...])"
msgstr ""

#: ../../../command/list.rst:147
msgid "Inserts elements to the list to the specified location."
msgstr ""

#: ../../../command/list.rst:151
msgid "list(POP_BACK <list> [<out-var>...])"
msgstr ""

#: ../../../command/list.rst:155
msgid ""
"If no variable name is given, removes exactly one element. Otherwise, assign "
"the last element's value to the given variable and removes it, up to the "
"last variable name given."
msgstr ""

#: ../../../command/list.rst:161
msgid "list(POP_FRONT <list> [<out-var>...])"
msgstr ""

#: ../../../command/list.rst:165
msgid ""
"If no variable name is given, removes exactly one element. Otherwise, assign "
"the first element's value to the given variable and removes it, up to the "
"last variable name given."
msgstr ""

#: ../../../command/list.rst:171
msgid "list(PREPEND <list> [<element> ...])"
msgstr ""

#: ../../../command/list.rst:175
msgid "Insert elements to the 0th position in the list."
msgstr ""

#: ../../../command/list.rst:179
msgid "list(REMOVE_ITEM <list> <value> [<value> ...])"
msgstr ""

#: ../../../command/list.rst:183
msgid "Removes all instances of the given items from the list."
msgstr ""

#: ../../../command/list.rst:187
msgid "list(REMOVE_AT <list> <index> [<index> ...])"
msgstr ""

#: ../../../command/list.rst:191
msgid "Removes items at given indices from the list."
msgstr ""

#: ../../../command/list.rst:195
msgid "list(REMOVE_DUPLICATES <list>)"
msgstr ""

#: ../../../command/list.rst:199
msgid ""
"Removes duplicated items in the list. The relative order of items is "
"preserved, but if duplicates are encountered, only the first instance is "
"preserved."
msgstr ""

#: ../../../command/list.rst:204
msgid ""
"list(TRANSFORM <list> <ACTION> [<SELECTOR>]\n"
"                      [OUTPUT_VARIABLE <output variable>])"
msgstr ""

#: ../../../command/list.rst:209
msgid ""
"Transforms the list by applying an action to all or, by specifying a "
"``<SELECTOR>``, to the selected elements of the list, storing the result in-"
"place or in the specified output variable."
msgstr ""

#: ../../../command/list.rst:215
msgid ""
"The ``TRANSFORM`` sub-command does not change the number of elements in the "
"list. If a ``<SELECTOR>`` is specified, only some elements will be changed, "
"the other ones will remain the same as before the transformation."
msgstr ""

#: ../../../command/list.rst:219
msgid ""
"``<ACTION>`` specifies the action to apply to the elements of the list. The "
"actions have exactly the same semantics as sub-commands of the :command:"
"`string` command.  ``<ACTION>`` must be one of the following:"
msgstr ""

#: ../../../command/list.rst:223
msgid ""
"``APPEND``, ``PREPEND``: Append, prepend specified value to each element of "
"the list."
msgstr ""

#: ../../../command/list.rst:226
msgid "list(TRANSFORM <list> <APPEND|PREPEND> <value> ...)"
msgstr ""

#: ../../../command/list.rst:230
msgid ""
"``TOUPPER``, ``TOLOWER``: Convert each element of the list to upper, lower "
"characters."
msgstr ""

#: ../../../command/list.rst:233
msgid "list(TRANSFORM <list> <TOLOWER|TOUPPER> ...)"
msgstr ""

#: ../../../command/list.rst:237
msgid ""
"``STRIP``: Remove leading and trailing spaces from each element of the list."
msgstr ""

#: ../../../command/list.rst:240
msgid "list(TRANSFORM <list> STRIP ...)"
msgstr ""

#: ../../../command/list.rst:244
msgid ""
"``GENEX_STRIP``: Strip any :manual:`generator expressions <cmake-generator-"
"expressions(7)>` from each element of the list."
msgstr ""

#: ../../../command/list.rst:248
msgid "list(TRANSFORM <list> GENEX_STRIP ...)"
msgstr ""

#: ../../../command/list.rst:252
msgid ""
"``REPLACE``: Match the regular expression as many times as possible and "
"substitute the replacement expression for the match for each element of the "
"list (Same semantic as ``REGEX REPLACE`` from :command:`string` command)."
msgstr ""

#: ../../../command/list.rst:257
msgid ""
"list(TRANSFORM <list> REPLACE <regular_expression>\n"
"                              <replace_expression> ...)"
msgstr ""

#: ../../../command/list.rst:262
msgid ""
"``<SELECTOR>`` determines which elements of the list will be transformed. "
"Only one type of selector can be specified at a time.  When given, "
"``<SELECTOR>`` must be one of the following:"
msgstr ""

#: ../../../command/list.rst:266
msgid "``AT``: Specify a list of indexes."
msgstr ""

#: ../../../command/list.rst:268
msgid "list(TRANSFORM <list> <ACTION> AT <index> [<index> ...] ...)"
msgstr ""

#: ../../../command/list.rst:272
msgid ""
"``FOR``: Specify a range with, optionally, an increment used to iterate over "
"the range."
msgstr ""

#: ../../../command/list.rst:275
msgid "list(TRANSFORM <list> <ACTION> FOR <start> <stop> [<step>] ...)"
msgstr ""

#: ../../../command/list.rst:279
msgid ""
"``REGEX``: Specify a regular expression. Only elements matching the regular "
"expression will be transformed."
msgstr ""

#: ../../../command/list.rst:282
msgid "list(TRANSFORM <list> <ACTION> REGEX <regular_expression> ...)"
msgstr ""

#: ../../../command/list.rst:288
msgid "Ordering"
msgstr ""

#: ../../../command/list.rst:292
msgid "list(REVERSE <list>)"
msgstr ""

#: ../../../command/list.rst:296
msgid "Reverses the contents of the list in-place."
msgstr ""

#: ../../../command/list.rst:300
msgid "list(SORT <list> [COMPARE <compare>] [CASE <case>] [ORDER <order>])"
msgstr ""

#: ../../../command/list.rst:304
msgid ""
"Sorts the list in-place alphabetically. Use the ``COMPARE`` keyword to "
"select the comparison method for sorting. The ``<compare>`` option should be "
"one of:"
msgstr ""

#: ../../../command/list.rst:308
msgid ""
"``STRING``: Sorts a list of strings alphabetically.  This is the default "
"behavior if the ``COMPARE`` option is not given."
msgstr ""

#: ../../../command/list.rst:310
msgid ""
"``FILE_BASENAME``: Sorts a list of pathnames of files by their basenames."
msgstr ""

#: ../../../command/list.rst:312
msgid ""
"Use the ``CASE`` keyword to select a case sensitive or case insensitive sort "
"mode.  The ``<case>`` option should be one of:"
msgstr ""

#: ../../../command/list.rst:315
msgid ""
"``SENSITIVE``: List items are sorted in a case-sensitive manner.  This is "
"the default behavior if the ``CASE`` option is not given."
msgstr ""

#: ../../../command/list.rst:317
msgid ""
"``INSENSITIVE``: List items are sorted case insensitively.  The order of "
"items which differ only by upper/lowercase is not specified."
msgstr ""

#: ../../../command/list.rst:320
msgid ""
"To control the sort order, the ``ORDER`` keyword can be given. The "
"``<order>`` option should be one of:"
msgstr ""

#: ../../../command/list.rst:323
msgid ""
"``ASCENDING``: Sorts the list in ascending order.  This is the default "
"behavior when the ``ORDER`` option is not given."
msgstr ""

#: ../../../command/list.rst:325
msgid "``DESCENDING``: Sorts the list in descending order."
msgstr ""
