# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2024 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.31\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-13 07:45+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/install.rst:2
msgid "install"
msgstr ""

#: ../../../command/install.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/install.rst:8
msgid "Specify rules to run at install time."
msgstr ""

#: ../../../command/install.rst:11
msgid "Synopsis"
msgstr ""

#: ../../../command/install.rst:15
msgid ""
"install(`TARGETS`_ <target>... [...])\n"
"install(`IMPORTED_RUNTIME_ARTIFACTS`_ <target>... [...])\n"
"install({`FILES`_ | `PROGRAMS`_} <file>... [...])\n"
"install(`DIRECTORY`_ <dir>... [...])\n"
"install(`SCRIPT`_ <file> [...])\n"
"install(`CODE`_ <code> [...])\n"
"install(`EXPORT`_ <export-name> [...])\n"
"install(`PACKAGE_INFO`_ <package-name> [...])\n"
"install(`RUNTIME_DEPENDENCY_SET`_ <set-name> [...])"
msgstr ""

#: ../../../command/install.rst:26
msgid "Introduction"
msgstr ""

#: ../../../command/install.rst:28
msgid ""
"This command generates installation rules for a project.  Install rules "
"specified by calls to the ``install()`` command within a source directory "
"are executed in order during installation."
msgstr ""

#: ../../../command/install.rst:32
msgid ""
"Install rules in subdirectories added by calls to the :command:"
"`add_subdirectory` command are interleaved with those in the parent "
"directory to run in the order declared (see policy :policy:`CMP0082`)."
msgstr ""

#: ../../../command/install.rst:38
msgid ""
"The environment variable :envvar:`CMAKE_INSTALL_MODE` can override the "
"default copying behavior of ``install()``."
msgstr ""

#: ../../../command/install.rst:42
msgid ""
"Projects can enable :prop_gbl:`INSTALL_PARALLEL` to enable a parallel "
"installation. When using the parallel install, subdirectories added by calls "
"to the :command:`add_subdirectory` command are installed independently and "
"the order that install rules added in different subdirectories will run is "
"not guaranteed."
msgstr ""

#: ../../../command/install.rst:51
msgid ""
"There are multiple signatures for this command.  Some of them define "
"installation options for files and targets.  Options common to multiple "
"signatures are covered here but they are valid only for signatures that "
"specify them.  The common options are:"
msgstr ""

#: ../../../command/install.rst:56
msgid "``DESTINATION <dir>``"
msgstr ""

#: ../../../command/install.rst:57
msgid ""
"Specify the directory on disk to which a file will be installed. ``<dir>`` "
"should be a relative path.  An absolute path is allowed, but not recommended."
msgstr ""

#: ../../../command/install.rst:61
msgid ""
"When a relative path is given, it is interpreted relative to the value of "
"the :variable:`CMAKE_INSTALL_PREFIX` variable. The prefix can be relocated "
"at install time using the ``DESTDIR`` mechanism explained in the :variable:"
"`CMAKE_INSTALL_PREFIX` variable documentation."
msgstr ""

#: ../../../command/install.rst:67
msgid ""
"As absolute paths do not work with the ``cmake --install`` command's :option:"
"`--prefix <cmake--install --prefix>` option, or with the :manual:`cpack "
"<cpack(1)>` installer generators, it is strongly recommended to use relative "
"paths throughout for best support by package maintainers. In particular, "
"there is no need to make paths absolute by prepending :variable:"
"`CMAKE_INSTALL_PREFIX`; this prefix is used by default if the DESTINATION is "
"a relative path."
msgstr ""

#: ../../../command/install.rst:75
msgid ""
"If an absolute path (with a leading slash or drive letter) is given it is "
"used verbatim."
msgstr ""

#: ../../../command/install.rst:78
msgid ""
"``<dir>`` will be normalized according to the same :ref:`normalization rules "
"<Normalization>` as the :command:`cmake_path` command."
msgstr ""

#: ../../../command/install.rst:83
msgid "``PERMISSIONS <permission>...``"
msgstr ""

#: ../../../command/install.rst:84
msgid ""
"Specify permissions for installed files.  Valid permissions are "
"``OWNER_READ``, ``OWNER_WRITE``, ``OWNER_EXECUTE``, ``GROUP_READ``, "
"``GROUP_WRITE``, ``GROUP_EXECUTE``, ``WORLD_READ``, ``WORLD_WRITE``, "
"``WORLD_EXECUTE``, ``SETUID``, and ``SETGID``.  Permissions that do not make "
"sense on certain platforms are ignored on those platforms."
msgstr ""

#: ../../../command/install.rst:90
msgid ""
"If this option is used multiple times in a single call, its list of "
"permissions accumulates.  If an :command:`install(TARGETS)` call uses "
"`\\<artifact-kind\\>`_ arguments, a separate list of permissions is "
"accumulated for each kind of artifact."
msgstr ""

#: ../../../command/install.rst:95
msgid "``CONFIGURATIONS <config>...``"
msgstr ""

#: ../../../command/install.rst:96
msgid ""
"Specify a list of build configurations for which the install rule applies "
"(Debug, Release, etc.)."
msgstr ""

#: ../../../command/install.rst:99
msgid ""
"If this option is used multiple times in a single call, its list of "
"configurations accumulates.  If an :command:`install(TARGETS)` call uses "
"`\\<artifact-kind\\>`_ arguments, a separate list of configurations is "
"accumulated for each kind of artifact."
msgstr ""

#: ../../../command/install.rst:104
msgid "``COMPONENT <component>``"
msgstr ""

#: ../../../command/install.rst:105
msgid ""
"Specify an installation component name with which the install rule is "
"associated, such as ``Runtime`` or ``Development``.  During component-"
"specific installation only install rules associated with the given component "
"name will be executed.  During a full installation all components are "
"installed unless marked with ``EXCLUDE_FROM_ALL``. If ``COMPONENT`` is not "
"provided a default component \"Unspecified\" is created.  The default "
"component name may be controlled with the :variable:"
"`CMAKE_INSTALL_DEFAULT_COMPONENT_NAME` variable."
msgstr ""

#: ../../../command/install.rst:114
msgid "``EXCLUDE_FROM_ALL``"
msgstr ""

#: ../../../command/install.rst:117
msgid ""
"Specify that the file is excluded from a full installation and only "
"installed as part of a component-specific installation"
msgstr ""

#: ../../../command/install.rst:120
msgid "``OPTIONAL``"
msgstr ""

#: ../../../command/install.rst:121
msgid ""
"Specify that it is not an error if the file to be installed does not exist."
msgstr ""

#: ../../../command/install.rst:124
msgid ""
"Command signatures that install files may print messages during "
"installation.  Use the :variable:`CMAKE_INSTALL_MESSAGE` variable to control "
"which messages are printed."
msgstr ""

#: ../../../command/install.rst:129
msgid ""
"Many of the ``install()`` variants implicitly create the directories "
"containing the installed files. If :variable:"
"`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` is set, these directories will "
"be created with the permissions specified. Otherwise, they will be created "
"according to the uname rules on Unix-like platforms. Windows platforms are "
"unaffected."
msgstr ""

#: ../../../command/install.rst:138
msgid "Signatures"
msgstr ""

#: ../../../command/install.rst:143
msgid "Install target :ref:`Output Artifacts` and associated files:"
msgstr ""

#: ../../../command/install.rst:145
msgid ""
"install(TARGETS <target>... [EXPORT <export-name>]\n"
"        [RUNTIME_DEPENDENCIES <arg>...|RUNTIME_DEPENDENCY_SET <set-name>]\n"
"        [<artifact-option>...]\n"
"        [<artifact-kind> <artifact-option>...]...\n"
"        [INCLUDES DESTINATION [<dir> ...]]\n"
"        )"
msgstr ""

#: ../../../command/install.rst:154
msgid "where ``<artifact-option>...`` group may contain:"
msgstr ""

#: ../../../command/install.rst:156
msgid ""
"[DESTINATION <dir>]\n"
"[PERMISSIONS <permission>...]\n"
"[CONFIGURATIONS <config>...]\n"
"[COMPONENT <component>]\n"
"[NAMELINK_COMPONENT <component>]\n"
"[OPTIONAL] [EXCLUDE_FROM_ALL]\n"
"[NAMELINK_ONLY|NAMELINK_SKIP]"
msgstr ""

#: ../../../command/install.rst:166
msgid ""
"The first ``<artifact-option>...`` group applies to target :ref:`Output "
"Artifacts` that do not have a dedicated group specified later in the same "
"call."
msgstr ""

#: ../../../command/install.rst:172
msgid ""
"Each ``<artifact-kind> <artifact-option>...`` group applies to :ref:`Output "
"Artifacts` of the specified artifact kind:"
msgstr ""

#: ../../../command/install.rst:175 ../../../command/install.rst:282
msgid "``ARCHIVE``"
msgstr ""

#: ../../../command/install.rst:176 ../../../command/install.rst:190
#: ../../../command/install.rst:198
msgid "Target artifacts of this kind include:"
msgstr ""

#: ../../../command/install.rst:178
msgid ""
"*Static libraries* (except on macOS when marked as ``FRAMEWORK``, see below);"
msgstr ""

#: ../../../command/install.rst:180
msgid ""
"*DLL import libraries* (on all Windows-based systems including Cygwin; they "
"have extension ``.lib``, in contrast to the ``.dll`` libraries that go to "
"``RUNTIME``);"
msgstr ""

#: ../../../command/install.rst:183
msgid ""
"On AIX, the *linker import file* created for executables with :prop_tgt:"
"`ENABLE_EXPORTS` enabled."
msgstr ""

#: ../../../command/install.rst:185
msgid ""
"On macOS, the *linker import file* created for shared libraries with :"
"prop_tgt:`ENABLE_EXPORTS` enabled (except when marked as ``FRAMEWORK``, see "
"below)."
msgstr ""

#: ../../../command/install.rst:189 ../../../command/install.rst:281
msgid "``LIBRARY``"
msgstr ""

#: ../../../command/install.rst:192
msgid "*Shared libraries*, except"
msgstr ""

#: ../../../command/install.rst:194
msgid "DLLs (these go to ``RUNTIME``, see below),"
msgstr ""

#: ../../../command/install.rst:195
msgid "on macOS when marked as ``FRAMEWORK`` (see below)."
msgstr ""

#: ../../../command/install.rst:197 ../../../command/install.rst:280
msgid "``RUNTIME``"
msgstr ""

#: ../../../command/install.rst:200
msgid ""
"*Executables* (except on macOS when marked as ``MACOSX_BUNDLE``, see "
"``BUNDLE`` below);"
msgstr ""

#: ../../../command/install.rst:202
msgid ""
"DLLs (on all Windows-based systems including Cygwin; note that the "
"accompanying import libraries are of kind ``ARCHIVE``)."
msgstr ""

#: ../../../command/install.rst:205
msgid "``OBJECTS``"
msgstr ""

#: ../../../command/install.rst:208
msgid "Object files associated with *object libraries*."
msgstr ""

#: ../../../command/install.rst:210
msgid "``FRAMEWORK``"
msgstr ""

#: ../../../command/install.rst:211
msgid ""
"Both static and shared libraries marked with the ``FRAMEWORK`` property are "
"treated as ``FRAMEWORK`` targets on macOS."
msgstr ""

#: ../../../command/install.rst:214
msgid "``BUNDLE``"
msgstr ""

#: ../../../command/install.rst:215
msgid ""
"Executables marked with the :prop_tgt:`MACOSX_BUNDLE` property are treated "
"as ``BUNDLE`` targets on macOS."
msgstr ""

#: ../../../command/install.rst:218 ../../../command/install.rst:284
msgid "``PUBLIC_HEADER``"
msgstr ""

#: ../../../command/install.rst:219
msgid ""
"Any :prop_tgt:`PUBLIC_HEADER` files associated with a library are installed "
"in the destination specified by the ``PUBLIC_HEADER`` argument on non-Apple "
"platforms. Rules defined by this argument are ignored for :prop_tgt:"
"`FRAMEWORK` libraries on Apple platforms because the associated files are "
"installed into the appropriate locations inside the framework folder. See :"
"prop_tgt:`PUBLIC_HEADER` for details."
msgstr ""

#: ../../../command/install.rst:226 ../../../command/install.rst:283
msgid "``PRIVATE_HEADER``"
msgstr ""

#: ../../../command/install.rst:227
msgid ""
"Similar to ``PUBLIC_HEADER``, but for ``PRIVATE_HEADER`` files. See :"
"prop_tgt:`PRIVATE_HEADER` for details."
msgstr ""

#: ../../../command/install.rst:230
msgid "``RESOURCE``"
msgstr ""

#: ../../../command/install.rst:231
msgid ""
"Similar to ``PUBLIC_HEADER`` and ``PRIVATE_HEADER``, but for ``RESOURCE`` "
"files. See :prop_tgt:`RESOURCE` for details."
msgstr ""

#: ../../../command/install.rst:234
msgid "``FILE_SET <set-name>``"
msgstr ""

#: ../../../command/install.rst:237
msgid ""
"File sets are defined by the :command:`target_sources(FILE_SET)` command. If "
"the file set ``<set-name>`` exists and is ``PUBLIC`` or ``INTERFACE``, any "
"files in the set are installed under the destination (see below). The "
"directory structure relative to the file set's base directories is "
"preserved. For example, a file added to the file set as ``/blah/include/"
"myproj/here.h`` with a base directory ``/blah/include`` would be installed "
"to ``myproj/here.h`` below the destination."
msgstr ""

#: ../../../command/install.rst:245
msgid "``CXX_MODULES_BMI``"
msgstr ""

#: ../../../command/install.rst:248
msgid ""
"Any module files from C++ modules from ``PUBLIC`` sources in a file set of "
"type ``CXX_MODULES`` will be installed to the given ``DESTINATION``. All "
"modules are placed directly in the destination as no directory structure is "
"derived from the names of the modules. An empty ``DESTINATION`` may be used "
"to suppress installing these files (for use in generic code)."
msgstr ""

#: ../../../command/install.rst:254
msgid ""
"For regular executables, static libraries and shared libraries, the "
"``DESTINATION`` argument is not required.  For these target types, when "
"``DESTINATION`` is omitted, a default destination will be taken from the "
"appropriate variable from :module:`GNUInstallDirs`, or set to a built-in "
"default value if that variable is not defined.  The same is true for file "
"sets, and the public and private headers associated with the installed "
"targets through the :prop_tgt:`PUBLIC_HEADER` and :prop_tgt:`PRIVATE_HEADER` "
"target properties. A destination must always be provided for module "
"libraries, Apple bundles and frameworks.  A destination can be omitted for "
"interface and object libraries, but they are handled differently (see the "
"discussion of this topic toward the end of this section)."
msgstr ""

#: ../../../command/install.rst:266
msgid ""
"For shared libraries on DLL platforms, if neither ``RUNTIME`` nor "
"``ARCHIVE`` destinations are specified, both the ``RUNTIME`` and ``ARCHIVE`` "
"components are installed to their default destinations. If either a "
"``RUNTIME`` or ``ARCHIVE`` destination is specified, the component is "
"installed to that destination, and the other component is not installed. If "
"both ``RUNTIME`` and ``ARCHIVE`` destinations are specified, then both "
"components are installed to their respective destinations."
msgstr ""

#: ../../../command/install.rst:274
msgid ""
"The following table shows the target types with their associated variables "
"and built-in defaults that apply when no destination is given:"
msgstr ""

#: ../../../command/install.rst:278
msgid "Target Type"
msgstr ""

#: ../../../command/install.rst:278 ../../../command/install.rst:567
#: ../../../command/install.rst:723
msgid "GNUInstallDirs Variable"
msgstr ""

#: ../../../command/install.rst:278 ../../../command/install.rst:567
#: ../../../command/install.rst:723
msgid "Built-In Default"
msgstr ""

#: ../../../command/install.rst:280 ../../../command/install.rst:569
#: ../../../command/install.rst:725
msgid "``${CMAKE_INSTALL_BINDIR}``"
msgstr ""

#: ../../../command/install.rst:280 ../../../command/install.rst:569
#: ../../../command/install.rst:725
msgid "``bin``"
msgstr ""

#: ../../../command/install.rst:281 ../../../command/install.rst:282
#: ../../../command/install.rst:571 ../../../command/install.rst:727
msgid "``${CMAKE_INSTALL_LIBDIR}``"
msgstr ""

#: ../../../command/install.rst:281 ../../../command/install.rst:282
#: ../../../command/install.rst:571 ../../../command/install.rst:727
msgid "``lib``"
msgstr ""

#: ../../../command/install.rst:283 ../../../command/install.rst:284
#: ../../../command/install.rst:285 ../../../command/install.rst:572
#: ../../../command/install.rst:728
msgid "``${CMAKE_INSTALL_INCLUDEDIR}``"
msgstr ""

#: ../../../command/install.rst:283 ../../../command/install.rst:284
#: ../../../command/install.rst:285 ../../../command/install.rst:572
#: ../../../command/install.rst:728
msgid "``include``"
msgstr ""

#: ../../../command/install.rst:285
msgid "``FILE_SET`` (type ``HEADERS``)"
msgstr ""

#: ../../../command/install.rst:288
msgid ""
"Projects wishing to follow the common practice of installing headers into a "
"project-specific subdirectory may prefer using file sets with appropriate "
"paths and base directories. Otherwise, they must provide a ``DESTINATION`` "
"instead of being able to rely on the above (see next example below)."
msgstr ""

#: ../../../command/install.rst:293
msgid ""
"To make packages compliant with distribution filesystem layout policies, if "
"projects must specify a ``DESTINATION``, it is strongly recommended that "
"they use a path that begins with the appropriate relative :module:"
"`GNUInstallDirs` variable. This allows package maintainers to control the "
"install destination by setting the appropriate cache variables.  The "
"following example shows a static library being installed to the default "
"destination provided by :module:`GNUInstallDirs`, but with its headers "
"installed to a project-specific subdirectory without using file sets:"
msgstr ""

#: ../../../command/install.rst:302
msgid ""
"add_library(mylib STATIC ...)\n"
"set_target_properties(mylib PROPERTIES PUBLIC_HEADER mylib.h)\n"
"include(GNUInstallDirs)\n"
"install(TARGETS mylib\n"
"        PUBLIC_HEADER\n"
"          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/myproj\n"
")"
msgstr ""

#: ../../../command/install.rst:312
msgid ""
"In addition to the `common options`_ listed above, each target can accept "
"the following additional arguments:"
msgstr ""

#: ../../../command/install.rst:315
msgid "``NAMELINK_COMPONENT``"
msgstr ""

#: ../../../command/install.rst:318
msgid ""
"On some platforms a versioned shared library has a symbolic link such as::"
msgstr ""

#: ../../../command/install.rst:321
msgid "lib<name>.so -> lib<name>.so.1"
msgstr ""

#: ../../../command/install.rst:323
msgid ""
"where ``lib<name>.so.1`` is the soname of the library and ``lib<name>.so`` "
"is a \"namelink\" allowing linkers to find the library when given ``-"
"l<name>``. The ``NAMELINK_COMPONENT`` option is similar to the ``COMPONENT`` "
"option, but it changes the installation component of a shared library "
"namelink if one is generated. If not specified, this defaults to the value "
"of ``COMPONENT``. It is an error to use this parameter outside of a "
"``LIBRARY`` block."
msgstr ""

#: ../../../command/install.rst:331 ../../../command/install.rst:354
#: ../../../command/install.rst:372
msgid ""
"This parameter is also usable for an ``ARCHIVE`` block to manage the linker "
"import file created, on macOS, for shared libraries with :prop_tgt:"
"`ENABLE_EXPORTS` enabled."
msgstr ""

#: ../../../command/install.rst:336
msgid ""
"See the `Example: Install Targets with Per-Artifact Components`_ for an "
"example using ``NAMELINK_COMPONENT``."
msgstr ""

#: ../../../command/install.rst:339
msgid ""
"This option is typically used for package managers that have separate "
"runtime and development packages. For example, on Debian systems, the "
"library is expected to be in the runtime package, and the headers and "
"namelink are expected to be in the development package."
msgstr ""

#: ../../../command/install.rst:344
msgid ""
"See the :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties for "
"details on creating versioned shared libraries."
msgstr ""

#: ../../../command/install.rst:347
msgid "``NAMELINK_ONLY``"
msgstr ""

#: ../../../command/install.rst:348
msgid ""
"This option causes the installation of only the namelink when a library "
"target is installed. On platforms where versioned shared libraries do not "
"have namelinks or when a library is not versioned, the ``NAMELINK_ONLY`` "
"option installs nothing. It is an error to use this parameter outside of a "
"``LIBRARY`` block."
msgstr ""

#: ../../../command/install.rst:359
msgid ""
"When ``NAMELINK_ONLY`` is given, either ``NAMELINK_COMPONENT`` or "
"``COMPONENT`` may be used to specify the installation component of the "
"namelink, but ``COMPONENT`` should generally be preferred."
msgstr ""

#: ../../../command/install.rst:363
msgid "``NAMELINK_SKIP``"
msgstr ""

#: ../../../command/install.rst:364
msgid ""
"Similar to ``NAMELINK_ONLY``, but it has the opposite effect: it causes the "
"installation of library files other than the namelink when a library target "
"is installed. When neither ``NAMELINK_ONLY`` or ``NAMELINK_SKIP`` are given, "
"both portions are installed. On platforms where versioned shared libraries "
"do not have symlinks or when a library is not versioned, ``NAMELINK_SKIP`` "
"installs the library. It is an error to use this parameter outside of a "
"``LIBRARY`` block."
msgstr ""

#: ../../../command/install.rst:377
msgid ""
"If ``NAMELINK_SKIP`` is specified, ``NAMELINK_COMPONENT`` has no effect. It "
"is not recommended to use ``NAMELINK_SKIP`` in conjunction with "
"``NAMELINK_COMPONENT``."
msgstr ""

#: ../../../command/install.rst:381
msgid ""
"The :command:`install(TARGETS)` command can also accept the following "
"options at the top level:"
msgstr ""

#: ../../../command/install.rst:384
msgid "``EXPORT``"
msgstr ""

#: ../../../command/install.rst:385
msgid ""
"This option associates the installed target files with an export called "
"``<export-name>``.  It must appear before any target options. To actually "
"install the export file itself, call :command:`install(EXPORT)`, documented "
"below. See documentation of the :prop_tgt:`EXPORT_NAME` target property to "
"change the name of the exported target."
msgstr ""

#: ../../../command/install.rst:392
msgid ""
"If ``EXPORT`` is used and the targets include ``PUBLIC`` or ``INTERFACE`` "
"file sets, all of them must be specified with ``FILE_SET`` arguments. All "
"``PUBLIC`` or ``INTERFACE`` file sets associated with a target are included "
"in the export."
msgstr ""

#: ../../../command/install.rst:397
msgid "``INCLUDES DESTINATION``"
msgstr ""

#: ../../../command/install.rst:398
msgid ""
"This option specifies a list of directories which will be added to the :"
"prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property of the "
"``<targets>`` when exported by the :command:`install(EXPORT)` command. If a "
"relative path is specified, it is treated as relative to the :genex:"
"`$<INSTALL_PREFIX>`."
msgstr ""

#: ../../../command/install.rst:404
msgid ""
"Unlike other ``DESTINATION`` arguments for the various ``install()`` "
"subcommands, paths given after ``INCLUDES DESTINATION`` are used as given.  "
"They are not normalized, nor assumed to be normalized, although it is "
"recommended that they are given in normalized form (see :ref:"
"`Normalization`)."
msgstr ""

#: ../../../command/install.rst:410
msgid "``RUNTIME_DEPENDENCY_SET <set-name>``"
msgstr ""

#: ../../../command/install.rst:413
msgid ""
"This option causes all runtime dependencies of installed executable, shared "
"library, and module targets to be added to the specified runtime dependency "
"set. This set can then be installed with an :command:"
"`install(RUNTIME_DEPENDENCY_SET)` command."
msgstr ""

#: ../../../command/install.rst:418
msgid ""
"This keyword and the ``RUNTIME_DEPENDENCIES`` keyword are mutually exclusive."
msgstr ""

#: ../../../command/install.rst:421
msgid "``RUNTIME_DEPENDENCIES <arg>...``"
msgstr ""

#: ../../../command/install.rst:424
msgid ""
"This option causes all runtime dependencies of installed executable, shared "
"library, and module targets to be installed along with the targets "
"themselves. The ``RUNTIME``, ``LIBRARY``, ``FRAMEWORK``, and generic "
"arguments are used to determine the properties (``DESTINATION``, "
"``COMPONENT``, etc.) of the installation of these dependencies."
msgstr ""

#: ../../../command/install.rst:430
msgid ""
"``RUNTIME_DEPENDENCIES`` is semantically equivalent to the following pair of "
"calls:"
msgstr ""

#: ../../../command/install.rst:433
msgid ""
"install(TARGETS ... RUNTIME_DEPENDENCY_SET <set-name>)\n"
"install(RUNTIME_DEPENDENCY_SET <set-name> <arg>...)"
msgstr ""

#: ../../../command/install.rst:438
msgid ""
"where ``<set-name>`` will be a randomly generated set name. ``<arg>...`` may "
"include any of the following keywords supported by the :command:"
"`install(RUNTIME_DEPENDENCY_SET)` command:"
msgstr ""

#: ../../../command/install.rst:442
msgid "``DIRECTORIES``"
msgstr ""

#: ../../../command/install.rst:443
msgid "``PRE_INCLUDE_REGEXES``"
msgstr ""

#: ../../../command/install.rst:444
msgid "``PRE_EXCLUDE_REGEXES``"
msgstr ""

#: ../../../command/install.rst:445
msgid "``POST_INCLUDE_REGEXES``"
msgstr ""

#: ../../../command/install.rst:446
msgid "``POST_EXCLUDE_REGEXES``"
msgstr ""

#: ../../../command/install.rst:447
msgid "``POST_INCLUDE_FILES``"
msgstr ""

#: ../../../command/install.rst:448
msgid "``POST_EXCLUDE_FILES``"
msgstr ""

#: ../../../command/install.rst:450
msgid ""
"The ``RUNTIME_DEPENDENCIES`` and ``RUNTIME_DEPENDENCY_SET`` keywords are "
"mutually exclusive."
msgstr ""

#: ../../../command/install.rst:453
msgid ""
":ref:`Interface Libraries` may be listed among the targets to install. They "
"install no artifacts but will be included in an associated ``EXPORT``. If :"
"ref:`Object Libraries` are listed but given no destination for their object "
"files, they will be exported as :ref:`Interface Libraries`. This is "
"sufficient to satisfy transitive usage requirements of other targets that "
"link to the object libraries in their implementation."
msgstr ""

#: ../../../command/install.rst:460
msgid ""
"Installing a target with the :prop_tgt:`EXCLUDE_FROM_ALL` target property "
"set to ``TRUE`` has undefined behavior."
msgstr ""

#: ../../../command/install.rst:463 ../../../command/install.rst:611
#: ../../../command/install.rst:753
msgid ""
"An install destination given as a ``DESTINATION`` argument may use "
"\"generator expressions\" with the syntax ``$<...>``.  See the :manual:"
"`cmake-generator-expressions(7)` manual for available expressions."
msgstr ""

#: ../../../command/install.rst:468
msgid ""
":command:`install(TARGETS)` can install targets that were created in other "
"directories.  When using such cross-directory install rules, running ``make "
"install`` (or similar) from a subdirectory will not guarantee that targets "
"from other directories are up-to-date.  You can use :command:"
"`target_link_libraries` or :command:`add_dependencies` to ensure that such "
"out-of-directory targets are built before the subdirectory-specific install "
"rules are run."
msgstr ""

#: ../../../command/install.rst:482
msgid "Install runtime artifacts of imported targets:"
msgstr ""

#: ../../../command/install.rst:484
msgid ""
"install(IMPORTED_RUNTIME_ARTIFACTS <target>...\n"
"        [RUNTIME_DEPENDENCY_SET <set-name>]\n"
"        [[LIBRARY|RUNTIME|FRAMEWORK|BUNDLE]\n"
"         [DESTINATION <dir>]\n"
"         [PERMISSIONS <permission>...]\n"
"         [CONFIGURATIONS <config>...]\n"
"         [COMPONENT <component>]\n"
"         [OPTIONAL] [EXCLUDE_FROM_ALL]\n"
"        ] [...]\n"
"        )"
msgstr ""

#: ../../../command/install.rst:497
msgid ""
"The ``IMPORTED_RUNTIME_ARTIFACTS`` form specifies rules for installing the "
"runtime artifacts of imported targets. Projects may do this if they want to "
"bundle outside executables or modules inside their installation. The "
"``LIBRARY``, ``RUNTIME``, ``FRAMEWORK``, and ``BUNDLE`` arguments have the "
"same semantics that they do in the `TARGETS`_ mode. Only the runtime "
"artifacts of imported targets are installed (except in the case of :prop_tgt:"
"`FRAMEWORK` libraries, :prop_tgt:`MACOSX_BUNDLE` executables, and :prop_tgt:"
"`BUNDLE` CFBundles.) For example, headers and import libraries associated "
"with DLLs are not installed. In the case of :prop_tgt:`FRAMEWORK` "
"libraries, :prop_tgt:`MACOSX_BUNDLE` executables, and :prop_tgt:`BUNDLE` "
"CFBundles, the entire directory is installed."
msgstr ""

#: ../../../command/install.rst:509
msgid ""
"The ``RUNTIME_DEPENDENCY_SET`` option causes the runtime artifacts of the "
"imported executable, shared library, and module library ``targets`` to be "
"added to the ``<set-name>`` runtime dependency set. This set can then be "
"installed with an :command:`install(RUNTIME_DEPENDENCY_SET)` command."
msgstr ""

#: ../../../command/install.rst:520
msgid ""
"If installing header files, consider using file sets defined by :command:"
"`target_sources(FILE_SET)` instead. File sets associate headers with a "
"target and they install as part of the target."
msgstr ""

#: ../../../command/install.rst:524
msgid "Install files or programs:"
msgstr ""

#: ../../../command/install.rst:526
msgid ""
"install(<FILES|PROGRAMS> <file>...\n"
"        TYPE <type> | DESTINATION <dir>\n"
"        [PERMISSIONS <permission>...]\n"
"        [CONFIGURATIONS <config>...]\n"
"        [COMPONENT <component>]\n"
"        [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])"
msgstr ""

#: ../../../command/install.rst:535
msgid ""
"The ``FILES`` form specifies rules for installing files for a project. File "
"names given as relative paths are interpreted with respect to the current "
"source directory.  Files installed by this form are by default given "
"permissions ``OWNER_WRITE``, ``OWNER_READ``, ``GROUP_READ``, and "
"``WORLD_READ`` if no ``PERMISSIONS`` argument is given."
msgstr ""

#: ../../../command/install.rst:541
msgid ""
"The ``PROGRAMS`` form is identical to the ``FILES`` form except that the "
"default permissions for the installed file also include ``OWNER_EXECUTE``, "
"``GROUP_EXECUTE``, and ``WORLD_EXECUTE``.  This form is intended to install "
"programs that are not targets, such as shell scripts.  Use the ``TARGETS`` "
"form to install targets built within the project."
msgstr ""

#: ../../../command/install.rst:547
msgid ""
"The list of ``files...`` given to ``FILES`` or ``PROGRAMS`` may use "
"\"generator expressions\" with the syntax ``$<...>``.  See the :manual:"
"`cmake-generator-expressions(7)` manual for available expressions. However, "
"if any item begins in a generator expression it must evaluate to a full path."
msgstr ""

#: ../../../command/install.rst:553
msgid ""
"The optional ``RENAME <name>`` argument is used to specify a name for the "
"installed file that is different from the original file name.  Renaming is "
"allowed only when a single file is installed by the command."
msgstr ""

#: ../../../command/install.rst:557
msgid ""
"Either a ``TYPE`` or a ``DESTINATION`` must be provided, but not both. A "
"``TYPE`` argument specifies the generic file type of the files being "
"installed.  A destination will then be set automatically by taking the "
"corresponding variable from :module:`GNUInstallDirs`, or by using a built-in "
"default if that variable is not defined.  See the table below for the "
"supported file types and their corresponding variables and built-in "
"defaults.  Projects can provide a ``DESTINATION`` argument instead of a file "
"type if they wish to explicitly define the install destination."
msgstr ""

#: ../../../command/install.rst:567 ../../../command/install.rst:723
msgid "``TYPE`` Argument"
msgstr ""

#: ../../../command/install.rst:569 ../../../command/install.rst:725
msgid "``BIN``"
msgstr ""

#: ../../../command/install.rst:570 ../../../command/install.rst:726
msgid "``SBIN``"
msgstr ""

#: ../../../command/install.rst:570 ../../../command/install.rst:726
msgid "``${CMAKE_INSTALL_SBINDIR}``"
msgstr ""

#: ../../../command/install.rst:570 ../../../command/install.rst:726
msgid "``sbin``"
msgstr ""

#: ../../../command/install.rst:571 ../../../command/install.rst:727
msgid "``LIB``"
msgstr ""

#: ../../../command/install.rst:572 ../../../command/install.rst:728
msgid "``INCLUDE``"
msgstr ""

#: ../../../command/install.rst:573 ../../../command/install.rst:729
msgid "``SYSCONF``"
msgstr ""

#: ../../../command/install.rst:573 ../../../command/install.rst:729
msgid "``${CMAKE_INSTALL_SYSCONFDIR}``"
msgstr ""

#: ../../../command/install.rst:573 ../../../command/install.rst:729
msgid "``etc``"
msgstr ""

#: ../../../command/install.rst:574 ../../../command/install.rst:730
msgid "``SHAREDSTATE``"
msgstr ""

#: ../../../command/install.rst:574 ../../../command/install.rst:730
msgid "``${CMAKE_INSTALL_SHARESTATEDIR}``"
msgstr ""

#: ../../../command/install.rst:574 ../../../command/install.rst:730
msgid "``com``"
msgstr ""

#: ../../../command/install.rst:575 ../../../command/install.rst:731
msgid "``LOCALSTATE``"
msgstr ""

#: ../../../command/install.rst:575 ../../../command/install.rst:731
msgid "``${CMAKE_INSTALL_LOCALSTATEDIR}``"
msgstr ""

#: ../../../command/install.rst:575 ../../../command/install.rst:731
msgid "``var``"
msgstr ""

#: ../../../command/install.rst:576 ../../../command/install.rst:732
msgid "``RUNSTATE``"
msgstr ""

#: ../../../command/install.rst:576 ../../../command/install.rst:732
msgid "``${CMAKE_INSTALL_RUNSTATEDIR}``"
msgstr ""

#: ../../../command/install.rst:576 ../../../command/install.rst:732
msgid "``<LOCALSTATE dir>/run``"
msgstr ""

#: ../../../command/install.rst:577 ../../../command/install.rst:733
msgid "``DATA``"
msgstr ""

#: ../../../command/install.rst:577 ../../../command/install.rst:733
msgid "``${CMAKE_INSTALL_DATADIR}``"
msgstr ""

#: ../../../command/install.rst:577 ../../../command/install.rst:733
msgid "``<DATAROOT dir>``"
msgstr ""

#: ../../../command/install.rst:578 ../../../command/install.rst:734
msgid "``INFO``"
msgstr ""

#: ../../../command/install.rst:578 ../../../command/install.rst:734
msgid "``${CMAKE_INSTALL_INFODIR}``"
msgstr ""

#: ../../../command/install.rst:578 ../../../command/install.rst:734
msgid "``<DATAROOT dir>/info``"
msgstr ""

#: ../../../command/install.rst:579 ../../../command/install.rst:735
msgid "``LOCALE``"
msgstr ""

#: ../../../command/install.rst:579 ../../../command/install.rst:735
msgid "``${CMAKE_INSTALL_LOCALEDIR}``"
msgstr ""

#: ../../../command/install.rst:579 ../../../command/install.rst:735
msgid "``<DATAROOT dir>/locale``"
msgstr ""

#: ../../../command/install.rst:580 ../../../command/install.rst:736
msgid "``MAN``"
msgstr ""

#: ../../../command/install.rst:580 ../../../command/install.rst:736
msgid "``${CMAKE_INSTALL_MANDIR}``"
msgstr ""

#: ../../../command/install.rst:580 ../../../command/install.rst:736
msgid "``<DATAROOT dir>/man``"
msgstr ""

#: ../../../command/install.rst:581 ../../../command/install.rst:737
msgid "``DOC``"
msgstr ""

#: ../../../command/install.rst:581 ../../../command/install.rst:737
msgid "``${CMAKE_INSTALL_DOCDIR}``"
msgstr ""

#: ../../../command/install.rst:581 ../../../command/install.rst:737
msgid "``<DATAROOT dir>/doc``"
msgstr ""

#: ../../../command/install.rst:582 ../../../command/install.rst:738
msgid "``LIBEXEC``"
msgstr ""

#: ../../../command/install.rst:582 ../../../command/install.rst:738
msgid "``${CMAKE_INSTALL_LIBEXECDIR}``"
msgstr ""

#: ../../../command/install.rst:582 ../../../command/install.rst:738
msgid "``libexec``"
msgstr ""

#: ../../../command/install.rst:585
msgid ""
"Projects wishing to follow the common practice of installing headers into a "
"project-specific subdirectory will need to provide a destination rather than "
"rely on the above. Using file sets for headers instead of ``install(FILES)`` "
"would be even better (see :command:`target_sources(FILE_SET)`)."
msgstr ""

#: ../../../command/install.rst:590 ../../../command/install.rst:741
msgid ""
"Note that some of the types' built-in defaults use the ``DATAROOT`` "
"directory as a prefix. The ``DATAROOT`` prefix is calculated similarly to "
"the types, with ``CMAKE_INSTALL_DATAROOTDIR`` as the variable and ``share`` "
"as the built-in default. You cannot use ``DATAROOT`` as a ``TYPE`` "
"parameter; please use ``DATA`` instead."
msgstr ""

#: ../../../command/install.rst:596
msgid ""
"To make packages compliant with distribution filesystem layout policies, if "
"projects must specify a ``DESTINATION``, it is strongly recommended that "
"they use a path that begins with the appropriate relative :module:"
"`GNUInstallDirs` variable. This allows package maintainers to control the "
"install destination by setting the appropriate cache variables.  The "
"following example shows how to follow this advice while installing an image "
"to a project-specific documentation subdirectory:"
msgstr ""

#: ../../../command/install.rst:604
msgid ""
"include(GNUInstallDirs)\n"
"install(FILES logo.png\n"
"        DESTINATION ${CMAKE_INSTALL_DOCDIR}/myproj\n"
")"
msgstr ""

#: ../../../command/install.rst:616
msgid ""
"An install rename given as a ``RENAME`` argument may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions."
msgstr ""

#: ../../../command/install.rst:621 ../../../command/install.rst:762
msgid "The ``TYPE`` argument now supports type ``LIBEXEC``."
msgstr ""

#: ../../../command/install.rst:629
msgid ""
"To install a directory sub-tree of headers, consider using file sets defined "
"by :command:`target_sources(FILE_SET)` instead. File sets not only preserve "
"directory structure, they also associate headers with a target and install "
"as part of the target."
msgstr ""

#: ../../../command/install.rst:634
msgid "Install the contents of one or more directories:"
msgstr ""

#: ../../../command/install.rst:636
msgid ""
"install(DIRECTORY dirs...\n"
"        TYPE <type> | DESTINATION <dir>\n"
"        [FILE_PERMISSIONS <permission>...]\n"
"        [DIRECTORY_PERMISSIONS <permission>...]\n"
"        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]\n"
"        [CONFIGURATIONS <config>...]\n"
"        [COMPONENT <component>] [EXCLUDE_FROM_ALL]\n"
"        [FILES_MATCHING]\n"
"        [[PATTERN <pattern> | REGEX <regex>]\n"
"         [EXCLUDE] [PERMISSIONS <permission>...]] [...])"
msgstr ""

#: ../../../command/install.rst:649
msgid ""
"The ``DIRECTORY`` form installs contents of one or more directories to a "
"given destination.  The directory structure is copied verbatim to the "
"destination.  The last component of each directory name is appended to the "
"destination directory but a trailing slash may be used to avoid this because "
"it leaves the last component empty.  Directory names given as relative paths "
"are interpreted with respect to the current source directory.  If no input "
"directory names are given the destination directory will be created but "
"nothing will be installed into it.  The ``FILE_PERMISSIONS`` and "
"``DIRECTORY_PERMISSIONS`` options specify permissions given to files and "
"directories in the destination. If ``USE_SOURCE_PERMISSIONS`` is specified "
"and ``FILE_PERMISSIONS`` is not, file permissions will be copied from the "
"source directory structure. If no permissions are specified files will be "
"given the default permissions specified in the ``FILES`` form of the "
"command, and the directories will be given the default permissions specified "
"in the ``PROGRAMS`` form of the command."
msgstr ""

#: ../../../command/install.rst:666
msgid "The ``MESSAGE_NEVER`` option disables file installation status output."
msgstr ""

#: ../../../command/install.rst:669
msgid ""
"Installation of directories may be controlled with fine granularity using "
"the ``PATTERN`` or ``REGEX`` options.  These \"match\" options specify a "
"globbing pattern or regular expression to match directories or files "
"encountered within input directories.  They may be used to apply certain "
"options (see below) to a subset of the files and directories encountered.  "
"The full path to each input file or directory (with forward slashes) is "
"matched against the expression.  A ``PATTERN`` will match only complete file "
"names: the portion of the full path matching the pattern must occur at the "
"end of the file name and be preceded by a slash.  A ``REGEX`` will match any "
"portion of the full path but it may use ``/`` and ``$`` to simulate the "
"``PATTERN`` behavior.  By default all files and directories are installed "
"whether or not they are matched. The ``FILES_MATCHING`` option may be given "
"before the first match option to disable installation of files (but not "
"directories) not matched by any expression.  For example, the code"
msgstr ""

#: ../../../command/install.rst:685
msgid ""
"install(DIRECTORY src/ DESTINATION doc/myproj\n"
"        FILES_MATCHING PATTERN \"*.png\")"
msgstr ""

#: ../../../command/install.rst:690
msgid "will extract and install images from a source tree."
msgstr ""

#: ../../../command/install.rst:692
msgid ""
"Some options may follow a ``PATTERN`` or ``REGEX`` expression as described "
"under :ref:`string(REGEX) <Regex Specification>` and are applied only to "
"files or directories matching them.  The ``EXCLUDE`` option will skip the "
"matched file or directory.  The ``PERMISSIONS`` option overrides the "
"permissions setting for the matched file or directory.  For example the code"
msgstr ""

#: ../../../command/install.rst:699
msgid ""
"install(DIRECTORY icons scripts/ DESTINATION share/myproj\n"
"        PATTERN \"CVS\" EXCLUDE\n"
"        PATTERN \"scripts/*\"\n"
"        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\n"
"                    GROUP_EXECUTE GROUP_READ)"
msgstr ""

#: ../../../command/install.rst:707
msgid ""
"will install the ``icons`` directory to ``share/myproj/icons`` and the "
"``scripts`` directory to ``share/myproj``.  The icons will get default file "
"permissions, the scripts will be given specific permissions, and any ``CVS`` "
"directories will be excluded."
msgstr ""

#: ../../../command/install.rst:712
msgid ""
"Either a ``TYPE`` or a ``DESTINATION`` must be provided, but not both. A "
"``TYPE`` argument specifies the generic file type of the files within the "
"listed directories being installed.  A destination will then be set "
"automatically by taking the corresponding variable from :module:"
"`GNUInstallDirs`, or by using a built-in default if that variable is not "
"defined.  See the table below for the supported file types and their "
"corresponding variables and built-in defaults.  Projects can provide a "
"``DESTINATION`` argument instead of a file type if they wish to explicitly "
"define the install destination."
msgstr ""

#: ../../../command/install.rst:747
msgid ""
"To make packages compliant with distribution filesystem layout policies, if "
"projects must specify a ``DESTINATION``, it is strongly recommended that "
"they use a path that begins with the appropriate relative :module:"
"`GNUInstallDirs` variable. This allows package maintainers to control the "
"install destination by setting the appropriate cache variables."
msgstr ""

#: ../../../command/install.rst:758
msgid ""
"The list of ``dirs...`` given to ``DIRECTORY`` may use \"generator "
"expressions\" too."
msgstr ""

#: ../../../command/install.rst:769
msgid "Invoke CMake scripts or code during installation:"
msgstr ""

#: ../../../command/install.rst:771
msgid ""
"install([[SCRIPT <file>] [CODE <code>]]\n"
"        [ALL_COMPONENTS | COMPONENT <component>]\n"
"        [EXCLUDE_FROM_ALL] [...])"
msgstr ""

#: ../../../command/install.rst:777
msgid ""
"The ``SCRIPT`` form will invoke the given CMake script files during "
"installation.  If the script file name is a relative path it will be "
"interpreted with respect to the current source directory.  The ``CODE`` form "
"will invoke the given CMake code during installation.  Code is specified as "
"a single argument inside a double-quoted string.  For example, the code"
msgstr ""

#: ../../../command/install.rst:784
msgid "install(CODE \"MESSAGE(\\\"Sample install message.\\\")\")"
msgstr ""

#: ../../../command/install.rst:788
msgid "will print a message during installation."
msgstr ""

#: ../../../command/install.rst:790
msgid ""
"When the ``ALL_COMPONENTS`` option is given, the custom installation script "
"code will be executed for every component of a component-specific "
"installation.  This option is mutually exclusive with the ``COMPONENT`` "
"option."
msgstr ""

#: ../../../command/install.rst:796
msgid ""
"``<file>`` or ``<code>`` may use \"generator expressions\" with the syntax "
"``$<...>`` (in the case of ``<file>``, this refers to their use in the file "
"name, not the file's contents).  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions."
msgstr ""

#: ../../../command/install.rst:805
msgid "Install a CMake file exporting targets for dependent projects:"
msgstr ""

#: ../../../command/install.rst:807
msgid ""
"install(EXPORT <export-name> DESTINATION <dir>\n"
"        [NAMESPACE <namespace>] [FILE <name>.cmake]\n"
"        [PERMISSIONS <permission>...]\n"
"        [CONFIGURATIONS <config>...]\n"
"        [CXX_MODULES_DIRECTORY <directory>]\n"
"        [EXPORT_LINK_INTERFACE_LIBRARIES]\n"
"        [COMPONENT <component>]\n"
"        [EXCLUDE_FROM_ALL]\n"
"        [EXPORT_PACKAGE_DEPENDENCIES])\n"
"install(EXPORT_ANDROID_MK <export-name> DESTINATION <dir> [...])"
msgstr ""

#: ../../../command/install.rst:820
msgid ""
"The ``EXPORT`` form generates and installs a CMake file containing code to "
"import targets from the installation tree into another project. Target "
"installations are associated with the export ``<export-name>`` using the "
"``EXPORT`` option of the :command:`install(TARGETS)` signature documented "
"above.  The ``NAMESPACE`` option will prepend ``<namespace>`` to the target "
"names as they are written to the import file.  By default the generated file "
"will be called ``<export-name>.cmake`` but the ``FILE`` option may be used "
"to specify a different name.  The value given to the ``FILE`` option must be "
"a file name with the ``.cmake`` extension."
msgstr ""

#: ../../../command/install.rst:830
msgid ""
"If a ``CONFIGURATIONS`` option is given then the file will only be installed "
"when one of the named configurations is installed.  Additionally, the "
"generated import file will reference only the matching target "
"configurations.  See the :variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` "
"variable to map configurations of dependent projects to the installed "
"configurations.  The ``EXPORT_LINK_INTERFACE_LIBRARIES`` keyword, if "
"present, causes the contents of the properties matching ``(IMPORTED_)?"
"LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when policy :policy:"
"`CMP0022` is ``NEW``."
msgstr ""

#: ../../../command/install.rst:841
msgid ""
"The installed ``<export-name>.cmake`` file may come with additional per-"
"configuration ``<export-name>-*.cmake`` files to be loaded by globbing.  Do "
"not use an export name that is the same as the package name in combination "
"with installing a ``<package-name>-config.cmake`` file or the latter may be "
"incorrectly matched by the glob and loaded."
msgstr ""

#: ../../../command/install.rst:847
msgid ""
"When a ``COMPONENT`` option is given, the listed ``<component>`` implicitly "
"depends on all components mentioned in the export set. The exported ``<name>."
"cmake`` file will require each of the exported components to be present in "
"order for dependent projects to build properly. For example, a project may "
"define components ``Runtime`` and ``Development``, with shared libraries "
"going into the ``Runtime`` component and static libraries and headers going "
"into the ``Development`` component. The export set would also typically be "
"part of the ``Development`` component, but it would export targets from both "
"the ``Runtime`` and ``Development`` components. Therefore, the ``Runtime`` "
"component would need to be installed if the ``Development`` component was "
"installed, but not vice versa. If the ``Development`` component was "
"installed without the ``Runtime`` component, dependent projects that try to "
"link against it would have build errors. Package managers, such as APT and "
"RPM, typically handle this by listing the ``Runtime`` component as a "
"dependency of the ``Development`` component in the package metadata, "
"ensuring that the library is always installed if the headers and CMake "
"export file are present."
msgstr ""

#: ../../../command/install.rst:864
msgid ""
"In addition to cmake language files, the ``EXPORT_ANDROID_MK`` mode may be "
"used to specify an export to the android ndk build system.  This mode "
"accepts the same options as the normal export mode.  The Android NDK "
"supports the use of prebuilt libraries, both static and shared. This allows "
"cmake to build the libraries of a project and make them available to an ndk "
"build system complete with transitive dependencies, include flags and "
"defines required to use the libraries."
msgstr ""

#: ../../../command/install.rst:873
msgid "``CXX_MODULES_DIRECTORY``"
msgstr ""

#: ../../../command/install.rst:876
msgid ""
"Specify a subdirectory to store C++ module information for targets in the "
"export set. This directory will be populated with files which add the "
"necessary target property information to the relevant targets. Note that "
"without this information, none of the C++ modules which are part of the "
"targets in the export set will support being imported in consuming targets."
msgstr ""

#: ../../../command/install.rst:882
msgid "``EXPORT_PACKAGE_DEPENDENCIES``"
msgstr ""

#: ../../../command/install.rst:885
msgid ""
"Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_DEPENDENCIES``."
msgstr ""

#: ../../../command/install.rst:887
msgid ""
"Specify that :command:`find_dependency` calls should be exported. If this "
"argument is specified, CMake examines all targets in the export set and "
"gathers their ``INTERFACE`` link targets. If any such targets either were "
"found with :command:`find_package` or have the :prop_tgt:"
"`EXPORT_FIND_PACKAGE_NAME` property set, and such package dependency was not "
"disabled by passing ``ENABLED OFF`` to :command:`export(SETUP)`, then a :"
"command:`find_dependency` call is written with the target's corresponding "
"package name, a ``REQUIRED`` argument, and any additional arguments "
"specified by the ``EXTRA_ARGS`` argument of :command:`export(SETUP)`. Any "
"package dependencies that were manually specified by passing ``ENABLED ON`` "
"to :command:`export(SETUP)` are also added, even if the exported targets "
"don't depend on any targets from them."
msgstr ""

#: ../../../command/install.rst:901
msgid ""
"The :command:`find_dependency` calls are written in the following order:"
msgstr ""

#: ../../../command/install.rst:903
msgid ""
"Any package dependencies that were listed in :command:`export(SETUP)` are "
"written in the order they were first specified, regardless of whether or not "
"they contain ``INTERFACE`` dependencies of the exported targets."
msgstr ""

#: ../../../command/install.rst:907
msgid ""
"Any package dependencies that contain ``INTERFACE`` link dependencies of the "
"exported targets and that were never specified in :command:`export(SETUP)` "
"are written in the order they were first found."
msgstr ""

#: ../../../command/install.rst:912
msgid ""
"The ``EXPORT`` form is useful to help outside projects use targets built and "
"installed by the current project.  For example, the code"
msgstr ""

#: ../../../command/install.rst:915
msgid ""
"install(TARGETS myexe EXPORT myproj DESTINATION bin)\n"
"install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)\n"
"install(EXPORT_ANDROID_MK myproj DESTINATION share/ndk-modules)"
msgstr ""

#: ../../../command/install.rst:921
msgid ""
"will install the executable ``myexe`` to ``<prefix>/bin`` and code to import "
"it in the file ``<prefix>/lib/myproj/myproj.cmake`` and ``<prefix>/share/ndk-"
"modules/Android.mk``.  An outside project may load this file with the "
"include command and reference the ``myexe`` executable from the installation "
"tree using the imported target name ``mp_myexe`` as if the target were built "
"in its own tree."
msgstr ""

#: ../../../command/install.rst:934
msgid "Experimental. Gated by ``CMAKE_EXPERIMENTAL_EXPORT_PACKAGE_INFO``."
msgstr ""

#: ../../../command/install.rst:936
msgid "Installs a |CPS|_ file exporting targets for dependent projects:"
msgstr ""

#: ../../../command/install.rst:938
msgid ""
"install(PACKAGE_INFO <package-name> EXPORT <export-name>\n"
"        [APPENDIX <appendix-name>]\n"
"        [DESTINATION <dir>]\n"
"        [LOWER_CASE_FILE]\n"
"        [VERSION <version>\n"
"         [COMPAT_VERSION <version>]\n"
"         [VERSION_SCHEMA <string>]]\n"
"        [DEFAULT_TARGETS <target>...]\n"
"        [DEFAULT_CONFIGURATIONS <config>...]\n"
"        [PERMISSIONS <permission>...]\n"
"        [CONFIGURATIONS <config>...]\n"
"        [COMPONENT <component>]\n"
"        [EXCLUDE_FROM_ALL])"
msgstr ""

#: ../../../command/install.rst:954
msgid ""
"The ``PACKAGE_INFO`` form generates and installs a |CPS| file which "
"describes installed targets such that they can be consumed by another "
"project. Target installations are associated with the export ``<export-"
"name>`` using the ``EXPORT`` option of the :command:`install(TARGETS)` "
"signature documented above.  Unlike :command:`install(EXPORT)`, this "
"information is not expressed in CMake code, and can be consumed by tools "
"other than CMake.  When imported into another CMake project, the imported "
"targets will be prefixed with ``<package-name>::``.  By default, the "
"generated file will be called ``<package-name>[-<appendix-name>].cps``.  If "
"``LOWER_CASE_FILE`` is given, the package name as it appears on disk (in "
"both the file name and install destination) will be first converted to lower "
"case."
msgstr ""

#: ../../../command/install.rst:966
msgid ""
"If ``DESTINATION`` is not specified, a platform-specific default is used."
msgstr ""

#: ../../../command/install.rst:968
msgid ""
"If ``APPENDIX`` is specified, rather than generating a top level package "
"specification, the specified targets will be exported as an appendix to the "
"named package.  Appendices may be used to separate less commonly used "
"targets (along with their external dependencies) from the rest of a "
"package.  This enables consumers to ignore transitive dependencies for "
"targets that they don't use, and also allows a single logical \"package\" to "
"be composed of artifacts produced by multiple build trees."
msgstr ""

#: ../../../command/install.rst:976
msgid ""
"Appendices are not permitted to change basic package metadata; therefore, "
"none of ``VERSION``, ``COMPAT_VERSION``, ``VERSION_SCHEMA``, "
"``DEFAULT_TARGETS`` or ``DEFAULT_CONFIGURATIONS`` may be specified in "
"combination with ``APPENDIX``.  Additionally, it is strongly recommended "
"that use of ``LOWER_CASE_FILE`` should be consistent between the main "
"package and any appendices."
msgstr ""

#: ../../../command/install.rst:988
msgid "Installs a runtime dependency set:"
msgstr ""

#: ../../../command/install.rst:990
msgid ""
"install(RUNTIME_DEPENDENCY_SET <set-name>\n"
"        [[LIBRARY|RUNTIME|FRAMEWORK]\n"
"         [DESTINATION <dir>]\n"
"         [PERMISSIONS <permission>...]\n"
"         [CONFIGURATIONS <config>...]\n"
"         [COMPONENT <component>]\n"
"         [NAMELINK_COMPONENT <component>]\n"
"         [OPTIONAL] [EXCLUDE_FROM_ALL]\n"
"        ] [...]\n"
"        [PRE_INCLUDE_REGEXES <regex>...]\n"
"        [PRE_EXCLUDE_REGEXES <regex>...]\n"
"        [POST_INCLUDE_REGEXES <regex>...]\n"
"        [POST_EXCLUDE_REGEXES <regex>...]\n"
"        [POST_INCLUDE_FILES <file>...]\n"
"        [POST_EXCLUDE_FILES <file>...]\n"
"        [DIRECTORIES <dir>...]\n"
"        )"
msgstr ""

#: ../../../command/install.rst:1010
msgid ""
"Installs a runtime dependency set previously created by one or more :command:"
"`install(TARGETS)` or :command:`install(IMPORTED_RUNTIME_ARTIFACTS)` "
"commands.  The dependencies of targets belonging to a runtime dependency set "
"are installed in the ``RUNTIME`` destination and component on DLL platforms, "
"and in the ``LIBRARY`` destination and component on non-DLL platforms. macOS "
"frameworks are installed in the ``FRAMEWORK`` destination and component. "
"Targets built within the build tree will never be installed as runtime "
"dependencies, nor will their own dependencies, unless the targets themselves "
"are installed with :command:`install(TARGETS)`."
msgstr ""

#: ../../../command/install.rst:1020
msgid ""
"The generated install script calls :command:`file(GET_RUNTIME_DEPENDENCIES)` "
"on the build-tree files to calculate the runtime dependencies. The build-"
"tree executable files are passed as the ``EXECUTABLES`` argument, the build-"
"tree shared libraries as the ``LIBRARIES`` argument, and the build-tree "
"modules as the ``MODULES`` argument. On macOS, if one of the executables is "
"a :prop_tgt:`MACOSX_BUNDLE`, that executable is passed as the "
"``BUNDLE_EXECUTABLE`` argument. At most one such bundle executable may be in "
"the runtime dependency set on macOS. The :prop_tgt:`MACOSX_BUNDLE` property "
"has no effect on other platforms. Note that :command:"
"`file(GET_RUNTIME_DEPENDENCIES)` only supports collecting the runtime "
"dependencies for Windows, Linux and macOS platforms, so "
"``install(RUNTIME_DEPENDENCY_SET)`` has the same limitation."
msgstr ""

#: ../../../command/install.rst:1033
msgid ""
"The following sub-arguments are forwarded through as the corresponding "
"arguments to :command:`file(GET_RUNTIME_DEPENDENCIES)` (for those that "
"provide a non-empty list of directories, regular expressions or files).  "
"They all support :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""

#: ../../../command/install.rst:1038
msgid "``DIRECTORIES <dir>...``"
msgstr ""

#: ../../../command/install.rst:1039
msgid "``PRE_INCLUDE_REGEXES <regex>...``"
msgstr ""

#: ../../../command/install.rst:1040
msgid "``PRE_EXCLUDE_REGEXES <regex>...``"
msgstr ""

#: ../../../command/install.rst:1041
msgid "``POST_INCLUDE_REGEXES <regex>...``"
msgstr ""

#: ../../../command/install.rst:1042
msgid "``POST_EXCLUDE_REGEXES <regex>...``"
msgstr ""

#: ../../../command/install.rst:1043
msgid "``POST_INCLUDE_FILES <file>...``"
msgstr ""

#: ../../../command/install.rst:1044
msgid "``POST_EXCLUDE_FILES <file>...``"
msgstr ""

#: ../../../command/install.rst:1047
msgid ""
"This command supersedes the :command:`install_targets` command and the :"
"prop_tgt:`PRE_INSTALL_SCRIPT` and :prop_tgt:`POST_INSTALL_SCRIPT` target "
"properties.  It also replaces the ``FILES`` forms of the :command:"
"`install_files` and :command:`install_programs` commands. The processing "
"order of these install rules relative to those generated by :command:"
"`install_targets`, :command:`install_files`, and :command:`install_programs` "
"commands is not defined."
msgstr ""

#: ../../../command/install.rst:1057
msgid "Examples"
msgstr ""

#: ../../../command/install.rst:1060
msgid "Example: Install Targets with Per-Artifact Components"
msgstr ""

#: ../../../command/install.rst:1062
msgid "Consider a project that defines targets with different artifact kinds:"
msgstr ""

#: ../../../command/install.rst:1064
msgid ""
"add_executable(myExe myExe.c)\n"
"add_library(myStaticLib STATIC myStaticLib.c)\n"
"target_sources(myStaticLib PUBLIC FILE_SET HEADERS FILES myStaticLib.h)\n"
"add_library(mySharedLib SHARED mySharedLib.c)\n"
"target_sources(mySharedLib PUBLIC FILE_SET HEADERS FILES mySharedLib.h)\n"
"set_property(TARGET mySharedLib PROPERTY SOVERSION 1)"
msgstr ""

#: ../../../command/install.rst:1073
msgid ""
"We may call :command:`install(TARGETS)` with `\\<artifact-kind\\>`_ "
"arguments to specify different options for each kind of artifact:"
msgstr ""

#: ../../../command/install.rst:1076
msgid ""
"install(TARGETS\n"
"          myExe\n"
"          mySharedLib\n"
"          myStaticLib\n"
"        RUNTIME           # Following options apply to runtime artifacts.\n"
"          COMPONENT Runtime\n"
"        LIBRARY           # Following options apply to library artifacts.\n"
"          COMPONENT Runtime\n"
"          NAMELINK_COMPONENT Development\n"
"        ARCHIVE           # Following options apply to archive artifacts.\n"
"          COMPONENT Development\n"
"          DESTINATION lib/static\n"
"        FILE_SET HEADERS  # Following options apply to file set HEADERS.\n"
"          COMPONENT Development\n"
"        )"
msgstr ""

#: ../../../command/install.rst:1094
msgid "This will:"
msgstr ""

#: ../../../command/install.rst:1096
msgid ""
"Install ``myExe`` to ``<prefix>/bin``, the default RUNTIME artifact "
"destination, as part of the ``Runtime`` component."
msgstr ""

#: ../../../command/install.rst:1099
msgid "On non-DLL platforms:"
msgstr ""

#: ../../../command/install.rst:1101
msgid ""
"Install ``libmySharedLib.so.1`` to ``<prefix>/lib``, the default LIBRARY "
"artifact destination, as part of the ``Runtime`` component."
msgstr ""

#: ../../../command/install.rst:1104
msgid ""
"Install the ``libmySharedLib.so`` \"namelink\" (symbolic link) to ``<prefix>/"
"lib``, the default LIBRARY artifact destination, as part of the "
"``Development`` component."
msgstr ""

#: ../../../command/install.rst:1108
msgid "On DLL platforms:"
msgstr ""

#: ../../../command/install.rst:1110
msgid ""
"Install ``mySharedLib.dll`` to ``<prefix>/bin``, the default RUNTIME "
"artifact destination, as part of the ``Runtime`` component."
msgstr ""

#: ../../../command/install.rst:1113
msgid ""
"Install ``mySharedLib.lib`` to ``<prefix>/lib/static``, the specified "
"ARCHIVE artifact destination, as part of the ``Development`` component."
msgstr ""

#: ../../../command/install.rst:1116
msgid ""
"Install ``myStaticLib`` to ``<prefix>/lib/static``, the specified ARCHIVE "
"artifact destination, as part of the ``Development`` component."
msgstr ""

#: ../../../command/install.rst:1119
msgid ""
"Install ``mySharedLib.h`` and ``myStaticLib.h`` to ``<prefix>/include``, the "
"default destination for a file set of type HEADERS, as part of the "
"``Development`` component."
msgstr ""

#: ../../../command/install.rst:1124
msgid "Example: Install Targets to Per-Config Destinations"
msgstr ""

#: ../../../command/install.rst:1126
msgid ""
"Each :command:`install(TARGETS)` call installs a given target :ref:`output "
"artifact <Output Artifacts>` to at most one ``DESTINATION``, but the install "
"rule itself may be filtered by the ``CONFIGURATIONS`` option. In order to "
"install to a different destination for each configuration, one call per "
"configuration is needed.  For example, the code:"
msgstr ""

#: ../../../command/install.rst:1132
msgid ""
"install(TARGETS myExe\n"
"        CONFIGURATIONS Debug\n"
"        RUNTIME\n"
"          DESTINATION Debug/bin\n"
"        )\n"
"install(TARGETS myExe\n"
"        CONFIGURATIONS Release\n"
"        RUNTIME\n"
"          DESTINATION Release/bin\n"
"        )"
msgstr ""

#: ../../../command/install.rst:1145
msgid ""
"will install ``myExe`` to ``<prefix>/Debug/bin`` in the Debug configuration, "
"and to ``<prefix>/Release/bin`` in the Release configuration."
msgstr ""

#: ../../../command/install.rst:1149
msgid "Generated Installation Script"
msgstr ""

#: ../../../command/install.rst:1153
msgid ""
"Use of this feature is not recommended. Please consider using the :option:"
"`cmake --install` instead."
msgstr ""

#: ../../../command/install.rst:1156
msgid ""
"The ``install()`` command generates a file, ``cmake_install.cmake``, inside "
"the build directory, which is used internally by the generated install "
"target and by CPack. You can also invoke this script manually with :option:"
"`cmake -P`. This script accepts several variables:"
msgstr ""

#: ../../../command/install.rst:1161
msgid "``COMPONENT``"
msgstr ""

#: ../../../command/install.rst:1162
msgid ""
"Set this variable to install only a single CPack component as opposed to all "
"of them. For example, if you only want to install the ``Development`` "
"component, run ``cmake -DCOMPONENT=Development -P cmake_install.cmake``."
msgstr ""

#: ../../../command/install.rst:1166
msgid "``BUILD_TYPE``"
msgstr ""

#: ../../../command/install.rst:1167
msgid ""
"Set this variable to change the build type if you are using a multi-config "
"generator. For example, to install with the ``Debug`` configuration, run "
"``cmake -DBUILD_TYPE=Debug -P cmake_install.cmake``."
msgstr ""

#: ../../../command/install.rst:1171
msgid "``DESTDIR``"
msgstr ""

#: ../../../command/install.rst:1172
msgid ""
"This is an environment variable rather than a CMake variable. It allows you "
"to change the installation prefix on UNIX systems. See :envvar:`DESTDIR` for "
"details."
msgstr ""
