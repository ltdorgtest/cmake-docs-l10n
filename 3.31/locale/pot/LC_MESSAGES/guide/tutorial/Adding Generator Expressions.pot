# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2024 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.31\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-13 07:45+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Adding Generator Expressions.rst:2
msgid "Step 4: Adding Generator Expressions"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:4
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are "
"evaluated during build system generation to produce information specific to "
"each build configuration."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:8
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are allowed "
"in the context of many target properties, such as :prop_tgt:"
"`LINK_LIBRARIES`, :prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:"
"`COMPILE_DEFINITIONS` and others. They may also be used when using commands "
"to populate those properties, such as :command:`target_link_libraries`, :"
"command:`target_include_directories`, :command:`target_compile_definitions` "
"and others."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:15
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>`  may be "
"used to enable conditional linking, conditional definitions used when "
"compiling, conditional include directories and more. The conditions may be "
"based on the build configuration, target properties, platform information or "
"any other queryable information."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:21
msgid ""
"There are different types of :manual:`generator expressions <cmake-generator-"
"expressions(7)>` including Logical, Informational, and Output expressions."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:25
msgid ""
"Logical expressions are used to create conditional output. The basic "
"expressions are the ``0`` and ``1`` expressions. A ``$<0:...>`` results in "
"the empty string, and ``$<1:...>`` results in the content of ``...``.  They "
"can also be nested."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:31
msgid "Exercise 1 - Adding Compiler Warning Flags with Generator Expressions"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:33
msgid ""
"A common usage of :manual:`generator expressions <cmake-generator-"
"expressions(7)>` is to conditionally add compiler flags, such as those for "
"language levels or warnings. A nice pattern is to associate this information "
"to an ``INTERFACE`` target allowing this information to propagate."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:40
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:42
msgid ""
"Add compiler warning flags when building but not for installed versions."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:45
msgid "Helpful Resources"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:47
msgid ":manual:`cmake-generator-expressions(7)`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:48
msgid ":command:`cmake_minimum_required`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:49
msgid ":command:`set`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:50
msgid ":command:`target_compile_options`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:53
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:55
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:58
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:60
msgid ""
"Open the file ``Step4/CMakeLists.txt`` and complete ``TODO 1`` through "
"``TODO 4``."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:63
msgid ""
"First, in the top level ``CMakeLists.txt`` file, we need to set the :command:"
"`cmake_minimum_required` to ``3.15``. In this exercise we are going to use a "
"generator expression which was introduced in CMake 3.15."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:67
msgid ""
"Next we add the desired compiler warning flags that we want for our project. "
"As warning flags vary based on the compiler, we use the "
"``COMPILE_LANG_AND_ID`` generator expression to control which flags to apply "
"given a language and a set of compiler ids."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:73
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:75
msgid ""
"Make a new directory called ``Step4_build``, run the :manual:`cmake "
"<cmake(1)>` executable or the :manual:`cmake-gui <cmake-gui(1)>` to "
"configure the project and then build it with your chosen build tool or by "
"using ``cmake --build .`` from the build directory."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:80
msgid ""
"mkdir Step4_build\n"
"cd Step4_build\n"
"cmake ../Step4\n"
"cmake --build ."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:88
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:90
msgid ""
"Update the :command:`cmake_minimum_required` to require at least CMake "
"version ``3.15``:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:93
msgid "<details><summary>TODO 1: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:97
msgid "TODO 1: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:97
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:103
#: Expressions.rst:123 Expressions.rst:146 Expressions.rst:166
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:107
msgid ""
"Next we determine which compiler our system is currently using to build "
"since warning flags vary based on the compiler we use. This is done with the "
"``COMPILE_LANG_AND_ID`` generator expression. We set the result in the "
"variables ``gcc_like_cxx`` and ``msvc_cxx`` as follows:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:112
msgid "<details><summary>TODO 2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:116
msgid "TODO 2: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:116
msgid ""
"set(gcc_like_cxx \"$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,"
"LCC>\")\n"
"set(msvc_cxx \"$<COMPILE_LANG_AND_ID:CXX,MSVC>\")\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:127
msgid ""
"Next we add the desired compiler warning flags that we want for our project. "
"Using our variables ``gcc_like_cxx`` and ``msvc_cxx``, we can use another "
"generator expression to apply the respective flags only when the variables "
"are true. We use :command:`target_compile_options` to apply these flags to "
"our interface library."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:133
msgid "<details><summary>TODO 3: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:137
msgid "TODO 3: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:137
msgid ""
"target_compile_options(tutorial_compiler_flags INTERFACE\n"
"  \"$<${gcc_like_cxx}:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>\"\n"
"  \"$<${msvc_cxx}:-W3>\"\n"
")"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:150
msgid ""
"Lastly, we only want these warning flags to be used during builds. Consumers "
"of our installed project should not inherit our warning flags. To specify "
"this, we wrap our flags from TODO 3 in a generator expression using the "
"``BUILD_INTERFACE`` condition. The resulting full code looks like the "
"following:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:155
msgid "<details><summary>TODO 4: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:159
msgid "TODO 4: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:159
msgid ""
"target_compile_options(tutorial_compiler_flags INTERFACE\n"
"  \"$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-"
"Wunused>>\"\n"
"  \"$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>\"\n"
")\n"
"\n"
msgstr ""
