# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/string.rst:2
msgid "string"
msgstr ""

#: ../../../command/string.rst:4
msgid "String operations."
msgstr ""

#: ../../../command/string.rst:7
msgid "Synopsis"
msgstr ""

#: ../../../command/string.rst:11
msgid ""
"`Search and Replace`_\n"
"  string(`FIND`_ <string> <substring> <out-var> [...])\n"
"  string(`REPLACE`_ <match-string> <replace-string> <out-var> <input>...)\n"
"  string(`REGEX MATCH`_ <match-regex> <out-var> <input>...)\n"
"  string(`REGEX MATCHALL`_ <match-regex> <out-var> <input>...)\n"
"  string(`REGEX REPLACE`_ <match-regex> <replace-expr> <out-var> "
"<input>...)\n"
"\n"
"`Manipulation`_\n"
"  string(`APPEND`_ <string-var> [<input>...])\n"
"  string(`PREPEND`_ <string-var> [<input>...])\n"
"  string(`CONCAT`_ <out-var> [<input>...])\n"
"  string(`JOIN`_ <glue> <out-var> [<input>...])\n"
"  string(`TOLOWER`_ <string> <out-var>)\n"
"  string(`TOUPPER`_ <string> <out-var>)\n"
"  string(`LENGTH`_ <string> <out-var>)\n"
"  string(`SUBSTRING`_ <string> <begin> <length> <out-var>)\n"
"  string(`STRIP`_ <string> <out-var>)\n"
"  string(`GENEX_STRIP`_ <string> <out-var>)\n"
"  string(`REPEAT`_ <string> <count> <out-var>)\n"
"\n"
"`Comparison`_\n"
"  string(`COMPARE`_ <op> <string1> <string2> <out-var>)\n"
"\n"
"`Hashing`_\n"
"  string(`\\<HASH\\> <HASH_>`_ <out-var> <input>)\n"
"\n"
"`Generation`_\n"
"  string(`ASCII`_ <number>... <out-var>)\n"
"  string(`HEX`_ <string> <out-var>)\n"
"  string(`CONFIGURE`_ <string> <out-var> [...])\n"
"  string(`MAKE_C_IDENTIFIER`_ <string> <out-var>)\n"
"  string(`RANDOM`_ [<option>...] <out-var>)\n"
"  string(`TIMESTAMP`_ <out-var> [<format string>] [UTC])\n"
"  string(`UUID`_ <out-var> ...)"
msgstr ""

#: ../../../command/string.rst:47
msgid "Search and Replace"
msgstr ""

#: ../../../command/string.rst:50
msgid "Search and Replace With Plain Strings"
msgstr ""

#: ../../../command/string.rst:54
msgid "string(FIND <string> <substring> <output_variable> [REVERSE])"
msgstr ""

#: ../../../command/string.rst:58
msgid ""
"Return the position where the given ``<substring>`` was found in the "
"supplied ``<string>``.  If the ``REVERSE`` flag was used, the command will "
"search for the position of the last occurrence of the specified "
"``<substring>``.  If the ``<substring>`` is not found, a position of -1 is "
"returned."
msgstr ""

#: ../../../command/string.rst:64
msgid ""
"The ``string(FIND)`` subcommand treats all strings as ASCII-only characters. "
"The index stored in ``<output_variable>`` will also be counted in bytes, so "
"strings containing multi-byte characters may lead to unexpected results."
msgstr ""

#: ../../../command/string.rst:70
msgid ""
"string(REPLACE <match_string>\n"
"       <replace_string> <output_variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:76
msgid ""
"Replace all occurrences of ``<match_string>`` in the ``<input>`` with "
"``<replace_string>`` and store the result in the ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:80
msgid "Search and Replace With Regular Expressions"
msgstr ""

#: ../../../command/string.rst:84
msgid ""
"string(REGEX MATCH <regular_expression>\n"
"       <output_variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:89
msgid ""
"Match the ``<regular_expression>`` once and store the match in the "
"``<output_variable>``. All ``<input>`` arguments are concatenated before "
"matching. Regular expressions are specified in the subsection just below."
msgstr ""

#: ../../../command/string.rst:96
msgid ""
"string(REGEX MATCHALL <regular_expression>\n"
"       <output_variable> <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:101
msgid ""
"Match the ``<regular_expression>`` as many times as possible and store the "
"matches in the ``<output_variable>`` as a list. All ``<input>`` arguments "
"are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:107
msgid ""
"string(REGEX REPLACE <regular_expression>\n"
"       <replacement_expression> <output_variable>\n"
"       <input> [<input>...])"
msgstr ""

#: ../../../command/string.rst:113
msgid ""
"Match the ``<regular_expression>`` as many times as possible and substitute "
"the ``<replacement_expression>`` for the match in the output. All "
"``<input>`` arguments are concatenated before matching."
msgstr ""

#: ../../../command/string.rst:117
msgid ""
"The ``<replacement_expression>`` may refer to parenthesis-delimited "
"subexpressions of the match using ``\\1``, ``\\2``, ..., ``\\9``.  Note that "
"two backslashes (``\\\\1``) are required in CMake code to get a backslash "
"through argument parsing."
msgstr ""

#: ../../../command/string.rst:125
msgid "Regex Specification"
msgstr ""

#: ../../../command/string.rst:127
msgid "The following characters have special meaning in regular expressions:"
msgstr ""

#: ../../../command/string.rst:129
msgid "``^``"
msgstr ""

#: ../../../command/string.rst:130
msgid "Matches at beginning of input"
msgstr ""

#: ../../../command/string.rst:131
msgid "``$``"
msgstr ""

#: ../../../command/string.rst:132
msgid "Matches at end of input"
msgstr ""

#: ../../../command/string.rst:133
msgid "``.``"
msgstr ""

#: ../../../command/string.rst:134
msgid "Matches any single character"
msgstr ""

#: ../../../command/string.rst:138
msgid "``\\<char>``"
msgstr ""

#: ../../../command/string.rst:136
msgid ""
"Matches the single character specified by ``<char>``.  Use this to match "
"special regex characters, e.g. ``\\.`` for a literal ``.`` or ``\\\\`` for a "
"literal backslash ``\\``.  Escaping a non-special character is unnecessary "
"but allowed, e.g. ``\\a`` matches ``a``."
msgstr ""

#: ../../../command/string.rst:140
msgid "``[ ]``"
msgstr ""

#: ../../../command/string.rst:141
msgid "Matches any character(s) inside the brackets"
msgstr ""

#: ../../../command/string.rst:142
msgid "``[^ ]``"
msgstr ""

#: ../../../command/string.rst:143
msgid "Matches any character(s) not inside the brackets"
msgstr ""

#: ../../../command/string.rst:148
msgid "``-``"
msgstr ""

#: ../../../command/string.rst:145
msgid ""
"Inside brackets, specifies an inclusive range between characters on either "
"side e.g. ``[a-f]`` is ``[abcdef]`` To match a literal ``-`` using brackets, "
"make it the first or the last character e.g. ``[+*/-]`` matches basic "
"mathematical operators."
msgstr ""

#: ../../../command/string.rst:150
msgid "``*``"
msgstr ""

#: ../../../command/string.rst:151
msgid "Matches preceding pattern zero or more times"
msgstr ""

#: ../../../command/string.rst:152
msgid "``+``"
msgstr ""

#: ../../../command/string.rst:153
msgid "Matches preceding pattern one or more times"
msgstr ""

#: ../../../command/string.rst:154
msgid "``?``"
msgstr ""

#: ../../../command/string.rst:155
msgid "Matches preceding pattern zero or once only"
msgstr ""

#: ../../../command/string.rst:156
msgid "``|``"
msgstr ""

#: ../../../command/string.rst:157
msgid "Matches a pattern on either side of the ``|``"
msgstr ""

#: ../../../command/string.rst:163
msgid "``()``"
msgstr ""

#: ../../../command/string.rst:159
msgid ""
"Saves a matched subexpression, which can be referenced in the ``REGEX "
"REPLACE`` operation. Additionally it is saved by all regular expression-"
"related commands, including e.g. :command:`if(MATCHES)`, in the variables :"
"variable:`CMAKE_MATCH_<n>` for ``<n>`` 0..9."
msgstr ""

#: ../../../command/string.rst:165
msgid ""
"``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|`` has "
"lower precedence than concatenation.  This means that the regular expression "
"``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular expression "
"``^(ab|cd)$`` matches ``ab`` but not ``abd``."
msgstr ""

#: ../../../command/string.rst:170
msgid ""
"CMake language :ref:`Escape Sequences` such as ``\\t``, ``\\r``, ``\\n``, "
"and ``\\\\`` may be used to construct literal tabs, carriage returns, "
"newlines, and backslashes (respectively) to pass in a regex.  For example:"
msgstr ""

#: ../../../command/string.rst:174
msgid ""
"The quoted argument ``\"[ \\t\\r\\n]\"`` specifies a regex that matches any "
"single whitespace character."
msgstr ""

#: ../../../command/string.rst:176
msgid ""
"The quoted argument ``\"[/\\\\]\"`` specifies a regex that matches a single "
"forward slash ``/`` or backslash ``\\``."
msgstr ""

#: ../../../command/string.rst:178
msgid ""
"The quoted argument ``\"[A-Za-z0-9_]\"`` specifies a regex that matches any "
"single \"word\" character in the C locale."
msgstr ""

#: ../../../command/string.rst:180
msgid ""
"The quoted argument ``\"\\\\(\\\\a\\\\+b\\\\)\"`` specifies a regex that "
"matches the exact string ``(a+b)``.  Each ``\\\\`` is parsed in a quoted "
"argument as just ``\\``, so the regex itself is actually ``\\(\\a\\+"
"\\b\\)``.  This can alternatively be specified in a :ref:`bracket argument` "
"without having to escape the backslashes, e.g. ``[[\\(\\a\\+\\b\\)]]``."
msgstr ""

#: ../../../command/string.rst:187
msgid "Manipulation"
msgstr ""

#: ../../../command/string.rst:191
msgid "string(APPEND <string_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:195
msgid "Append all the ``<input>`` arguments to the string."
msgstr ""

#: ../../../command/string.rst:199
msgid "string(PREPEND <string_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:203
msgid "Prepend all the ``<input>`` arguments to the string."
msgstr ""

#: ../../../command/string.rst:207
msgid "string(CONCAT <output_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:211
msgid ""
"Concatenate all the ``<input>`` arguments together and store the result in "
"the named ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:216
msgid "string(JOIN <glue> <output_variable> [<input>...])"
msgstr ""

#: ../../../command/string.rst:220
msgid ""
"Join all the ``<input>`` arguments together using the ``<glue>`` string and "
"store the result in the named ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:223
msgid ""
"To join a list's elements, prefer to use the ``JOIN`` operator from the :"
"command:`list` command.  This allows for the elements to have special "
"characters like ``;`` in them."
msgstr ""

#: ../../../command/string.rst:229
msgid "string(TOLOWER <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:233
msgid "Convert ``<string>`` to lower characters."
msgstr ""

#: ../../../command/string.rst:237
msgid "string(TOUPPER <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:241
msgid "Convert ``<string>`` to upper characters."
msgstr ""

#: ../../../command/string.rst:245
msgid "string(LENGTH <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:249
msgid ""
"Store in an ``<output_variable>`` a given string's length in bytes. Note "
"that this means if ``<string>`` contains multi-byte characters, the result "
"stored in ``<output_variable>`` will *not* be the number of characters."
msgstr ""

#: ../../../command/string.rst:255
msgid "string(SUBSTRING <string> <begin> <length> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:259
msgid ""
"Store in an ``<output_variable>`` a substring of a given ``<string>``.  If "
"``<length>`` is ``-1`` the remainder of the string starting at ``<begin>`` "
"will be returned.  If ``<string>`` is shorter than ``<length>`` then the end "
"of the string is used instead."
msgstr ""

#: ../../../command/string.rst:264
msgid ""
"Both ``<begin>`` and ``<length>`` are counted in bytes, so care must be "
"exercised if ``<string>`` could contain multi-byte characters."
msgstr ""

#: ../../../command/string.rst:268
msgid ""
"CMake 3.1 and below reported an error if ``<length>`` pointed past the end "
"of ``<string>``."
msgstr ""

#: ../../../command/string.rst:273
msgid "string(STRIP <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:277
msgid ""
"Store in an ``<output_variable>`` a substring of a given ``<string>`` with "
"leading and trailing spaces removed."
msgstr ""

#: ../../../command/string.rst:282
msgid "string(GENEX_STRIP <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:286
msgid ""
"Strip any :manual:`generator expressions <cmake-generator-expressions(7)>` "
"from the input ``<string>`` and store the result in the "
"``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:291
msgid "string(REPEAT <string> <count> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:295
msgid ""
"Produce the output string as the input ``<string>`` repeated ``<count>`` "
"times."
msgstr ""

#: ../../../command/string.rst:298
msgid "Comparison"
msgstr ""

#: ../../../command/string.rst:302
msgid ""
"string(COMPARE LESS <string1> <string2> <output_variable>)\n"
"string(COMPARE GREATER <string1> <string2> <output_variable>)\n"
"string(COMPARE EQUAL <string1> <string2> <output_variable>)\n"
"string(COMPARE NOTEQUAL <string1> <string2> <output_variable>)\n"
"string(COMPARE LESS_EQUAL <string1> <string2> <output_variable>)\n"
"string(COMPARE GREATER_EQUAL <string1> <string2> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:311
msgid ""
"Compare the strings and store true or false in the ``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:316
msgid "Hashing"
msgstr ""

#: ../../../command/string.rst:320
msgid "string(<HASH> <output_variable> <input>)"
msgstr ""

#: ../../../command/string.rst:324
msgid ""
"Compute a cryptographic hash of the ``<input>`` string. The supported "
"``<HASH>`` algorithm names are:"
msgstr ""

#: ../../../command/string.rst:327
msgid "``MD5``"
msgstr ""

#: ../../../command/string.rst:328
msgid "Message-Digest Algorithm 5, RFC 1321."
msgstr ""

#: ../../../command/string.rst:329
msgid "``SHA1``"
msgstr ""

#: ../../../command/string.rst:330
msgid "US Secure Hash Algorithm 1, RFC 3174."
msgstr ""

#: ../../../command/string.rst:331
msgid "``SHA224``"
msgstr ""

#: ../../../command/string.rst:332 ../../../command/string.rst:334
#: ../../../command/string.rst:336 ../../../command/string.rst:338
msgid "US Secure Hash Algorithms, RFC 4634."
msgstr ""

#: ../../../command/string.rst:333
msgid "``SHA256``"
msgstr ""

#: ../../../command/string.rst:335
msgid "``SHA384``"
msgstr ""

#: ../../../command/string.rst:337
msgid "``SHA512``"
msgstr ""

#: ../../../command/string.rst:339
msgid "``SHA3_224``"
msgstr ""

#: ../../../command/string.rst:340 ../../../command/string.rst:342
#: ../../../command/string.rst:344 ../../../command/string.rst:346
msgid "Keccak SHA-3."
msgstr ""

#: ../../../command/string.rst:341
msgid "``SHA3_256``"
msgstr ""

#: ../../../command/string.rst:343
msgid "``SHA3_384``"
msgstr ""

#: ../../../command/string.rst:346
msgid "``SHA3_512``"
msgstr ""

#: ../../../command/string.rst:349
msgid "Generation"
msgstr ""

#: ../../../command/string.rst:353
msgid "string(ASCII <number> [<number> ...] <output_variable>)"
msgstr ""

#: ../../../command/string.rst:357
msgid "Convert all numbers into corresponding ASCII characters."
msgstr ""

#: ../../../command/string.rst:361
msgid "string(HEX <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:365
msgid ""
"Convert each byte in the input ``<string>`` to its hexadecimal "
"representation and store the concatenated hex digits in the "
"``<output_variable>``. Letters in the output (``a`` through ``f``) are in "
"lowercase."
msgstr ""

#: ../../../command/string.rst:371
msgid ""
"string(CONFIGURE <string> <output_variable>\n"
"       [@ONLY] [ESCAPE_QUOTES])"
msgstr ""

#: ../../../command/string.rst:376
msgid ""
"Transform a ``<string>`` like :command:`configure_file` transforms a file."
msgstr ""

#: ../../../command/string.rst:380
msgid "string(MAKE_C_IDENTIFIER <string> <output_variable>)"
msgstr ""

#: ../../../command/string.rst:384
msgid ""
"Convert each non-alphanumeric character in the input ``<string>`` to an "
"underscore and store the result in the ``<output_variable>``.  If the first "
"character of the ``<string>`` is a digit, an underscore will also be "
"prepended to the result."
msgstr ""

#: ../../../command/string.rst:391
msgid ""
"string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]\n"
"       [RANDOM_SEED <seed>] <output_variable>)"
msgstr ""

#: ../../../command/string.rst:396
msgid ""
"Return a random string of given ``<length>`` consisting of characters from "
"the given ``<alphabet>``.  Default length is 5 characters and default "
"alphabet is all numbers and upper and lower case letters. If an integer "
"``RANDOM_SEED`` is given, its value will be used to seed the random number "
"generator."
msgstr ""

#: ../../../command/string.rst:404
msgid "string(TIMESTAMP <output_variable> [<format_string>] [UTC])"
msgstr ""

#: ../../../command/string.rst:408
msgid ""
"Write a string representation of the current date and/or time to the "
"``<output_variable>``."
msgstr ""

#: ../../../command/string.rst:411
msgid ""
"If the command is unable to obtain a timestamp, the ``<output_variable>`` "
"will be set to the empty string ``\"\"``."
msgstr ""

#: ../../../command/string.rst:414
msgid ""
"The optional ``UTC`` flag requests the current date/time representation to "
"be in Coordinated Universal Time (UTC) rather than local time."
msgstr ""

#: ../../../command/string.rst:417
msgid ""
"The optional ``<format_string>`` may contain the following format specifiers:"
msgstr ""

#: ../../../command/string.rst:422
msgid ""
"%%        A literal percent sign (%).\n"
"%d        The day of the current month (01-31).\n"
"%H        The hour on a 24-hour clock (00-23).\n"
"%I        The hour on a 12-hour clock (01-12).\n"
"%j        The day of the current year (001-366).\n"
"%m        The month of the current year (01-12).\n"
"%b        Abbreviated month name (e.g. Oct).\n"
"%B        Full month name (e.g. October).\n"
"%M        The minute of the current hour (00-59).\n"
"%s        Seconds since midnight (UTC) 1-Jan-1970 (UNIX time).\n"
"%S        The second of the current minute.\n"
"          60 represents a leap second. (00-60)\n"
"%U        The week number of the current year (00-53).\n"
"%w        The day of the current week. 0 is Sunday. (0-6)\n"
"%a        Abbreviated weekday name (e.g. Fri).\n"
"%A        Full weekday name (e.g. Friday).\n"
"%y        The last two digits of the current year (00-99)\n"
"%Y        The current year."
msgstr ""

#: ../../../command/string.rst:441
msgid ""
"Unknown format specifiers will be ignored and copied to the output as-is."
msgstr ""

#: ../../../command/string.rst:444
msgid "If no explicit ``<format_string>`` is given, it will default to:"
msgstr ""

#: ../../../command/string.rst:448
msgid ""
"%Y-%m-%dT%H:%M:%S    for local time.\n"
"%Y-%m-%dT%H:%M:%SZ   for UTC."
msgstr ""

#: ../../../command/string.rst:453
msgid ""
"If the ``SOURCE_DATE_EPOCH`` environment variable is set, its value will be "
"used instead of the current time. See https://reproducible-builds.org/specs/"
"source-date-epoch/ for details."
msgstr ""

#: ../../../command/string.rst:459
msgid ""
"string(UUID <output_variable> NAMESPACE <namespace> NAME <name>\n"
"       TYPE <MD5|SHA1> [UPPER])"
msgstr ""

#: ../../../command/string.rst:464
msgid ""
"Create a universally unique identifier (aka GUID) as per RFC4122 based on "
"the hash of the combined values of ``<namespace>`` (which itself has to be a "
"valid UUID) and ``<name>``. The hash algorithm can be either ``MD5`` "
"(Version 3 UUID) or ``SHA1`` (Version 5 UUID). A UUID has the format "
"``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`` where each ``x`` represents a lower "
"case hexadecimal character. Where required, an uppercase representation can "
"be requested with the optional ``UPPER`` flag."
msgstr ""
