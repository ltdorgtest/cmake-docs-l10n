# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Adding Generator Expressions.rst:2
msgid "Step 4: Adding Generator Expressions"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:4
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are "
"evaluated during build system generation to produce information specific to "
"each build configuration."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:8
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are allowed "
"in the context of many target properties, such as :prop_tgt:"
"`LINK_LIBRARIES`, :prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:"
"`COMPILE_DEFINITIONS` and others. They may also be used when using commands "
"to populate those properties, such as :command:`target_link_libraries`, :"
"command:`target_include_directories`, :command:`target_compile_definitions` "
"and others."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:15
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>`  may be "
"used to enable conditional linking, conditional definitions used when "
"compiling, conditional include directories and more. The conditions may be "
"based on the build configuration, target properties, platform information or "
"any other queryable information."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:21
msgid ""
"There are different types of :manual:`generator expressions <cmake-generator-"
"expressions(7)>` including Logical, Informational, and Output expressions."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:25
msgid ""
"Logical expressions are used to create conditional output. The basic "
"expressions are the ``0`` and ``1`` expressions. A ``$<0:...>`` results in "
"the empty string, and ``<1:...>`` results in the content of ``...``.  They "
"can also be nested."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:31
msgid "Exercise 1 - Setting the C++ Standard with Interface Libraries"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:33
msgid ""
"Before we use :manual:`generator expressions <cmake-generator-"
"expressions(7)>` let's refactor our existing code to use an ``INTERFACE`` "
"library. We will use that library in the next step to demonstrate a common "
"use for :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:39
#: Expressions.rst:182
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:41
msgid ""
"Add an ``INTERFACE`` library target to specify the required C++ standard."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:44
#: Expressions.rst:187
msgid "Helpful Resources"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:46
msgid ":command:`add_library`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:47
msgid ":command:`target_compile_features`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:48
msgid ":command:`target_link_libraries`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:51
#: Expressions.rst:195
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:53
#: Expressions.rst:197
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:54
msgid "``MathFunctions/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:57
#: Expressions.rst:200
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:59
msgid ""
"In this exercise, we will refactor our code to use an ``INTERFACE`` library "
"to specify the C++ standard."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:62
msgid ""
"The starting source code is provided in the ``Step4`` directory. In this "
"exercise, complete ``TODO 1`` through ``TODO 3``."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:65
msgid ""
"Start by editing the top level ``CMakeLists.txt`` file. Construct an "
"``INTERFACE`` library target called ``tutorial_compiler_flags`` and specify "
"``cxx_std_11`` as a target compiler feature."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:69
msgid ""
"Modify ``CMakeLists.txt`` and ``MathFunctions/CMakeLists.txt`` so that all "
"targets have a :command:`target_link_libraries` call to "
"``tutorial_compiler_flags``."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:74
#: Expressions.rst:215
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:76
msgid ""
"Make a new directory called ``Step4_build``, run the :manual:`cmake "
"<cmake(1)>` executable or the :manual:`cmake-gui <cmake-gui(1)>` to "
"configure the project and then build it with your chosen build tool or by "
"using ``cmake --build .`` from the build directory."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:81
msgid "Here's a refresher of what that looks like from the command line:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:83
msgid ""
"mkdir Step4_build\n"
"cd Step4_build\n"
"cmake ../Step4\n"
"cmake --build ."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:90
msgid ""
"Next, use the newly built ``Tutorial`` and verify that it is working as "
"expected."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:94
#: Expressions.rst:226
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:96
msgid ""
"Let's update our code from the previous step to use interface libraries to "
"set our C++ requirements."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:99
msgid ""
"To start, we need to remove the two :command:`set` calls on the variables :"
"variable:`CMAKE_CXX_STANDARD` and :variable:`CMAKE_CXX_STANDARD_REQUIRED`. "
"The specific lines to remove are as follows:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:103
msgid "CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:103
msgid ""
"set(CMAKE_CXX_STANDARD 11)\n"
"set(CMAKE_CXX_STANDARD_REQUIRED True)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:110
msgid ""
"Next, we need to create an interface library, ``tutorial_compiler_flags``. "
"And then use :command:`target_compile_features` to add the compiler feature "
"``cxx_std_11``."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:115
msgid "<details><summary>TODO 1: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:119
msgid "TODO 1: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:119
msgid ""
"add_library(tutorial_compiler_flags INTERFACE)\n"
"target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:126
#: Expressions.rst:146 Expressions.rst:163 Expressions.rst:241
#: Expressions.rst:261 Expressions.rst:284 Expressions.rst:304
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:130
msgid ""
"Finally, with our interface library set up, we need to link our executable "
"``Target`` and our ``MathFunctions`` library to our new "
"``tutorial_compiler_flags`` library. Respectively, the code will look like "
"this:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:135
msgid "<details><summary>TODO 2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:139
msgid "TODO 2: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:139
msgid ""
"target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS} "
"tutorial_compiler_flags)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:150
msgid "and this:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:152
msgid "<details><summary>TODO 3: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:156
msgid "TODO 3: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:156
msgid ""
"target_link_libraries(MathFunctions tutorial_compiler_flags)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:167
msgid ""
"With this, all of our code still requires C++ 11 to build. Notice though "
"that with this method, it gives us the ability to be specific about which "
"targets get specific requirements. In addition, we create a single source of "
"truth in our interface library."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:173
msgid "Exercise 2 - Adding Compiler Warning Flags with Generator Expressions"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:175
msgid ""
"A common usage of :manual:`generator expressions <cmake-generator-"
"expressions(7)>` is to conditionally add compiler flags, such as those for "
"language levels or warnings. A nice pattern is to associate this information "
"to an ``INTERFACE`` target allowing this information to propagate."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:184
msgid ""
"Add compiler warning flags when building but not for installed versions."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:189
msgid ":manual:`cmake-generator-expressions(7)`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:190
msgid ":command:`cmake_minimum_required`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:191
msgid ":command:`set`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:192
msgid ":command:`target_compile_options`"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:202
msgid ""
"Start with the resulting files from Exercise 1. Complete ``TODO 4`` through "
"``TODO 7``."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:205
msgid ""
"First, in the top level ``CMakeLists.txt`` file, we need to set the :command:"
"`cmake_minimum_required` to ``3.15``. In this exercise we are going to use a "
"generator expression which was introduced in CMake 3.15."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:209
msgid ""
"Next we add the desired compiler warning flags that we want for our project. "
"As warning flags vary based on the compiler, we use the "
"``COMPILE_LANG_AND_ID`` generator expression to control which flags to apply "
"given a language and a set of compiler ids."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:217
msgid ""
"Since we have our build directory already configured from Exercise 1, simply "
"rebuild our code by calling the following:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:220
msgid ""
"cd Step4_build\n"
"cmake --build ."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:228
msgid ""
"Update the :command:`cmake_minimum_required` to require at least CMake "
"version ``3.15``:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:231
msgid "<details><summary>TODO 4: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:235
msgid "TODO 4: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:235
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:245
msgid ""
"Next we determine which compiler our system is currently using to build "
"since warning flags vary based on the compiler we use. This is done with the "
"``COMPILE_LANG_AND_ID`` generator expression. We set the result in the "
"variables ``gcc_like_cxx`` and ``msvc_cxx`` as follows:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:250
msgid "<details><summary>TODO 5: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:254
msgid "TODO 5: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:254
msgid ""
"set(gcc_like_cxx \"$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,"
"LCC>\")\n"
"set(msvc_cxx \"$<COMPILE_LANG_AND_ID:CXX,MSVC>\")\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:265
msgid ""
"Next we add the desired compiler warning flags that we want for our project. "
"Using our variables ``gcc_like_cxx`` and ``msvc_cxx``, we can use another "
"generator expression to apply the respective flags only when the variables "
"are true. We use :command:`target_compile_options` to apply these flags to "
"our interface library."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:271
msgid "<details><summary>TODO 6: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:275
msgid "TODO 6: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:275
msgid ""
"target_compile_options(tutorial_compiler_flags INTERFACE\n"
"  \"$<${gcc_like_cxx}:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>\"\n"
"  \"$<${msvc_cxx}:-W3>\"\n"
")"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:288
msgid ""
"Lastly, we only want these warning flags to be used during builds. Consumers "
"of our installed project should not inherit our warning flags. To specify "
"this, we wrap our flags in a generator expression using the "
"``BUILD_INTERFACE`` condition. The resulting full code looks like the "
"following:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:293
msgid "<details><summary>TODO 7: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:297
msgid "TODO 7: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:297
msgid ""
"target_compile_options(tutorial_compiler_flags INTERFACE\n"
"  \"$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-"
"Wunused>>\"\n"
"  \"$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>\"\n"
")\n"
"\n"
msgstr ""
