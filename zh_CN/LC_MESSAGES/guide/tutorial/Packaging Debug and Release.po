# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 08:28+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Packaging Debug and Release.rst:2
msgid "Step 12: Packaging Debug and Release"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:4
msgid ""
"**Note:** This example is valid for single-configuration generators and will "
"not work for multi-configuration generators (e.g. Visual Studio)."
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:7
msgid ""
"By default, CMake's model is that a build directory only contains a single "
"configuration, be it Debug, Release, MinSizeRel, or RelWithDebInfo. It is "
"possible, however, to setup CPack to bundle multiple build directories and "
"construct a package that contains multiple configurations of the same "
"project."
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:12
msgid ""
"First, we want to ensure that the debug and release builds use different "
"names for the libraries that will be installed. Let's use ``d`` as the "
"postfix for the debug libraries."
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:16
msgid ""
"Set :variable:`CMAKE_DEBUG_POSTFIX` near the beginning of the top-level "
"``CMakeLists.txt`` file:"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:19 Release.rst:28
msgid "CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:19
msgid ""
"\n"
"set(CMAKE_DEBUG_POSTFIX d)\n"
"\n"
"add_library(tutorial_compiler_flags INTERFACE)\n"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:26
msgid "And the :prop_tgt:`DEBUG_POSTFIX` property on the tutorial executable:"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:28
msgid ""
"add_executable(Tutorial tutorial.cxx)\n"
"set_target_properties(Tutorial PROPERTIES DEBUG_POSTFIX "
"${CMAKE_DEBUG_POSTFIX})\n"
"\n"
"target_link_libraries(Tutorial PUBLIC MathFunctions "
"tutorial_compiler_flags)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:35
msgid ""
"Let's also add version numbering to the ``MathFunctions`` library. In "
"``MathFunctions/CMakeLists.txt``, set the :prop_tgt:`VERSION` and :prop_tgt:"
"`SOVERSION` properties:"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:39
msgid "MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:39
msgid ""
"set_property(TARGET MathFunctions PROPERTY VERSION \"1.0.0\")\n"
"set_property(TARGET MathFunctions PROPERTY SOVERSION \"1\")\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:46
msgid ""
"From the ``Step12`` directory, create ``debug`` and ``release`` "
"subdirectories. The layout will look like:"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:49
msgid ""
"- Step12\n"
"   - debug\n"
"   - release"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:55
msgid ""
"Now we need to setup debug and release builds. We can use :variable:"
"`CMAKE_BUILD_TYPE` to set the configuration type:"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:58
msgid ""
"cd debug\n"
"cmake -DCMAKE_BUILD_TYPE=Debug ..\n"
"cmake --build .\n"
"cd ../release\n"
"cmake -DCMAKE_BUILD_TYPE=Release ..\n"
"cmake --build ."
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:67
msgid ""
"Now that both the debug and release builds are complete, we can use a custom "
"configuration file to package both builds into a single release. In the "
"``Step12`` directory, create a file called ``MultiCPackConfig.cmake``. In "
"this file, first include the default configuration file that was created by "
"the :manual:`cmake  <cmake(1)>` executable."
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:73
msgid ""
"Next, use the ``CPACK_INSTALL_CMAKE_PROJECTS`` variable to specify which "
"projects to install. In this case, we want to install both debug and release."
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:76
msgid "MultiCPackConfig.cmake"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:76
msgid ""
"include(\"release/CPackConfig.cmake\")\n"
"\n"
"set(CPACK_INSTALL_CMAKE_PROJECTS\n"
"    \"debug;Tutorial;ALL;/\"\n"
"    \"release;Tutorial;ALL;/\"\n"
"    )\n"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:81
msgid ""
"From the ``Step12`` directory, run :manual:`cpack <cpack(1)>` specifying our "
"custom configuration file with the ``config`` option:"
msgstr ""

#: ../../../guide/tutorial/Packaging Debug and Release.rst:84
msgid "cpack --config MultiCPackConfig.cmake"
msgstr ""
