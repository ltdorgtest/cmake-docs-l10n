# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.27\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:6
msgid "CMakePackageConfigHelpers"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:8
msgid ""
"Helpers functions for creating config files that can be included by other "
"projects to find and use a package."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:11
msgid ""
"Adds the :command:`configure_package_config_file()` and :command:"
"`write_basic_package_version_file()` commands."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:15
msgid "Generating a Package Configuration File"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:19
msgid "Create a config file for a project::"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:21
msgid ""
"configure_package_config_file(<input> <output>\n"
"  INSTALL_DESTINATION <path>\n"
"  [PATH_VARS <var1> <var2> ... <varN>]\n"
"  [NO_SET_AND_CHECK_MACRO]\n"
"  [NO_CHECK_REQUIRED_COMPONENTS_MACRO]\n"
"  [INSTALL_PREFIX <path>]\n"
"  )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:29
msgid ""
"``configure_package_config_file()`` should be used instead of the plain :"
"command:`configure_file()` command when creating the ``<PackageName>Config."
"cmake`` or ``<PackageName>-config.cmake`` file for installing a project or "
"library. It helps making the resulting package relocatable by avoiding "
"hardcoded paths in the installed ``Config.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:35
msgid ""
"In a ``FooConfig.cmake`` file there may be code like this to make the "
"install destinations know to the using project:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:38
msgid ""
"set(FOO_INCLUDE_DIR   \"@CMAKE_INSTALL_FULL_INCLUDEDIR@\" )\n"
"set(FOO_DATA_DIR   \"@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@\" )\n"
"set(FOO_ICONS_DIR   \"@CMAKE_INSTALL_PREFIX@/share/icons\" )\n"
"#...logic to determine installedPrefix from the own location...\n"
"set(FOO_CONFIG_DIR  \"${installedPrefix}/@CONFIG_INSTALL_DIR@\" )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:46
msgid ""
"All 4 options shown above are not sufficient, since the first 3 hardcode the "
"absolute directory locations, and the 4th case works only if the logic to "
"determine the ``installedPrefix`` is correct, and if ``CONFIG_INSTALL_DIR`` "
"contains a relative path, which in general cannot be guaranteed.  This has "
"the effect that the resulting ``FooConfig.cmake`` file would work poorly "
"under Windows and OSX, where users are used to choose the install location "
"of a binary package at install time, independent from how :variable:"
"`CMAKE_INSTALL_PREFIX` was set at build/cmake time."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:55
msgid ""
"Using ``configure_package_config_file`` helps.  If used correctly, it makes "
"the resulting ``FooConfig.cmake`` file relocatable.  Usage:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:58
msgid "write a ``FooConfig.cmake.in`` file as you are used to"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:59
msgid "insert a line containing only the string ``@PACKAGE_INIT@``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:60
msgid ""
"instead of ``set(FOO_DIR \"@SOME_INSTALL_DIR@\")``, use ``set(FOO_DIR "
"\"@PACKAGE_SOME_INSTALL_DIR@\")`` (this must be after the ``@PACKAGE_INIT@`` "
"line)"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:63
msgid ""
"instead of using the normal :command:`configure_file()`, use "
"``configure_package_config_file()``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:68
msgid ""
"The ``<input>`` and ``<output>`` arguments are the input and output file, "
"the same way as in :command:`configure_file()`."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:71
msgid ""
"The ``<path>`` given to ``INSTALL_DESTINATION`` must be the destination "
"where the ``FooConfig.cmake`` file will be installed to.  This path can "
"either be absolute, or relative to the ``INSTALL_PREFIX`` path."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:75
msgid ""
"The variables ``<var1>`` to ``<varN>`` given as ``PATH_VARS`` are the "
"variables which contain install destinations.  For each of them the macro "
"will create a helper variable ``PACKAGE_<var...>``.  These helper variables "
"must be used in the ``FooConfig.cmake.in`` file for setting the installed "
"location. They are calculated by ``configure_package_config_file`` so that "
"they are always relative to the installed location of the package.  This "
"works both for relative and also for absolute locations.  For absolute "
"locations it works only if the absolute location is a subdirectory of "
"``INSTALL_PREFIX``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:84
msgid ""
"If the ``INSTALL_PREFIX`` argument is passed, this is used as base path to "
"calculate all the relative paths.  The ``<path>`` argument must be an "
"absolute path.  If this argument is not passed, the :variable:"
"`CMAKE_INSTALL_PREFIX` variable will be used instead.  The default value is "
"good when generating a FooConfig.cmake file to use your package from the "
"install tree.  When generating a FooConfig.cmake file to use your package "
"from the build tree this option should be used."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:93
msgid ""
"By default ``configure_package_config_file`` also generates two helper "
"macros, ``set_and_check()`` and ``check_required_components()`` into the "
"``FooConfig.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:97
msgid ""
"``set_and_check()`` should be used instead of the normal ``set()`` command "
"for setting directories and file locations.  Additionally to setting the "
"variable it also checks that the referenced file or directory actually "
"exists and fails with a ``FATAL_ERROR`` otherwise.  This makes sure that the "
"created ``FooConfig.cmake`` file does not contain wrong references. When "
"using the ``NO_SET_AND_CHECK_MACRO``, this macro is not generated into the "
"``FooConfig.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:105
msgid ""
"``check_required_components(<PackageName>)`` should be called at the end of "
"the ``FooConfig.cmake`` file. This macro checks whether all requested, non-"
"optional components have been found, and if this is not the case, sets the "
"``Foo_FOUND`` variable to ``FALSE``, so that the package is considered to be "
"not found.  It does that by testing the ``Foo_<Component>_FOUND`` variables "
"for all requested required components.  This macro should be called even if "
"the package doesn't provide any components to make sure users are not "
"specifying components erroneously.  When using the "
"``NO_CHECK_REQUIRED_COMPONENTS_MACRO`` option, this macro is not generated "
"into the ``FooConfig.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:116
msgid ""
"For an example see below the documentation for :command:"
"`write_basic_package_version_file()`."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:120
msgid "Generating a Package Version File"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:124
msgid "Create a version file for a project::"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:126
msgid ""
"write_basic_package_version_file(<filename>\n"
"  [VERSION <major.minor.patch>]\n"
"  COMPATIBILITY <AnyNewerVersion|SameMajorVersion|SameMinorVersion|"
"ExactVersion>\n"
"  [ARCH_INDEPENDENT] )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:132
msgid ""
"Writes a file for use as ``<PackageName>ConfigVersion.cmake`` file to "
"``<filename>``.  See the documentation of :command:`find_package()` for "
"details on this."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:136
msgid ""
"``<filename>`` is the output filename, it should be in the build tree. "
"``<major.minor.patch>`` is the version number of the project to be installed."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:139
msgid ""
"If no ``VERSION`` is given, the :variable:`PROJECT_VERSION` variable is "
"used. If this hasn't been set, it errors out."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:142
msgid ""
"The ``COMPATIBILITY`` mode ``AnyNewerVersion`` means that the installed "
"package version will be considered compatible if it is newer or exactly the "
"same as the requested version.  This mode should be used for packages which "
"are fully backward compatible, also across major versions. If "
"``SameMajorVersion`` is used instead, then the behavior differs from "
"``AnyNewerVersion`` in that the major version number must be the same as "
"requested, e.g.  version 2.0 will not be considered compatible if 1.0 is "
"requested.  This mode should be used for packages which guarantee backward "
"compatibility within the same major version. If ``SameMinorVersion`` is "
"used, the behavior is the same as ``SameMajorVersion``, but both major and "
"minor version must be the same as requested, e.g version 0.2 will not be "
"compatible if 0.1 is requested. If ``ExactVersion`` is used, then the "
"package is only considered compatible if the requested version matches "
"exactly its own version number (not considering the tweak version).  For "
"example, version 1.2.3 of a package is only considered compatible to "
"requested version 1.2.3.  This mode is for packages without compatibility "
"guarantees. If your project has more elaborated version matching rules, you "
"will need to write your own custom ``ConfigVersion.cmake`` file instead of "
"using this macro."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:163
msgid "The ``SameMinorVersion`` compatibility mode."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:166
msgid ""
"If ``ARCH_INDEPENDENT`` is given, the installed package version will be "
"considered compatible even if it was built for a different architecture than "
"the requested architecture.  Otherwise, an architecture check will be "
"performed, and the package will be considered compatible only if the "
"architecture matches exactly.  For example, if the package is built for a 32-"
"bit architecture, the package is only considered compatible if it is used on "
"a 32-bit architecture, unless ``ARCH_INDEPENDENT`` is given, in which case "
"the package is considered compatible on any architecture."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:176
msgid ""
"``ARCH_INDEPENDENT`` is intended for header-only libraries or similar "
"packages with no binaries."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:179
msgid ""
"The version file generated by ``AnyNewerVersion``, ``SameMajorVersion`` and "
"``SameMinorVersion`` arguments of ``COMPATIBILITY`` handle the version range "
"if any is specified (see :command:`find_package` command for the details). "
"``ExactVersion`` mode is incompatible with version ranges and will display "
"an author warning if one is specified."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:186
msgid ""
"Internally, this macro executes :command:`configure_file()` to create the "
"resulting version file.  Depending on the ``COMPATIBILITY``, the "
"corresponding ``BasicConfigVersion-<COMPATIBILITY>.cmake.in`` file is used. "
"Please note that these files are internal to CMake and you should not call :"
"command:`configure_file()` on them yourself, but they can be used as "
"starting point to create more sophisticated custom ``ConfigVersion.cmake`` "
"files."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:194
msgid "Example Generating Package Files"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:196
msgid ""
"Example using both :command:`configure_package_config_file` and "
"``write_basic_package_version_file()``:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:199
msgid "``CMakeLists.txt``:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:201
msgid ""
"include(GNUInstallDirs)\n"
"set(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/Foo\n"
"    CACHE PATH \"Location of header files\" )\n"
"set(SYSCONFIG_INSTALL_DIR ${CMAKE_INSTALL_SYSCONFDIR}/foo\n"
"    CACHE PATH \"Location of configuration files\" )\n"
"#...\n"
"include(CMakePackageConfigHelpers)\n"
"configure_package_config_file(FooConfig.cmake.in\n"
"  ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n"
"  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Foo\n"
"  PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)\n"
"write_basic_package_version_file(\n"
"  ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n"
"  VERSION 1.2.3\n"
"  COMPATIBILITY SameMajorVersion )\n"
"install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n"
"              ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n"
"        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Foo )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:222
msgid "``FooConfig.cmake.in``:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:226
msgid ""
"set(FOO_VERSION x.y.z)\n"
"...\n"
"@PACKAGE_INIT@\n"
"...\n"
"set_and_check(FOO_INCLUDE_DIR \"@PACKAGE_INCLUDE_INSTALL_DIR@\")\n"
"set_and_check(FOO_SYSCONFIG_DIR \"@PACKAGE_SYSCONFIG_INSTALL_DIR@\")\n"
"\n"
"check_required_components(Foo)"
msgstr ""
