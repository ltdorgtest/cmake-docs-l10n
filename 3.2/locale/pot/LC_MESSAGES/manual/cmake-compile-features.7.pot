# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2015 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-compile-features.7.rst:4
msgid "cmake-compile-features(7)"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:13
msgid ""
"Project source code may depend on, or be conditional on, the availability of "
"certain features of the compiler.  There are three use-cases which arise: "
"`Compile Feature Requirements`_, `Optional Compile Features`_ and "
"`Conditional Compilation Options`_."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:18
msgid ""
"While features are typically specified in programming language standards, "
"CMake provides a primary user interface based on granular handling of the "
"features, not the language standard that introduced the feature."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:22
msgid ""
"The :prop_gbl:`CMAKE_C_KNOWN_FEATURES` and :prop_gbl:"
"`CMAKE_CXX_KNOWN_FEATURES` global properties contain all the features known "
"to CMake, regardless of compiler support for the feature. The :variable:"
"`CMAKE_C_COMPILE_FEATURES` and :variable:`CMAKE_CXX_COMPILE_FEATURES` "
"variables contain all features CMake knows are known to the compiler, "
"regardless of language standard or compile flags needed to use them."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:30
msgid ""
"Features known to CMake are named mostly following the same convention as "
"the Clang feature test macros.  The are some exceptions, such as CMake using "
"``cxx_final`` and ``cxx_override`` instead of the single "
"``cxx_override_control`` used by Clang."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:36
msgid "Compile Feature Requirements"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:38
msgid ""
"Compile feature requirements may be specified with the :command:"
"`target_compile_features` command.  For example, if a target must be "
"compiled with compiler support for the :prop_gbl:`cxx_constexpr "
"<CMAKE_CXX_KNOWN_FEATURES>` feature:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:43
msgid ""
"add_library(mylib requires_constexpr.cpp)\n"
"target_compile_features(mylib PRIVATE cxx_constexpr)"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:48
msgid ""
"In processing the requirement for the ``cxx_constexpr`` feature, :manual:"
"`cmake(1)` will ensure that the in-use C++ compiler is capable of the "
"feature, and will add any necessary flags such as ``-std=gnu++11`` to the "
"compile lines of C++ files in the ``mylib`` target.  A ``FATAL_ERROR`` is "
"issued if the compiler is not capable of the feature."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:55
msgid ""
"The exact compile flags and language standard are deliberately not part of "
"the user interface for this use-case.  CMake will compute the appropriate "
"compile flags to use by considering the features specified for each target."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:60
msgid ""
"Such compile flags are added even if the compiler supports the particular "
"feature without the flag. For example, the GNU compiler supports variadic "
"templates (with a warning) even if ``-std=gnu++98`` is used.  CMake adds the "
"``-std=gnu++11`` flag if ``cxx_variadic_templates`` is specified as a "
"requirement."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:66
msgid ""
"In the above example, ``mylib`` requires ``cxx_constexpr`` when it is built "
"itself, but consumers of ``mylib`` are not required to use a compiler which "
"supports ``cxx_constexpr``.  If the interface of ``mylib`` does require the "
"``cxx_constexpr`` feature (or any other known feature), that may be "
"specified with the ``PUBLIC`` or ``INTERFACE`` signatures of :command:"
"`target_compile_features`:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:73
msgid ""
"add_library(mylib requires_constexpr.cpp)\n"
"# cxx_constexpr is a usage-requirement\n"
"target_compile_features(mylib PUBLIC cxx_constexpr)\n"
"\n"
"# main.cpp will be compiled with -std=gnu++11 on GNU for cxx_constexpr.\n"
"add_executable(myexe main.cpp)\n"
"target_link_libraries(myexe mylib)"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:83
msgid ""
"Feature requirements are evaluated transitively by consuming the link "
"implementation.  See :manual:`cmake-buildsystem(7)` for more on transitive "
"behavior of build properties and usage requirements."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:87
msgid ""
"Because the :prop_tgt:`CXX_EXTENSIONS` target property is ``ON`` by default, "
"CMake uses extended variants of language dialects by default, such as ``-"
"std=gnu++11`` instead of ``-std=c++11``.  That target property may be set to "
"``OFF`` to use the non-extended variant of the dialect flag.  Note that "
"because most compilers enable extensions by default, this could expose cross-"
"platform bugs in user code or in the headers of third-party dependencies."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:96
msgid "Optional Compile Features"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:98
msgid ""
"Compile features may be preferred if available, without creating a hard "
"requirement.  For example, a library may provides alternative "
"implementations depending on whether the ``cxx_variadic_templates`` feature "
"is available:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:103
msgid ""
"#if Foo_COMPILER_CXX_VARIADIC_TEMPLATES\n"
"template<int I, int... Is>\n"
"struct Interface;\n"
"\n"
"template<int I>\n"
"struct Interface<I>\n"
"{\n"
"  static int accumulate()\n"
"  {\n"
"    return I;\n"
"  }\n"
"};\n"
"\n"
"template<int I, int... Is>\n"
"struct Interface\n"
"{\n"
"  static int accumulate()\n"
"  {\n"
"    return I + Interface<Is...>::accumulate();\n"
"  }\n"
"};\n"
"#else\n"
"template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>\n"
"struct Interface\n"
"{\n"
"  static int accumulate() { return I1 + I2 + I3 + I4; }\n"
"};\n"
"#endif"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:134
msgid ""
"Such an interface depends on using the correct preprocessor defines for the "
"compiler features.  CMake can generate a header file containing such defines "
"using the :module:`WriteCompilerDetectionHeader` module.  The module "
"contains the ``write_compiler_detection_header`` function which accepts "
"parameters to control the content of the generated header file:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:140
msgid ""
"write_compiler_detection_header(\n"
"  FILE \"${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\"\n"
"  PREFIX Foo\n"
"  COMPILERS GNU\n"
"  FEATURES\n"
"    cxx_variadic_templates\n"
")"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:150
msgid ""
"Such a header file may be used internally in the source code of a project, "
"and it may be installed and used in the interface of library code."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:153
msgid ""
"For each feature listed in ``FEATURES``, a preprocessor definition is "
"created in the header file, and defined to either ``1`` or ``0``."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:156
msgid ""
"Additionally, some features call for additional defines, such as the "
"``cxx_final`` and ``cxx_override`` features. Rather than being used in "
"``#ifdef`` code, the ``final`` keyword is abstracted by a symbol which is "
"defined to either ``final``, a compiler-specific equivalent, or to empty.  "
"That way, C++ code can be written to unconditionally use the symbol, and "
"compiler support determines what it is expanded to:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:163
msgid ""
"struct Interface {\n"
"  virtual void Execute() = 0;\n"
"};\n"
"\n"
"struct Concrete Foo_FINAL {\n"
"  void Execute() Foo_OVERRIDE;\n"
"};"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:173
msgid ""
"In this case, ``Foo_FINAL`` will expand to ``final`` if the compiler "
"supports the keyword, or to empty otherwise."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:176
msgid ""
"In this use-case, the CMake code will wish to enable a particular language "
"standard if available from the compiler. The :prop_tgt:`CXX_STANDARD` target "
"property variable may be set to the desired language standard for a "
"particular target, and the :variable:`CMAKE_CXX_STANDARD` may be set to "
"influence all following targets:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:182
msgid ""
"write_compiler_detection_header(\n"
"  FILE \"${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\"\n"
"  PREFIX Foo\n"
"  COMPILERS GNU\n"
"  FEATURES\n"
"    cxx_final cxx_override\n"
")\n"
"\n"
"# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol\n"
"# which will expand to 'final' if the compiler supports the requested\n"
"# CXX_STANDARD.\n"
"add_library(foo foo.cpp)\n"
"set_property(TARGET foo PROPERTY CXX_STANDARD 11)\n"
"\n"
"# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol\n"
"# which will expand to 'final' if the compiler supports the feature,\n"
"# even though CXX_STANDARD is not set explicitly.  The requirement of\n"
"# cxx_constexpr causes CMake to set CXX_STANDARD internally, which\n"
"# affects the compile flags.\n"
"add_library(foo_impl foo_impl.cpp)\n"
"target_compile_features(foo_impl PRIVATE cxx_constexpr)"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:206
msgid ""
"The ``write_compiler_detection_header`` function also creates compatibility "
"code for other features which have standard equivalents.  For example, the "
"``cxx_static_assert`` feature is emulated with a template and abstracted via "
"the ``<PREFIX>_STATIC_ASSERT`` and ``<PREFIX>_STATIC_ASSERT_MSG`` function-"
"macros."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:213
msgid "Conditional Compilation Options"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:215
msgid ""
"Libraries may provide entirely different header files depending on requested "
"compiler features."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:218
msgid "For example, a header at ``with_variadics/interface.h`` may contain:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:220
msgid ""
"template<int I, int... Is>\n"
"struct Interface;\n"
"\n"
"template<int I>\n"
"struct Interface<I>\n"
"{\n"
"  static int accumulate()\n"
"  {\n"
"    return I;\n"
"  }\n"
"};\n"
"\n"
"template<int I, int... Is>\n"
"struct Interface\n"
"{\n"
"  static int accumulate()\n"
"  {\n"
"    return I + Interface<Is...>::accumulate();\n"
"  }\n"
"};"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:243
msgid "while a header at ``no_variadics/interface.h`` may contain:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:245
msgid ""
"template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>\n"
"struct Interface\n"
"{\n"
"  static int accumulate() { return I1 + I2 + I3 + I4; }\n"
"};"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:253
msgid ""
"It would be possible to write a abstraction ``interface.h`` header "
"containing something like:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:256
msgid ""
"#include \"foo_compiler_detection.h\"\n"
"#if Foo_COMPILER_CXX_VARIADIC_TEMPLATES\n"
"#include \"with_variadics/interface.h\"\n"
"#else\n"
"#include \"no_variadics/interface.h\"\n"
"#endif"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:265
msgid ""
"However this could be unmaintainable if there are many files to abstract. "
"What is needed is to use alternative include directories depending on the "
"compiler capabilities."
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:269
msgid ""
"CMake provides a ``COMPILE_FEATURES`` :manual:`generator expression <cmake-"
"generator-expressions(7)>` to implement such conditions.  This may be used "
"with the build-property commands such as :command:"
"`target_include_directories` and :command:`target_link_libraries` to set the "
"appropriate :manual:`buildsystem <cmake-buildsystem(7)>` properties:"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:276
msgid ""
"add_library(foo INTERFACE)\n"
"set(with_variadics ${CMAKE_CURRENT_SOURCE_DIR}/with_variadics)\n"
"set(no_variadics ${CMAKE_CURRENT_SOURCE_DIR}/no_variadics)\n"
"target_link_libraries(foo\n"
"  INTERFACE\n"
"    \"$<$<COMPILE_FEATURES:cxx_variadic_templates>:${with_variadics}>\"\n"
"    \"$<$<NOT:$<COMPILE_FEATURES:cxx_variadic_templates>>:${no_variadics}"
">\"\n"
"  )"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:287
msgid ""
"Consuming code then simply links to the ``foo`` target as usual and uses the "
"feature-appropriate include directory"
msgstr ""

#: ../../../manual/cmake-compile-features.7.rst:290
msgid ""
"add_executable(consumer_with consumer_with.cpp)\n"
"target_link_libraries(consumer_with foo)\n"
"set_property(TARGET consumer_with CXX_STANDARD 11)\n"
"\n"
"add_executable(consumer_no consumer_no.cpp)\n"
"target_link_libraries(consumer_no foo)"
msgstr ""
