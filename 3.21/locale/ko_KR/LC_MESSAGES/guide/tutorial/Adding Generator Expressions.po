# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2021 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.21\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Adding Generator Expressions.rst:2
msgid "Step 10: Adding Generator Expressions"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:4
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are "
"evaluated during build system generation to produce information specific to "
"each build configuration."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:8
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are allowed "
"in the context of many target properties, such as :prop_tgt:"
"`LINK_LIBRARIES`, :prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:"
"`COMPILE_DEFINITIONS` and others. They may also be used when using commands "
"to populate those properties, such as :command:`target_link_libraries`, :"
"command:`target_include_directories`, :command:`target_compile_definitions` "
"and others."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:15
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>`  may be "
"used to enable conditional linking, conditional definitions used when "
"compiling, conditional include directories and more. The conditions may be "
"based on the build configuration, target properties, platform information or "
"any other queryable information."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:21
msgid ""
"There are different types of :manual:`generator expressions <cmake-generator-"
"expressions(7)>` including Logical, Informational, and Output expressions."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:25
msgid ""
"Logical expressions are used to create conditional output. The basic "
"expressions are the ``0`` and ``1`` expressions. A ``$<0:...>`` results in "
"the empty string, and ``<1:...>`` results in the content of ``...``.  They "
"can also be nested."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:30
msgid ""
"A common usage of :manual:`generator expressions <cmake-generator-"
"expressions(7)>` is to conditionally add compiler flags, such as those for "
"language levels or warnings. A nice pattern is to associate this information "
"to an ``INTERFACE`` target allowing this information to propagate. Let's "
"start by constructing an ``INTERFACE`` target and specifying the required C+"
"+ standard level of ``11`` instead of using :variable:`CMAKE_CXX_STANDARD`."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:38
msgid "So the following code:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:40
#: Expressions.rst:49 Expressions.rst:62
msgid "CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:40
msgid ""
"\n"
"# specify the C++ standard\n"
"set(CMAKE_CXX_STANDARD 11)\n"
"set(CMAKE_CXX_STANDARD_REQUIRED True)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:47
msgid "Would be replaced with:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:49
msgid ""
"\n"
"add_library(tutorial_compiler_flags INTERFACE)\n"
"target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:57
msgid ""
"Next we add the desired compiler warning flags that we want for our project. "
"As warning flags vary based on the compiler we use the "
"``COMPILE_LANG_AND_ID`` generator expression to control which flags to apply "
"given a language and a set of compiler ids as seen below:"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:62
msgid ""
"set(gcc_like_cxx \"$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,"
"GNU>\")\n"
"set(msvc_cxx \"$<COMPILE_LANG_AND_ID:CXX,MSVC>\")\n"
"target_compile_options(tutorial_compiler_flags INTERFACE\n"
"  \"$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-"
"Wunused>>\"\n"
"  \"$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>\"\n"
")\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:69
msgid ""
"Looking at this we see that the warning flags are encapsulated inside a "
"``BUILD_INTERFACE`` condition. This is done so that consumers of our "
"installed project will not inherit our warning flags."
msgstr ""

#: ../../../guide/tutorial/Adding Generator Expressions.rst:73
msgid ""
"**Exercise**: Modify ``MathFunctions/CMakeLists.txt`` so that all targets "
"have a :command:`target_link_libraries` call to ``tutorial_compiler_flags``."
msgstr ""
