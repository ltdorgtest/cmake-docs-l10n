# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2024 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.31\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-13 07:45+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindCUDA.cmake:3
msgid "FindCUDA"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:5
msgid ""
"This module is available only if policy :policy:`CMP0146` is not set to "
"``NEW``. Port projects to CMake's first-class ``CUDA`` language support."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:9
msgid "Do not use this module in new code."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:12
msgid ""
"It is no longer necessary to use this module or call ``find_package(CUDA)`` "
"for compiling CUDA code. Instead, list ``CUDA`` among the languages named in "
"the top-level call to the :command:`project` command, or call the :command:"
"`enable_language` command with ``CUDA``. Then one can add CUDA (``.cu``) "
"sources directly to targets similar to other languages."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:19
msgid ""
"To find and use the CUDA toolkit libraries manually, use the :module:"
"`FindCUDAToolkit` module instead.  It works regardless of the ``CUDA`` "
"language being enabled."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:25
msgid "Documentation of Deprecated Usage"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:27
msgid "Tools for building CUDA C files: libraries and build dependencies."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:29
msgid ""
"This script locates the NVIDIA CUDA C tools.  It should work on Linux, "
"Windows, and macOS and should be reasonably up to date with CUDA C releases."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:33
msgid "QNX support."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:36
msgid ""
"This script makes use of the standard :command:`find_package` arguments of "
"``<VERSION>``, ``REQUIRED`` and ``QUIET``.  ``CUDA_FOUND`` will report if an "
"acceptable version of CUDA was found."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:40
msgid ""
"The script will prompt the user to specify ``CUDA_TOOLKIT_ROOT_DIR`` if the "
"prefix cannot be determined by the location of nvcc in the system path and "
"``REQUIRED`` is specified to :command:`find_package`.  To use a different "
"installed version of the toolkit set the environment variable "
"``CUDA_BIN_PATH`` before running cmake (e.g. ``CUDA_BIN_PATH=/usr/local/"
"cuda1.0`` instead of the default ``/usr/local/cuda``) or set "
"``CUDA_TOOLKIT_ROOT_DIR`` after configuring.  If you change the value of "
"``CUDA_TOOLKIT_ROOT_DIR``, various components that depend on the path will "
"be relocated."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:50
msgid ""
"It might be necessary to set ``CUDA_TOOLKIT_ROOT_DIR`` manually on certain "
"platforms, or to use a CUDA runtime not installed in the default location.  "
"In newer versions of the toolkit the CUDA library is included with the "
"graphics driver -- be sure that the driver version matches what is needed by "
"the CUDA runtime version."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:57
msgid "Input Variables"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:59
msgid ""
"The following variables affect the behavior of the macros in the script (in "
"alphabetical order).  Note that any of these flags can be changed multiple "
"times in the same directory before calling ``cuda_add_executable()``, "
"``cuda_add_library()``, ``cuda_compile()``, ``cuda_compile_ptx()``, "
"``cuda_compile_fatbin()``, ``cuda_compile_cubin()`` or ``cuda_wrap_srcs()``:"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:66
msgid "``CUDA_64_BIT_DEVICE_CODE`` (Default: host bit size)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:67
msgid ""
"Set to ``ON`` to compile for 64 bit device code, OFF for 32 bit device code. "
"Note that making this different from the host code when generating object or "
"C files from CUDA code just won't work, because size_t gets defined by nvcc "
"in the generated source.  If you compile to PTX and then load the file "
"yourself, you can mix bit sizes between device and host."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:73
msgid "``CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE`` (Default: ``ON``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:74
msgid ""
"Set to ``ON`` if you want the custom build rule to be attached to the source "
"file in Visual Studio.  Turn OFF if you add the same cuda file to multiple "
"targets."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:78
msgid ""
"This allows the user to build the target from the CUDA file; however, bad "
"things can happen if the CUDA source file is added to multiple targets. When "
"performing parallel builds it is possible for the custom build command to be "
"run more than once and in parallel causing cryptic build errors.  VS runs "
"the rules for every source file in the target, and a source can have only "
"one rule no matter how many projects it is added to. When the rule is run "
"from multiple targets race conditions can occur on the generated file.  "
"Eventually everything will get built, but if the user is unaware of this "
"behavior, there may be confusion.  It would be nice if this script could "
"detect the reuse of source files across multiple targets and turn the option "
"off for the user, but no good solution could be found."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:90
msgid "``CUDA_BUILD_CUBIN`` (Default: ``OFF``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:91
msgid ""
"Set to ``ON`` to enable and extra compilation pass with the ``-cubin`` "
"option in Device mode. The output is parsed and register, shared memory "
"usage is printed during build."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:95
msgid "``CUDA_BUILD_EMULATION`` (Default: ``OFF`` for device mode)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:96
msgid ""
"Set to ``ON`` for Emulation mode. ``-D_DEVICEEMU`` is defined for CUDA C "
"files when ``CUDA_BUILD_EMULATION`` is ``TRUE``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:99
msgid "``CUDA_LINK_LIBRARIES_KEYWORD`` (Default: ``\"\"``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:102
msgid ""
"The ``<PRIVATE|PUBLIC|INTERFACE>`` keyword to use for internal :command:"
"`target_link_libraries` calls. The default is to use no keyword which uses "
"the old \"plain\" form of :command:`target_link_libraries`. Note that is "
"matters because whatever is used inside the ``FindCUDA`` module must also be "
"used outside - the two forms of :command:`target_link_libraries` cannot be "
"mixed."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:108
msgid ""
"``CUDA_GENERATED_OUTPUT_DIR`` (Default: :variable:`CMAKE_CURRENT_BINARY_DIR`)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:109
msgid ""
"Set to the path you wish to have the generated files placed.  If it is blank "
"output files will be placed in :variable:`CMAKE_CURRENT_BINARY_DIR`. "
"Intermediate files will always be placed in ``CMAKE_CURRENT_BINARY_DIR/"
"CMakeFiles``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:114
msgid "``CUDA_HOST_COMPILATION_CPP`` (Default: ``ON``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:115
msgid "Set to ``OFF`` for C compilation of host code."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:117
msgid "``CUDA_HOST_COMPILER`` (Default: ``CMAKE_C_COMPILER``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:118
msgid ""
"Set the host compiler to be used by nvcc.  Ignored if ``-ccbin`` or ``--"
"compiler-bindir`` is already present in the ``CUDA_NVCC_FLAGS`` or "
"``CUDA_NVCC_FLAGS_<CONFIG>`` variables.  For Visual Studio targets, the host "
"compiler is constructed with one or more visual studio macros such as "
"``$(VCInstallDir)``, that expands out to the path when the command is run "
"from within VS."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:125
msgid ""
"If the :envvar:`CUDAHOSTCXX` environment variable is set it will be used as "
"the default."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:129
msgid "``CUDA_NVCC_FLAGS``, ``CUDA_NVCC_FLAGS_<CONFIG>``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:130
msgid ""
"Additional NVCC command line arguments.  NOTE: multiple arguments must be "
"semi-colon delimited (e.g. ``--compiler-options;-Wall``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:133
msgid ""
"Contents of these variables may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:137
msgid "``CUDA_PROPAGATE_HOST_FLAGS`` (Default: ``ON``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:138
msgid ""
"Set to ``ON`` to propagate :variable:`CMAKE_{C,CXX}_FLAGS "
"<CMAKE_<LANG>_FLAGS>` and their configuration dependent counterparts (e.g. "
"``CMAKE_C_FLAGS_DEBUG``) automatically to the host compiler through nvcc's "
"``-Xcompiler`` flag.  This helps make the generated host code match the rest "
"of the system better.  Sometimes certain flags give nvcc problems, and this "
"will help you turn the flag propagation off.  This does not affect the flags "
"supplied directly to nvcc via ``CUDA_NVCC_FLAGS`` or through the ``OPTION`` "
"flags specified through ``cuda_add_library()``, ``cuda_add_executable()``, "
"or ``cuda_wrap_srcs()``.  Flags used for shared library compilation are not "
"affected by this flag."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:148
msgid "``CUDA_SEPARABLE_COMPILATION`` (Default: ``OFF``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:149
msgid ""
"If set this will enable separable compilation for all CUDA runtime object "
"files.  If used outside of ``cuda_add_executable()`` and "
"``cuda_add_library()`` (e.g. calling ``cuda_wrap_srcs()`` directly), "
"``cuda_compute_separable_compilation_object_file_name()`` and "
"``cuda_link_separable_compilation_objects()`` should be called."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:155
msgid "``CUDA_SOURCE_PROPERTY_FORMAT``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:158
msgid ""
"If this source file property is set, it can override the format specified to "
"``cuda_wrap_srcs()`` (``OBJ``, ``PTX``, ``CUBIN``, or ``FATBIN``).  If an "
"input source file is not a ``.cu`` file, setting this file will cause it to "
"be treated as a ``.cu`` file. See documentation for "
"set_source_files_properties on how to set this property."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:164
msgid "``CUDA_USE_STATIC_CUDA_RUNTIME`` (Default: ``ON``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:167
msgid ""
"When enabled the static version of the CUDA runtime library will be used in "
"``CUDA_LIBRARIES``.  If the version of CUDA configured doesn't support this "
"option, then it will be silently disabled."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:171
msgid "``CUDA_VERBOSE_BUILD`` (Default: ``OFF``)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:172
msgid ""
"Set to ``ON`` to see all the commands used when building the CUDA file.  "
"When using a Makefile generator the value defaults to ``VERBOSE`` (run "
"``make VERBOSE=1`` to see output), although setting ``CUDA_VERBOSE_BUILD`` "
"to ``ON`` will always print the output."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:178
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:180
msgid ""
"The script creates the following functions and macros (in alphabetical "
"order):"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:182
msgid "cuda_add_cufft_to_target(<cuda_target>)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:186
msgid ""
"Adds the cufft library to the target (can be any target).  Handles whether "
"you are in emulation mode or not."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:189
msgid "cuda_add_cublas_to_target(<cuda_target>)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:193
msgid ""
"Adds the cublas library to the target (can be any target).  Handles whether "
"you are in emulation mode or not."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:196
msgid ""
"cuda_add_executable(<cuda_target> <file>...\n"
"                    [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:201
msgid ""
"Creates an executable ``<cuda_target>`` which is made up of the files "
"specified.  All of the non CUDA C files are compiled using the standard "
"build rules specified by CMake and the CUDA files are compiled to object "
"files using nvcc and the host compiler.  In addition ``CUDA_INCLUDE_DIRS`` "
"is added automatically to :command:`include_directories`.  Some standard "
"CMake target calls can be used on the target after calling this macro (e.g. :"
"command:`set_target_properties` and :command:`target_link_libraries`), but "
"setting properties that adjust compilation flags will not affect code "
"compiled by nvcc.  Such flags should be modified before calling "
"``cuda_add_executable()``, ``cuda_add_library()`` or ``cuda_wrap_srcs()``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:212
msgid ""
"cuda_add_library(<cuda_target> <file>...\n"
"                 [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:217
msgid "Same as ``cuda_add_executable()`` except that a library is created."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:219
msgid "cuda_build_clean_target()"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:223
msgid ""
"Creates a convenience target that deletes all the dependency files "
"generated.  You should make clean after running this target to ensure the "
"dependency files get regenerated."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:227
msgid ""
"cuda_compile(<generated_files> <file>... [STATIC | SHARED | MODULE]\n"
"             [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:232
msgid ""
"Returns a list of generated files from the input source files to be used "
"with :command:`add_library` or :command:`add_executable`."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:235
msgid "cuda_compile_ptx(<generated_files> <file>... [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:239
msgid "Returns a list of ``PTX`` files generated from the input source files."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:241
msgid "cuda_compile_fatbin(<generated_files> <file>... [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:247
msgid ""
"Returns a list of ``FATBIN`` files generated from the input source files."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:249
msgid "cuda_compile_cubin(<generated_files> <file>... [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:255
msgid ""
"Returns a list of ``CUBIN`` files generated from the input source files."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:257
msgid ""
"cuda_compute_separable_compilation_object_file_name(<output_file_var>\n"
"                                                    <cuda_target>\n"
"                                                    <object_files>)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:263
msgid ""
"Compute the name of the intermediate link file used for separable "
"compilation.  This file name is typically passed into "
"``CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS``.  output_file_var is produced "
"based on cuda_target the list of objects files that need separable "
"compilation as specified by ``<object_files>``.  If the ``<object_files>`` "
"list is empty, then ``<output_file_var>`` will be empty.  This function is "
"called automatically for ``cuda_add_library()`` and "
"``cuda_add_executable()``.  Note that this is a function and not a macro."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:272
msgid "cuda_include_directories(path0 path1 ...)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:276
msgid ""
"Sets the directories that should be passed to nvcc (e.g. ``nvcc -Ipath0 -"
"Ipath1 ...``). These paths usually contain other ``.cu`` files."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:280
msgid ""
"cuda_link_separable_compilation_objects(<output_file_var> <cuda_target>\n"
"                                        <nvcc_flags> <object_files>)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:285
msgid ""
"Generates the link object required by separable compilation from the given "
"object files.  This is called automatically for ``cuda_add_executable()`` "
"and ``cuda_add_library()``, but can be called manually when using "
"``cuda_wrap_srcs()`` directly.  When called from ``cuda_add_library()`` or "
"``cuda_add_executable()`` the ``<nvcc_flags>`` passed in are the same as the "
"flags passed in via the ``OPTIONS`` argument.  The only nvcc flag added "
"automatically is the bitness flag as specified by "
"``CUDA_64_BIT_DEVICE_CODE``.  Note that this is a function instead of a "
"macro."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:294
msgid ""
"cuda_select_nvcc_arch_flags(<out_variable> [<target_CUDA_architecture> ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:298
msgid "Selects GPU arch flags for nvcc based on ``target_CUDA_architecture``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:300
msgid "Values for ``target_CUDA_architecture``:"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:302
msgid "``Auto``: detects local machine GPU compute arch at runtime."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:303
msgid ""
"``Common`` and ``All``: cover common and entire subsets of architectures."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:304
msgid ""
"``<name>``: one of ``Fermi``, ``Kepler``, ``Maxwell``, ``Kepler+Tegra``, "
"``Kepler+Tesla``, ``Maxwell+Tegra``, ``Pascal``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:305
msgid ""
"``<ver>``, ``<ver>(<ver>)``, ``<ver>+PTX``, where ``<ver>`` is one of "
"``2.0``, ``2.1``, ``3.0``, ``3.2``, ``3.5``, ``3.7``, ``5.0``, ``5.2``, "
"``5.3``, ``6.0``, ``6.2``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:308
msgid ""
"Returns list of flags to be added to ``CUDA_NVCC_FLAGS`` in "
"``<out_variable>``. Additionally, sets ``<out_variable>_readable`` to the "
"resulting numeric list."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:311
msgid "Example::"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:313
msgid ""
"cuda_select_nvcc_arch_flags(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n"
"list(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:316
msgid ""
"More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA. Note "
"that this is a function instead of a macro."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:319
msgid ""
"cuda_wrap_srcs(<cuda_target> <format> <generated_files> <file>...\n"
"               [STATIC | SHARED | MODULE] [OPTIONS ...])"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:324
msgid ""
"This is where all the magic happens.  ``cuda_add_executable()``, "
"``cuda_add_library()``, ``cuda_compile()``, and ``cuda_compile_ptx()`` all "
"call this function under the hood."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:328
msgid ""
"Given the list of files ``<file>...`` this macro generates custom commands "
"that generate either PTX or linkable objects (use ``PTX`` or ``OBJ`` for the "
"``<format>`` argument to switch).  Files that don't end with ``.cu`` or have "
"the ``HEADER_FILE_ONLY`` property are ignored."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:333
msgid ""
"The arguments passed in after ``OPTIONS`` are extra command line options to "
"give to nvcc.  You can also specify per configuration options by specifying "
"the name of the configuration followed by the options.  General options must "
"precede configuration specific options.  Not all configurations need to be "
"specified, only the ones provided will be used. For example:"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:340
msgid ""
"cuda_add_executable(...\n"
"  OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n"
"  DEBUG -g\n"
"  RELEASE --use_fast_math\n"
"  RELWITHDEBINFO --use_fast_math;-g\n"
"  MINSIZEREL --use_fast_math)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:349
msgid ""
"For certain configurations (namely VS generating object files with "
"``CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE`` set to ``ON``), no generated file "
"will be produced for the given cuda file.  This is because when you add the "
"cuda file to Visual Studio it knows that this file produces an object file "
"and will link in the resulting object file automatically."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:355
msgid ""
"This script will also generate a separate cmake script that is used at build "
"time to invoke nvcc.  This is for several reasons:"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:358
msgid ""
"nvcc can return negative numbers as return values which confuses Visual "
"Studio into thinking that the command succeeded.  The script now checks the "
"error codes and produces errors when there was a problem."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:362
msgid ""
"nvcc has been known to not delete incomplete results when it encounters "
"problems.  This confuses build systems into thinking the target was "
"generated when in fact an unusable file exists.  The script now deletes the "
"output files if there was an error."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:367
msgid ""
"By putting all the options that affect the build into a file and then make "
"the build rule dependent on the file, the output files will be regenerated "
"when the options change."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:371
msgid ""
"This script also looks at optional arguments ``STATIC``, ``SHARED``, or "
"``MODULE`` to determine when to target the object compilation for a shared "
"library. :variable:`BUILD_SHARED_LIBS` is ignored in ``cuda_wrap_srcs()``, "
"but it is respected in ``cuda_add_library()``.  On some systems special "
"flags are added for building objects intended for shared libraries.  A "
"preprocessor macro, ``<target_name>_EXPORTS`` is defined when a shared "
"library compilation is detected."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:379
msgid ""
"Flags passed into add_definitions with ``-D`` or ``/D`` are passed along to "
"nvcc."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:382
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:384
msgid "The script defines the following variables:"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:386
msgid "``CUDA_VERSION_MAJOR``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:387
msgid "The major version of cuda as reported by nvcc."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:389
msgid "``CUDA_VERSION_MINOR``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:390
msgid "The minor version."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:392
msgid "``CUDA_VERSION``, ``CUDA_VERSION_STRING``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:393
msgid "Full version in the ``X.Y`` format."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:395
msgid "``CUDA_HAS_FP16``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:396
msgid "Whether a short float (``float16``, ``fp16``) is supported."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:399
msgid "``CUDA_TOOLKIT_ROOT_DIR``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:400
msgid "Path to the CUDA Toolkit (defined if not set)."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:402
msgid "``CUDA_SDK_ROOT_DIR``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:403
msgid ""
"Path to the CUDA SDK.  Use this to find files in the SDK.  This script will "
"not directly support finding specific libraries or headers, as that isn't "
"supported by NVIDIA.  If you want to change libraries when the path changes "
"see the ``FindCUDA.cmake`` script for an example of how to clear these "
"variables.  There are also examples of how to use the ``CUDA_SDK_ROOT_DIR`` "
"to locate headers or libraries, if you so choose (at your own risk)."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:410
msgid "``CUDA_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:411
msgid ""
"Include directory for cuda headers.  Added automatically for "
"``cuda_add_executable()`` and ``cuda_add_library()``."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:414
msgid "``CUDA_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:415
msgid "Cuda RT library."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:417
msgid "``CUDA_CUFFT_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:418
msgid ""
"Device or emulation library for the Cuda FFT implementation (alternative to "
"``cuda_add_cufft_to_target()`` macro)"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:421
msgid "``CUDA_CUBLAS_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:422
msgid ""
"Device or emulation library for the Cuda BLAS implementation (alternative to "
"``cuda_add_cublas_to_target()`` macro)."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:425
msgid "``CUDA_cudart_static_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:426
msgid ""
"Statically linkable cuda runtime library. Only available for CUDA version "
"5.5+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:429
msgid "``CUDA_cudadevrt_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:430
msgid "Device runtime library.  Required for separable compilation."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:433
msgid "``CUDA_cupti_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:434
msgid ""
"CUDA Profiling Tools Interface library. Only available for CUDA version 4.0+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:437
msgid "``CUDA_curand_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:438
msgid ""
"CUDA Random Number Generation library. Only available for CUDA version 3.2+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:441
msgid "``CUDA_cusolver_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:442
msgid "CUDA Direct Solver library. Only available for CUDA version 7.0+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:446
msgid "``CUDA_cusparse_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:447
msgid "CUDA Sparse Matrix library. Only available for CUDA version 3.2+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:450
msgid "``CUDA_npp_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:451
msgid ""
"NVIDIA Performance Primitives lib. Only available for CUDA version 4.0+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:454
msgid "``CUDA_nppc_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:455
msgid ""
"NVIDIA Performance Primitives lib (core). Only available for CUDA version "
"5.5+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:458
msgid "``CUDA_nppi_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:459
msgid ""
"NVIDIA Performance Primitives lib (image processing). Only available for "
"CUDA version 5.5 - 8.0."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:462
msgid "``CUDA_nppial_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:463
#: ../../../../Modules/FindCUDA.cmake:467
#: ../../../../Modules/FindCUDA.cmake:476
#: ../../../../Modules/FindCUDA.cmake:480
#: ../../../../Modules/FindCUDA.cmake:484
#: ../../../../Modules/FindCUDA.cmake:488
#: ../../../../Modules/FindCUDA.cmake:492
#: ../../../../Modules/FindCUDA.cmake:496
#: ../../../../Modules/FindCUDA.cmake:500
msgid ""
"NVIDIA Performance Primitives lib (image processing). Only available for "
"CUDA version 9.0."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:466
msgid "``CUDA_nppicc_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:470
msgid "``CUDA_nppicom_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:471
msgid ""
"NVIDIA Performance Primitives lib (image processing). Only available for "
"CUDA version 9.0 - 10.2. Replaced by nvjpeg."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:475
msgid "``CUDA_nppidei_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:479
msgid "``CUDA_nppif_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:483
msgid "``CUDA_nppig_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:487
msgid "``CUDA_nppim_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:491
msgid "``CUDA_nppist_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:495
msgid "``CUDA_nppisu_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:499
msgid "``CUDA_nppitc_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:503
msgid "``CUDA_npps_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:504
msgid ""
"NVIDIA Performance Primitives lib (signal processing). Only available for "
"CUDA version 5.5+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:507
msgid "``CUDA_nvcuvenc_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:508
msgid ""
"CUDA Video Encoder library. Only available for CUDA version 3.2+. Windows "
"only."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:512
msgid "``CUDA_nvcuvid_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:513
msgid ""
"CUDA Video Decoder library. Only available for CUDA version 3.2+. Windows "
"only."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:517
msgid "``CUDA_nvToolsExt_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:518
msgid "NVIDA CUDA Tools Extension library. Available for CUDA version 5+."
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:522
msgid "``CUDA_OpenCL_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindCUDA.cmake:523
msgid "NVIDA CUDA OpenCL library. Available for CUDA version 5+."
msgstr ""
