# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindOpenSceneGraph.cmake:6
msgid "FindOpenSceneGraph"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:8
msgid "Find OpenSceneGraph (3D graphics application programming interface)"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:10
msgid ""
"This module searches for the OpenSceneGraph core \"osg\" library as well as :"
"module:`FindOpenThreads`, and whatever additional ``COMPONENTS`` (nodekits) "
"that you specify."
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:16
msgid "See http://www.openscenegraph.org"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:20
msgid ""
"NOTE: To use this module effectively you must either require ``CMake >= "
"2.6.3`` with  :command:`cmake_minimum_required(VERSION 2.6.3)` or download "
"and place :module:`FindOpenThreads`, :module:`Findosg` functions, :module:"
"`Findosg` and ``Find<etc>.cmake`` files into your :variable:"
"`CMAKE_MODULE_PATH`."
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:28
msgid "This module accepts the following variables (note mixed case)"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:32
msgid "OpenSceneGraph_DEBUG - Enable debugging output"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:38
msgid ""
"OpenSceneGraph_MARK_AS_ADVANCED - Mark cache variables as advanced\n"
"                                  automatically"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:43
msgid ""
"The following environment variables are also respected for finding the OSG "
"and it's various components.  :variable:`CMAKE_PREFIX_PATH` can also be used "
"for this (see :command:`find_library` CMake documentation)."
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:48
msgid "``<MODULE>_DIR``"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:48
msgid ""
"(where ``MODULE`` is of the form \"OSGVOLUME\" and there is a :module:"
"`FindosgVolume`.cmake` file)"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:50
msgid "``OSG_DIR``"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:52
msgid "``OSGDIR``"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:56
msgid "``OSG_ROOT``"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:58
msgid ""
"[CMake 2.8.10]: The CMake variable ``OSG_DIR`` can now be used as well to "
"influence detection, instead of needing to specify an environment variable."
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:62
msgid "This module defines the following output variables:"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:66
msgid ""
"OPENSCENEGRAPH_FOUND - Was the OSG and all of the specified components found?"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:72
msgid "OPENSCENEGRAPH_VERSION - The version of the OSG which was found"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:78
msgid "OPENSCENEGRAPH_INCLUDE_DIRS - Where to find the headers"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:84
msgid "OPENSCENEGRAPH_LIBRARIES - The OSG libraries"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:88
msgid "================================== Example Usage:"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:92
msgid ""
"find_package(OpenSceneGraph 2.0.0 REQUIRED osgDB osgUtil)\n"
"    # libOpenThreads & libosg automatically searched\n"
"include_directories(${OPENSCENEGRAPH_INCLUDE_DIRS})"
msgstr ""

#: ../../../../Modules/FindOpenSceneGraph.cmake:100
msgid ""
"add_executable(foo foo.cc)\n"
"target_link_libraries(foo ${OPENSCENEGRAPH_LIBRARIES})"
msgstr ""
