# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:2
msgid "INTERFACE_LINK_LIBRARIES_DIRECT"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:6
msgid ""
"List of libraries that consumers of this library should treat as direct link "
"dependencies."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:9
msgid ""
"This target property may be set to *include* items in a dependent target's "
"final set of direct link dependencies.  See the :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target property to exclude items."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:14
msgid ""
"The initial set of a dependent target's direct link dependencies is "
"specified by its :prop_tgt:`LINK_LIBRARIES` target property.  Indirect link "
"dependencies are specified by the transitive closure of the direct link "
"dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties. Any link "
"dependency may specify additional direct link dependencies using the "
"``INTERFACE_LINK_LIBRARIES_DIRECT`` target property. The set of direct link "
"dependencies is then filtered to exclude items named by any dependency's :"
"prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target property."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt:1
msgid ""
"The value of |INTERFACE_PROPERTY_LINK_DIRECT| may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt:6
msgid ""
"The |INTERFACE_PROPERTY_LINK_DIRECT| target property is intended for "
"advanced use cases such as injection of static plugins into a consuming "
"executable.  It should not be used as a substitute for organizing normal "
"calls to :command:`target_link_libraries`."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:28
msgid "Direct Link Dependencies as Usage Requirements"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:30
msgid ""
"The ``INTERFACE_LINK_LIBRARIES_DIRECT`` and "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target properties are :ref:"
"`usage requirements <Target Usage Requirements>`. Their effects propagate to "
"dependent targets transitively, and can therefore affect the direct link "
"dependencies of every target in a chain of dependent libraries.  Whenever "
"some library target ``X`` links to another library target ``Y`` whose direct "
"or transitive usage requirements contain ``INTERFACE_LINK_LIBRARIES_DIRECT`` "
"or ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, the properties may affect "
"``X``'s list of direct link dependencies:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:41
msgid ""
"If ``X`` is a shared library or executable, its dependencies are linked. "
"They also affect the usage requirements with which ``X``'s sources are "
"compiled."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:45
msgid ""
"If ``X`` is a static library or object library, it does not actually link, "
"so its dependencies at most affect the usage requirements with which ``X``'s "
"sources are compiled."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:49
msgid ""
"The properties may also affect the list of direct link dependencies on "
"``X``'s dependents:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:52
msgid "If ``X`` links ``Y`` publicly:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:54
msgid "target_link_libraries(X PUBLIC Y)"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:58
msgid ""
"then ``Y`` is placed in ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`, so "
"``Y``'s usage requirements, including ``INTERFACE_LINK_LIBRARIES_DIRECT``, "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, and the usage requirements "
"declared by the direct link dependencies they add, are propagated to ``X``'s "
"dependents."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:64
msgid ""
"If ``X`` is a static library or object library, and links ``Y`` privately:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:66
#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:81
msgid "target_link_libraries(X PRIVATE Y)"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:70
msgid ""
"then ``$<LINK_ONLY:Y>`` is placed in ``X``'s :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES`.  ``Y``'s linking requirements, including "
"``INTERFACE_LINK_LIBRARIES_DIRECT``, "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, and the transitive link "
"dependencies declared by the direct link dependencies they add, are "
"propagated to ``X``'s dependents.  However, ``Y``'s non-linking usage "
"requirements are blocked by the :genex:`LINK_ONLY` generator expression, and "
"are not propagated to ``X``'s dependents."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:79
msgid "If ``X`` is a shared library or executable, and links ``Y`` privately:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:85
msgid ""
"then ``Y`` is not placed in ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`, so "
"``Y``'s usage requirements, even ``INTERFACE_LINK_LIBRARIES_DIRECT`` and "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, are not propagated to ``X``'s "
"dependents."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:90
msgid ""
"In all cases, the content of ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES` is "
"not affected by ``Y``'s ``INTERFACE_LINK_LIBRARIES_DIRECT`` or "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:94
msgid ""
"One may limit the effects of ``INTERFACE_LINK_LIBRARIES_DIRECT`` and "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` to a subset of dependent targets "
"by using the :genex:`TARGET_PROPERTY` generator expression. For example, to "
"limit the effects to executable targets, use an entry of the form::"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:100
msgid "\"$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:...>\""
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:102
msgid ""
"Similarly, to limit the effects to specific targets, use an entry of the "
"form::"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:105
msgid "\"$<$<BOOL:$<TARGET_PROPERTY:USE_IT>>:...>\""
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:107
msgid ""
"This entry will only affect targets that set their ``USE_IT`` target "
"property to a true value."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:111
msgid "Direct Link Dependency Ordering"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:113
msgid ""
"The list of direct link dependencies for a target is computed from an "
"initial ordered list in its :prop_tgt:`LINK_LIBRARIES` target property. For "
"each item, additional direct link dependencies are discovered from its "
"direct and transitive ``INTERFACE_LINK_LIBRARIES_DIRECT`` usage "
"requirements.  Each discovered item is injected before the item that "
"specified it.  However, a discovered item is added at most once, and only if "
"it did not appear anywhere in the initial list. This gives :prop_tgt:"
"`LINK_LIBRARIES` control over ordering of those direct link dependencies "
"that it explicitly specifies."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:123
msgid ""
"Once all direct link dependencies have been collected, items named by all of "
"their :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` usage requirements "
"are removed from the final list.  This does not affect the order of the "
"items that remain."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:129
msgid "Example: Static Plugins"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:131
msgid ""
"Consider a static library ``Foo`` that provides a static plugin "
"``FooPlugin`` to consuming application executables, where the implementation "
"of the plugin depends on ``Foo`` and other things. In this case, the "
"application should link to ``FooPlugin`` directly, before ``Foo``.  However, "
"the application author only knows about ``Foo``. We can express this as "
"follows:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:138
msgid ""
"# Core library used by other components.\n"
"add_library(Core STATIC core.cpp)\n"
"\n"
"# Foo is a static library for use by applications.\n"
"# Implementation of Foo depends on Core.\n"
"add_library(Foo STATIC foo.cpp foo_plugin_helper.cpp)\n"
"target_link_libraries(Foo PRIVATE Core)\n"
"\n"
"# Extra parts of Foo for use by its static plugins.\n"
"# Implementation of Foo's extra parts depends on both Core and Foo.\n"
"add_library(FooExtras STATIC foo_extras.cpp)\n"
"target_link_libraries(FooExtras PRIVATE Core Foo)\n"
"\n"
"# The Foo library has an associated static plugin\n"
"# that should be linked into the final executable.\n"
"# Implementation of the plugin depends on Core, Foo, and FooExtras.\n"
"add_library(FooPlugin STATIC foo_plugin.cpp)\n"
"target_link_libraries(FooPlugin PRIVATE Core Foo FooExtras)\n"
"\n"
"# An app that links Foo should link Foo's plugin directly.\n"
"set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT FooPlugin)\n"
"\n"
"# An app does not need to link Foo directly because the plugin links it.\n"
"set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE Foo)"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:165
msgid "An application ``app`` only needs to specify that it links to ``Foo``:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:167
msgid ""
"add_executable(app main.cpp)\n"
"target_link_libraries(app PRIVATE Foo)"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:172
msgid ""
"The ``INTERFACE_LINK_LIBRARIES_DIRECT`` target property on ``Foo`` tells "
"CMake to pretend that ``app`` also links directly to ``FooPlugin``. The "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target property on ``Foo`` tells "
"CMake to pretend that ``app`` did *not* link directly to ``Foo``. Instead, "
"``Foo`` will be linked as a dependency of ``FooPlugin``.  The final link "
"line for ``app`` will link the libraries in the following order:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:180
#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:231
msgid ""
"``FooPlugin`` as a direct link dependency of ``app`` (via ``Foo``'s usage "
"requirements)."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:182
#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:234
msgid "``FooExtras`` as a dependency of ``FooPlugin``."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:183
msgid "``Foo`` as a dependency of ``FooPlugin`` and ``FooExtras``."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:184
#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:236
msgid "``Core`` as a dependency of ``FooPlugin``, ``FooExtras``, and ``Foo``."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:186
msgid ""
"Note that without the ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target "
"property, ``Foo`` would be linked twice: once as a direct dependency of "
"``app``, and once as a dependency of ``FooPlugin``."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:191
msgid "Example: Opt-In Static Plugins"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:193
msgid ""
"In the above `Example: Static Plugins`_, the ``app`` executable specifies "
"that it links directly to ``Foo``.  In a real application, there might be an "
"intermediate library:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:197
msgid ""
"add_library(app_impl STATIC app_impl.cpp)\n"
"target_link_libraries(app_impl PRIVATE Foo)\n"
"\n"
"add_executable(app main.cpp)\n"
"target_link_libraries(app PRIVATE app_impl)"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:205
msgid ""
"In this case we do not want ``Foo``'s ``INTERFACE_LINK_LIBRARIES_DIRECT`` "
"and ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target properties to affect "
"the direct dependencies of ``app_impl``.  To avoid this, we can revise the "
"property values to make their effects opt-in:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:210
msgid ""
"# An app that links Foo should link Foo's plugin directly.\n"
"set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT\n"
"  \"$<$<BOOL:$<TARGET_PROPERTY:FOO_STATIC_PLUGINS>>:FooPlugin>\"\n"
")\n"
"\n"
"# An app does not need to link Foo directly because the plugin links it.\n"
"set_property(TARGET Foo PROPERTY INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE\n"
"  \"$<$<BOOL:$<TARGET_PROPERTY:FOO_STATIC_PLUGINS>>:Foo>\"\n"
")"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:222
msgid "Now, the ``app`` executable can opt-in to get ``Foo``'s plugin(s):"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:224
msgid "set_property(TARGET app PROPERTY FOO_STATIC_PLUGINS 1)"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:228
msgid ""
"The final link line for ``app`` will now link the libraries in the following "
"order:"
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:233
msgid "``app_impl`` as a direct link dependency of ``app``."
msgstr ""

#: ../../../prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:235
msgid ""
"``Foo`` as a dependency of ``app_impl``, ``FooPlugin``, and ``FooExtras``."
msgstr ""
