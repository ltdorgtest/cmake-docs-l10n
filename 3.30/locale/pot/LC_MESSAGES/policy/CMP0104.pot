# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2024 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.30\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../policy/CMP0104.rst:2
msgid "CMP0104"
msgstr ""

#: ../../../policy/CMP0104.rst:6
msgid ""
"Initialize :variable:`CMAKE_CUDA_ARCHITECTURES` when :variable:"
"`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``. Raise an "
"error if :prop_tgt:`CUDA_ARCHITECTURES` is empty."
msgstr ""

#: ../../../policy/CMP0104.rst:10
msgid ""
":variable:`CMAKE_CUDA_ARCHITECTURES` introduced in CMake 3.18 is used to "
"initialize :prop_tgt:`CUDA_ARCHITECTURES`, which passes correct code "
"generation flags to the CUDA compiler."
msgstr ""

#: ../../../policy/CMP0104.rst:14
msgid ""
"Previous to this users had to manually specify the code generation flags. "
"This policy is for backwards compatibility with manually specifying code "
"generation flags."
msgstr ""

#: ../../../policy/CMP0104.rst:18
msgid ""
"The ``OLD`` behavior for this policy is to not initialize :variable:"
"`CMAKE_CUDA_ARCHITECTURES` when :variable:`CMAKE_CUDA_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA``. Empty :prop_tgt:"
"`CUDA_ARCHITECTURES` is allowed."
msgstr ""

#: ../../../policy/CMP0104.rst:23
msgid ""
"The ``NEW`` behavior of this policy is to initialize :variable:"
"`CMAKE_CUDA_ARCHITECTURES` when :variable:`CMAKE_CUDA_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` is ``NVIDIA`` and raise an error if :prop_tgt:"
"`CUDA_ARCHITECTURES` is empty during generation."
msgstr ""

#: ../../../policy/CMP0104.rst:28
msgid ""
"If :prop_tgt:`CUDA_ARCHITECTURES` is set to a false value no architectures "
"flags are passed to the compiler. This is intended to support packagers and "
"the rare cases where full control over the passed flags is required."
msgstr ""

#: ../../../policy/STANDARD_ADVICE.txt:1
msgid ""
"This policy was introduced in CMake version |INTRODUCED_IN_CMAKE_VERSION|. "
"It may be set by :command:`cmake_policy` or :command:"
"`cmake_minimum_required`. If it is not set, CMake |WARNS_OR_DOES_NOT_WARN|, "
"and uses ``OLD`` behavior."
msgstr ""

#: ../../../policy/DEPRECATED.txt:2
msgid ""
"The ``OLD`` behavior of a policy is :manual:`deprecated by definition <cmake-"
"policies(7)>` and may be removed in a future version of CMake."
msgstr ""

#: ../../../policy/CMP0104.rst:39
msgid "Examples"
msgstr ""

#: ../../../policy/CMP0104.rst:41
msgid "set_target_properties(tgt PROPERTIES CUDA_ARCHITECTURES \"35;50;72\")"
msgstr ""

#: ../../../policy/CMP0104.rst:45
msgid ""
"Generates code for real and virtual architectures ``30``, ``50`` and ``72``."
msgstr ""

#: ../../../policy/CMP0104.rst:47
msgid "set_property(TARGET tgt PROPERTY CUDA_ARCHITECTURES 70-real 72-virtual)"
msgstr ""

#: ../../../policy/CMP0104.rst:51
msgid ""
"Generates code for real architecture ``70`` and virtual architecture ``72``."
msgstr ""

#: ../../../policy/CMP0104.rst:53
msgid "set_property(TARGET tgt PROPERTY CUDA_ARCHITECTURES OFF)"
msgstr ""

#: ../../../policy/CMP0104.rst:57
msgid "CMake will not pass any architecture flags to the compiler."
msgstr ""
