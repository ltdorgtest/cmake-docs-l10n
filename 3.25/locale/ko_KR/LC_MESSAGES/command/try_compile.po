# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.25\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/try_compile.rst:2
msgid "try_compile"
msgstr ""

#: ../../../command/try_compile.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/try_compile.rst:8
msgid "Try building some code."
msgstr ""

#: ../../../command/try_compile.rst:13
msgid "Try Compiling Whole Projects"
msgstr ""

#: ../../../command/try_compile.rst:15
msgid ""
"try_compile(<resultVar> PROJECT <projectName>\n"
"            SOURCE_DIR <srcdir>\n"
"            [BINARY_DIR <bindir>]\n"
"            [TARGET <targetName>]\n"
"            [NO_CACHE]\n"
"            [CMAKE_FLAGS <flags>...]\n"
"            [OUTPUT_VARIABLE <var>])"
msgstr ""

#: ../../../command/try_compile.rst:27
msgid ""
"Try building a project.  The success or failure of the ``try_compile``, i.e. "
"``TRUE`` or ``FALSE`` respectively, is returned in ``<resultVar>``."
msgstr ""

#: ../../../command/try_compile.rst:30
msgid ""
"In this form, ``<srcdir>`` should contain a complete CMake project with a "
"``CMakeLists.txt`` file and all sources.  The ``<bindir>`` and ``<srcdir>`` "
"will not be deleted after this command is run.  Specify ``<targetName>`` to "
"build a specific target instead of the ``all`` or ``ALL_BUILD`` target.  See "
"below for the meaning of other options."
msgstr ""

#: ../../../command/try_compile.rst:36
msgid ""
"CMake variables describing platform settings, and those listed by the :"
"variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable, are propagated "
"into the project's build configuration.  See policy :policy:`CMP0137`. "
"Previously this was only done by the :ref:`source file <Try Compiling Source "
"Files>` signature."
msgstr ""

#: ../../../command/try_compile.rst:43 ../../../command/try_compile.rst:112
msgid ""
"This command also supports an alternate signature which was present in older "
"versions of CMake:"
msgstr ""

#: ../../../command/try_compile.rst:46
msgid ""
"try_compile(<resultVar> <bindir> <srcdir>\n"
"            <projectName> [<targetName>]\n"
"            [NO_CACHE]\n"
"            [CMAKE_FLAGS <flags>...]\n"
"            [OUTPUT_VARIABLE <var>])"
msgstr ""

#: ../../../command/try_compile.rst:57
msgid "Try Compiling Source Files"
msgstr ""

#: ../../../command/try_compile.rst:59
msgid ""
"try_compile(<resultVar>\n"
"            <SOURCES <srcfile...>                 |\n"
"             SOURCE_FROM_CONTENT <name> <content> |\n"
"             SOURCE_FROM_VAR <name> <var>         |\n"
"             SOURCE_FROM_FILE <name> <path>       >...\n"
"            [NO_CACHE]\n"
"            [CMAKE_FLAGS <flags>...]\n"
"            [COMPILE_DEFINITIONS <defs>...]\n"
"            [LINK_OPTIONS <options>...]\n"
"            [LINK_LIBRARIES <libs>...]\n"
"            [OUTPUT_VARIABLE <var>]\n"
"            [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]\n"
"            [<LANG>_STANDARD <std>]\n"
"            [<LANG>_STANDARD_REQUIRED <bool>]\n"
"            [<LANG>_EXTENSIONS <bool>]\n"
"            )"
msgstr ""

#: ../../../command/try_compile.rst:80
msgid ""
"Try building an executable or static library from one or more source files "
"(which one is determined by the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` "
"variable).  The success or failure of the ``try_compile``, i.e. ``TRUE`` or "
"``FALSE`` respectively, is returned in ``<resultVar>``."
msgstr ""

#: ../../../command/try_compile.rst:85
msgid ""
"In this form, one or more source files must be provided. Additionally, one "
"of ``SOURCES`` and/or ``SOURCE_FROM_*`` must precede other keywords."
msgstr ""

#: ../../../command/try_compile.rst:88
msgid ""
"If :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` is unset or is set to "
"``EXECUTABLE``, the sources must include a definition for ``main`` and CMake "
"will create a ``CMakeLists.txt`` file to build the source(s) as an "
"executable. If :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` is set to "
"``STATIC_LIBRARY``, a static library will be built instead and no definition "
"for ``main`` is required.  For an executable, the generated ``CMakeLists."
"txt`` file would contain something like the following:"
msgstr ""

#: ../../../command/try_compile.rst:96
msgid ""
"add_definitions(<expanded COMPILE_DEFINITIONS from caller>)\n"
"include_directories(${INCLUDE_DIRECTORIES})\n"
"link_directories(${LINK_DIRECTORIES})\n"
"add_executable(cmTryCompileExec <srcfile>...)\n"
"target_link_options(cmTryCompileExec PRIVATE <LINK_OPTIONS from caller>)\n"
"target_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})"
msgstr ""

#: ../../../command/try_compile.rst:105
msgid ""
"CMake automatically generates, for each ``try_compile`` operation, a unique "
"directory under ``${CMAKE_BINARY_DIR}/CMakeFiles/CMakeScratch`` with an "
"unspecified name.  These directories are cleaned automatically unless :"
"option:`--debug-trycompile <cmake --debug-trycompile>` is passed to "
"``cmake``. Such directories from previous runs are also unconditionally "
"cleaned at the beginning of any ``cmake`` execution."
msgstr ""

#: ../../../command/try_compile.rst:115
msgid ""
"try_compile(<resultVar> <bindir> <srcfile|SOURCES srcfile...>\n"
"            [NO_CACHE]\n"
"            [CMAKE_FLAGS <flags>...]\n"
"            [COMPILE_DEFINITIONS <defs>...]\n"
"            [LINK_OPTIONS <options>...]\n"
"            [LINK_LIBRARIES <libs>...]\n"
"            [OUTPUT_VARIABLE <var>]\n"
"            [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]\n"
"            [<LANG>_STANDARD <std>]\n"
"            [<LANG>_STANDARD_REQUIRED <bool>]\n"
"            [<LANG>_EXTENSIONS <bool>]\n"
"            )"
msgstr ""

#: ../../../command/try_compile.rst:130
msgid ""
"In this version, ``try_compile`` will use ``<bindir>/CMakeFiles/CMakeTmp`` "
"for its operation, and all such files will be cleaned automatically. For "
"debugging, :option:`--debug-trycompile <cmake --debug-trycompile>` can be "
"passed to ``cmake`` to avoid this clean.  However, multiple sequential "
"``try_compile`` operations, if given the same ``<bindir>``, will reuse this "
"single output directory, such that you can only debug one such "
"``try_compile`` call at a time.  Use of the newer signature is recommended "
"to simplify debugging of multiple ``try_compile`` operations."
msgstr ""

#: ../../../command/try_compile.rst:139
msgid "The options are:"
msgstr ""

#: ../../../command/try_compile.rst:141
msgid "``CMAKE_FLAGS <flags>...``"
msgstr ""

#: ../../../command/try_compile.rst:142
msgid ""
"Specify flags of the form :option:`-DVAR:TYPE=VALUE <cmake -D>` to be passed "
"to the :manual:`cmake(1)` command-line used to drive the test build. The "
"above example shows how values for variables ``INCLUDE_DIRECTORIES``, "
"``LINK_DIRECTORIES``, and ``LINK_LIBRARIES`` are used."
msgstr ""

#: ../../../command/try_compile.rst:148
msgid "``COMPILE_DEFINITIONS <defs>...``"
msgstr ""

#: ../../../command/try_compile.rst:149
msgid ""
"Specify ``-Ddefinition`` arguments to pass to :command:`add_definitions` in "
"the generated test project."
msgstr ""

#: ../../../command/try_compile.rst:152
msgid "``COPY_FILE <fileName>``"
msgstr ""

#: ../../../command/try_compile.rst:153
msgid ""
"Copy the built executable or static library to the given ``<fileName>``."
msgstr ""

#: ../../../command/try_compile.rst:155
msgid "``COPY_FILE_ERROR <var>``"
msgstr ""

#: ../../../command/try_compile.rst:156
msgid ""
"Use after ``COPY_FILE`` to capture into variable ``<var>`` any error message "
"encountered while trying to copy the file."
msgstr ""

#: ../../../command/try_compile.rst:159
msgid "``LINK_LIBRARIES <libs>...``"
msgstr ""

#: ../../../command/try_compile.rst:160
msgid ""
"Specify libraries to be linked in the generated project. The list of "
"libraries may refer to system libraries and to :ref:`Imported Targets "
"<Imported Targets>` from the calling project."
msgstr ""

#: ../../../command/try_compile.rst:164
msgid ""
"If this option is specified, any ``-DLINK_LIBRARIES=...`` value given to the "
"``CMAKE_FLAGS`` option will be ignored."
msgstr ""

#: ../../../command/try_compile.rst:167
msgid "``LINK_OPTIONS <options>...``"
msgstr ""

#: ../../../command/try_compile.rst:170
msgid ""
"Specify link step options to pass to :command:`target_link_options` or to "
"set the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property in the generated "
"project, depending on the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable."
msgstr ""

#: ../../../command/try_compile.rst:174
msgid "``NO_CACHE``"
msgstr ""

#: ../../../command/try_compile.rst:177
msgid ""
"The result will be stored in a normal variable rather than a cache entry."
msgstr ""

#: ../../../command/try_compile.rst:179
msgid ""
"The result variable is normally cached so that a simple pattern can be used "
"to avoid repeating the test on subsequent executions of CMake:"
msgstr ""

#: ../../../command/try_compile.rst:182
msgid ""
"if(NOT DEFINED RESULTVAR)\n"
"  # ...(check-specific setup code)...\n"
"  try_compile(RESULTVAR ...)\n"
"  # ...(check-specific logging and cleanup code)...\n"
"endif()"
msgstr ""

#: ../../../command/try_compile.rst:190
msgid ""
"If the guard variable and result variable are not the same (for example, if "
"the test is part of a larger inspection), ``NO_CACHE`` may be useful to "
"avoid leaking the intermediate result variable into the cache."
msgstr ""

#: ../../../command/try_compile.rst:194
msgid "``OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_compile.rst:195
msgid "Store the output from the build process in the given variable."
msgstr ""

#: ../../../command/try_compile.rst:197
msgid "``SOURCE_FROM_CONTENT <name> <content>``"
msgstr ""

#: ../../../command/try_compile.rst:200
msgid ""
"Write ``<content>`` to a file named ``<name>`` in the operation directory. "
"This can be used to bypass the need to separately write a source file when "
"the contents of the file are dynamically specified. The specified ``<name>`` "
"is not allowed to contain path components."
msgstr ""

#: ../../../command/try_compile.rst:205
msgid "``SOURCE_FROM_CONTENT`` may be specified multiple times."
msgstr ""

#: ../../../command/try_compile.rst:207
msgid "``SOURCE_FROM_FILE <name> <path>``"
msgstr ""

#: ../../../command/try_compile.rst:210
msgid ""
"Copy ``<path>`` to a file named ``<name>`` in the operation directory. This "
"can be used to consolidate files into the operation directory, which may be "
"useful if a source which already exists (i.e. as a stand-alone file in a "
"project's source repository) needs to refer to other file(s) created by "
"``SOURCE_FROM_*``. (Otherwise, ``SOURCES`` is usually more convenient.) The "
"specified ``<name>`` is not allowed to contain path components."
msgstr ""

#: ../../../command/try_compile.rst:217
msgid "``SOURCE_FROM_VAR <name> <var>``"
msgstr ""

#: ../../../command/try_compile.rst:220
msgid ""
"Write the contents of ``<var>`` to a file named ``<name>`` in the operation "
"directory. This is the same as ``SOURCE_FROM_CONTENT``, but takes the "
"contents from the specified CMake variable, rather than directly, which may "
"be useful when passing arguments through a function which wraps "
"``try_compile``. The specified ``<name>`` is not allowed to contain path "
"components."
msgstr ""

#: ../../../command/try_compile.rst:227
msgid "``SOURCE_FROM_VAR`` may be specified multiple times."
msgstr ""

#: ../../../command/try_compile.rst:229
msgid "``<LANG>_STANDARD <std>``"
msgstr ""

#: ../../../command/try_compile.rst:232
msgid ""
"Specify the :prop_tgt:`C_STANDARD`, :prop_tgt:`CXX_STANDARD`, :prop_tgt:"
"`OBJC_STANDARD`, :prop_tgt:`OBJCXX_STANDARD`, or :prop_tgt:`CUDA_STANDARD` "
"target property of the generated project."
msgstr ""

#: ../../../command/try_compile.rst:236
msgid "``<LANG>_STANDARD_REQUIRED <bool>``"
msgstr ""

#: ../../../command/try_compile.rst:239
msgid ""
"Specify the :prop_tgt:`C_STANDARD_REQUIRED`, :prop_tgt:"
"`CXX_STANDARD_REQUIRED`, :prop_tgt:`OBJC_STANDARD_REQUIRED`, :prop_tgt:"
"`OBJCXX_STANDARD_REQUIRED`,or :prop_tgt:`CUDA_STANDARD_REQUIRED` target "
"property of the generated project."
msgstr ""

#: ../../../command/try_compile.rst:244
msgid "``<LANG>_EXTENSIONS <bool>``"
msgstr ""

#: ../../../command/try_compile.rst:247
msgid ""
"Specify the :prop_tgt:`C_EXTENSIONS`, :prop_tgt:`CXX_EXTENSIONS`, :prop_tgt:"
"`OBJC_EXTENSIONS`, :prop_tgt:`OBJCXX_EXTENSIONS`, or :prop_tgt:"
"`CUDA_EXTENSIONS` target property of the generated project."
msgstr ""

#: ../../../command/try_compile.rst:252
msgid "Other Behavior Settings"
msgstr ""

#: ../../../command/try_compile.rst:254
msgid ""
"If set, the following variables are passed in to the generated try_compile "
"CMakeLists.txt to initialize compile target properties with default values:"
msgstr ""

#: ../../../command/try_compile.rst:259
msgid ":variable:`CMAKE_CUDA_RUNTIME_LIBRARY`"
msgstr ""

#: ../../../command/try_compile.rst:260
msgid ":variable:`CMAKE_ENABLE_EXPORTS`"
msgstr ""

#: ../../../command/try_compile.rst:261
msgid ":variable:`CMAKE_LINK_SEARCH_START_STATIC`"
msgstr ""

#: ../../../command/try_compile.rst:262
msgid ":variable:`CMAKE_LINK_SEARCH_END_STATIC`"
msgstr ""

#: ../../../command/try_compile.rst:263
msgid ":variable:`CMAKE_MSVC_RUNTIME_LIBRARY`"
msgstr ""

#: ../../../command/try_compile.rst:264
msgid ":variable:`CMAKE_POSITION_INDEPENDENT_CODE`"
msgstr ""

#: ../../../command/try_compile.rst:265
msgid ":variable:`CMAKE_WATCOM_RUNTIME_LIBRARY`"
msgstr ""

#: ../../../command/try_compile.rst:267
msgid ""
"If :policy:`CMP0056` is set to ``NEW``, then :variable:"
"`CMAKE_EXE_LINKER_FLAGS` is passed in as well."
msgstr ""

#: ../../../command/try_compile.rst:270
msgid ""
"If :policy:`CMP0083` is set to ``NEW``, then in order to obtain correct "
"behavior at link time, the ``check_pie_supported()`` command from the :"
"module:`CheckPIESupported` module must be called before using the :command:"
"`try_compile` command."
msgstr ""

#: ../../../command/try_compile.rst:276
msgid ""
"The current settings of :policy:`CMP0065` and :policy:`CMP0083` are "
"propagated through to the generated test project."
msgstr ""

#: ../../../command/try_compile.rst:279
msgid ""
"Set the :variable:`CMAKE_TRY_COMPILE_CONFIGURATION` variable to choose a "
"build configuration."
msgstr ""

#: ../../../command/try_compile.rst:282
msgid ""
"Set the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable to specify the "
"type of target used for the source file signature."
msgstr ""

#: ../../../command/try_compile.rst:286
msgid ""
"Set the :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable to specify "
"variables that must be propagated into the test project.  This variable is "
"meant for use only in toolchain files and is only honored by the "
"``try_compile()`` command for the source files form, not when given a whole "
"project."
msgstr ""

#: ../../../command/try_compile.rst:293
msgid ""
"If :policy:`CMP0067` is set to ``NEW``, or any of the ``<LANG>_STANDARD``, "
"``<LANG>_STANDARD_REQUIRED``, or ``<LANG>_EXTENSIONS`` options are used, "
"then the language standard variables are honored:"
msgstr ""

#: ../../../command/try_compile.rst:298
msgid ":variable:`CMAKE_C_STANDARD`"
msgstr ""

#: ../../../command/try_compile.rst:299
msgid ":variable:`CMAKE_C_STANDARD_REQUIRED`"
msgstr ""

#: ../../../command/try_compile.rst:300
msgid ":variable:`CMAKE_C_EXTENSIONS`"
msgstr ""

#: ../../../command/try_compile.rst:301
msgid ":variable:`CMAKE_CXX_STANDARD`"
msgstr ""

#: ../../../command/try_compile.rst:302
msgid ":variable:`CMAKE_CXX_STANDARD_REQUIRED`"
msgstr ""

#: ../../../command/try_compile.rst:303
msgid ":variable:`CMAKE_CXX_EXTENSIONS`"
msgstr ""

#: ../../../command/try_compile.rst:304
msgid ":variable:`CMAKE_OBJC_STANDARD`"
msgstr ""

#: ../../../command/try_compile.rst:305
msgid ":variable:`CMAKE_OBJC_STANDARD_REQUIRED`"
msgstr ""

#: ../../../command/try_compile.rst:306
msgid ":variable:`CMAKE_OBJC_EXTENSIONS`"
msgstr ""

#: ../../../command/try_compile.rst:307
msgid ":variable:`CMAKE_OBJCXX_STANDARD`"
msgstr ""

#: ../../../command/try_compile.rst:308
msgid ":variable:`CMAKE_OBJCXX_STANDARD_REQUIRED`"
msgstr ""

#: ../../../command/try_compile.rst:309
msgid ":variable:`CMAKE_OBJCXX_EXTENSIONS`"
msgstr ""

#: ../../../command/try_compile.rst:310
msgid ":variable:`CMAKE_CUDA_STANDARD`"
msgstr ""

#: ../../../command/try_compile.rst:311
msgid ":variable:`CMAKE_CUDA_STANDARD_REQUIRED`"
msgstr ""

#: ../../../command/try_compile.rst:312
msgid ":variable:`CMAKE_CUDA_EXTENSIONS`"
msgstr ""

#: ../../../command/try_compile.rst:314
msgid ""
"Their values are used to set the corresponding target properties in the "
"generated project (unless overridden by an explicit option)."
msgstr ""

#: ../../../command/try_compile.rst:317
msgid ""
"For the :generator:`Green Hills MULTI` generator, the GHS toolset and target "
"system customization cache variables are also propagated into the test "
"project."
msgstr ""

#: ../../../command/try_compile.rst:322
msgid ""
"The :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable may be set "
"to disable passing platform variables into the test project."
msgstr ""

#: ../../../command/try_compile.rst:326
msgid ""
"If :policy:`CMP0141` is set to ``NEW``, one can use :variable:"
"`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` to specify the MSVC debug information "
"format."
msgstr ""
