# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.25\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:6
msgid "FindPackageHandleStandardArgs"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:8
msgid ""
"This module provides functions intended to be used in :ref:`Find Modules` "
"implementing :command:`find_package(<PackageName>)` calls."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:13
msgid ""
"This command handles the ``REQUIRED``, ``QUIET`` and version-related "
"arguments of :command:`find_package`.  It also sets the "
"``<PackageName>_FOUND`` variable.  The package is considered found if all "
"variables listed contain valid results, e.g. valid filepaths."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:18
msgid "There are two signatures:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:20
msgid ""
"find_package_handle_standard_args(<PackageName>\n"
"  (DEFAULT_MSG|<custom-failure-message>)\n"
"  <required-var>...\n"
"  )\n"
"\n"
"find_package_handle_standard_args(<PackageName>\n"
"  [FOUND_VAR <result-var>]\n"
"  [REQUIRED_VARS <required-var>...]\n"
"  [VERSION_VAR <version-var>]\n"
"  [HANDLE_VERSION_RANGE]\n"
"  [HANDLE_COMPONENTS]\n"
"  [CONFIG_MODE]\n"
"  [NAME_MISMATCHED]\n"
"  [REASON_FAILURE_MESSAGE <reason-failure-message>]\n"
"  [FAIL_MESSAGE <custom-failure-message>]\n"
"  )"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:39
msgid ""
"The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all the "
"variables ``<required-var>...`` are valid and any optional constraints are "
"satisfied, and ``FALSE`` otherwise.  A success or failure message may be "
"displayed based on the results and on whether the ``REQUIRED`` and/or "
"``QUIET`` option was given to the :command:`find_package` call."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:46
#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:190
msgid "The options are:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:48
msgid "``(DEFAULT_MSG|<custom-failure-message>)``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:49
msgid ""
"In the simple signature this specifies the failure message. Use "
"``DEFAULT_MSG`` to ask for a default message to be computed (recommended).  "
"Not valid in the full signature."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:53
msgid "``FOUND_VAR <result-var>``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:56
msgid ""
"Specifies either ``<PackageName>_FOUND`` or ``<PACKAGENAME>_FOUND`` as the "
"result variable.  This exists only for compatibility with older versions of "
"CMake and is now ignored. Result variables of both names are always set for "
"compatibility."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:61
msgid "``REQUIRED_VARS <required-var>...``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:62
msgid ""
"Specify the variables which are required for this package. These may be "
"named in the generated failure message asking the user to set the missing "
"variable values.  Therefore these should typically be cache entries such as "
"``FOO_LIBRARY`` and not output variables like ``FOO_LIBRARIES``."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:68
msgid "If ``HANDLE_COMPONENTS`` is specified, this option can be omitted."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:71
msgid "``VERSION_VAR <version-var>``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:72
msgid ""
"Specify the name of a variable that holds the version of the package that "
"has been found.  This version will be checked against the (potentially) "
"specified required version given to the :command:`find_package` call, "
"including its ``EXACT`` option. The default messages include information "
"about the required version and the version which has been actually found, "
"both if the version is ok or not."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:80
#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:192
msgid "``HANDLE_VERSION_RANGE``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:83
#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:193
msgid ""
"Enable handling of a version range, if one is specified. Without this "
"option, a developer warning will be displayed if a version range is "
"specified."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:87
msgid "``HANDLE_COMPONENTS``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:88
msgid ""
"Enable handling of package components.  In this case, the command will "
"report which components have been found and which are missing, and the "
"``<PackageName>_FOUND`` variable will be set to ``FALSE`` if any of the "
"required components (i.e. not the ones listed after the "
"``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are missing."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:95
msgid "``CONFIG_MODE``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:96
msgid ""
"Specify that the calling find module is a wrapper around a call to "
"``find_package(<PackageName> NO_MODULE)``.  This implies a ``VERSION_VAR`` "
"value of ``<PackageName>_VERSION``.  The command will automatically check "
"whether the package configuration file was found."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:102
msgid "``REASON_FAILURE_MESSAGE <reason-failure-message>``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:105
msgid ""
"Specify a custom message of the reason for the failure which will be "
"appended to the default generated message."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:108
msgid "``FAIL_MESSAGE <custom-failure-message>``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:109
msgid ""
"Specify a custom failure message instead of using the default generated "
"message.  Not recommended."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:112
msgid "``NAME_MISMATCHED``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:115
msgid ""
"Indicate that the ``<PackageName>`` does not match "
"``${CMAKE_FIND_PACKAGE_NAME}``. This is usually a mistake and raises a "
"warning, but it may be intentional for usage of the command for components "
"of a larger package."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:120
msgid "Example for the simple signature:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:122
msgid ""
"find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n"
"  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:127
msgid ""
"The ``LibXml2`` package is considered to be found if both "
"``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid. Then also "
"``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found and ``REQUIRED`` "
"was used, it fails with a :command:`message(FATAL_ERROR)`, independent "
"whether ``QUIET`` was used or not.  If it is found, success will be "
"reported, including the content of the first ``<required-var>``.  On "
"repeated CMake runs, the same message will not be printed again."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:138
msgid ""
"If ``<PackageName>`` does not match ``CMAKE_FIND_PACKAGE_NAME`` for the "
"calling module, a warning that there is a mismatch is given. The "
"``FPHSA_NAME_MISMATCHED`` variable may be set to bypass the warning if using "
"the old signature and the ``NAME_MISMATCHED`` argument using the new "
"signature. To avoid forcing the caller to require newer versions of CMake "
"for usage, the variable's value will be used if defined when the "
"``NAME_MISMATCHED`` argument is not passed for the new signature (but using "
"both is an error).."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:147
msgid "Example for the full signature:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:149
msgid ""
"find_package_handle_standard_args(LibArchive\n"
"  REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n"
"  VERSION_VAR LibArchive_VERSION)"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:155
msgid ""
"In this case, the ``LibArchive`` package is considered to be found if both "
"``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid. Also the "
"version of ``LibArchive`` will be checked by using the version contained in "
"``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given, the default "
"messages will be printed."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:161
msgid "Another example for the full signature:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:163
msgid ""
"find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n"
"find_package_handle_standard_args(Automoc4  CONFIG_MODE)"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:168
msgid ""
"In this case, a ``FindAutmoc4.cmake`` module wraps a call to "
"``find_package(Automoc4 NO_MODULE)`` and adds an additional search directory "
"for ``automoc4``.  Then the call to ``find_package_handle_standard_args`` "
"produces a proper success/failure message."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:178
msgid ""
"Helper function which can be used to check if a ``<version>`` is valid "
"against version-related arguments of :command:`find_package`."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:181
msgid ""
"find_package_check_version(<version> <result-var>\n"
"  [HANDLE_VERSION_RANGE]\n"
"  [RESULT_MESSAGE_VARIABLE <message-var>]\n"
"  )"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:188
msgid ""
"The ``<result-var>`` will hold a boolean value giving the result of the "
"check."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:197
msgid "``RESULT_MESSAGE_VARIABLE <message-var>``"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:198
msgid ""
"Specify a variable to get back a message describing the result of the check."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:200
msgid "Example for the usage:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:202
msgid ""
"find_package_check_version(1.2.3 result HANDLE_VERSION_RANGE\n"
"  RESULT_MESSAGE_VARIABLE reason)\n"
"if (result)\n"
"  message (STATUS \"${reason}\")\n"
"else()\n"
"  message (FATAL_ERROR \"${reason}\")\n"
"endif()"
msgstr ""
