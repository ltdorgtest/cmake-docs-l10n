# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2022 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.25\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:2
msgid "Step 10: Selecting Static or Shared Libraries"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:4
msgid ""
"In this section we will show how the :variable:`BUILD_SHARED_LIBS` variable "
"can be used to control the default behavior of :command:`add_library`, and "
"allow control over how libraries without an explicit type (``STATIC``, "
"``SHARED``, ``MODULE`` or ``OBJECT``) are built."
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:9
msgid ""
"To accomplish this we need to add :variable:`BUILD_SHARED_LIBS` to the top-"
"level ``CMakeLists.txt``. We use the :command:`option` command as it allows "
"users to optionally select if the value should be ``ON`` or ``OFF``."
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:13
msgid ""
"Next we are going to refactor ``MathFunctions`` to become a real library "
"that encapsulates using ``mysqrt`` or ``sqrt``, instead of requiring the "
"calling code to do this logic. This will also mean that ``USE_MYMATH`` will "
"not control building ``MathFunctions``, but instead will control the "
"behavior of this library."
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:19
msgid ""
"The first step is to update the starting section of the top-level "
"``CMakeLists.txt`` to look like:"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:22
msgid "CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:22
msgid ""
"cmake_minimum_required(VERSION 3.15)\n"
"\n"
"# set the project name and version\n"
"project(Tutorial VERSION 1.0)\n"
"\n"
"# specify the C++ standard\n"
"add_library(tutorial_compiler_flags INTERFACE)\n"
"target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)\n"
"\n"
"# add compiler warning flags just when building this project via\n"
"# the BUILD_INTERFACE genex\n"
"set(gcc_like_cxx \"$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,"
"LCC>\")\n"
"set(msvc_cxx \"$<COMPILE_LANG_AND_ID:CXX,MSVC>\")\n"
"target_compile_options(tutorial_compiler_flags INTERFACE\n"
"  \"$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-"
"Wunused>>\"\n"
"  \"$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>\"\n"
")\n"
"\n"
"# control where the static and shared libraries are built so that on "
"windows\n"
"# we don't need to tinker with the path to run the executable\n"
"set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}\")\n"
"set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}\")\n"
"set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}\")\n"
"\n"
"option(BUILD_SHARED_LIBS \"Build using shared libraries\" ON)\n"
"\n"
"# configure a header file to pass the version number only\n"
"configure_file(TutorialConfig.h.in TutorialConfig.h)\n"
"\n"
"# add the MathFunctions library\n"
"add_subdirectory(MathFunctions)\n"
"\n"
"# add the executable\n"
"add_executable(Tutorial tutorial.cxx)\n"
"target_link_libraries(Tutorial PUBLIC MathFunctions "
"tutorial_compiler_flags)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:28
msgid ""
"Now that we have made ``MathFunctions`` always be used, we will need to "
"update the logic of that library. So, in ``MathFunctions/CMakeLists.txt`` we "
"need to create a SqrtLibrary that will conditionally be built and installed "
"when ``USE_MYMATH`` is enabled. Now, since this is a tutorial, we are going "
"to explicitly require that SqrtLibrary is built statically."
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:34
msgid ""
"The end result is that ``MathFunctions/CMakeLists.txt`` should look like:"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:36
#: Libraries.rst:70
msgid "MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:36
msgid ""
"# add the library that runs\n"
"add_library(MathFunctions MathFunctions.cxx)\n"
"\n"
"# state that anybody linking to us needs to include the current source dir\n"
"# to find MathFunctions.h, while we don't.\n"
"target_include_directories(MathFunctions\n"
"                           INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}\n"
"                           )\n"
"\n"
"# should we use our own math functions\n"
"option(USE_MYMATH \"Use tutorial provided math implementation\" ON)\n"
"if(USE_MYMATH)\n"
"\n"
"  target_compile_definitions(MathFunctions PRIVATE \"USE_MYMATH\")\n"
"\n"
"  # first we add the executable that generates the table\n"
"  add_executable(MakeTable MakeTable.cxx)\n"
"  target_link_libraries(MakeTable PRIVATE tutorial_compiler_flags)\n"
"\n"
"  # add the command to generate the source code\n"
"  add_custom_command(\n"
"    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h\n"
"    COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h\n"
"    DEPENDS MakeTable\n"
"    )\n"
"\n"
"  # library that just does sqrt\n"
"  add_library(SqrtLibrary STATIC\n"
"              mysqrt.cxx\n"
"              ${CMAKE_CURRENT_BINARY_DIR}/Table.h\n"
"              )\n"
"\n"
"  # state that we depend on our binary dir to find Table.h\n"
"  target_include_directories(SqrtLibrary PRIVATE\n"
"                             ${CMAKE_CURRENT_BINARY_DIR}\n"
"                             )\n"
"\n"
"  target_link_libraries(SqrtLibrary PUBLIC tutorial_compiler_flags)\n"
"  target_link_libraries(MathFunctions PRIVATE SqrtLibrary)\n"
"endif()\n"
"\n"
"target_link_libraries(MathFunctions PUBLIC tutorial_compiler_flags)\n"
"\n"
"# define the symbol stating we are using the declspec(dllexport) when\n"
"# building on windows\n"
"target_compile_definitions(MathFunctions PRIVATE \"EXPORTING_MYMATH\")\n"
"\n"
"# install libs\n"
"set(installable_libs MathFunctions tutorial_compiler_flags)\n"
"if(TARGET SqrtLibrary)\n"
"  list(APPEND installable_libs SqrtLibrary)\n"
"endif()\n"
"install(TARGETS ${installable_libs} DESTINATION lib)\n"
"# install include headers\n"
"install(FILES MathFunctions.h DESTINATION include)\n"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:42
msgid ""
"Next, update ``MathFunctions/mysqrt.cxx`` to use the ``mathfunctions`` and "
"``detail`` namespaces:"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:45
msgid "MathFunctions/mysqrt.cxx"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:45
msgid ""
"#include <iostream>\n"
"\n"
"#include \"MathFunctions.h\"\n"
"\n"
"// include the generated table\n"
"#include \"Table.h\"\n"
"\n"
"namespace mathfunctions {\n"
"namespace detail {\n"
"// a hack square root calculation using simple operations\n"
"double mysqrt(double x)\n"
"{\n"
"  if (x <= 0) {\n"
"    return 0;\n"
"  }\n"
"\n"
"  // use the table to help find an initial value\n"
"  double result = x;\n"
"  if (x >= 1 && x < 10) {\n"
"    std::cout << \"Use the table to help find an initial value \" << std::"
"endl;\n"
"    result = sqrtTable[static_cast<int>(x)];\n"
"  }\n"
"\n"
"  // do ten iterations\n"
"  for (int i = 0; i < 10; ++i) {\n"
"    if (result <= 0) {\n"
"      result = 0.1;\n"
"    }\n"
"    double delta = x - (result * result);\n"
"    result = result + 0.5 * delta / result;\n"
"    std::cout << \"Computing sqrt of \" << x << \" to be \" << result << "
"std::endl;\n"
"  }\n"
"\n"
"  return result;\n"
"}\n"
"}\n"
"}\n"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:50
msgid ""
"We also need to make some changes in ``tutorial.cxx``, so that it no longer "
"uses ``USE_MYMATH``:"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:53
msgid "Always include ``MathFunctions.h``"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:54
msgid "Always use ``mathfunctions::sqrt``"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:55
msgid "Don't include ``cmath``"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:57
msgid ""
"Finally, update ``MathFunctions/MathFunctions.h`` to use dll export defines:"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:59
msgid "MathFunctions/MathFunctions.h"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:59
msgid ""
"\n"
"#if defined(_WIN32)\n"
"#  if defined(EXPORTING_MYMATH)\n"
"#    define DECLSPEC __declspec(dllexport)\n"
"#  else\n"
"#    define DECLSPEC __declspec(dllimport)\n"
"#  endif\n"
"#else // non windows\n"
"#  define DECLSPEC\n"
"#endif\n"
"\n"
"namespace mathfunctions {\n"
"double DECLSPEC sqrt(double x);\n"
"}\n"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:64
msgid ""
"At this point, if you build everything, you may notice that linking fails as "
"we are combining a static library without position independent code with a "
"library that has position independent code. The solution to this is to "
"explicitly set the :prop_tgt:`POSITION_INDEPENDENT_CODE` target property of "
"SqrtLibrary to be ``True`` no matter the build type."
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:70
msgid ""
"\n"
"  # state that SqrtLibrary need PIC when the default is shared libraries\n"
"  set_target_properties(SqrtLibrary PROPERTIES\n"
"                        POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS}\n"
"                        )\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Selecting Static or Shared Libraries.rst:76
msgid ""
"**Exercise**: We modified ``MathFunctions.h`` to use dll export defines. "
"Using CMake documentation can you find a helper module to simplify this?"
msgstr ""
