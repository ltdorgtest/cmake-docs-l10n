# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-buildsystem.7.rst:4
msgid "cmake-buildsystem(7)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:7
msgid "Contents"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:13
msgid ""
"A CMake-based buildsystem is organized as a set of high-level logical "
"targets.  Each target corresponds to an executable or library, or is a "
"custom target containing custom commands.  Dependencies between the targets "
"are expressed in the buildsystem to determine the build order and the rules "
"for regeneration in response to change."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:20
msgid "Binary Targets"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:22
msgid ""
"Executables and libraries are defined using the :command:`add_executable` "
"and :command:`add_library` commands.  The resulting binary files have "
"appropriate :prop_tgt:`PREFIX`, :prop_tgt:`SUFFIX` and extensions for the "
"platform targeted. Dependencies between binary targets are expressed using "
"the :command:`target_link_libraries` command:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:28
msgid ""
"add_library(archive archive.cpp zip.cpp lzma.cpp)\n"
"add_executable(zipapp zipapp.cpp)\n"
"target_link_libraries(zipapp archive)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:34
msgid ""
"``archive`` is defined as a ``STATIC`` library -- an archive containing "
"objects compiled from ``archive.cpp``, ``zip.cpp``, and ``lzma.cpp``.  "
"``zipapp`` is defined as an executable formed by compiling and linking "
"``zipapp.cpp``. When linking the ``zipapp`` executable, the ``archive`` "
"static library is linked in."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:41
msgid "Binary Executables"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:43
msgid "The :command:`add_executable` command defines an executable target:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:45
msgid "add_executable(mytool mytool.cpp)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:49
msgid ""
"Commands such as :command:`add_custom_command`, which generates rules to be "
"run at build time can transparently use an :prop_tgt:`EXECUTABLE <TYPE>` "
"target as a ``COMMAND`` executable.  The buildsystem rules will ensure that "
"the executable is built before attempting to run the command."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:55
msgid "Binary Library Types"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:60
msgid "Normal Libraries"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:62
msgid ""
"By default, the :command:`add_library` command defines a ``STATIC`` library, "
"unless a type is specified.  A type may be specified when using the command:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:65
msgid "add_library(archive SHARED archive.cpp zip.cpp lzma.cpp)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:69
msgid "add_library(archive STATIC archive.cpp zip.cpp lzma.cpp)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:73
msgid ""
"The :variable:`BUILD_SHARED_LIBS` variable may be enabled to change the "
"behavior of :command:`add_library` to build shared libraries by default."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:76
msgid ""
"In the context of the buildsystem definition as a whole, it is largely "
"irrelevant whether particular libraries are ``SHARED`` or ``STATIC`` -- the "
"commands, dependency specifications and other APIs work similarly regardless "
"of the library type.  The ``MODULE`` library type is dissimilar in that it "
"is generally not linked to -- it is not used in the right-hand-side of the :"
"command:`target_link_libraries` command. It is a type which is loaded as a "
"plugin using runtime techniques. If the library does not export any "
"unmanaged symbols (e.g. Windows resource DLL, C++/CLI DLL), it is required "
"that the library not be a ``SHARED`` library because CMake expects "
"``SHARED`` libraries to export at least one symbol."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:88
msgid "add_library(archive MODULE 7z.cpp)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:95
msgid "Apple Frameworks"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:97
msgid ""
"A ``SHARED`` library may be marked with the :prop_tgt:`FRAMEWORK` target "
"property to create an macOS or iOS Framework Bundle. The "
"``MACOSX_FRAMEWORK_IDENTIFIER`` sets ``CFBundleIdentifier`` key and it "
"uniquely identifies the bundle."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:102
msgid ""
"add_library(MyFramework SHARED MyFramework.cpp)\n"
"set_target_properties(MyFramework PROPERTIES\n"
"  FRAMEWORK TRUE\n"
"  FRAMEWORK_VERSION A\n"
"  MACOSX_FRAMEWORK_IDENTIFIER org.cmake.MyFramework\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:114
msgid "Object Libraries"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:116
msgid ""
"The ``OBJECT`` library type defines a non-archival collection of object "
"files resulting from compiling the given source files.  The object files "
"collection may be used as source inputs to other targets:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:120
msgid ""
"add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)\n"
"\n"
"add_library(archiveExtras STATIC $<TARGET_OBJECTS:archive> extras.cpp)\n"
"\n"
"add_executable(test_exe $<TARGET_OBJECTS:archive> test.cpp)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:128
msgid ""
"The link (or archiving) step of those other targets will use the object "
"files collection in addition to those from their own sources."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:131
msgid "Alternatively, object libraries may be linked into other targets:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:133
msgid ""
"add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)\n"
"\n"
"add_library(archiveExtras STATIC extras.cpp)\n"
"target_link_libraries(archiveExtras PUBLIC archive)\n"
"\n"
"add_executable(test_exe test.cpp)\n"
"target_link_libraries(test_exe archive)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:143
msgid ""
"The link (or archiving) step of those other targets will use the object "
"files from ``OBJECT`` libraries that are *directly* linked.  Additionally, "
"usage requirements of the ``OBJECT`` libraries will be honored when "
"compiling sources in those other targets.  Furthermore, those usage "
"requirements will propagate transitively to dependents of those other "
"targets."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:149
msgid ""
"Object libraries may not be used as the ``TARGET`` in a use of the :command:"
"`add_custom_command(TARGET)` command signature.  However, the list of "
"objects can be used by :command:`add_custom_command(OUTPUT)` or :command:"
"`file(GENERATE)` by using ``$<TARGET_OBJECTS:objlib>``."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:155
msgid "Build Specification and Usage Requirements"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:157
msgid ""
"The :command:`target_include_directories`, :command:"
"`target_compile_definitions` and :command:`target_compile_options` commands "
"specify the build specifications and the usage requirements of binary "
"targets.  The commands populate the :prop_tgt:`INCLUDE_DIRECTORIES`, :"
"prop_tgt:`COMPILE_DEFINITIONS` and :prop_tgt:`COMPILE_OPTIONS` target "
"properties respectively, and/or the :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES`, :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` "
"and :prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:165
msgid ""
"Each of the commands has a ``PRIVATE``, ``PUBLIC`` and ``INTERFACE`` mode.  "
"The ``PRIVATE`` mode populates only the non-``INTERFACE_`` variant of the "
"target property and the ``INTERFACE`` mode populates only the ``INTERFACE_`` "
"variants. The ``PUBLIC`` mode populates both variants of the respective "
"target property. Each command may be invoked with multiple uses of each "
"keyword:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:171
msgid ""
"target_compile_definitions(archive\n"
"  PRIVATE BUILDING_WITH_LZMA\n"
"  INTERFACE USING_ARCHIVE_LIB\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:178
msgid ""
"Note that usage requirements are not designed as a way to make downstreams "
"use particular :prop_tgt:`COMPILE_OPTIONS` or :prop_tgt:"
"`COMPILE_DEFINITIONS` etc for convenience only.  The contents of the "
"properties must be **requirements**, not merely recommendations or "
"convenience."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:184
msgid ""
"See the :ref:`Creating Relocatable Packages` section of the :manual:`cmake-"
"packages(7)` manual for discussion of additional care that must be taken "
"when specifying usage requirements while creating packages for "
"redistribution."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:190
msgid "Target Properties"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:192
msgid ""
"The contents of the :prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:"
"`COMPILE_DEFINITIONS` and :prop_tgt:`COMPILE_OPTIONS` target properties are "
"used appropriately when compiling the source files of a binary target."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:197
msgid ""
"Entries in the :prop_tgt:`INCLUDE_DIRECTORIES` are added to the compile line "
"with ``-I`` or ``-isystem`` prefixes and in the order of appearance in the "
"property value."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:201
msgid ""
"Entries in the :prop_tgt:`COMPILE_DEFINITIONS` are prefixed with ``-D`` or "
"``/D`` and added to the compile line in an unspecified order.  The :prop_tgt:"
"`DEFINE_SYMBOL` target property is also added as a compile definition as a "
"special convenience case for ``SHARED`` and ``MODULE`` library targets."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:207
msgid ""
"Entries in the :prop_tgt:`COMPILE_OPTIONS` are escaped for the shell and "
"added in the order of appearance in the property value.  Several compile "
"options have special separate handling, such as :prop_tgt:"
"`POSITION_INDEPENDENT_CODE`."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:211
msgid ""
"The contents of the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, :prop_tgt:"
"`INTERFACE_COMPILE_DEFINITIONS` and :prop_tgt:`INTERFACE_COMPILE_OPTIONS` "
"target properties are *Usage Requirements* -- they specify content which "
"consumers must use to correctly compile and link with the target they appear "
"on. For any binary target, the contents of each ``INTERFACE_`` property on "
"each target specified in a :command:`target_link_libraries` command is "
"consumed:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:220
msgid ""
"set(srcs archive.cpp zip.cpp)\n"
"if (LZMA_FOUND)\n"
"  list(APPEND srcs lzma.cpp)\n"
"endif()\n"
"add_library(archive SHARED ${srcs})\n"
"if (LZMA_FOUND)\n"
"  # The archive library sources are compiled with -DBUILDING_WITH_LZMA\n"
"  target_compile_definitions(archive PRIVATE BUILDING_WITH_LZMA)\n"
"endif()\n"
"target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)\n"
"\n"
"add_executable(consumer)\n"
"# Link consumer to archive and consume its usage requirements. The consumer\n"
"# executable sources are compiled with -DUSING_ARCHIVE_LIB.\n"
"target_link_libraries(consumer archive)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:238
msgid ""
"Because it is common to require that the source directory and corresponding "
"build directory are added to the :prop_tgt:`INCLUDE_DIRECTORIES`, the :"
"variable:`CMAKE_INCLUDE_CURRENT_DIR` variable can be enabled to conveniently "
"add the corresponding directories to the :prop_tgt:`INCLUDE_DIRECTORIES` of "
"all targets.  The variable :variable:"
"`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` can be enabled to add the "
"corresponding directories to the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` "
"of all targets.  This makes use of targets in multiple different directories "
"convenient through use of the :command:`target_link_libraries` command."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:252
msgid "Transitive Usage Requirements"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:254
msgid ""
"The usage requirements of a target can transitively propagate to dependents. "
"The :command:`target_link_libraries` command has ``PRIVATE``, ``INTERFACE`` "
"and ``PUBLIC`` keywords to control the propagation."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:258
msgid ""
"add_library(archive archive.cpp)\n"
"target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)\n"
"\n"
"add_library(serialization serialization.cpp)\n"
"target_compile_definitions(serialization INTERFACE USING_SERIALIZATION_LIB)\n"
"\n"
"add_library(archiveExtras extras.cpp)\n"
"target_link_libraries(archiveExtras PUBLIC archive)\n"
"target_link_libraries(archiveExtras PRIVATE serialization)\n"
"# archiveExtras is compiled with -DUSING_ARCHIVE_LIB\n"
"# and -DUSING_SERIALIZATION_LIB\n"
"\n"
"add_executable(consumer consumer.cpp)\n"
"# consumer is compiled with -DUSING_ARCHIVE_LIB\n"
"target_link_libraries(consumer archiveExtras)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:276
msgid ""
"Because ``archive`` is a ``PUBLIC`` dependency of ``archiveExtras``, the "
"usage requirements of it are propagated to ``consumer`` too.  Because "
"``serialization`` is a ``PRIVATE`` dependency of ``archiveExtras``, the "
"usage requirements of it are not propagated to ``consumer``."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:281
msgid ""
"Generally, a dependency should be specified in a use of :command:"
"`target_link_libraries` with the ``PRIVATE`` keyword if it is used by only "
"the implementation of a library, and not in the header files.  If a "
"dependency is additionally used in the header files of a library (e.g. for "
"class inheritance), then it should be specified as a ``PUBLIC`` dependency. "
"A dependency which is not used by the implementation of a library, but only "
"by its headers should be specified as an ``INTERFACE`` dependency.  The :"
"command:`target_link_libraries` command may be invoked with multiple uses of "
"each keyword:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:291
msgid ""
"target_link_libraries(archiveExtras\n"
"  PUBLIC archive\n"
"  PRIVATE serialization\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:298
msgid ""
"Usage requirements are propagated by reading the ``INTERFACE_`` variants of "
"target properties from dependencies and appending the values to the non-"
"``INTERFACE_`` variants of the operand.  For example, the :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES` of dependencies is read and appended to the :"
"prop_tgt:`INCLUDE_DIRECTORIES` of the operand.  In cases where order is "
"relevant and maintained, and the order resulting from the :command:"
"`target_link_libraries` calls does not allow correct compilation, use of an "
"appropriate command to set the property directly may update the order."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:308
msgid ""
"For example, if the linked libraries for a target must be specified in the "
"order ``lib1`` ``lib2`` ``lib3`` , but the include directories must be "
"specified in the order ``lib3`` ``lib1`` ``lib2``:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:312
msgid ""
"target_link_libraries(myExe lib1 lib2 lib3)\n"
"target_include_directories(myExe\n"
"  PRIVATE $<TARGET_PROPERTY:lib3,INTERFACE_INCLUDE_DIRECTORIES>)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:318
msgid ""
"Note that care must be taken when specifying usage requirements for targets "
"which will be exported for installation using the :command:`install(EXPORT)` "
"command.  See :ref:`Creating Packages` for more."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:325
msgid "Compatible Interface Properties"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:327
msgid ""
"Some target properties are required to be compatible between a target and "
"the interface of each dependency.  For example, the :prop_tgt:"
"`POSITION_INDEPENDENT_CODE` target property may specify a boolean value of "
"whether a target should be compiled as position-independent-code, which has "
"platform-specific consequences. A target may also specify the usage "
"requirement :prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` to communicate "
"that consumers must be compiled as position-independent-code."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:336
msgid ""
"add_executable(exe1 exe1.cpp)\n"
"set_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE ON)\n"
"\n"
"add_library(lib1 SHARED lib1.cpp)\n"
"set_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n"
"\n"
"add_executable(exe2 exe2.cpp)\n"
"target_link_libraries(exe2 lib1)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:347
msgid ""
"Here, both ``exe1`` and ``exe2`` will be compiled as position-independent-"
"code. ``lib1`` will also be compiled as position-independent-code because "
"that is the default setting for ``SHARED`` libraries.  If dependencies have "
"conflicting, non-compatible requirements :manual:`cmake(1)` issues a "
"diagnostic:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:352
msgid ""
"add_library(lib1 SHARED lib1.cpp)\n"
"set_property(TARGET lib1 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n"
"\n"
"add_library(lib2 SHARED lib2.cpp)\n"
"set_property(TARGET lib2 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 lib1)\n"
"set_property(TARGET exe1 PROPERTY POSITION_INDEPENDENT_CODE OFF)\n"
"\n"
"add_executable(exe2 exe2.cpp)\n"
"target_link_libraries(exe2 lib1 lib2)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:367
msgid ""
"The ``lib1`` requirement ``INTERFACE_POSITION_INDEPENDENT_CODE`` is not "
"\"compatible\" with the :prop_tgt:`POSITION_INDEPENDENT_CODE` property of "
"the ``exe1`` target.  The library requires that consumers are built as "
"position-independent-code, while the executable specifies to not built as "
"position-independent-code, so a diagnostic is issued."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:373
msgid ""
"The ``lib1`` and ``lib2`` requirements are not \"compatible\".  One of them "
"requires that consumers are built as position-independent-code, while the "
"other requires that consumers are not built as position-independent-code. "
"Because ``exe2`` links to both and they are in conflict, a diagnostic is "
"issued."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:379
msgid ""
"To be \"compatible\", the :prop_tgt:`POSITION_INDEPENDENT_CODE` property, if "
"set must be either the same, in a boolean sense, as the :prop_tgt:"
"`INTERFACE_POSITION_INDEPENDENT_CODE` property of all transitively specified "
"dependencies on which that property is set."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:384
msgid ""
"This property of \"compatible interface requirement\" may be extended to "
"other properties by specifying the property in the content of the :prop_tgt:"
"`COMPATIBLE_INTERFACE_BOOL` target property.  Each specified property must "
"be compatible between the consuming target and the corresponding property "
"with an ``INTERFACE_`` prefix from each dependency:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:390
msgid ""
"add_library(lib1Version2 SHARED lib1_v2.cpp)\n"
"set_property(TARGET lib1Version2 PROPERTY INTERFACE_CUSTOM_PROP ON)\n"
"set_property(TARGET lib1Version2 APPEND PROPERTY\n"
"  COMPATIBLE_INTERFACE_BOOL CUSTOM_PROP\n"
")\n"
"\n"
"add_library(lib1Version3 SHARED lib1_v3.cpp)\n"
"set_property(TARGET lib1Version3 PROPERTY INTERFACE_CUSTOM_PROP OFF)\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 lib1Version2) # CUSTOM_PROP will be ON\n"
"\n"
"add_executable(exe2 exe2.cpp)\n"
"target_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:407
msgid ""
"Non-boolean properties may also participate in \"compatible interface\" "
"computations.  Properties specified in the :prop_tgt:"
"`COMPATIBLE_INTERFACE_STRING` property must be either unspecified or compare "
"to the same string among all transitively specified dependencies. This can "
"be useful to ensure that multiple incompatible versions of a library are not "
"linked together through transitive requirements of a target:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:415
msgid ""
"add_library(lib1Version2 SHARED lib1_v2.cpp)\n"
"set_property(TARGET lib1Version2 PROPERTY INTERFACE_LIB_VERSION 2)\n"
"set_property(TARGET lib1Version2 APPEND PROPERTY\n"
"  COMPATIBLE_INTERFACE_STRING LIB_VERSION\n"
")\n"
"\n"
"add_library(lib1Version3 SHARED lib1_v3.cpp)\n"
"set_property(TARGET lib1Version3 PROPERTY INTERFACE_LIB_VERSION 3)\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 lib1Version2) # LIB_VERSION will be \"2\"\n"
"\n"
"add_executable(exe2 exe2.cpp)\n"
"target_link_libraries(exe2 lib1Version2 lib1Version3) # Diagnostic"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:432
msgid ""
"The :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` target property specifies "
"that content will be evaluated numerically and the maximum number among all "
"specified will be calculated:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:436
msgid ""
"add_library(lib1Version2 SHARED lib1_v2.cpp)\n"
"set_property(TARGET lib1Version2 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED "
"200)\n"
"set_property(TARGET lib1Version2 APPEND PROPERTY\n"
"  COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED\n"
")\n"
"\n"
"add_library(lib1Version3 SHARED lib1_v3.cpp)\n"
"set_property(TARGET lib1Version3 PROPERTY INTERFACE_CONTAINER_SIZE_REQUIRED "
"1000)\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"# CONTAINER_SIZE_REQUIRED will be \"200\"\n"
"target_link_libraries(exe1 lib1Version2)\n"
"\n"
"add_executable(exe2 exe2.cpp)\n"
"# CONTAINER_SIZE_REQUIRED will be \"1000\"\n"
"target_link_libraries(exe2 lib1Version2 lib1Version3)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:455
msgid ""
"Similarly, the :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` may be used to "
"calculate the numeric minimum value for a property from dependencies."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:458
msgid ""
"Each calculated \"compatible\" property value may be read in the consumer at "
"generate-time using generator expressions."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:461
msgid ""
"Note that for each dependee, the set of properties specified in each "
"compatible interface property must not intersect with the set specified in "
"any of the other properties."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:466
msgid "Property Origin Debugging"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:468
msgid ""
"Because build specifications can be determined by dependencies, the lack of "
"locality of code which creates a target and code which is responsible for "
"setting build specifications may make the code more difficult to reason "
"about. :manual:`cmake(1)` provides a debugging facility to print the origin "
"of the contents of properties which may be determined by dependencies.  The "
"properties which can be debugged are listed in the :variable:"
"`CMAKE_DEBUG_TARGET_PROPERTIES` variable documentation:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:476
msgid ""
"set(CMAKE_DEBUG_TARGET_PROPERTIES\n"
"  INCLUDE_DIRECTORIES\n"
"  COMPILE_DEFINITIONS\n"
"  POSITION_INDEPENDENT_CODE\n"
"  CONTAINER_SIZE_REQUIRED\n"
"  LIB_VERSION\n"
")\n"
"add_executable(exe1 exe1.cpp)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:487
msgid ""
"In the case of properties listed in :prop_tgt:`COMPATIBLE_INTERFACE_BOOL` "
"or :prop_tgt:`COMPATIBLE_INTERFACE_STRING`, the debug output shows which "
"target was responsible for setting the property, and which other "
"dependencies also defined the property.  In the case of :prop_tgt:"
"`COMPATIBLE_INTERFACE_NUMBER_MAX` and :prop_tgt:"
"`COMPATIBLE_INTERFACE_NUMBER_MIN`, the debug output shows the value of the "
"property from each dependency, and whether the value determines the new "
"extreme."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:497
msgid "Build Specification with Generator Expressions"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:499
msgid ""
"Build specifications may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>` containing content which may be conditional or known only "
"at generate-time.  For example, the calculated \"compatible\" value of a "
"property may be read with the ``TARGET_PROPERTY`` expression:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:505
msgid ""
"add_library(lib1Version2 SHARED lib1_v2.cpp)\n"
"set_property(TARGET lib1Version2 PROPERTY\n"
"  INTERFACE_CONTAINER_SIZE_REQUIRED 200)\n"
"set_property(TARGET lib1Version2 APPEND PROPERTY\n"
"  COMPATIBLE_INTERFACE_NUMBER_MAX CONTAINER_SIZE_REQUIRED\n"
")\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 lib1Version2)\n"
"target_compile_definitions(exe1 PRIVATE\n"
"    CONTAINER_SIZE=$<TARGET_PROPERTY:CONTAINER_SIZE_REQUIRED>\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:520
msgid ""
"In this case, the ``exe1`` source files will be compiled with ``-"
"DCONTAINER_SIZE=200``."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:523
msgid ""
"Configuration determined build specifications may be conveniently set using "
"the ``CONFIG`` generator expression."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:526
msgid ""
"target_compile_definitions(exe1 PRIVATE\n"
"    $<$<CONFIG:Debug>:DEBUG_BUILD>\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:532
msgid ""
"The ``CONFIG`` parameter is compared case-insensitively with the "
"configuration being built.  In the presence of :prop_tgt:`IMPORTED` targets, "
"the content of :prop_tgt:`MAP_IMPORTED_CONFIG_DEBUG "
"<MAP_IMPORTED_CONFIG_<CONFIG>>` is also accounted for by this expression."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:537
msgid ""
"Some buildsystems generated by :manual:`cmake(1)` have a predetermined build-"
"configuration set in the :variable:`CMAKE_BUILD_TYPE` variable.  The "
"buildsystem for the IDEs such as Visual Studio and Xcode are generated "
"independent of the build-configuration, and the actual build configuration "
"is not known until build-time.  Therefore, code such as"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:543
msgid ""
"string(TOLOWER ${CMAKE_BUILD_TYPE} _type)\n"
"if (_type STREQUAL debug)\n"
"  target_compile_definitions(exe1 PRIVATE DEBUG_BUILD)\n"
"endif()"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:550
msgid ""
"may appear to work for :ref:`Makefile Generators` and :generator:`Ninja` "
"generators, but is not portable to IDE generators.  Additionally, the :"
"prop_tgt:`IMPORTED` configuration-mappings are not accounted for with code "
"like this, so it should be avoided."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:555
msgid ""
"The unary ``TARGET_PROPERTY`` generator expression and the ``TARGET_POLICY`` "
"generator expression are evaluated with the consuming target context.  This "
"means that a usage requirement specification may be evaluated differently "
"based on the consumer:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:560
msgid ""
"add_library(lib1 lib1.cpp)\n"
"target_compile_definitions(lib1 INTERFACE\n"
"  $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:LIB1_WITH_EXE>\n"
"  $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:"
"LIB1_WITH_SHARED_LIB>\n"
"  $<$<TARGET_POLICY:CMP0041>:CONSUMER_CMP0041_NEW>\n"
")\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 lib1)\n"
"\n"
"cmake_policy(SET CMP0041 NEW)\n"
"\n"
"add_library(shared_lib shared_lib.cpp)\n"
"target_link_libraries(shared_lib lib1)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:577
msgid ""
"The ``exe1`` executable will be compiled with ``-DLIB1_WITH_EXE``, while the "
"``shared_lib`` shared library will be compiled with ``-"
"DLIB1_WITH_SHARED_LIB`` and ``-DCONSUMER_CMP0041_NEW``, because policy :"
"policy:`CMP0041` is ``NEW`` at the point where the ``shared_lib`` target is "
"created."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:582
msgid ""
"The ``BUILD_INTERFACE`` expression wraps requirements which are only used "
"when consumed from a target in the same buildsystem, or when consumed from a "
"target exported to the build directory using the :command:`export` command.  "
"The ``INSTALL_INTERFACE`` expression wraps requirements which are only used "
"when consumed from a target which has been installed and exported with the :"
"command:`install(EXPORT)` command:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:589
msgid ""
"add_library(ClimbingStats climbingstats.cpp)\n"
"target_compile_definitions(ClimbingStats INTERFACE\n"
"  $<BUILD_INTERFACE:ClimbingStats_FROM_BUILD_LOCATION>\n"
"  $<INSTALL_INTERFACE:ClimbingStats_FROM_INSTALLED_LOCATION>\n"
")\n"
"install(TARGETS ClimbingStats EXPORT libExport ${InstallArgs})\n"
"install(EXPORT libExport NAMESPACE Upstream::\n"
"        DESTINATION lib/cmake/ClimbingStats)\n"
"export(EXPORT libExport NAMESPACE Upstream::)\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 ClimbingStats)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:604
msgid ""
"In this case, the ``exe1`` executable will be compiled with ``-"
"DClimbingStats_FROM_BUILD_LOCATION``.  The exporting commands generate :"
"prop_tgt:`IMPORTED` targets with either the ``INSTALL_INTERFACE`` or the "
"``BUILD_INTERFACE`` omitted, and the ``*_INTERFACE`` marker stripped away. A "
"separate project consuming the ``ClimbingStats`` package would contain:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:610
msgid ""
"find_package(ClimbingStats REQUIRED)\n"
"\n"
"add_executable(Downstream main.cpp)\n"
"target_link_libraries(Downstream Upstream::ClimbingStats)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:617
msgid ""
"Depending on whether the ``ClimbingStats`` package was used from the build "
"location or the install location, the ``Downstream`` target would be "
"compiled with either ``-DClimbingStats_FROM_BUILD_LOCATION`` or ``-"
"DClimbingStats_FROM_INSTALL_LOCATION``.  For more about packages and "
"exporting see the :manual:`cmake-packages(7)` manual."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:626
msgid "Include Directories and Usage Requirements"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:628
msgid ""
"Include directories require some special consideration when specified as "
"usage requirements and when used with generator expressions.  The :command:"
"`target_include_directories` command accepts both relative and absolute "
"include directories:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:633
msgid ""
"add_library(lib1 lib1.cpp)\n"
"target_include_directories(lib1 PRIVATE\n"
"  /absolute/path\n"
"  relative/path\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:641
msgid ""
"Relative paths are interpreted relative to the source directory where the "
"command appears.  Relative paths are not allowed in the :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES` of :prop_tgt:`IMPORTED` targets."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:645
msgid ""
"In cases where a non-trivial generator expression is used, the "
"``INSTALL_PREFIX`` expression may be used within the argument of an "
"``INSTALL_INTERFACE`` expression.  It is a replacement marker which expands "
"to the installation prefix when imported by a consuming project."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:650
msgid ""
"Include directories usage requirements commonly differ between the build-"
"tree and the install-tree.  The ``BUILD_INTERFACE`` and "
"``INSTALL_INTERFACE`` generator expressions can be used to describe separate "
"usage requirements based on the usage location.  Relative paths are allowed "
"within the ``INSTALL_INTERFACE`` expression and are interpreted relative to "
"the installation prefix.  For example:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:657
msgid ""
"add_library(ClimbingStats climbingstats.cpp)\n"
"target_include_directories(ClimbingStats INTERFACE\n"
"  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/generated>\n"
"  $<INSTALL_INTERFACE:/absolute/path>\n"
"  $<INSTALL_INTERFACE:relative/path>\n"
"  $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/$<CONFIG>/generated>\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:667
msgid ""
"Two convenience APIs are provided relating to include directories usage "
"requirements.  The :variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` "
"variable may be enabled, with an equivalent effect to:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:671
msgid ""
"set_property(TARGET tgt APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES\n"
"  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}"
">\n"
")"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:677
msgid ""
"for each target affected.  The convenience for installed targets is an "
"``INCLUDES DESTINATION`` component with the :command:`install(TARGETS)` "
"command:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:681
msgid ""
"install(TARGETS foo bar bat EXPORT tgts ${dest_args}\n"
"  INCLUDES DESTINATION include\n"
")\n"
"install(EXPORT tgts ${other_args})\n"
"install(FILES ${headers} DESTINATION include)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:689
msgid ""
"This is equivalent to appending ``${CMAKE_INSTALL_PREFIX}/include`` to the :"
"prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of each of the installed :prop_tgt:"
"`IMPORTED` targets when generated by :command:`install(EXPORT)`."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:693
msgid ""
"When the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of an :ref:`imported "
"target <Imported targets>` is consumed, the entries in the property are "
"treated as ``SYSTEM`` include directories, as if they were listed in the :"
"prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` of the dependency. This can "
"result in omission of compiler warnings for headers found in those "
"directories.  This behavior for :ref:`imported targets` may be controlled by "
"setting the :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property on the "
"*consumers* of imported targets."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:702
msgid ""
"If a binary target is linked transitively to a macOS :prop_tgt:`FRAMEWORK`, "
"the ``Headers`` directory of the framework is also treated as a usage "
"requirement. This has the same effect as passing the framework directory as "
"an include directory."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:708
msgid "Link Libraries and Generator Expressions"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:710
msgid ""
"Like build specifications, :prop_tgt:`link libraries <LINK_LIBRARIES>` may "
"be specified with generator expression conditions.  However, as consumption "
"of usage requirements is based on collection from linked dependencies, there "
"is an additional limitation that the link dependencies must form a "
"\"directed acyclic graph\".  That is, if linking to a target is dependent on "
"the value of a target property, that target property may not be dependent on "
"the linked dependencies:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:718
msgid ""
"add_library(lib1 lib1.cpp)\n"
"add_library(lib2 lib2.cpp)\n"
"target_link_libraries(lib1 PUBLIC\n"
"  $<$<TARGET_PROPERTY:POSITION_INDEPENDENT_CODE>:lib2>\n"
")\n"
"add_library(lib3 lib3.cpp)\n"
"set_property(TARGET lib3 PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 lib1 lib3)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:731
msgid ""
"As the value of the :prop_tgt:`POSITION_INDEPENDENT_CODE` property of the "
"``exe1`` target is dependent on the linked libraries (``lib3``), and the "
"edge of linking ``exe1`` is determined by the same :prop_tgt:"
"`POSITION_INDEPENDENT_CODE` property, the dependency graph above contains a "
"cycle.  :manual:`cmake(1)` issues a diagnostic in this case."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:740
msgid "Output Artifacts"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:742
msgid ""
"The buildsystem targets created by the :command:`add_library` and :command:"
"`add_executable` commands create rules to create binary outputs. The exact "
"output location of the binaries can only be determined at generate-time "
"because it can depend on the build-configuration and the link-language of "
"linked dependencies etc.  ``TARGET_FILE``, ``TARGET_LINKER_FILE`` and "
"related expressions can be used to access the name and location of generated "
"binaries.  These expressions do not work for ``OBJECT`` libraries however, "
"as there is no single file generated by such libraries which is relevant to "
"the expressions."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:752
msgid ""
"There are three kinds of output artifacts that may be build by targets as "
"detailed in the following sections.  Their classification differs between "
"DLL platforms and non-DLL platforms.  All Windows-based systems including "
"Cygwin are DLL platforms."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:760
msgid "Runtime Output Artifacts"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:762
msgid "A *runtime* output artifact of a buildsystem target may be:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:764
msgid ""
"The executable file (e.g. ``.exe``) of an executable target created by the :"
"command:`add_executable` command."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:767
msgid ""
"On DLL platforms: the executable file (e.g. ``.dll``) of a shared library "
"target created by the :command:`add_library` command with the ``SHARED`` "
"option."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:771
msgid ""
"The :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and :prop_tgt:`RUNTIME_OUTPUT_NAME` "
"target properties may be used to control runtime output artifact locations "
"and names in the build tree."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:778
msgid "Library Output Artifacts"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:780
msgid "A *library* output artifact of a buildsystem target may be:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:782
msgid ""
"The loadable module file (e.g. ``.dll`` or ``.so``) of a module library "
"target created by the :command:`add_library` command with the ``MODULE`` "
"option."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:786
msgid ""
"On non-DLL platforms: the shared library file (e.g. ``.so`` or ``.dylib``) "
"of a shared library target created by the :command:`add_library` command "
"with the ``SHARED`` option."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:790
msgid ""
"The :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` and :prop_tgt:`LIBRARY_OUTPUT_NAME` "
"target properties may be used to control library output artifact locations "
"and names in the build tree."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:797
msgid "Archive Output Artifacts"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:799
msgid "An *archive* output artifact of a buildsystem target may be:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:801
msgid ""
"The static library file (e.g. ``.lib`` or ``.a``) of a static library target "
"created by the :command:`add_library` command with the ``STATIC`` option."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:805
msgid ""
"On DLL platforms: the import library file (e.g. ``.lib``) of a shared "
"library target created by the :command:`add_library` command with the "
"``SHARED`` option.  This file is only guaranteed to exist if the library "
"exports at least one unmanaged symbol."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:810
msgid ""
"On DLL platforms: the import library file (e.g. ``.lib``) of an executable "
"target created by the :command:`add_executable` command when its :prop_tgt:"
"`ENABLE_EXPORTS` target property is set."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:814
msgid ""
"On AIX: the linker import file (e.g. ``.imp``) of an executable target "
"created by the :command:`add_executable` command when its :prop_tgt:"
"`ENABLE_EXPORTS` target property is set."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:818
msgid ""
"The :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` and :prop_tgt:`ARCHIVE_OUTPUT_NAME` "
"target properties may be used to control archive output artifact locations "
"and names in the build tree."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:823
msgid "Directory-Scoped Commands"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:825
msgid ""
"The :command:`target_include_directories`, :command:"
"`target_compile_definitions` and :command:`target_compile_options` commands "
"have an effect on only one target at a time.  The commands :command:"
"`add_compile_definitions`, :command:`add_compile_options` and :command:"
"`include_directories` have a similar function, but operate at directory "
"scope instead of target scope for convenience."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:834
msgid "Pseudo Targets"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:836
msgid ""
"Some target types do not represent outputs of the buildsystem, but only "
"inputs such as external dependencies, aliases or other non-build artifacts.  "
"Pseudo targets are not represented in the generated buildsystem."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:843
msgid "Imported Targets"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:845
msgid ""
"An :prop_tgt:`IMPORTED` target represents a pre-existing dependency.  "
"Usually such targets are defined by an upstream package and should be "
"treated as immutable. After declaring an :prop_tgt:`IMPORTED` target one can "
"adjust its target properties by using the customary commands such as :"
"command:`target_compile_definitions`, :command:"
"`target_include_directories`, :command:`target_compile_options` or :command:"
"`target_link_libraries` just like with any other regular target."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:853
msgid ""
":prop_tgt:`IMPORTED` targets may have the same usage requirement properties "
"populated as binary targets, such as :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES`, :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`, :"
"prop_tgt:`INTERFACE_COMPILE_OPTIONS`, :prop_tgt:`INTERFACE_LINK_LIBRARIES`, "
"and :prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:861
msgid ""
"The :prop_tgt:`LOCATION` may also be read from an IMPORTED target, though "
"there is rarely reason to do so.  Commands such as :command:"
"`add_custom_command` can transparently use an :prop_tgt:`IMPORTED` :prop_tgt:"
"`EXECUTABLE <TYPE>` target as a ``COMMAND`` executable."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:866
msgid ""
"The scope of the definition of an :prop_tgt:`IMPORTED` target is the "
"directory where it was defined.  It may be accessed and used from "
"subdirectories, but not from parent directories or sibling directories.  The "
"scope is similar to the scope of a cmake variable."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:871
msgid ""
"It is also possible to define a ``GLOBAL`` :prop_tgt:`IMPORTED` target which "
"is accessible globally in the buildsystem."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:874
msgid ""
"See the :manual:`cmake-packages(7)` manual for more on creating packages "
"with :prop_tgt:`IMPORTED` targets."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:880
msgid "Alias Targets"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:882
msgid ""
"An ``ALIAS`` target is a name which may be used interchangeably with a "
"binary target name in read-only contexts.  A primary use-case for ``ALIAS`` "
"targets is for example or unit test executables accompanying a library, "
"which may be part of the same buildsystem or built separately based on user "
"configuration."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:888
msgid ""
"add_library(lib1 lib1.cpp)\n"
"install(TARGETS lib1 EXPORT lib1Export ${dest_args})\n"
"install(EXPORT lib1Export NAMESPACE Upstream:: ${other_args})\n"
"\n"
"add_library(Upstream::lib1 ALIAS lib1)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:896
msgid ""
"In another directory, we can link unconditionally to the ``Upstream::lib1`` "
"target, which may be an :prop_tgt:`IMPORTED` target from a package, or an "
"``ALIAS`` target if built as part of the same buildsystem."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:900
msgid ""
"if (NOT TARGET Upstream::lib1)\n"
"  find_package(lib1 REQUIRED)\n"
"endif()\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 Upstream::lib1)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:908
msgid ""
"``ALIAS`` targets are not mutable, installable or exportable.  They are "
"entirely local to the buildsystem description.  A name can be tested for "
"whether it is an ``ALIAS`` name by reading the :prop_tgt:`ALIASED_TARGET` "
"property from it:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:913
msgid ""
"get_target_property(_aliased Upstream::lib1 ALIASED_TARGET)\n"
"if(_aliased)\n"
"  message(STATUS \"The name Upstream::lib1 is an ALIAS for ${_aliased}.\")\n"
"endif()"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:923
msgid "Interface Libraries"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:925
msgid ""
"An ``INTERFACE`` target has no :prop_tgt:`LOCATION` and is mutable, but is "
"otherwise similar to an :prop_tgt:`IMPORTED` target."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:928
msgid ""
"It may specify usage requirements such as :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES`, :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`, :"
"prop_tgt:`INTERFACE_COMPILE_OPTIONS`, :prop_tgt:`INTERFACE_LINK_LIBRARIES`, :"
"prop_tgt:`INTERFACE_SOURCES`, and :prop_tgt:"
"`INTERFACE_POSITION_INDEPENDENT_CODE`. Only the ``INTERFACE`` modes of the :"
"command:`target_include_directories`, :command:"
"`target_compile_definitions`, :command:`target_compile_options`, :command:"
"`target_sources`, and :command:`target_link_libraries` commands may be used "
"with ``INTERFACE`` libraries."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:940
msgid ""
"A primary use-case for ``INTERFACE`` libraries is header-only libraries."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:942
msgid ""
"add_library(Eigen INTERFACE)\n"
"target_include_directories(Eigen INTERFACE\n"
"  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n"
"  $<INSTALL_INTERFACE:include/Eigen>\n"
")\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 Eigen)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:953
msgid ""
"Here, the usage requirements from the ``Eigen`` target are consumed and used "
"when compiling, but it has no effect on linking."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:956
msgid ""
"Another use-case is to employ an entirely target-focussed design for usage "
"requirements:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:959
msgid ""
"add_library(pic_on INTERFACE)\n"
"set_property(TARGET pic_on PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)\n"
"add_library(pic_off INTERFACE)\n"
"set_property(TARGET pic_off PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE "
"OFF)\n"
"\n"
"add_library(enable_rtti INTERFACE)\n"
"target_compile_options(enable_rtti INTERFACE\n"
"  $<$<OR:$<COMPILER_ID:GNU>,$<COMPILER_ID:Clang>>:-rtti>\n"
")\n"
"\n"
"add_executable(exe1 exe1.cpp)\n"
"target_link_libraries(exe1 pic_on enable_rtti)"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:974
msgid ""
"This way, the build specification of ``exe1`` is expressed entirely as "
"linked targets, and the complexity of compiler-specific flags is "
"encapsulated in an ``INTERFACE`` library target."
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:978
msgid ""
"The properties permitted to be set on or read from an ``INTERFACE`` library "
"are:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:981
msgid "Properties matching ``INTERFACE_*``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:982
msgid "Built-in properties matching ``COMPATIBLE_INTERFACE_*``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:983
msgid "``EXPORT_NAME``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:984
msgid "``EXPORT_PROPERTIES``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:985
msgid "``IMPORTED``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:986
msgid "``MANUALLY_ADDED_DEPENDENCIES``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:987
msgid "``NAME``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:988
msgid "Properties matching ``IMPORTED_LIBNAME_*``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:989
msgid "Properties matching ``MAP_IMPORTED_CONFIG_*``"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:991
msgid ""
"``INTERFACE`` libraries may be installed and exported.  Any content they "
"refer to must be installed separately:"
msgstr ""

#: ../../../manual/cmake-buildsystem.7.rst:994
msgid ""
"add_library(Eigen INTERFACE)\n"
"target_include_directories(Eigen INTERFACE\n"
"  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n"
"  $<INSTALL_INTERFACE:include/Eigen>\n"
")\n"
"\n"
"install(TARGETS Eigen EXPORT eigenExport)\n"
"install(EXPORT eigenExport NAMESPACE Upstream::\n"
"  DESTINATION lib/cmake/Eigen\n"
")\n"
"install(FILES\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/src/eigen.h\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/src/vector.h\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/src/matrix.h\n"
"  DESTINATION include/Eigen\n"
")"
msgstr ""
