# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/target_link_libraries.rst:2
msgid "target_link_libraries"
msgstr ""

#: ../../../command/target_link_libraries.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/target_link_libraries.rst:8
msgid ""
"Specify libraries or flags to use when linking a given target and/or its "
"dependents.  :ref:`Usage requirements <Target Usage Requirements>` from "
"linked library targets will be propagated.  Usage requirements of a target's "
"dependencies affect compilation of its own sources."
msgstr ""

#: ../../../command/target_link_libraries.rst:14
msgid "Overview"
msgstr ""

#: ../../../command/target_link_libraries.rst:16
msgid ""
"This command has several signatures as detailed in subsections below. All of "
"them have the general form"
msgstr ""

#: ../../../command/target_link_libraries.rst:19
msgid "target_link_libraries(<target> ... <item>... ...)"
msgstr ""

#: ../../../command/target_link_libraries.rst:23
msgid ""
"The named ``<target>`` must have been created by a command such as :command:"
"`add_executable` or :command:`add_library` and must not be an :ref:`ALIAS "
"target <Alias Targets>`.  If policy :policy:`CMP0079` is not set to ``NEW`` "
"then the target must have been created in the current directory.  Repeated "
"calls for the same ``<target>`` append items in the order called."
msgstr ""

#: ../../../command/target_link_libraries.rst:30
msgid "Each ``<item>`` may be:"
msgstr ""

#: ../../../command/target_link_libraries.rst:32
msgid ""
"**A library target name**: The generated link line will have the full path "
"to the linkable library file associated with the target. The buildsystem "
"will have a dependency to re-link ``<target>`` if the library file changes."
msgstr ""

#: ../../../command/target_link_libraries.rst:37
msgid ""
"The named target must be created by :command:`add_library` within the "
"project or as an :ref:`IMPORTED library <Imported Targets>`. If it is "
"created within the project an ordering dependency will automatically be "
"added in the build system to make sure the named library target is up-to-"
"date before the ``<target>`` links."
msgstr ""

#: ../../../command/target_link_libraries.rst:43
msgid ""
"If an imported library has the :prop_tgt:`IMPORTED_NO_SONAME` target "
"property set, CMake may ask the linker to search for the library instead of "
"using the full path (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``)."
msgstr ""

#: ../../../command/target_link_libraries.rst:48
msgid ""
"The full path to the target's artifact will be quoted/escaped for the shell "
"automatically."
msgstr ""

#: ../../../command/target_link_libraries.rst:51
msgid ""
"**A full path to a library file**: The generated link line will normally "
"preserve the full path to the file. The buildsystem will have a dependency "
"to re-link ``<target>`` if the library file changes."
msgstr ""

#: ../../../command/target_link_libraries.rst:55
msgid ""
"There are some cases where CMake may ask the linker to search for the "
"library (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``), such as when a "
"shared library is detected to have no ``SONAME`` field. See policy :policy:"
"`CMP0060` for discussion of another case."
msgstr ""

#: ../../../command/target_link_libraries.rst:60
msgid ""
"If the library file is in a macOS framework, the ``Headers`` directory of "
"the framework will also be processed as a :ref:`usage requirement <Target "
"Usage Requirements>`.  This has the same effect as passing the framework "
"directory as an include directory."
msgstr ""

#: ../../../command/target_link_libraries.rst:65
msgid ""
"On :ref:`Visual Studio Generators` for VS 2010 and above, library files "
"ending in ``.targets`` will be treated as MSBuild targets files and imported "
"into generated project files.  This is not supported by other generators."
msgstr ""

#: ../../../command/target_link_libraries.rst:70
msgid ""
"The full path to the library file will be quoted/escaped for the shell "
"automatically."
msgstr ""

#: ../../../command/target_link_libraries.rst:73
msgid ""
"**A plain library name**: The generated link line will ask the linker to "
"search for the library (e.g. ``foo`` becomes ``-lfoo`` or ``foo.lib``)."
msgstr ""

#: ../../../command/target_link_libraries.rst:76
msgid ""
"The library name/flag is treated as a command-line string fragment and will "
"be used with no extra quoting or escaping."
msgstr ""

#: ../../../command/target_link_libraries.rst:79
msgid ""
"**A link flag**: Item names starting with ``-``, but not ``-l`` or ``-"
"framework``, are treated as linker flags.  Note that such flags will be "
"treated like any other library link item for purposes of transitive "
"dependencies, so they are generally safe to specify only as private link "
"items that will not propagate to dependents."
msgstr ""

#: ../../../command/target_link_libraries.rst:85
msgid ""
"Link flags specified here are inserted into the link command in the same "
"place as the link libraries. This might not be correct, depending on the "
"linker. Use the :prop_tgt:`LINK_OPTIONS` target property or :command:"
"`target_link_options` command to add link flags explicitly. The flags will "
"then be placed at the toolchain-defined flag position in the link command."
msgstr ""

#: ../../../command/target_link_libraries.rst:92
msgid ""
"The link flag is treated as a command-line string fragment and will be used "
"with no extra quoting or escaping."
msgstr ""

#: ../../../command/target_link_libraries.rst:95
msgid ""
"**A generator expression**: A ``$<...>`` :manual:`generator expression "
"<cmake-generator-expressions(7)>` may evaluate to any of the above items or "
"to a :ref:`semicolon-separated list <CMake Language Lists>` of them. If the "
"``...`` contains any ``;`` characters, e.g. after evaluation of a ``${list}"
"`` variable, be sure to use an explicitly quoted argument ``\"$<...>\"`` so "
"that this command receives it as a single ``<item>``."
msgstr ""

#: ../../../command/target_link_libraries.rst:103
msgid ""
"Additionally, a generator expression may be used as a fragment of any of the "
"above items, e.g. ``foo$<1:_d>``."
msgstr ""

#: ../../../command/target_link_libraries.rst:106
msgid ""
"Note that generator expressions will not be used in OLD handling of policy :"
"policy:`CMP0003` or policy :policy:`CMP0004`."
msgstr ""

#: ../../../command/target_link_libraries.rst:109
msgid ""
"A ``debug``, ``optimized``, or ``general`` keyword immediately followed by "
"another ``<item>``.  The item following such a keyword will be used only for "
"the corresponding build configuration.  The ``debug`` keyword corresponds to "
"the ``Debug`` configuration (or to configurations named in the :prop_gbl:"
"`DEBUG_CONFIGURATIONS` global property if it is set). The ``optimized`` "
"keyword corresponds to all other configurations.  The ``general`` keyword "
"corresponds to all configurations, and is purely optional.  Higher "
"granularity may be achieved for per-configuration rules by creating and "
"linking to :ref:`IMPORTED library targets <Imported Targets>`. These "
"keywords are interpreted immediately by this command and therefore have no "
"special meaning when produced by a generator expression."
msgstr ""

#: ../../../command/target_link_libraries.rst:122
msgid ""
"Items containing ``::``, such as ``Foo::Bar``, are assumed to be :ref:"
"`IMPORTED <Imported Targets>` or :ref:`ALIAS <Alias Targets>` library target "
"names and will cause an error if no such target exists. See policy :policy:"
"`CMP0028`."
msgstr ""

#: ../../../command/target_link_libraries.rst:127
msgid ""
"See the :manual:`cmake-buildsystem(7)` manual for more on defining "
"buildsystem properties."
msgstr ""

#: ../../../command/target_link_libraries.rst:131
msgid "Libraries for a Target and/or its Dependents"
msgstr ""

#: ../../../command/target_link_libraries.rst:133
msgid ""
"target_link_libraries(<target>\n"
"                      <PRIVATE|PUBLIC|INTERFACE> <item>...\n"
"                     [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)"
msgstr ""

#: ../../../command/target_link_libraries.rst:139
msgid ""
"The ``PUBLIC``, ``PRIVATE`` and ``INTERFACE`` keywords can be used to "
"specify both the link dependencies and the link interface in one command. "
"Libraries and targets following ``PUBLIC`` are linked to, and are made part "
"of the link interface.  Libraries and targets following ``PRIVATE`` are "
"linked to, but are not made part of the link interface.  Libraries following "
"``INTERFACE`` are appended to the link interface and are not used for "
"linking ``<target>``."
msgstr ""

#: ../../../command/target_link_libraries.rst:148
msgid "Libraries for both a Target and its Dependents"
msgstr ""

#: ../../../command/target_link_libraries.rst:150
msgid "target_link_libraries(<target> <item>...)"
msgstr ""

#: ../../../command/target_link_libraries.rst:154
msgid ""
"Library dependencies are transitive by default with this signature. When "
"this target is linked into another target then the libraries linked to this "
"target will appear on the link line for the other target too.  This "
"transitive \"link interface\" is stored in the :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES` target property and may be overridden by setting "
"the property directly.  When :policy:`CMP0022` is not set to ``NEW``, "
"transitive linking is built in but may be overridden by the :prop_tgt:"
"`LINK_INTERFACE_LIBRARIES` property.  Calls to other signatures of this "
"command may set the property making any libraries linked exclusively by this "
"signature private."
msgstr ""

#: ../../../command/target_link_libraries.rst:166
msgid "Libraries for a Target and/or its Dependents (Legacy)"
msgstr ""

#: ../../../command/target_link_libraries.rst:168
msgid ""
"target_link_libraries(<target>\n"
"                      <LINK_PRIVATE|LINK_PUBLIC> <lib>...\n"
"                     [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)"
msgstr ""

#: ../../../command/target_link_libraries.rst:174
msgid ""
"The ``LINK_PUBLIC`` and ``LINK_PRIVATE`` modes can be used to specify both "
"the link dependencies and the link interface in one command."
msgstr ""

#: ../../../command/target_link_libraries.rst:177
msgid ""
"This signature is for compatibility only.  Prefer the ``PUBLIC`` or "
"``PRIVATE`` keywords instead."
msgstr ""

#: ../../../command/target_link_libraries.rst:180
msgid ""
"Libraries and targets following ``LINK_PUBLIC`` are linked to, and are made "
"part of the :prop_tgt:`INTERFACE_LINK_LIBRARIES`.  If policy :policy:"
"`CMP0022` is not ``NEW``, they are also made part of the :prop_tgt:"
"`LINK_INTERFACE_LIBRARIES`.  Libraries and targets following "
"``LINK_PRIVATE`` are linked to, but are not made part of the :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES` (or :prop_tgt:`LINK_INTERFACE_LIBRARIES`)."
msgstr ""

#: ../../../command/target_link_libraries.rst:188
msgid "Libraries for Dependents Only (Legacy)"
msgstr ""

#: ../../../command/target_link_libraries.rst:190
msgid "target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)"
msgstr ""

#: ../../../command/target_link_libraries.rst:194
msgid ""
"The ``LINK_INTERFACE_LIBRARIES`` mode appends the libraries to the :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES` target property instead of using them for "
"linking.  If policy :policy:`CMP0022` is not ``NEW``, then this mode also "
"appends libraries to the :prop_tgt:`LINK_INTERFACE_LIBRARIES` and its per-"
"configuration equivalent."
msgstr ""

#: ../../../command/target_link_libraries.rst:200
msgid ""
"This signature is for compatibility only.  Prefer the ``INTERFACE`` mode "
"instead."
msgstr ""

#: ../../../command/target_link_libraries.rst:203
msgid ""
"Libraries specified as ``debug`` are wrapped in a generator expression to "
"correspond to debug builds.  If policy :policy:`CMP0022` is not ``NEW``, the "
"libraries are also appended to the :prop_tgt:`LINK_INTERFACE_LIBRARIES_DEBUG "
"<LINK_INTERFACE_LIBRARIES_<CONFIG>>` property (or to the properties "
"corresponding to configurations listed in the :prop_gbl:"
"`DEBUG_CONFIGURATIONS` global property if it is set). Libraries specified as "
"``optimized`` are appended to the :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"property.  If policy :policy:`CMP0022` is not ``NEW``, they are also "
"appended to the :prop_tgt:`LINK_INTERFACE_LIBRARIES` property.  Libraries "
"specified as ``general`` (or without any keyword) are treated as if "
"specified for both ``debug`` and ``optimized``."
msgstr ""

#: ../../../command/target_link_libraries.rst:217
msgid "Linking Object Libraries"
msgstr ""

#: ../../../command/target_link_libraries.rst:219
msgid ""
":ref:`Object Libraries` may be used as the ``<target>`` (first) argument of "
"``target_link_libraries`` to specify dependencies of their sources on other "
"libraries.  For example, the code"
msgstr ""

#: ../../../command/target_link_libraries.rst:223
msgid ""
"add_library(A SHARED a.c)\n"
"target_compile_definitions(A PUBLIC A)\n"
"\n"
"add_library(obj OBJECT obj.c)\n"
"target_compile_definitions(obj PUBLIC OBJ)\n"
"target_link_libraries(obj PUBLIC A)"
msgstr ""

#: ../../../command/target_link_libraries.rst:232
msgid ""
"compiles ``obj.c`` with ``-DA -DOBJ`` and establishes usage requirements for "
"``obj`` that propagate to its dependents."
msgstr ""

#: ../../../command/target_link_libraries.rst:235
msgid ""
"Normal libraries and executables may link to :ref:`Object Libraries` to get "
"their objects and usage requirements.  Continuing the above example, the code"
msgstr ""

#: ../../../command/target_link_libraries.rst:239
msgid ""
"add_library(B SHARED b.c)\n"
"target_link_libraries(B PUBLIC obj)"
msgstr ""

#: ../../../command/target_link_libraries.rst:244
msgid ""
"compiles ``b.c`` with ``-DA -DOBJ``, creates shared library ``B`` with "
"object files from ``b.c`` and ``obj.c``, and links ``B`` to ``A``. "
"Furthermore, the code"
msgstr ""

#: ../../../command/target_link_libraries.rst:248
msgid ""
"add_executable(main main.c)\n"
"target_link_libraries(main B)"
msgstr ""

#: ../../../command/target_link_libraries.rst:253
msgid ""
"compiles ``main.c`` with ``-DA -DOBJ`` and links executable ``main`` to "
"``B`` and ``A``.  The object library's usage requirements are propagated "
"transitively through ``B``, but its object files are not."
msgstr ""

#: ../../../command/target_link_libraries.rst:257
msgid ""
":ref:`Object Libraries` may \"link\" to other object libraries to get usage "
"requirements, but since they do not have a link step nothing is done with "
"their object files.  Continuing from the above example, the code:"
msgstr ""

#: ../../../command/target_link_libraries.rst:262
msgid ""
"add_library(obj2 OBJECT obj2.c)\n"
"target_link_libraries(obj2 PUBLIC obj)\n"
"\n"
"add_executable(main2 main2.c)\n"
"target_link_libraries(main2 obj2)"
msgstr ""

#: ../../../command/target_link_libraries.rst:270
msgid ""
"compiles ``obj2.c`` with ``-DA -DOBJ``, creates executable ``main2`` with "
"object files from ``main2.c`` and ``obj2.c``, and links ``main2`` to ``A``."
msgstr ""

#: ../../../command/target_link_libraries.rst:274
msgid ""
"In other words, when :ref:`Object Libraries` appear in a target's :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES` property they will be treated as :ref:`Interface "
"Libraries`, but when they appear in a target's :prop_tgt:`LINK_LIBRARIES` "
"property their object files will be included in the link too."
msgstr ""

#: ../../../command/target_link_libraries.rst:281
msgid "Cyclic Dependencies of Static Libraries"
msgstr ""

#: ../../../command/target_link_libraries.rst:283
msgid ""
"The library dependency graph is normally acyclic (a DAG), but in the case of "
"mutually-dependent ``STATIC`` libraries CMake allows the graph to contain "
"cycles (strongly connected components).  When another target links to one of "
"the libraries, CMake repeats the entire connected component. For example, "
"the code"
msgstr ""

#: ../../../command/target_link_libraries.rst:289
msgid ""
"add_library(A STATIC a.c)\n"
"add_library(B STATIC b.c)\n"
"target_link_libraries(A B)\n"
"target_link_libraries(B A)\n"
"add_executable(main main.c)\n"
"target_link_libraries(main A)"
msgstr ""

#: ../../../command/target_link_libraries.rst:298
msgid ""
"links ``main`` to ``A B A B``.  While one repetition is usually sufficient, "
"pathological object file and symbol arrangements can require more.  One may "
"handle such cases by using the :prop_tgt:`LINK_INTERFACE_MULTIPLICITY` "
"target property or by manually repeating the component in the last "
"``target_link_libraries`` call. However, if two archives are really so "
"interdependent they should probably be combined into a single archive, "
"perhaps by using :ref:`Object Libraries`."
msgstr ""

#: ../../../command/target_link_libraries.rst:307
msgid "Creating Relocatable Packages"
msgstr ""

#: ../../../include/INTERFACE_LINK_LIBRARIES_WARNING.txt:2
msgid ""
"Note that it is not advisable to populate the |INTERFACE_PROPERTY_LINK| of a "
"target with absolute paths to dependencies. That would hard-code into "
"installed packages the library file paths for dependencies **as found on the "
"machine the package was made on**."
msgstr ""

#: ../../../include/INTERFACE_LINK_LIBRARIES_WARNING.txt:7
msgid ""
"See the :ref:`Creating Relocatable Packages` section of the :manual:`cmake-"
"packages(7)` manual for discussion of additional care that must be taken "
"when specifying usage requirements while creating packages for "
"redistribution."
msgstr ""
