# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2020 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.17\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindPython.cmake:6
msgid "FindPython"
msgstr ""

#: ../../../../Modules/FindPython.cmake:8
msgid ""
"Find Python interpreter, compiler and development environment (include "
"directories and libraries)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:11
msgid "The following components are supported:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:13
msgid "``Interpreter``: search for Python interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:14
msgid "``Compiler``: search for Python compiler. Only offered by IronPython."
msgstr ""

#: ../../../../Modules/FindPython.cmake:15
msgid ""
"``Development``: search for development artifacts (include directories and "
"libraries)."
msgstr ""

#: ../../../../Modules/FindPython.cmake:17
msgid "``NumPy``: search for NumPy include directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:19
msgid "If no ``COMPONENTS`` are specified, ``Interpreter`` is assumed."
msgstr ""

#: ../../../../Modules/FindPython.cmake:21
msgid ""
"To ensure consistent versions between components ``Interpreter``, "
"``Compiler``, ``Development`` and ``NumPy``, specify all components at the "
"same time::"
msgstr ""

#: ../../../../Modules/FindPython.cmake:24
msgid "find_package (Python COMPONENTS Interpreter Development)"
msgstr ""

#: ../../../../Modules/FindPython.cmake:26
msgid ""
"This module looks preferably for version 3 of Python. If not found, version "
"2 is searched. To manage concurrent versions 3 and 2 of Python, use :module:"
"`FindPython3` and :module:`FindPython2` modules rather than this one."
msgstr ""

#: ../../../../Modules/FindPython.cmake:33
msgid ""
"If components ``Interpreter`` and ``Development`` are both specified, this "
"module search only for interpreter with same platform architecture as the "
"one defined by ``CMake`` configuration. This contraint does not apply if "
"only ``Interpreter`` component is specified."
msgstr ""

#: ../../../../Modules/FindPython.cmake:39
msgid "Imported Targets"
msgstr ""

#: ../../../../Modules/FindPython.cmake:41
msgid ""
"This module defines the following :ref:`Imported Targets <Imported Targets>` "
"(when :prop_gbl:`CMAKE_ROLE` is ``PROJECT``):"
msgstr ""

#: ../../../../Modules/FindPython.cmake:44
msgid "``Python::Interpreter``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:45
msgid ""
"Python interpreter. Target defined if component ``Interpreter`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:46
msgid "``Python::Compiler``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:47
msgid "Python compiler. Target defined if component ``Compiler`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:49
msgid "``Python::Python``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:49
msgid ""
"Python library for Python embedding. Target defined if component "
"``Development`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:52
msgid "``Python::Module``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:52
msgid ""
"Python library for Python module. Target defined if component "
"``Development`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:55
msgid "``Python::NumPy``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:55
msgid "NumPy Python library. Target defined if component ``NumPy`` is found."
msgstr ""

#: ../../../../Modules/FindPython.cmake:58
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindPython.cmake:60
msgid ""
"This module will set the following variables in your project (see :ref:"
"`Standard Variable Names <CMake Developer Standard Variable Names>`):"
msgstr ""

#: ../../../../Modules/FindPython.cmake:63
msgid "``Python_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:64
msgid "System has the Python requested components."
msgstr ""

#: ../../../../Modules/FindPython.cmake:65
msgid "``Python_Interpreter_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:66
msgid "System has the Python interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:67
#: ../../../../Modules/FindPython.cmake:258
msgid "``Python_EXECUTABLE``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:68
msgid "Path to the Python interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:74
msgid "``Python_INTERPRETER_ID``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:74
msgid "A short string unique to the interpreter. Possible values include:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:71
msgid "Python"
msgstr ""

#: ../../../../Modules/FindPython.cmake:72
msgid "ActivePython"
msgstr ""

#: ../../../../Modules/FindPython.cmake:73
msgid "Anaconda"
msgstr ""

#: ../../../../Modules/FindPython.cmake:74
msgid "Canopy"
msgstr ""

#: ../../../../Modules/FindPython.cmake:75
#: ../../../../Modules/FindPython.cmake:109
msgid "IronPython"
msgstr ""

#: ../../../../Modules/FindPython.cmake:79
msgid "``Python_STDLIB``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:77
msgid "Standard platform independent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:79
msgid ""
"Information returned by ``distutils.sysconfig."
"get_python_lib(plat_specific=False,standard_lib=True)``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:84
msgid "``Python_STDARCH``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:82
msgid "Standard platform dependent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:84
msgid ""
"Information returned by ``distutils.sysconfig."
"get_python_lib(plat_specific=True,standard_lib=True)``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:89
msgid "``Python_SITELIB``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:87
msgid "Third-party platform independent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:89
msgid ""
"Information returned by ``distutils.sysconfig."
"get_python_lib(plat_specific=False,standard_lib=False)``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:94
msgid "``Python_SITEARCH``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:92
msgid "Third-party platform dependent installation directory."
msgstr ""

#: ../../../../Modules/FindPython.cmake:94
msgid ""
"Information returned by ``distutils.sysconfig."
"get_python_lib(plat_specific=True,standard_lib=False)``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:101
msgid "``Python_SOABI``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:97
msgid "Extension suffix for modules."
msgstr ""

#: ../../../../Modules/FindPython.cmake:99
msgid ""
"Information returned by ``distutils.sysconfig.get_config_flag('SOABI')`` or "
"computed from ``distutils.sysconfig.get_config_flag('EXT_SUFFIX')`` or "
"``python-config --extension-suffix``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:103
msgid "``Python_Compiler_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:104
msgid "System has the Python compiler."
msgstr ""

#: ../../../../Modules/FindPython.cmake:105
#: ../../../../Modules/FindPython.cmake:261
msgid "``Python_COMPILER``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:106
msgid "Path to the Python compiler. Only offered by IronPython."
msgstr ""

#: ../../../../Modules/FindPython.cmake:108
msgid "``Python_COMPILER_ID``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:108
msgid "A short string unique to the compiler. Possible values include:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:110
msgid "``Python_Development_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:111
msgid "System has the Python development artifacts."
msgstr ""

#: ../../../../Modules/FindPython.cmake:112
msgid "``Python_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:113
msgid "The Python include directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:114
msgid "``Python_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:115
msgid "The Python libraries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:116
msgid "``Python_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:117
msgid "The Python library directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:118
msgid "``Python_RUNTIME_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:119
msgid "The Python runtime library directories."
msgstr ""

#: ../../../../Modules/FindPython.cmake:120
msgid "``Python_VERSION``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:121
msgid "Python version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:122
msgid "``Python_VERSION_MAJOR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:123
msgid "Python major version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:124
msgid "``Python_VERSION_MINOR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:125
msgid "Python minor version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:126
msgid "``Python_VERSION_PATCH``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:127
msgid "Python patch version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:128
msgid "``Python_NumPy_FOUND``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:129
msgid "System has the NumPy."
msgstr ""

#: ../../../../Modules/FindPython.cmake:130
msgid "``Python_NumPy_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:131
msgid "The NumPy include directries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:133
msgid "``Python_NumPy_VERSION``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:133
msgid "The NumPy version."
msgstr ""

#: ../../../../Modules/FindPython.cmake:136
msgid "Hints"
msgstr ""

#: ../../../../Modules/FindPython.cmake:139
msgid "``Python_ROOT_DIR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:139
msgid "Define the root directory of a Python installation."
msgstr ""

#: ../../../../Modules/FindPython.cmake:145
msgid "``Python_USE_STATIC_LIBS``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:142
msgid ""
"If not defined, search for shared libraries and static libraries in that "
"order."
msgstr ""

#: ../../../../Modules/FindPython.cmake:144
msgid "If set to TRUE, search **only** for static libraries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:145
msgid "If set to FALSE, search **only** for shared libraries."
msgstr ""

#: ../../../../Modules/FindPython.cmake:190
msgid "``Python_FIND_ABI``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:148
msgid ""
"This variable defines which ABIs, as defined in `PEP 3149 <https://www."
"python.org/dev/peps/pep-3149/>`_, should be searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:153
msgid "This hint will be honored only when searched for ``Python`` version 3."
msgstr ""

#: ../../../../Modules/FindPython.cmake:157
msgid "If ``Python_FIND_ABI`` is not defined, any ABI will be searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:159
msgid ""
"The ``Python_FIND_ABI`` variable is a 3-tuple specifying, in that order, "
"``pydebug`` (``d``), ``pymalloc`` (``m``) and ``unicode`` (``u``) flags. "
"Each element can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:163
msgid "``ON``: Corresponding flag is selected."
msgstr ""

#: ../../../../Modules/FindPython.cmake:164
msgid "``OFF``: Corresponding flag is not selected."
msgstr ""

#: ../../../../Modules/FindPython.cmake:165
msgid "``ANY``: The two posibilties (``ON`` and ``OFF``) will be searched."
msgstr ""

#: ../../../../Modules/FindPython.cmake:167
msgid ""
"From this 3-tuple, various ABIs will be searched starting from the most "
"specialized to the most general. Moreover, ``debug`` versions will be "
"searched **after** ``non-debug`` ones."
msgstr ""

#: ../../../../Modules/FindPython.cmake:171
msgid "For example, if we have::"
msgstr ""

#: ../../../../Modules/FindPython.cmake:173
msgid "set (Python_FIND_ABI \"ON\" \"ANY\" \"ANY\")"
msgstr ""

#: ../../../../Modules/FindPython.cmake:175
msgid ""
"The following flags combinations will be appended, in that order, to the "
"artifact names: ``dmu``, ``dm``, ``du``, and ``d``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:178
msgid "And to search any possible ABIs::"
msgstr ""

#: ../../../../Modules/FindPython.cmake:180
msgid "set (Python_FIND_ABI \"ANY\" \"ANY\" \"ANY\")"
msgstr ""

#: ../../../../Modules/FindPython.cmake:182
msgid ""
"The following combinations, in that order, will be used: ``mu``, ``m``, "
"``u``, ``<empty>``, ``dmu``, ``dm``, ``du`` and ``d``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:187
msgid ""
"This hint is useful only on ``POSIX`` systems. So, on ``Windows`` systems, "
"when ``Python_FIND_ABI`` is defined, ``Python`` distributions from `python."
"org <https://www.python.org/>`_ will be found only if value for each flag is "
"``OFF`` or ``ANY``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:202
msgid "``Python_FIND_STRATEGY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:193
msgid ""
"This variable defines how lookup will be done. The ``Python_FIND_STRATEGY`` "
"variable can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:196
msgid ""
"``VERSION``: Try to find the most recent version in all specified locations. "
"This is the default if policy :policy:`CMP0094` is undefined or set to "
"``OLD``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:200
msgid ""
"``LOCATION``: Stops lookup as soon as a version satisfying version "
"constraints is founded. This is the default if policy :policy:`CMP0094` is "
"set to ``NEW``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:212
msgid "``Python_FIND_REGISTRY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:205
msgid ""
"On Windows the ``Python_FIND_REGISTRY`` variable determine the order of "
"preference between registry and environment variables. the "
"``Python_FIND_REGISTRY`` variable can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:209
msgid ""
"``FIRST``: Try to use registry before environment variables. This is the "
"default."
msgstr ""

#: ../../../../Modules/FindPython.cmake:211
msgid "``LAST``: Try to use registry after environment variables."
msgstr ""

#: ../../../../Modules/FindPython.cmake:212
msgid "``NEVER``: Never try to use registry."
msgstr ""

#: ../../../../Modules/FindPython.cmake:225
msgid "``Python_FIND_FRAMEWORK``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:215
msgid ""
"On macOS the ``Python_FIND_FRAMEWORK`` variable determine the order of "
"preference between Apple-style and unix-style package components. This "
"variable can take same values as :variable:`CMAKE_FIND_FRAMEWORK` variable."
msgstr ""

#: ../../../../Modules/FindPython.cmake:222
msgid "Value ``ONLY`` is not supported so ``FIRST`` will be used instead."
msgstr ""

#: ../../../../Modules/FindPython.cmake:224
msgid ""
"If ``Python_FIND_FRAMEWORK`` is not defined, :variable:"
"`CMAKE_FIND_FRAMEWORK` variable will be used, if any."
msgstr ""

#: ../../../../Modules/FindPython.cmake:249
msgid "``Python_FIND_VIRTUALENV``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:228
msgid ""
"This variable defines the handling of virtual environments managed by "
"``virtualenv`` or ``conda``. It is meaningful only when a virtual "
"environment is active (i.e. the ``activate`` script has been evaluated). In "
"this case, it takes precedence over ``Python_FIND_REGISTRY`` and "
"``CMAKE_FIND_FRAMEWORK`` variables.  The ``Python_FIND_VIRTUALENV`` variable "
"can be set to one of the following:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:235
msgid ""
"``FIRST``: The virtual environment is used before any other standard paths "
"to look-up for the interpreter. This is the default."
msgstr ""

#: ../../../../Modules/FindPython.cmake:237
msgid ""
"``ONLY``: Only the virtual environment is used to look-up for the "
"interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:239
msgid ""
"``STANDARD``: The virtual environment is not used to look-up for the "
"interpreter. In this case, variable ``Python_FIND_REGISTRY`` (Windows) or "
"``CMAKE_FIND_FRAMEWORK`` (macOS) can be set with value ``LAST`` or ``NEVER`` "
"to select preferably the interpreter from the virtual environment."
msgstr ""

#: ../../../../Modules/FindPython.cmake:247
msgid ""
"If the component ``Development`` is requested, it is **strongly** "
"recommended to also include the component ``Interpreter`` to get expected "
"result."
msgstr ""

#: ../../../../Modules/FindPython.cmake:252
msgid "Artifacts Specification"
msgstr ""

#: ../../../../Modules/FindPython.cmake:254
msgid ""
"To solve special cases, it is possible to specify directly the artifacts by "
"setting the following variables:"
msgstr ""

#: ../../../../Modules/FindPython.cmake:258
msgid "The path to the interpreter."
msgstr ""

#: ../../../../Modules/FindPython.cmake:261
msgid "The path to the compiler."
msgstr ""

#: ../../../../Modules/FindPython.cmake:266
msgid "``Python_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:264
msgid ""
"The path to the library. It will be used to compute the variables "
"``Python_LIBRARIES``, ``Python_LIBRAY_DIRS`` and "
"``Python_RUNTIME_LIBRARY_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:270
msgid "``Python_INCLUDE_DIR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:269
msgid ""
"The path to the directory of the ``Python`` headers. It will be used to "
"compute the variable ``Python_INCLUDE_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:274
msgid "``Python_NumPy_INCLUDE_DIR``"
msgstr ""

#: ../../../../Modules/FindPython.cmake:273
msgid ""
"The path to the directory of the ``NumPy`` headers. It will be used to "
"compute the variable ``Python_NumPy_INCLUDE_DIRS``."
msgstr ""

#: ../../../../Modules/FindPython.cmake:278
msgid ""
"All paths must be absolute. Any artifact specified with a relative path will "
"be ignored."
msgstr ""

#: ../../../../Modules/FindPython.cmake:283
msgid ""
"When an artifact is specified, all ``HINTS`` will be ignored and no search "
"will be performed for this artifact."
msgstr ""

#: ../../../../Modules/FindPython.cmake:286
msgid ""
"If more than one artifact is specified, it is the user's responsability to "
"ensure the consistency of the various artifacts."
msgstr ""

#: ../../../../Modules/FindPython.cmake:290
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindPython.cmake:292
msgid ""
"This module defines the command ``Python_add_library`` (when :prop_gbl:"
"`CMAKE_ROLE` is ``PROJECT``), which has the same semantics as :command:"
"`add_library` and adds a dependency to target ``Python::Python`` or, when "
"library type is ``MODULE``, to target ``Python::Module`` and takes care of "
"Python module naming rules::"
msgstr ""

#: ../../../../Modules/FindPython.cmake:298
msgid ""
"Python_add_library (<name> [STATIC | SHARED | MODULE [WITH_SOABI]]\n"
"                    <source1> [<source2> ...])"
msgstr ""

#: ../../../../Modules/FindPython.cmake:301
msgid "If the library type is not specified, ``MODULE`` is assumed."
msgstr ""

#: ../../../../Modules/FindPython.cmake:303
msgid ""
"For ``MODULE`` library type, if option ``WITH_SOABI`` is specified, the "
"module suffix will include the ``Python_SOABI`` value, if any."
msgstr ""
