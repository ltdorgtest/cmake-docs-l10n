# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/define_property.rst:2
msgid "define_property"
msgstr ""

#: ../../../command/define_property.rst:4
msgid "Define and document custom properties."
msgstr ""

#: ../../../command/define_property.rst:6
msgid ""
"define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |\n"
"                 TEST | VARIABLE | CACHED_VARIABLE>\n"
"                 PROPERTY <name> [INHERITED]\n"
"                 [BRIEF_DOCS <brief-doc> [docs...]]\n"
"                 [FULL_DOCS <full-doc> [docs...]]\n"
"                 [INITIALIZE_FROM_VARIABLE <variable>])"
msgstr ""

#: ../../../command/define_property.rst:15
msgid ""
"Defines one property in a scope for use with the :command:`set_property` "
"and :command:`get_property` commands. It is mainly useful for defining the "
"way a property is initialized or inherited. Historically, the command also "
"associated documentation with a property, but that is no longer considered a "
"primary use case."
msgstr ""

#: ../../../command/define_property.rst:21
msgid ""
"The first argument determines the kind of scope in which the property should "
"be used.  It must be one of the following:"
msgstr ""

#: ../../../command/define_property.rst:26
msgid ""
"GLOBAL    = associated with the global namespace\n"
"DIRECTORY = associated with one directory\n"
"TARGET    = associated with one target\n"
"SOURCE    = associated with one source file\n"
"TEST      = associated with a test named with add_test\n"
"VARIABLE  = documents a CMake language variable\n"
"CACHED_VARIABLE = documents a CMake cache variable"
msgstr ""

#: ../../../command/define_property.rst:34
msgid ""
"Note that unlike :command:`set_property` and :command:`get_property` no "
"actual scope needs to be given; only the kind of scope is important."
msgstr ""

#: ../../../command/define_property.rst:37
msgid ""
"The required ``PROPERTY`` option is immediately followed by the name of the "
"property being defined."
msgstr ""

#: ../../../command/define_property.rst:40
msgid ""
"If the ``INHERITED`` option is given, then the :command:`get_property` "
"command will chain up to the next higher scope when the requested property "
"is not set in the scope given to the command."
msgstr ""

#: ../../../command/define_property.rst:44
msgid ""
"``DIRECTORY`` scope chains to its parent directory's scope, continuing the "
"walk up parent directories until a directory has the property set or there "
"are no more parents.  If still not found at the top level directory, it "
"chains to the ``GLOBAL`` scope."
msgstr ""

#: ../../../command/define_property.rst:48
msgid ""
"``TARGET``, ``SOURCE`` and ``TEST`` properties chain to ``DIRECTORY`` scope, "
"including further chaining up the directories, etc. as needed."
msgstr ""

#: ../../../command/define_property.rst:51
msgid ""
"Note that this scope chaining behavior only applies to calls to :command:"
"`get_property`, :command:`get_directory_property`, :command:"
"`get_target_property`, :command:`get_source_file_property` and :command:"
"`get_test_property`.  There is no inheriting behavior when *setting* "
"properties, so using ``APPEND`` or ``APPEND_STRING`` with the :command:"
"`set_property` command will not consider inherited values when working out "
"the contents to append to."
msgstr ""

#: ../../../command/define_property.rst:59
msgid ""
"The ``BRIEF_DOCS`` and ``FULL_DOCS`` options are followed by strings to be "
"associated with the property as its brief and full documentation. CMake does "
"not use this documentation other than making it available to the project via "
"corresponding options to the :command:`get_property` command."
msgstr ""

#: ../../../command/define_property.rst:66
msgid "The ``BRIEF_DOCS`` and ``FULL_DOCS`` options are optional."
msgstr ""

#: ../../../command/define_property.rst:70
msgid ""
"The ``INITIALIZE_FROM_VARIABLE`` option specifies a variable from which the "
"property should be initialized. It can only be used with target properties. "
"The ``<variable>`` name must end with the property name and must not begin "
"with ``CMAKE_`` or ``_CMAKE_``. The property name must contain at least one "
"underscore. It is recommended that the property name have a prefix specific "
"to the project."
msgstr ""

#: ../../../command/define_property.rst:78
msgid "See Also"
msgstr ""

#: ../../../command/define_property.rst:80
msgid ":command:`get_property`"
msgstr ""

#: ../../../command/define_property.rst:81
msgid ":command:`set_property`"
msgstr ""
