# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2014 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/try_compile.rst:2
msgid "try_compile"
msgstr ""

#: ../../../command/try_compile.rst:4
msgid "Try building some code."
msgstr ""

#: ../../../command/try_compile.rst:8
msgid ""
"try_compile(RESULT_VAR <bindir> <srcdir>\n"
"            <projectName> [targetName] [CMAKE_FLAGS flags...]\n"
"            [OUTPUT_VARIABLE <var>])"
msgstr ""

#: ../../../command/try_compile.rst:12
msgid ""
"Try building a project.  In this form, srcdir should contain a complete "
"CMake project with a CMakeLists.txt file and all sources. The bindir and "
"srcdir will not be deleted after this command is run. Specify targetName to "
"build a specific target instead of the 'all' or 'ALL_BUILD' target."
msgstr ""

#: ../../../command/try_compile.rst:20
msgid ""
"try_compile(RESULT_VAR <bindir> <srcfile|SOURCES srcfile...>\n"
"            [CMAKE_FLAGS flags...]\n"
"            [COMPILE_DEFINITIONS flags...]\n"
"            [LINK_LIBRARIES libs...]\n"
"            [OUTPUT_VARIABLE <var>]\n"
"            [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]])"
msgstr ""

#: ../../../command/try_compile.rst:27
msgid ""
"Try building an executable from one or more source files.  In this form the "
"user need only supply one or more source files that include a definition for "
"'main'.  CMake will create a CMakeLists.txt file to build the source(s) as "
"an executable.  Specify COPY_FILE to get a copy of the linked executable at "
"the given fileName and optionally COPY_FILE_ERROR to capture any error."
msgstr ""

#: ../../../command/try_compile.rst:34
msgid ""
"In this version all files in bindir/CMakeFiles/CMakeTmp will be cleaned "
"automatically.  For debugging, --debug-trycompile can be passed to cmake to "
"avoid this clean.  However, multiple sequential try_compile operations reuse "
"this single output directory.  If you use --debug-trycompile, you can only "
"debug one try_compile call at a time. The recommended procedure is to "
"configure with cmake all the way through once, then delete the cache entry "
"associated with the try_compile call of interest, and then re-run cmake "
"again with --debug-trycompile."
msgstr ""

#: ../../../command/try_compile.rst:44
msgid ""
"Some extra flags that can be included are, INCLUDE_DIRECTORIES, "
"LINK_DIRECTORIES, and LINK_LIBRARIES.  COMPILE_DEFINITIONS are -Ddefinition "
"that will be passed to the compile line."
msgstr ""

#: ../../../command/try_compile.rst:48
msgid ""
"The srcfile signature also accepts a LINK_LIBRARIES argument which may "
"contain a list of libraries or IMPORTED targets which will be linked to in "
"the generated project.  If LINK_LIBRARIES is specified as a parameter to "
"try_compile, then any LINK_LIBRARIES passed as CMAKE_FLAGS will be ignored."
msgstr ""

#: ../../../command/try_compile.rst:54
msgid ""
"try_compile creates a CMakeList.txt file on the fly that looks like this:"
msgstr ""

#: ../../../command/try_compile.rst:59
msgid ""
"add_definitions( <expanded COMPILE_DEFINITIONS from calling cmake>)\n"
"include_directories(${INCLUDE_DIRECTORIES})\n"
"link_directories(${LINK_DIRECTORIES})\n"
"add_executable(cmTryCompileExec sources)\n"
"target_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})"
msgstr ""

#: ../../../command/try_compile.rst:65
msgid ""
"In both versions of the command, if OUTPUT_VARIABLE is specified, then the "
"output from the build process is stored in the given variable. The success "
"or failure of the try_compile, i.e.  TRUE or FALSE respectively, is returned "
"in RESULT_VAR.  CMAKE_FLAGS can be used to pass -DVAR:TYPE=VALUE flags to "
"the cmake that is run during the build. Set variable "
"CMAKE_TRY_COMPILE_CONFIGURATION to choose a build configuration."
msgstr ""
