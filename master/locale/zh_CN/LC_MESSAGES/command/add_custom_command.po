# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/add_custom_command.rst:2
msgid "add_custom_command"
msgstr ""

#: ../../../command/add_custom_command.rst:4
msgid "Add a custom build rule to the generated build system."
msgstr ""

#: ../../../command/add_custom_command.rst:6
msgid "There are two main signatures for ``add_custom_command``."
msgstr ""

#: ../../../command/add_custom_command.rst:11
msgid "Generating Files"
msgstr ""

#: ../../../command/add_custom_command.rst:13
msgid ""
"The first signature is for adding a custom command to produce an output:"
msgstr ""

#: ../../../command/add_custom_command.rst:15
msgid ""
"add_custom_command(OUTPUT output1 [output2 ...]\n"
"                   COMMAND command1 [ARGS] [args1...]\n"
"                   [COMMAND command2 [ARGS] [args2...] ...]\n"
"                   [MAIN_DEPENDENCY depend]\n"
"                   [DEPENDS [depends...]]\n"
"                   [BYPRODUCTS [files...]]\n"
"                   [IMPLICIT_DEPENDS <lang1> depend1\n"
"                                    [<lang2> depend2] ...]\n"
"                   [WORKING_DIRECTORY dir]\n"
"                   [COMMENT comment]\n"
"                   [DEPFILE depfile]\n"
"                   [JOB_POOL job_pool]\n"
"                   [JOB_SERVER_AWARE <bool>]\n"
"                   [VERBATIM] [APPEND] [USES_TERMINAL]\n"
"                   [CODEGEN]\n"
"                   [COMMAND_EXPAND_LISTS]\n"
"                   [DEPENDS_EXPLICIT_ONLY])"
msgstr ""

#: ../../../command/add_custom_command.rst:35
msgid ""
"This defines a command to generate specified ``OUTPUT`` file(s). A target "
"created in the same directory (``CMakeLists.txt`` file) that specifies any "
"output of the custom command as a source file is given a rule to generate "
"the file using the command at build time."
msgstr ""

#: ../../../command/add_custom_command.rst:40
msgid ""
"Do not list the output in more than one independent target that may build in "
"parallel or the instances of the rule may conflict. Instead, use the :"
"command:`add_custom_target` command to drive the command and make the other "
"targets depend on that one.  See the `Example: Generating Files for Multiple "
"Targets`_ below."
msgstr ""

#: ../../../command/add_custom_command.rst:46
msgid "The options are:"
msgstr ""

#: ../../../command/add_custom_command.rst:48
msgid "``APPEND``"
msgstr ""

#: ../../../command/add_custom_command.rst:49
msgid ""
"Append the ``COMMAND`` and ``DEPENDS`` option values to the custom command "
"for the first output specified.  There must have already been a previous "
"call to this command with the same output."
msgstr ""

#: ../../../command/add_custom_command.rst:53
msgid ""
"If the previous call specified the output via a generator expression, the "
"output specified by the current call must match in at least one "
"configuration after evaluating generator expressions.  In this case, the "
"appended commands and dependencies apply to all configurations."
msgstr ""

#: ../../../command/add_custom_command.rst:58
msgid ""
"The ``COMMENT``, ``MAIN_DEPENDENCY``, and ``WORKING_DIRECTORY`` options are "
"currently ignored when ``APPEND`` is given, but may be used in the future."
msgstr ""

#: ../../../command/add_custom_command.rst:62
msgid "``BYPRODUCTS``"
msgstr ""

#: ../../../command/add_custom_command.rst:65
msgid ""
"Specify the files the command is expected to produce but whose modification "
"time may or may not be newer than the dependencies. If a byproduct name is a "
"relative path it will be interpreted relative to the build tree directory "
"corresponding to the current source directory. Each byproduct file will be "
"marked with the :prop_sf:`GENERATED` source file property automatically."
msgstr ""

#: ../../../command/add_custom_command.rst:73
msgid ""
"*See policy* :policy:`CMP0058` *for the motivation behind this feature.*"
msgstr ""

#: ../../../command/add_custom_command.rst:75
msgid ""
"Explicit specification of byproducts is supported by the :generator:`Ninja` "
"generator to tell the ``ninja`` build tool how to regenerate byproducts when "
"they are missing.  It is also useful when other build rules (e.g. custom "
"commands) depend on the byproducts.  Ninja requires a build rule for any "
"generated file on which another rule depends even if there are order-only "
"dependencies to ensure the byproducts will be available before their "
"dependents build."
msgstr ""

#: ../../../command/add_custom_command.rst:84
msgid ""
"The :ref:`Makefile Generators` will remove ``BYPRODUCTS`` and other :prop_sf:"
"`GENERATED` files during ``make clean``."
msgstr ""

#: ../../../command/add_custom_command.rst:87
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"All byproducts must be set in the first call to "
"``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:91
msgid ""
"Arguments to ``BYPRODUCTS`` may use a restricted set of :manual:`generator "
"expressions <cmake-generator-expressions(7)>`. :ref:`Target-dependent "
"expressions <Target-Dependent Expressions>` are not permitted."
msgstr ""

#: ../../../command/add_custom_command.rst:97
msgid ""
"In targets using :ref:`file sets`, custom command byproducts are now "
"considered private unless they are listed in a non-private file set. See "
"policy :policy:`CMP0154`."
msgstr ""

#: ../../../command/add_custom_command.rst:102
msgid "``COMMAND``"
msgstr ""

#: ../../../command/add_custom_command.rst:103
msgid ""
"Specify the command-line(s) to execute at build time. At least one "
"``COMMAND`` would normally be given, but certain patterns may omit it, such "
"as adding commands in separate calls using ``APPEND``."
msgstr ""

#: ../../../command/add_custom_command.rst:107
msgid ""
"If more than one ``COMMAND`` is specified, they will be executed in order, "
"but *not* necessarily composed into a stateful shell or batch script. To run "
"a full script, use the :command:`configure_file` command or the :command:"
"`file(GENERATE)` command to create it, and then specify a ``COMMAND`` to "
"launch it."
msgstr ""

#: ../../../command/add_custom_command.rst:113
msgid ""
"The optional ``ARGS`` argument is for backward compatibility and will be "
"ignored."
msgstr ""

#: ../../../command/add_custom_command.rst:116
msgid ""
"If ``COMMAND`` specifies an executable target name (created by the :command:"
"`add_executable` command), it will automatically be replaced by the location "
"of the executable created at build time if either of the following is true:"
msgstr ""

#: ../../../command/add_custom_command.rst:121
msgid ""
"The target is not being cross-compiled (i.e. the :variable:"
"`CMAKE_CROSSCOMPILING` variable is not set to true)."
msgstr ""

#: ../../../command/add_custom_command.rst:123
msgid ""
"The target is being cross-compiled and an emulator is provided (i.e. its :"
"prop_tgt:`CROSSCOMPILING_EMULATOR` target property is set). In this case, "
"the contents of :prop_tgt:`CROSSCOMPILING_EMULATOR` will be prepended to the "
"command before the location of the target executable."
msgstr ""

#: ../../../command/add_custom_command.rst:129
msgid ""
"If neither of the above conditions are met, it is assumed that the command "
"name is a program to be found on the ``PATH`` at build time."
msgstr ""

#: ../../../command/add_custom_command.rst:132
msgid ""
"Arguments to ``COMMAND`` may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. Use the :genex:`TARGET_FILE` generator "
"expression to refer to the location of a target later in the command line (i."
"e. as a command argument rather than as the command to execute)."
msgstr ""

#: ../../../command/add_custom_command.rst:138
msgid ""
"Whenever one of the following target based generator expressions are used as "
"a command to execute or is mentioned in a command argument, a target-level "
"dependency will be added automatically so that the mentioned target will be "
"built before any target using this custom command (see policy :policy:"
"`CMP0112`)."
msgstr ""

#: ../../../command/add_custom_command.rst:144
msgid "``TARGET_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:145
msgid "``TARGET_LINKER_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:146
msgid "``TARGET_SONAME_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:147
msgid "``TARGET_PDB_FILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:149
msgid ""
"This target-level dependency does NOT add a file-level dependency that would "
"cause the custom command to re-run whenever the executable is recompiled. "
"List target names with the ``DEPENDS`` option to add such file-level "
"dependencies."
msgstr ""

#: ../../../command/add_custom_command.rst:154
msgid "``COMMENT``"
msgstr ""

#: ../../../command/add_custom_command.rst:155
msgid ""
"Display the given message before the commands are executed at build time.  "
"This will be ignored if ``APPEND`` is given, although a future version may "
"use it."
msgstr ""

#: ../../../command/add_custom_command.rst:159
msgid ""
"Arguments to ``COMMENT`` may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""

#: ../../../command/add_custom_command.rst:163
msgid "``DEPENDS``"
msgstr ""

#: ../../../command/add_custom_command.rst:164
msgid ""
"Specify files on which the command depends.  Each argument is converted to a "
"dependency as follows:"
msgstr ""

#: ../../../command/add_custom_command.rst:167
msgid ""
"If the argument is the name of a target (created by the :command:"
"`add_custom_target`, :command:`add_executable`, or :command:`add_library` "
"command) a target-level dependency is created to make sure the target is "
"built before any target using this custom command.  Additionally, if the "
"target is an executable or library, a file-level dependency is created to "
"cause the custom command to re-run whenever the target is recompiled."
msgstr ""

#: ../../../command/add_custom_command.rst:176
msgid ""
"If the argument is an absolute path, a file-level dependency is created on "
"that path."
msgstr ""

#: ../../../command/add_custom_command.rst:179
msgid ""
"If the argument is the name of a source file that has been added to a target "
"or on which a source file property has been set, a file-level dependency is "
"created on that source file."
msgstr ""

#: ../../../command/add_custom_command.rst:183
msgid ""
"If the argument is a relative path and it exists in the current source "
"directory, a file-level dependency is created on that file in the current "
"source directory."
msgstr ""

#: ../../../command/add_custom_command.rst:187
msgid ""
"Otherwise, a file-level dependency is created on that path relative to the "
"current binary directory."
msgstr ""

#: ../../../command/add_custom_command.rst:190
msgid ""
"If any dependency is an ``OUTPUT`` of another custom command in the same "
"directory (``CMakeLists.txt`` file), CMake automatically brings the other "
"custom command into the target in which this command is built."
msgstr ""

#: ../../../command/add_custom_command.rst:194
msgid ""
"A target-level dependency is added if any dependency is listed as "
"``BYPRODUCTS`` of a target or any of its build events in the same directory "
"to ensure the byproducts will be available."
msgstr ""

#: ../../../command/add_custom_command.rst:199
msgid ""
"If ``DEPENDS`` is not specified, the command will run whenever the "
"``OUTPUT`` is missing; if the command does not actually create the "
"``OUTPUT``, the rule will always run."
msgstr ""

#: ../../../command/add_custom_command.rst:203
msgid ""
"Arguments to ``DEPENDS`` may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""

#: ../../../command/add_custom_command.rst:207
msgid "``COMMAND_EXPAND_LISTS``"
msgstr ""

#: ../../../command/add_custom_command.rst:210
msgid ""
"Lists in ``COMMAND`` arguments will be expanded, including those created "
"with :manual:`generator expressions <cmake-generator-expressions(7)>`, "
"allowing ``COMMAND`` arguments such as ``${CC} \"-I$<JOIN:$<TARGET_PROPERTY:"
"foo,INCLUDE_DIRECTORIES>,;-I>\" foo.cc`` to be properly expanded."
msgstr ""

#: ../../../command/add_custom_command.rst:217
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"If the appended commands need this option to be set, it must be set on the "
"first call to ``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:221
msgid "``CODEGEN``"
msgstr ""

#: ../../../command/add_custom_command.rst:224
msgid ""
"Adds the custom command to a global ``codegen`` target that can be used to "
"execute the custom command while avoiding the majority of the build graph."
msgstr ""

#: ../../../command/add_custom_command.rst:228
msgid ""
"This option is supported only by :ref:`Ninja Generators` and :ref:`Makefile "
"Generators`, and is ignored by other generators. Furthermore, this option is "
"allowed only if policy :policy:`CMP0171` is set to ``NEW``."
msgstr ""

#: ../../../command/add_custom_command.rst:233
#: ../../../command/add_custom_command.rst:468
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"It can only be set on the first call to ``add_custom_command(OUTPUT...)`` "
"for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:237
msgid "``IMPLICIT_DEPENDS``"
msgstr ""

#: ../../../command/add_custom_command.rst:238
msgid ""
"Request scanning of implicit dependencies of an input file. The language "
"given specifies the programming language whose corresponding dependency "
"scanner should be used. Currently only ``C`` and ``CXX`` language scanners "
"are supported. The language has to be specified for every file in the "
"``IMPLICIT_DEPENDS`` list.  Dependencies discovered from the scanning are "
"added to those of the custom command at build time. Note that the "
"``IMPLICIT_DEPENDS`` option is currently supported only for Makefile "
"generators and will be ignored by other generators."
msgstr ""

#: ../../../command/add_custom_command.rst:250
msgid "This option cannot be specified at the same time as ``DEPFILE`` option."
msgstr ""

#: ../../../command/add_custom_command.rst:252
msgid "``JOB_POOL``"
msgstr ""

#: ../../../command/add_custom_command.rst:255
msgid ""
"Specify a :prop_gbl:`pool <JOB_POOLS>` for the :generator:`Ninja` generator. "
"Incompatible with ``USES_TERMINAL``, which implies the ``console`` pool. "
"Using a pool that is not defined by :prop_gbl:`JOB_POOLS` causes an error by "
"ninja at build time."
msgstr ""

#: ../../../command/add_custom_command.rst:261
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"Job pools can only be specified in the first call to "
"``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:265
msgid "``JOB_SERVER_AWARE``"
msgstr ""

#: ../../../command/add_custom_command.rst:268
msgid "Specify that the command is GNU Make job server aware."
msgstr ""

#: ../../../command/add_custom_command.rst:270
msgid ""
"For the :generator:`Unix Makefiles`, :generator:`MSYS Makefiles`, and :"
"generator:`MinGW Makefiles` generators this will add the ``+`` prefix to the "
"recipe line. See the `GNU Make Documentation`_ for more information."
msgstr ""

#: ../../../command/add_custom_command.rst:274
msgid "This option is silently ignored by other generators."
msgstr ""

#: ../../../command/add_custom_command.rst:276
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"Job server awareness can only be specified in the first call to "
"``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:282
msgid "``MAIN_DEPENDENCY``"
msgstr ""

#: ../../../command/add_custom_command.rst:283
msgid ""
"Specify the primary input source file to the command.  This is treated just "
"like any value given to the ``DEPENDS`` option but also suggests to Visual "
"Studio generators where to hang the custom command. Each source file may "
"have at most one command specifying it as its main dependency. A compile "
"command (i.e. for a library or an executable) counts as an implicit main "
"dependency which gets silently overwritten by a custom command specification."
msgstr ""

#: ../../../command/add_custom_command.rst:291
#: ../../../command/add_custom_command.rst:361
msgid ""
"This option is currently ignored if ``APPEND`` is given, but a future "
"version may use it."
msgstr ""

#: ../../../command/add_custom_command.rst:294
msgid "``OUTPUT``"
msgstr ""

#: ../../../command/add_custom_command.rst:295
msgid ""
"Specify the output files the command is expected to produce. Each output "
"file will be marked with the :prop_sf:`GENERATED` source file property "
"automatically. If the output of the custom command is not actually created "
"as a file on disk it should be marked with the :prop_sf:`SYMBOLIC` source "
"file property."
msgstr ""

#: ../../../command/add_custom_command.rst:302
msgid ""
"If an output file name is a relative path, its absolute path is determined "
"by interpreting it relative to:"
msgstr ""

#: ../../../command/add_custom_command.rst:305
msgid ""
"the build directory corresponding to the current source directory (:variable:"
"`CMAKE_CURRENT_BINARY_DIR`), or"
msgstr ""

#: ../../../command/add_custom_command.rst:308
msgid "the current source directory (:variable:`CMAKE_CURRENT_SOURCE_DIR`)."
msgstr ""

#: ../../../command/add_custom_command.rst:310
msgid ""
"The path in the build directory is preferred unless the path in the source "
"tree is mentioned as an absolute source file path elsewhere in the current "
"directory."
msgstr ""

#: ../../../command/add_custom_command.rst:314
msgid "The output file path may not contain ``<`` or ``>`` characters."
msgstr ""

#: ../../../command/add_custom_command.rst:316
msgid ""
"Arguments to ``OUTPUT`` may use a restricted set of :manual:`generator "
"expressions <cmake-generator-expressions(7)>`. :ref:`Target-dependent "
"expressions <Target-Dependent Expressions>` are not permitted."
msgstr ""

#: ../../../command/add_custom_command.rst:322
msgid ""
"In targets using :ref:`file sets`, custom command outputs are now considered "
"private unless they are listed in a non-private file set. See policy :policy:"
"`CMP0154`."
msgstr ""

#: ../../../command/add_custom_command.rst:327
msgid ""
"The output file path may now use ``#`` characters, except when using the :"
"generator:`Borland Makefiles` generator."
msgstr ""

#: ../../../command/add_custom_command.rst:331
msgid "``USES_TERMINAL``"
msgstr ""

#: ../../../command/add_custom_command.rst:334
msgid ""
"The command will be given direct access to the terminal if possible. With "
"the :generator:`Ninja` generator, this places the command in the "
"``console`` :prop_gbl:`pool <JOB_POOLS>`."
msgstr ""

#: ../../../command/add_custom_command.rst:338
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"If the appended commands need access to the terminal, it must be set on the "
"first call to ``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:342
msgid "``VERBATIM``"
msgstr ""

#: ../../../command/add_custom_command.rst:343
msgid ""
"All arguments to the commands will be escaped properly for the build tool so "
"that the invoked command receives each argument unchanged.  Note that one "
"level of escapes is still used by the CMake language processor before "
"add_custom_command even sees the arguments.  Use of ``VERBATIM`` is "
"recommended as it enables correct behavior.  When ``VERBATIM`` is not given "
"the behavior is platform specific because there is no protection of tool-"
"specific special characters."
msgstr ""

#: ../../../command/add_custom_command.rst:352
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"If the appended commands need to be treated as ``VERBATIM``, it must be set "
"on the first call to ``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:356
msgid "``WORKING_DIRECTORY``"
msgstr ""

#: ../../../command/add_custom_command.rst:357
msgid ""
"Execute the command with the given current working directory. If it is a "
"relative path, it will be interpreted relative to the build tree directory "
"corresponding to the current source directory."
msgstr ""

#: ../../../command/add_custom_command.rst:364
msgid ""
"Arguments to ``WORKING_DIRECTORY`` may use :manual:`generator expressions "
"<cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../command/add_custom_command.rst:368
msgid "``DEPFILE``"
msgstr ""

#: ../../../command/add_custom_command.rst:371
msgid ""
"Specify a depfile which holds dependencies for the custom command. It is "
"usually emitted by the custom command itself.  This keyword may only be used "
"if the generator supports it, as detailed below."
msgstr ""

#: ../../../command/add_custom_command.rst:375
msgid ""
"The expected format, compatible with what is generated by ``gcc`` with the "
"option ``-M``, is independent of the generator or platform."
msgstr ""

#: ../../../command/add_custom_command.rst:378
msgid ""
"The formal syntax, as specified using `BNF <https://en.wikipedia.org/wiki/"
"Backus%E2%80%93Naur_form>`_ notation with the regular extensions, is the "
"following:"
msgstr ""

#: ../../../command/add_custom_command.rst:382
msgid "\\begin{small}"
msgstr ""

#: ../../../command/add_custom_command.rst:404
msgid "\\end{small}"
msgstr ""

#: ../../../command/add_custom_command.rst:410
msgid ""
"As part of ``pathname``, any slash and backslash is interpreted as a "
"directory separator."
msgstr ""

#: ../../../command/add_custom_command.rst:413
msgid ""
"The :generator:`Ninja` generator supports ``DEPFILE`` since the keyword was "
"first added."
msgstr ""

#: ../../../command/add_custom_command.rst:417
msgid ""
"Added the :generator:`Ninja Multi-Config` generator, which included support "
"for the ``DEPFILE`` keyword."
msgstr ""

#: ../../../command/add_custom_command.rst:421
msgid "Added support for :ref:`Makefile Generators`."
msgstr ""

#: ../../../command/add_custom_command.rst:426
msgid ""
"``DEPFILE`` cannot be specified at the same time as the ``IMPLICIT_DEPENDS`` "
"option for :ref:`Makefile Generators`."
msgstr ""

#: ../../../command/add_custom_command.rst:429
msgid ""
"Added support for :ref:`Visual Studio Generators` with VS 2012 and above, "
"and for the :generator:`Xcode` generator.  Support for :manual:`generator "
"expressions <cmake-generator-expressions(7)>` was also added."
msgstr ""

#: ../../../command/add_custom_command.rst:435
msgid ""
"The :ref:`Ninja Generators` will now incorporate the dependencies into its "
"\"deps log\" database if the file is not listed in ``OUTPUTS`` or "
"``BYPRODUCTS``."
msgstr ""

#: ../../../command/add_custom_command.rst:440
msgid ""
"Using ``DEPFILE`` with generators other than those listed above is an error."
msgstr ""

#: ../../../command/add_custom_command.rst:442
msgid ""
"If the ``DEPFILE`` argument is relative, it should be relative to :variable:"
"`CMAKE_CURRENT_BINARY_DIR`, and any relative paths inside the ``DEPFILE`` "
"should also be relative to :variable:`CMAKE_CURRENT_BINARY_DIR`. See policy :"
"policy:`CMP0116`, which is always ``NEW`` for :ref:`Makefile Generators`, :"
"ref:`Visual Studio Generators`, and the :generator:`Xcode` generator."
msgstr ""

#: ../../../command/add_custom_command.rst:449
msgid ""
"This keyword cannot be used with ``APPEND`` (see policy :policy:`CMP0175`). "
"Depfiles can only be set on the first call to "
"``add_custom_command(OUTPUT...)`` for the output files."
msgstr ""

#: ../../../command/add_custom_command.rst:453
msgid "``DEPENDS_EXPLICIT_ONLY``"
msgstr ""

#: ../../../command/add_custom_command.rst:457
msgid ""
"Indicates that the command's ``DEPENDS`` argument represents all files "
"required by the command and implicit dependencies are not required."
msgstr ""

#: ../../../command/add_custom_command.rst:460
msgid ""
"Without this option, if any target uses the output of the custom command, "
"CMake will consider that target's dependencies as implicit dependencies for "
"the custom command in case this custom command requires files implicitly "
"created by those targets."
msgstr ""

#: ../../../command/add_custom_command.rst:465
msgid ""
"This option can be enabled on all custom commands by setting :variable:"
"`CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY` to ``ON``."
msgstr ""

#: ../../../command/add_custom_command.rst:472
msgid ""
"Only the :ref:`Ninja Generators` actually use this information to remove "
"unnecessary implicit dependencies."
msgstr ""

#: ../../../command/add_custom_command.rst:475
msgid ""
"See also the :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property, which may "
"provide another way for reducing the impact of target dependencies in some "
"scenarios."
msgstr ""

#: ../../../command/add_custom_command.rst:480
msgid "Examples: Generating Files"
msgstr ""

#: ../../../command/add_custom_command.rst:482
msgid ""
"Custom commands may be used to generate source files. For example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:485
msgid ""
"add_custom_command(\n"
"  OUTPUT out.c\n"
"  COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"                   -o out.c\n"
"  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"  VERBATIM)\n"
"add_library(myLib out.c)"
msgstr ""

#: ../../../command/add_custom_command.rst:495
msgid ""
"adds a custom command to run ``someTool`` to generate ``out.c`` and then "
"compile the generated source as part of a library.  The generation rule will "
"re-run whenever ``in.txt`` changes."
msgstr ""

#: ../../../command/add_custom_command.rst:499
msgid ""
"One may use generator expressions to specify per-configuration outputs. For "
"example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:503
msgid ""
"add_custom_command(\n"
"  OUTPUT \"out-$<CONFIG>.c\"\n"
"  COMMAND someTool -i ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"                   -o \"out-$<CONFIG>.c\"\n"
"                   -c \"$<CONFIG>\"\n"
"  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/in.txt\n"
"  VERBATIM)\n"
"add_library(myLib \"out-$<CONFIG>.c\")"
msgstr ""

#: ../../../command/add_custom_command.rst:514
msgid ""
"adds a custom command to run ``someTool`` to generate ``out-<config>.c``, "
"where ``<config>`` is the build configuration, and then compile the "
"generated source as part of a library."
msgstr ""

#: ../../../command/add_custom_command.rst:518
msgid ""
"Use the ``CODEGEN`` option to add a custom command's outputs to the builtin "
"``codegen`` target.  This is useful to make generated code available for  "
"static analysis without building the entire project.  For example:"
msgstr ""

#: ../../../command/add_custom_command.rst:523
msgid ""
"add_executable(someTool someTool.c)\n"
"\n"
"add_custom_command(\n"
"  OUTPUT out.c\n"
"  COMMAND someTool -o out.c\n"
"  CODEGEN)\n"
"\n"
"add_library(myLib out.c)"
msgstr ""

#: ../../../command/add_custom_command.rst:534
msgid ""
"A user may build the ``codegen`` target to generate ``out.c``. ``someTool`` "
"is built as dependency, but ``myLib`` is not built at all."
msgstr ""

#: ../../../command/add_custom_command.rst:538
msgid "Example: Generating Files for Multiple Targets"
msgstr ""

#: ../../../command/add_custom_command.rst:540
msgid ""
"If multiple independent targets need the same custom command output, it must "
"be attached to a single custom target on which they all depend. Consider the "
"following example:"
msgstr ""

#: ../../../command/add_custom_command.rst:544
msgid ""
"add_custom_command(\n"
"  OUTPUT table.csv\n"
"  COMMAND makeTable -i ${CMAKE_CURRENT_SOURCE_DIR}/input.dat\n"
"                    -o table.csv\n"
"  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/input.dat\n"
"  VERBATIM)\n"
"add_custom_target(generate_table_csv DEPENDS table.csv)\n"
"\n"
"add_custom_command(\n"
"  OUTPUT foo.cxx\n"
"  COMMAND genFromTable -i table.csv -case foo -o foo.cxx\n"
"  DEPENDS table.csv           # file-level dependency\n"
"          generate_table_csv  # target-level dependency\n"
"  VERBATIM)\n"
"add_library(foo foo.cxx)\n"
"\n"
"add_custom_command(\n"
"  OUTPUT bar.cxx\n"
"  COMMAND genFromTable -i table.csv -case bar -o bar.cxx\n"
"  DEPENDS table.csv           # file-level dependency\n"
"          generate_table_csv  # target-level dependency\n"
"  VERBATIM)\n"
"add_library(bar bar.cxx)"
msgstr ""

#: ../../../command/add_custom_command.rst:570
msgid ""
"Output ``foo.cxx`` is needed only by target ``foo`` and output ``bar.cxx`` "
"is needed only by target ``bar``, but *both* targets need ``table.csv``, "
"transitively.  Since ``foo`` and ``bar`` are independent targets that may "
"build concurrently, we prevent them from racing to generate ``table.csv`` by "
"placing its custom command in a separate target, ``generate_table_csv``. The "
"custom commands generating ``foo.cxx`` and ``bar.cxx`` each specify a target-"
"level dependency on ``generate_table_csv``, so the targets using them, "
"``foo`` and ``bar``, will not build until after target "
"``generate_table_csv`` is built."
msgstr ""

#: ../../../command/add_custom_command.rst:583
msgid "Build Events"
msgstr ""

#: ../../../command/add_custom_command.rst:585
msgid ""
"The second signature adds a custom command to a target such as a library or "
"executable.  This is useful for performing an operation before or after "
"building the target.  The command becomes part of the target and will only "
"execute when the target itself is built.  If the target is already built, "
"the command will not execute."
msgstr ""

#: ../../../command/add_custom_command.rst:591
msgid ""
"add_custom_command(TARGET <target>\n"
"                   PRE_BUILD | PRE_LINK | POST_BUILD\n"
"                   COMMAND command1 [ARGS] [args1...]\n"
"                   [COMMAND command2 [ARGS] [args2...] ...]\n"
"                   [BYPRODUCTS [files...]]\n"
"                   [WORKING_DIRECTORY dir]\n"
"                   [COMMENT comment]\n"
"                   [VERBATIM]\n"
"                   [COMMAND_EXPAND_LISTS]\n"
"                   [USES_TERMINAL])"
msgstr ""

#: ../../../command/add_custom_command.rst:604
msgid ""
"This defines a new command that will be associated with building the "
"specified ``<target>``.  The ``<target>`` must be defined in the current "
"directory; targets defined in other directories may not be specified."
msgstr ""

#: ../../../command/add_custom_command.rst:608
msgid ""
"When the command will happen is determined by which of the following is "
"specified:"
msgstr ""

#: ../../../command/add_custom_command.rst:611
msgid "``PRE_BUILD``"
msgstr ""

#: ../../../command/add_custom_command.rst:612
msgid ""
"This option has unique behavior for the :ref:`Visual Studio Generators`. "
"When using one of the Visual Studio generators, the command will run before "
"any other rules are executed within the target.  With all other generators, "
"this option behaves the same as ``PRE_LINK`` instead.  Because of this, it "
"is recommended to avoid using ``PRE_BUILD`` except when it is known that a "
"Visual Studio generator is being used."
msgstr ""

#: ../../../command/add_custom_command.rst:618
msgid "``PRE_LINK``"
msgstr ""

#: ../../../command/add_custom_command.rst:619
msgid ""
"Run after sources have been compiled but before linking the binary or "
"running the librarian or archiver tool of a static library. This is not "
"defined for targets created by the :command:`add_custom_target` command."
msgstr ""

#: ../../../command/add_custom_command.rst:623
msgid "``POST_BUILD``"
msgstr ""

#: ../../../command/add_custom_command.rst:624
msgid "Run after all other rules within the target have been executed."
msgstr ""

#: ../../../command/add_custom_command.rst:626
msgid ""
"Projects should always specify one of the above three keywords when using "
"the ``TARGET`` form.  See policy :policy:`CMP0175`."
msgstr ""

#: ../../../command/add_custom_command.rst:629
msgid ""
"All other keywords shown in the signature above have the same meaning as "
"they do for the :command:`add_custom_command(OUTPUT)` form of the command. "
"At least one ``COMMAND`` must be given, see policy :policy:`CMP0175`."
msgstr ""

#: ../../../command/add_custom_command.rst:634
msgid ""
"Because generator expressions can be used in custom commands, it is possible "
"to define ``COMMAND`` lines or whole custom commands which evaluate to empty "
"strings for certain configurations. For :ref:`Visual Studio Generators` "
"these command lines or custom commands will be omitted for the specific "
"configuration and no \"empty-string-command\" will be added."
msgstr ""

#: ../../../command/add_custom_command.rst:641
msgid "This allows adding individual build events for every configuration."
msgstr ""

#: ../../../command/add_custom_command.rst:643
msgid "Support for target-dependent generator expressions."
msgstr ""

#: ../../../command/add_custom_command.rst:646
msgid "The ``<target>`` may be an :ref:`ALIAS target <Alias Targets>`."
msgstr ""

#: ../../../command/add_custom_command.rst:650
msgid "Examples: Build Events"
msgstr ""

#: ../../../command/add_custom_command.rst:652
msgid ""
"A ``POST_BUILD`` event may be used to post-process a binary after linking. "
"For example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:655
msgid ""
"add_executable(myExe myExe.c)\n"
"add_custom_command(\n"
"  TARGET myExe POST_BUILD\n"
"  COMMAND someHasher -i \"$<TARGET_FILE:myExe>\"\n"
"                     -o \"$<TARGET_FILE:myExe>.hash\"\n"
"  VERBATIM)"
msgstr ""

#: ../../../command/add_custom_command.rst:664
msgid ""
"will run ``someHasher`` to produce a ``.hash`` file next to the executable "
"after linking."
msgstr ""

#: ../../../command/add_custom_command.rst:667
msgid ""
"One may use generator expressions to specify per-configuration byproducts. "
"For example, the code:"
msgstr ""

#: ../../../command/add_custom_command.rst:671
msgid ""
"add_library(myPlugin MODULE myPlugin.c)\n"
"add_custom_command(\n"
"  TARGET myPlugin POST_BUILD\n"
"  COMMAND someHasher -i \"$<TARGET_FILE:myPlugin>\"\n"
"                     --as-code \"myPlugin-hash-$<CONFIG>.c\"\n"
"  BYPRODUCTS \"myPlugin-hash-$<CONFIG>.c\"\n"
"  VERBATIM)\n"
"add_executable(myExe myExe.c \"myPlugin-hash-$<CONFIG>.c\")"
msgstr ""

#: ../../../command/add_custom_command.rst:682
msgid ""
"will run ``someHasher`` after linking ``myPlugin``, e.g. to produce a ``.c`` "
"file containing code to check the hash of ``myPlugin`` that the ``myExe`` "
"executable can use to verify it before loading."
msgstr ""

#: ../../../command/add_custom_command.rst:687
msgid "Ninja Multi-Config"
msgstr ""

#: ../../../command/add_custom_command.rst:691
msgid ""
"``add_custom_command`` supports the :generator:`Ninja Multi-Config` "
"generator's cross-config capabilities. See the generator documentation for "
"more information."
msgstr ""

#: ../../../command/add_custom_command.rst:696
msgid "See Also"
msgstr ""

#: ../../../command/add_custom_command.rst:698
msgid ":command:`add_custom_target`"
msgstr ""
