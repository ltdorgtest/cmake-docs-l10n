# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 07:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:6
msgid "WriteCompilerDetectionHeader"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:8
msgid ""
"This module is available only if policy :policy:`CMP0120` is not set to "
"``NEW``.  Do not use it in new code."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:14
msgid ""
"This module provides the function ``write_compiler_detection_header()``."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:16
msgid ""
"This function can be used to generate a file suitable for preprocessor "
"inclusion which contains macros to be used in source code:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:19
msgid ""
"write_compiler_detection_header(\n"
"          FILE <file>\n"
"          PREFIX <prefix>\n"
"          [OUTPUT_FILES_VAR <output_files_var> OUTPUT_DIR <output_dir>]\n"
"          COMPILERS <compiler> [...]\n"
"          FEATURES <feature> [...]\n"
"          [BARE_FEATURES <feature> [...]]\n"
"          [VERSION <version>]\n"
"          [PROLOG <prolog>]\n"
"          [EPILOG <epilog>]\n"
"          [ALLOW_UNKNOWN_COMPILERS]\n"
"          [ALLOW_UNKNOWN_COMPILER_VERSIONS]\n"
")"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:35
msgid ""
"This generates the file ``<file>`` with macros which all have the prefix "
"``<prefix>``."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:38
msgid ""
"By default, all content is written directly to the ``<file>``.  The "
"``OUTPUT_FILES_VAR`` may be specified to cause the compiler-specific content "
"to be written to separate files.  The separate files are then available in "
"the ``<output_files_var>`` and may be consumed by the caller for "
"installation for example.  The ``OUTPUT_DIR`` specifies a relative path from "
"the main ``<file>`` to the compiler-specific files. For example:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:45
msgid ""
"write_compiler_detection_header(\n"
"  FILE climbingstats_compiler_detection.h\n"
"  PREFIX ClimbingStats\n"
"  OUTPUT_FILES_VAR support_files\n"
"  OUTPUT_DIR compilers\n"
"  COMPILERS GNU Clang MSVC Intel\n"
"  FEATURES cxx_variadic_templates\n"
")\n"
"install(FILES\n"
"  ${CMAKE_CURRENT_BINARY_DIR}/climbingstats_compiler_detection.h\n"
"  DESTINATION include\n"
")\n"
"install(FILES\n"
"  ${support_files}\n"
"  DESTINATION include/compilers\n"
")"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:65
msgid ""
"``VERSION`` may be used to specify the API version to be generated. Future "
"versions of CMake may introduce alternative APIs.  A given API is selected "
"by any ``<version>`` value greater than or equal to the version of CMake "
"that introduced the given API and less than the version of CMake that "
"introduced its succeeding API. The value of the :variable:"
"`CMAKE_MINIMUM_REQUIRED_VERSION` variable is used if no explicit version is "
"specified. (As of CMake version |release| there is only one API version.)"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:74
msgid ""
"``PROLOG`` may be specified as text content to write at the start of the "
"header. ``EPILOG`` may be specified as text content to write at the end of "
"the header"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:78
msgid ""
"At least one ``<compiler>`` and one ``<feature>`` must be listed.  Compilers "
"which are known to CMake, but not specified are detected and a preprocessor "
"``#error`` is generated for them.  A preprocessor macro matching "
"``<PREFIX>_COMPILER_IS_<compiler>`` is generated for each compiler known to "
"CMake to contain the value ``0`` or ``1``."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:84
msgid ""
"Possible compiler identifiers are documented with the :variable:"
"`CMAKE_<LANG>_COMPILER_ID` variable. Available features in this version of "
"CMake are listed in the :prop_gbl:`CMAKE_C_KNOWN_FEATURES` and :prop_gbl:"
"`CMAKE_CXX_KNOWN_FEATURES` global properties. See the :manual:`cmake-compile-"
"features(7)` manual for information on compile features."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:92
msgid "Added ``MSVC`` and ``AppleClang`` compiler support."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:95
msgid "Added ``Intel`` compiler support."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:98
msgid "The ``{c,cxx}_std_*`` meta-features are ignored if requested."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:101
msgid ""
"``ALLOW_UNKNOWN_COMPILERS`` and ``ALLOW_UNKNOWN_COMPILER_VERSIONS`` cause "
"the module to generate conditions that treat unknown compilers as simply "
"lacking all features.  Without these options the default behavior is to "
"generate a ``#error`` for unknown compilers and versions."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:107
msgid ""
"``BARE_FEATURES`` will define the compatibility macros with the name used in "
"newer versions of the language standard, so the code can use the new feature "
"name unconditionally."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:113
msgid "Feature Test Macros"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:115
msgid ""
"For each compiler, a preprocessor macro is generated matching "
"``<PREFIX>_COMPILER_IS_<compiler>`` which has the content either ``0`` or "
"``1``, depending on the compiler in use. Preprocessor macros for compiler "
"version components are generated matching "
"``<PREFIX>_COMPILER_VERSION_MAJOR`` ``<PREFIX>_COMPILER_VERSION_MINOR`` and "
"``<PREFIX>_COMPILER_VERSION_PATCH`` containing decimal values for the "
"corresponding compiler version components, if defined."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:123
msgid ""
"A preprocessor test is generated based on the compiler version denoting "
"whether each feature is enabled.  A preprocessor macro matching "
"``<PREFIX>_COMPILER_<FEATURE>``, where ``<FEATURE>`` is the upper-case "
"``<feature>`` name, is generated to contain the value ``0`` or ``1`` "
"depending on whether the compiler in use supports the feature:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:130
msgid ""
"write_compiler_detection_header(\n"
"  FILE climbingstats_compiler_detection.h\n"
"  PREFIX ClimbingStats\n"
"  COMPILERS GNU Clang AppleClang MSVC Intel\n"
"  FEATURES cxx_variadic_templates\n"
")"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:139
msgid ""
"#if ClimbingStats_COMPILER_CXX_VARIADIC_TEMPLATES\n"
"template<typename... T>\n"
"void someInterface(T t...) { /* ... */ }\n"
"#else\n"
"// Compatibility versions\n"
"template<typename T1>\n"
"void someInterface(T1 t1) { /* ... */ }\n"
"template<typename T1, typename T2>\n"
"void someInterface(T1 t1, T2 t2) { /* ... */ }\n"
"template<typename T1, typename T2, typename T3>\n"
"void someInterface(T1 t1, T2 t2, T3 t3) { /* ... */ }\n"
"#endif"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:155
msgid "Symbol Macros"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:157
msgid ""
"Some additional symbol-defines are created for particular features for use "
"as symbols which may be conditionally defined empty:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:160
msgid ""
"class MyClass ClimbingStats_FINAL\n"
"{\n"
"    ClimbingStats_CONSTEXPR int someInterface() { return 42; }\n"
"};"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:167
msgid ""
"The ``ClimbingStats_FINAL`` macro will expand to ``final`` if the compiler "
"(and its flags) support the ``cxx_final`` feature, and the "
"``ClimbingStats_CONSTEXPR`` macro will expand to ``constexpr`` if "
"``cxx_constexpr`` is supported."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:172
msgid ""
"If ``BARE_FEATURES cxx_final`` was given as argument the ``final`` keyword "
"will be defined for old compilers, too."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:175
msgid ""
"The following features generate corresponding symbol defines and if they are "
"available as ``BARE_FEATURES``:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:179
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:224
msgid "Feature"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:179
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:224
msgid "Define"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:179
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:224
msgid "Symbol"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:179
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:224
msgid "bare"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:181
msgid "``c_restrict``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:181
msgid "``<PREFIX>_RESTRICT``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:181
msgid "``restrict``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:181
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:182
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:185
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:186
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:188
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:228
msgid "yes"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:182
msgid "``cxx_constexpr``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:182
msgid "``<PREFIX>_CONSTEXPR``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:182
msgid "``constexpr``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:183
msgid "``cxx_deleted_functions``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:183
msgid "``<PREFIX>_DELETED_FUNCTION``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:183
msgid "``= delete``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:184
msgid "``cxx_extern_templates``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:184
msgid "``<PREFIX>_EXTERN_TEMPLATE``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:184
msgid "``extern``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:185
msgid "``cxx_final``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:185
msgid "``<PREFIX>_FINAL``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:185
msgid "``final``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:186
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:187
msgid "``cxx_noexcept``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:186
msgid "``<PREFIX>_NOEXCEPT``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:186
msgid "``noexcept``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:187
msgid "``<PREFIX>_NOEXCEPT_EXPR(X)``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:187
msgid "``noexcept(X)``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:188
msgid "``cxx_override``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:188
msgid "``<PREFIX>_OVERRIDE``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:188
msgid "``override``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:192
msgid "Compatibility Implementation Macros"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:194
msgid ""
"Some features are suitable for wrapping in a macro with a backward "
"compatibility implementation if the compiler does not support the feature."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:197
msgid ""
"When the ``cxx_static_assert`` feature is not provided by the compiler, a "
"compatibility implementation is available via the "
"``<PREFIX>_STATIC_ASSERT(COND)`` and ``<PREFIX>_STATIC_ASSERT_MSG(COND, "
"MSG)`` function-like macros. The macros expand to ``static_assert`` where "
"that compiler feature is available, and to a compatibility implementation "
"otherwise. In the first form, the condition is stringified in the message "
"field of ``static_assert``.  In the second form, the message ``MSG`` is "
"passed to the message field of ``static_assert``, or ignored if using the "
"backward compatibility implementation."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:208
msgid ""
"The ``cxx_attribute_deprecated`` feature provides a macro definition "
"``<PREFIX>_DEPRECATED``, which expands to either the standard "
"``[[deprecated]]`` attribute or a compiler-specific decorator such as "
"``__attribute__((__deprecated__))`` used by GNU compilers."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:213
msgid ""
"The ``cxx_alignas`` feature provides a macro definition ``<PREFIX>_ALIGNAS`` "
"which expands to either the standard ``alignas`` decorator or a compiler-"
"specific decorator such as ``__attribute__ ((__aligned__))`` used by GNU "
"compilers."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:218
msgid ""
"The ``cxx_alignof`` feature provides a macro definition ``<PREFIX>_ALIGNOF`` "
"which expands to either the standard ``alignof`` decorator or a compiler-"
"specific decorator such as ``__alignof__`` used by GNU compilers."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:226
msgid "``cxx_alignas``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:226
msgid "``<PREFIX>_ALIGNAS``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:226
msgid "``alignas``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:227
msgid "``cxx_alignof``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:227
msgid "``<PREFIX>_ALIGNOF``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:227
msgid "``alignof``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:228
msgid "``cxx_nullptr``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:228
msgid "``<PREFIX>_NULLPTR``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:228
msgid "``nullptr``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:229
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:230
msgid "``cxx_static_assert``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:229
msgid "``<PREFIX>_STATIC_ASSERT``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:229
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:230
msgid "``static_assert``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:230
msgid "``<PREFIX>_STATIC_ASSERT_MSG``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:231
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:232
msgid "``cxx_attribute_deprecated``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:231
msgid "``<PREFIX>_DEPRECATED``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:231
#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:232
msgid "``[[deprecated]]``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:232
msgid "``<PREFIX>_DEPRECATED_MSG``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:233
msgid "``cxx_thread_local``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:233
msgid "``<PREFIX>_THREAD_LOCAL``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:233
msgid "``thread_local``"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:236
msgid ""
"A use-case which arises with such deprecation macros is the deprecation of "
"an entire library.  In that case, all public API in the library may be "
"decorated with the ``<PREFIX>_DEPRECATED`` macro.  This results in very "
"noisy build output when building the library itself, so the macro may be may "
"be defined to empty in that case when building the deprecated library:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:243
msgid ""
"add_library(compat_support ${srcs})\n"
"target_compile_definitions(compat_support\n"
"  PRIVATE\n"
"    CompatSupport_DEPRECATED=\n"
")"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:254
msgid "Example Usage"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:258
msgid ""
"This section was migrated from the :manual:`cmake-compile-features(7)` "
"manual since it relies on the ``WriteCompilerDetectionHeader`` module which "
"is removed by policy :policy:`CMP0120`."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:262
msgid ""
"Compile features may be preferred if available, without creating a hard "
"requirement.  For example, a library may provide alternative implementations "
"depending on whether the ``cxx_variadic_templates`` feature is available:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:267
msgid ""
"#if Foo_COMPILER_CXX_VARIADIC_TEMPLATES\n"
"template<int I, int... Is>\n"
"struct Interface;\n"
"\n"
"template<int I>\n"
"struct Interface<I>\n"
"{\n"
"  static int accumulate()\n"
"  {\n"
"    return I;\n"
"  }\n"
"};\n"
"\n"
"template<int I, int... Is>\n"
"struct Interface\n"
"{\n"
"  static int accumulate()\n"
"  {\n"
"    return I + Interface<Is...>::accumulate();\n"
"  }\n"
"};\n"
"#else\n"
"template<int I1, int I2 = 0, int I3 = 0, int I4 = 0>\n"
"struct Interface\n"
"{\n"
"  static int accumulate() { return I1 + I2 + I3 + I4; }\n"
"};\n"
"#endif"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:298
msgid ""
"Such an interface depends on using the correct preprocessor defines for the "
"compiler features.  CMake can generate a header file containing such defines "
"using the :module:`WriteCompilerDetectionHeader` module.  The module "
"contains the ``write_compiler_detection_header`` function which accepts "
"parameters to control the content of the generated header file:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:304
msgid ""
"write_compiler_detection_header(\n"
"  FILE \"${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\"\n"
"  PREFIX Foo\n"
"  COMPILERS GNU\n"
"  FEATURES\n"
"    cxx_variadic_templates\n"
")"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:314
msgid ""
"Such a header file may be used internally in the source code of a project, "
"and it may be installed and used in the interface of library code."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:317
msgid ""
"For each feature listed in ``FEATURES``, a preprocessor definition is "
"created in the header file, and defined to either ``1`` or ``0``."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:320
msgid ""
"Additionally, some features call for additional defines, such as the "
"``cxx_final`` and ``cxx_override`` features. Rather than being used in "
"``#ifdef`` code, the ``final`` keyword is abstracted by a symbol which is "
"defined to either ``final``, a compiler-specific equivalent, or to empty.  "
"That way, C++ code can be written to unconditionally use the symbol, and "
"compiler support determines what it is expanded to:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:327
msgid ""
"struct Interface {\n"
"  virtual void Execute() = 0;\n"
"};\n"
"\n"
"struct Concrete Foo_FINAL {\n"
"  void Execute() Foo_OVERRIDE;\n"
"};"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:337
msgid ""
"In this case, ``Foo_FINAL`` will expand to ``final`` if the compiler "
"supports the keyword, or to empty otherwise."
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:340
msgid ""
"In this use-case, the project code may wish to enable a particular language "
"standard if available from the compiler. The :prop_tgt:`CXX_STANDARD` target "
"property may be set to the desired language standard for a particular "
"target, and the :variable:`CMAKE_CXX_STANDARD` variable may be set to "
"influence all following targets:"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:346
msgid ""
"write_compiler_detection_header(\n"
"  FILE \"${CMAKE_CURRENT_BINARY_DIR}/foo_compiler_detection.h\"\n"
"  PREFIX Foo\n"
"  COMPILERS GNU\n"
"  FEATURES\n"
"    cxx_final cxx_override\n"
")\n"
"\n"
"# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol\n"
"# which will expand to 'final' if the compiler supports the requested\n"
"# CXX_STANDARD.\n"
"add_library(foo foo.cpp)\n"
"set_property(TARGET foo PROPERTY CXX_STANDARD 11)\n"
"\n"
"# Includes foo_compiler_detection.h and uses the Foo_FINAL symbol\n"
"# which will expand to 'final' if the compiler supports the feature,\n"
"# even though CXX_STANDARD is not set explicitly.  The requirement of\n"
"# cxx_constexpr causes CMake to set CXX_STANDARD internally, which\n"
"# affects the compile flags.\n"
"add_library(foo_impl foo_impl.cpp)\n"
"target_compile_features(foo_impl PRIVATE cxx_constexpr)"
msgstr ""

#: ../../../../Modules/WriteCompilerDetectionHeader.cmake:370
msgid ""
"The ``write_compiler_detection_header`` function also creates compatibility "
"code for other features which have standard equivalents.  For example, the "
"``cxx_static_assert`` feature is emulated with a template and abstracted via "
"the ``<PREFIX>_STATIC_ASSERT`` and ``<PREFIX>_STATIC_ASSERT_MSG`` function-"
"macros."
msgstr ""
