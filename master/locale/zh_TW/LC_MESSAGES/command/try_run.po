# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/try_run.rst:2
msgid "try_run"
msgstr ""

#: ../../../command/try_run.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/try_run.rst:8
msgid "Try compiling and then running some code."
msgstr ""

#: ../../../command/try_run.rst:11
msgid "Try Compiling and Running Source Files"
msgstr ""

#: ../../../command/try_run.rst:13
msgid ""
"try_run(<runResultVar> <compileResultVar>\n"
"        [SOURCES_TYPE <type>]\n"
"        <SOURCES <srcfile...>                 |\n"
"         SOURCE_FROM_CONTENT <name> <content> |\n"
"         SOURCE_FROM_VAR <name> <var>         |\n"
"         SOURCE_FROM_FILE <name> <path>       >...\n"
"        [LOG_DESCRIPTION <text>]\n"
"        [NO_CACHE]\n"
"        [NO_LOG]\n"
"        [CMAKE_FLAGS <flags>...]\n"
"        [COMPILE_DEFINITIONS <defs>...]\n"
"        [LINK_OPTIONS <options>...]\n"
"        [LINK_LIBRARIES <libs>...]\n"
"        [COMPILE_OUTPUT_VARIABLE <var>]\n"
"        [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]\n"
"        [<LANG>_STANDARD <std>]\n"
"        [<LANG>_STANDARD_REQUIRED <bool>]\n"
"        [<LANG>_EXTENSIONS <bool>]\n"
"        [RUN_OUTPUT_VARIABLE <var>]\n"
"        [RUN_OUTPUT_STDOUT_VARIABLE <var>]\n"
"        [RUN_OUTPUT_STDERR_VARIABLE <var>]\n"
"        [WORKING_DIRECTORY <var>]\n"
"        [ARGS <args>...]\n"
"        )"
msgstr ""

#: ../../../command/try_run.rst:42
msgid ""
"Try building an executable from one or more source files.  Build success "
"returns boolean ``true`` and build failure returns boolean ``false`` in "
"``<compileResultVar>`` (cached unless ``NO_CACHE`` is specified). If the "
"build succeeds, this runs the executable and stores the exit code in "
"``<runResultVar>`` (cached unless ``NO_CACHE`` is specified). If the "
"executable was built, but failed to run, then ``<runResultVar>`` will be set "
"to ``FAILED_TO_RUN``.  See command :command:`try_compile` for documentation "
"of options common to both commands, and for information on how the test "
"project is constructed to build the source file."
msgstr ""

#: ../../../command/try_run.rst:52
msgid ""
"One or more source files must be provided. Additionally, one of ``SOURCES`` "
"and/or ``SOURCE_FROM_*`` must precede other keywords."
msgstr ""

#: ../../../command/try_run.rst:55
msgid ""
"This command records a :ref:`configure-log try_run event <try_run configure-"
"log event>` if the ``NO_LOG`` option is not specified."
msgstr ""

#: ../../../command/try_run.rst:60
msgid ""
"This command supports an alternate signature for CMake older than 3.25. The "
"signature above is recommended for clarity."
msgstr ""

#: ../../../command/try_run.rst:63
msgid ""
"try_run(<runResultVar> <compileResultVar>\n"
"        <bindir> <srcfile|SOURCES srcfile...>\n"
"        [CMAKE_FLAGS <flags>...]\n"
"        [COMPILE_DEFINITIONS <defs>...]\n"
"        [LINK_OPTIONS <options>...]\n"
"        [LINK_LIBRARIES <libs>...]\n"
"        [LINKER_LANGUAGE <lang>]\n"
"        [COMPILE_OUTPUT_VARIABLE <var>]\n"
"        [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]\n"
"        [<LANG>_STANDARD <std>]\n"
"        [<LANG>_STANDARD_REQUIRED <bool>]\n"
"        [<LANG>_EXTENSIONS <bool>]\n"
"        [RUN_OUTPUT_VARIABLE <var>]\n"
"        [OUTPUT_VARIABLE <var>]\n"
"        [WORKING_DIRECTORY <var>]\n"
"        [ARGS <args>...]\n"
"        )"
msgstr ""

#: ../../../command/try_run.rst:86
msgid "Options"
msgstr ""

#: ../../../command/try_run.rst:88
msgid "The options specific to ``try_run`` are:"
msgstr ""

#: ../../../command/try_run.rst:90
msgid "``COMPILE_OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:91
msgid "Report the compile step build output in a given variable."
msgstr ""

#: ../../../command/try_run.rst:93
msgid "``OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:94
msgid ""
"Report the compile build output and the output from running the executable "
"in the given variable.  This option exists for legacy reasons and is only "
"supported by the old ``try_run`` signature. Prefer "
"``COMPILE_OUTPUT_VARIABLE`` and ``RUN_OUTPUT_VARIABLE`` instead."
msgstr ""

#: ../../../command/try_run.rst:99
msgid "``RUN_OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:100
msgid "Report the output from running the executable in a given variable."
msgstr ""

#: ../../../command/try_run.rst:102
msgid "``RUN_OUTPUT_STDOUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:105
msgid ""
"Report the output of stdout from running the executable in a given variable."
msgstr ""

#: ../../../command/try_run.rst:107
msgid "``RUN_OUTPUT_STDERR_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:110
msgid ""
"Report the output of stderr from running the executable in a given variable."
msgstr ""

#: ../../../command/try_run.rst:112
msgid "``WORKING_DIRECTORY <var>``"
msgstr ""

#: ../../../command/try_run.rst:115
msgid ""
"Run the executable in the given directory. If no ``WORKING_DIRECTORY`` is "
"specified, the executable will run in ``<bindir>`` or the current build "
"directory."
msgstr ""

#: ../../../command/try_run.rst:119
msgid "``ARGS <args>...``"
msgstr ""

#: ../../../command/try_run.rst:120
msgid "Additional arguments to pass to the executable when running it."
msgstr ""

#: ../../../command/try_run.rst:123
msgid "Other Behavior Settings"
msgstr ""

#: ../../../command/try_run.rst:125
msgid ""
"Set variable :variable:`CMAKE_TRY_COMPILE_CONFIGURATION` to choose a build "
"configuration:"
msgstr ""

#: ../../../command/try_run.rst:128
msgid "For multi-config generators, this selects which configuration to build."
msgstr ""

#: ../../../command/try_run.rst:130
msgid ""
"For single-config generators, this sets :variable:`CMAKE_BUILD_TYPE` in the "
"test project."
msgstr ""

#: ../../../command/try_run.rst:134
msgid "Behavior when Cross Compiling"
msgstr ""

#: ../../../command/try_run.rst:136
msgid ""
"Use ``CMAKE_CROSSCOMPILING_EMULATOR`` when running cross-compiled binaries."
msgstr ""

#: ../../../command/try_run.rst:139
msgid ""
"When cross compiling, the executable compiled in the first step usually "
"cannot be run on the build host.  The ``try_run`` command checks the :"
"variable:`CMAKE_CROSSCOMPILING` variable to detect whether CMake is in cross-"
"compiling mode.  If that is the case, it will still try to compile the "
"executable, but it will not try to run the executable unless the :variable:"
"`CMAKE_CROSSCOMPILING_EMULATOR` variable is set.  Instead it will create "
"cache variables which must be filled by the user or by presetting them in "
"some CMake script file to the values the executable would have produced if "
"it had been run on its actual target platform. These cache entries are:"
msgstr ""

#: ../../../command/try_run.rst:150
msgid "``<runResultVar>``"
msgstr ""

#: ../../../command/try_run.rst:151
msgid "Exit code if the executable were to be run on the target platform."
msgstr ""

#: ../../../command/try_run.rst:153
msgid "``<runResultVar>__TRYRUN_OUTPUT``"
msgstr ""

#: ../../../command/try_run.rst:154
msgid ""
"Output from stdout and stderr if the executable were to be run on the target "
"platform.  This is created only if the ``RUN_OUTPUT_VARIABLE`` or "
"``OUTPUT_VARIABLE`` option was used."
msgstr ""

#: ../../../command/try_run.rst:158
msgid ""
"In order to make cross compiling your project easier, use ``try_run`` only "
"if really required.  If you use ``try_run``, use the "
"``RUN_OUTPUT_STDOUT_VARIABLE``, ``RUN_OUTPUT_STDERR_VARIABLE``, "
"``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` options only if really "
"required.  Using them will require that when cross-compiling, the cache "
"variables will have to be set manually to the output of the executable. You "
"can also \"guard\" the calls to ``try_run`` with an :command:`if` block "
"checking the :variable:`CMAKE_CROSSCOMPILING` variable and provide an easy-"
"to-preset alternative for this case."
msgstr ""
