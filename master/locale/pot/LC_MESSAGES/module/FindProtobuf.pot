# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindProtobuf.cmake:6
msgid "FindProtobuf"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:10
msgid ""
"If the Protobuf library is built and installed using its CMake-based build "
"system, it provides a :ref:`package configuration file <Config File "
"Packages>` for use with the :command:`find_package` command in *config mode*:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:15
#: ../../../../Modules/FindProtobuf.cmake:404
msgid "find_package(Protobuf CONFIG)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:19
msgid ""
"In this case, imported targets and CMake commands such as :command:"
"`protobuf_generate` are provided by the upstream package rather than this "
"module.  Additionally, some variables documented here are not available in "
"*config mode*, as imported targets are preferred.  For usage details, refer "
"to the upstream documentation, which is the recommended way to use Protobuf "
"with CMake."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:26
msgid "This module works only in *module mode*."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:28
msgid ""
"This module finds the Protocol Buffers library (Protobuf) in *module mode*:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:30
msgid "find_package(Protobuf [<version>] [...])"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:34
msgid ""
"Protobuf is an open-source, language-neutral, and platform-neutral mechanism "
"for serializing structured data, developed by Google.  It is commonly used "
"for data exchange between programs or across networks."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:38
msgid ""
"Support for the ``<version>`` argument in :command:`find_package(Protobuf "
"\\<version\\>)`."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:42
msgid ""
"All input and output variables use the ``Protobuf_`` prefix.  Variables with "
"``PROTOBUF_`` prefix are supported for backward compatibility."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:47
msgid "Imported Targets"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:49
msgid "This module provides the following :ref:`Imported Targets`:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:51
msgid "``protobuf::libprotobuf``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:54
msgid ""
"Target encapsulating the Protobuf library usage requirements, available if "
"Protobuf library is found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:57
msgid "``protobuf::libprotobuf-lite``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:60
msgid ""
"Target encapsulating the ``protobuf-lite`` library usage requirements, "
"available if Protobuf and its lite library are found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:63
msgid "``protobuf::libprotoc``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:66
msgid ""
"Target encapsulating the ``protoc`` library usage requirements, available if "
"Protobuf and its ``protoc`` library are found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:69
msgid "``protobuf::protoc``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:72
msgid ""
"Imported executable target encapsulating the ``protoc`` compiler usage "
"requirements, available if Protobuf and ``protoc`` are found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:76
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:78
msgid "This module defines the following variables:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:80
msgid "``Protobuf_FOUND``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:83
msgid ""
"Boolean indicating whether the (requested version of) Protobuf library was "
"found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:86
msgid "``Protobuf_VERSION``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:89
msgid "The version of Protobuf found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:90
msgid "``Protobuf_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:91
msgid "Include directories needed to use Protobuf."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:92
msgid "``Protobuf_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:93
msgid "Libraries needed to link against to use Protobuf."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:94
msgid "``Protobuf_PROTOC_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:95
msgid "Libraries needed to link against to use the ``protoc`` library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:96
msgid "``Protobuf_LITE_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:97
msgid "Libraries needed to link against to use the ``protobuf-lite`` library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:100
msgid "Cache Variables"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:102
msgid "The following cache variables may also be set:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:104
msgid "``Protobuf_INCLUDE_DIR``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:105
msgid "The include directory containing Protobuf headers."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:106
msgid "``Protobuf_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:107
msgid "The path to the ``protobuf`` library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:108
msgid "``Protobuf_PROTOC_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:109
msgid "The path to the ``protoc`` library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:110
msgid "``Protobuf_PROTOC_EXECUTABLE``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:111
msgid "The path to the ``protoc`` compiler."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:112
msgid "``Protobuf_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:113
msgid "The path to the ``protobuf`` debug library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:114
msgid "``Protobuf_PROTOC_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:115
msgid "The path to the ``protoc`` debug library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:116
msgid "``Protobuf_LITE_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:117
msgid "The path to the ``protobuf-lite`` library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:118
msgid "``Protobuf_LITE_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:119
msgid "The path to the ``protobuf-lite`` debug library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:120
msgid "``Protobuf_SRC_ROOT_FOLDER``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:121
msgid ""
"When compiling with MSVC, if this cache variable is set, the protobuf-"
"default Visual Studio project build locations will be searched for libraries "
"and binaries:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:125
msgid "``<Protobuf_SRC_ROOT_FOLDER>/vsprojects/{Debug,Release}``, or"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:126
msgid "``<Protobuf_SRC_ROOT_FOLDER>/vsprojects/x64/{Debug,Release}``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:129
msgid "Hints"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:131
msgid ""
"This module accepts the following optional variables before calling the "
"``find_package(Protobuf)``:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:134
msgid "``Protobuf_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:137
msgid ""
"Boolean variable that enables debug messages of this module to be printed "
"for debugging purposes."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:140
msgid "``Protobuf_USE_STATIC_LIBS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:143
msgid "Set to ON to force the use of the static libraries.  Default is OFF."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:146
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:148
msgid "This module provides the following commands if Protobuf is found:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:151
msgid "Generating Source Files"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:157
msgid ""
"Automatically generates source files from ``.proto`` schema files at build "
"time:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:160
msgid ""
"protobuf_generate(\n"
"  [TARGET <target>]\n"
"  [LANGUAGE <lang>]\n"
"  [OUT_VAR <variable>]\n"
"  [EXPORT_MACRO <macro>]\n"
"  [PROTOC_OUT_DIR <out-dir>]\n"
"  [PLUGIN <plugin>]\n"
"  [PLUGIN_OPTIONS <plugin-options>]\n"
"  [DEPENDENCIES <dependencies>...]\n"
"  [PROTOS <proto-files>...]\n"
"  [IMPORT_DIRS <dirs>...]\n"
"  [APPEND_PATH]\n"
"  [GENERATE_EXTENSIONS <extensions>...]\n"
"  [PROTOC_OPTIONS <options>...]\n"
"  [PROTOC_EXE <executable>]\n"
"  [DESCRIPTORS]\n"
")"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:180
msgid "``TARGET <target>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:181
msgid ""
"The CMake target to which the generated files are added as sources.  This "
"option is required when ``OUT_VAR <variable>`` is not used."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:184
msgid "``LANGUAGE <lang>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:185
msgid ""
"A single value: ``cpp`` or ``python``.  Determines the kind of source files "
"to generate.  Defaults to ``cpp``.  For other languages, use the "
"``GENERATE_EXTENSIONS`` option."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:189
msgid "``OUT_VAR <variable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:190
msgid ""
"The name of a CMake variable that will be populated with the paths to the "
"generated source files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:193
#: ../../../../Modules/FindProtobuf.cmake:327
msgid "``EXPORT_MACRO <macro>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:194
msgid ""
"The name of a preprocessor macro applied to all generated Protobuf message "
"classes and extern variables.  This can be used, for example, to declare DLL "
"exports.  The macro should expand to ``__declspec(dllexport)`` or "
"``__declspec(dllimport)``, depending on what is being compiled."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:199
msgid "This option is only used when ``LANGUAGE`` is ``cpp``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:201
msgid "``PROTOC_OUT_DIR <out-dir>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:202
msgid ""
"The output directory for generated source files.  Defaults to: :variable:"
"`CMAKE_CURRENT_BINARY_DIR`."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:205
msgid "``PLUGIN <plugin>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:208
msgid ""
"An optional plugin executable.  This could be, for example, the path to "
"``grpc_cpp_plugin``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:211
msgid "``PLUGIN_OPTIONS <plugin-options>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:214
msgid ""
"Additional options passed to the plugin, such as ``generate_mock_code=true`` "
"for the gRPC C++ plugin."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:217
msgid "``DEPENDENCIES <dependencies>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:220
msgid ""
"Dependencies on which the generation of files depends on.  These are "
"forwarded to the underlying :command:`add_custom_command(DEPENDS)` "
"invocation."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:224
msgid ""
"This argument now accepts multiple values (``DEPENDENCIES a b c...``). "
"Previously, only a single value could be specified (``DEPENDENCIES \"a;b;"
"c;...\"``)."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:229
msgid "``PROTOS <proto-files>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:230
msgid ""
"A list of ``.proto`` schema files to process.  If ``<target>`` is also "
"specified, these will be combined with all ``.proto`` source files from that "
"target."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:234
msgid "``IMPORT_DIRS <dirs>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:235
msgid ""
"A list of one or more common parent directories for the schema files. For "
"example, if the schema file is ``proto/helloworld/helloworld.proto`` and the "
"import directory is ``proto/``, then the generated files will be ``<out-dir>/"
"helloworld/helloworld.pb.h`` and ``<out-dir>/helloworld/helloworld.pb.cc``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:241
msgid "``APPEND_PATH``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:242
msgid ""
"If specified, the base paths of all proto schema files are appended to "
"``IMPORT_DIRS`` (it causes ``protoc`` to be invoked with ``-I`` argument for "
"each directory containing a ``.proto`` file)."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:246
msgid "``GENERATE_EXTENSIONS <extensions>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:247
msgid ""
"If ``LANGUAGE`` is omitted, this must be set to specify the extensions "
"generated by ``protoc``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:250
msgid "``PROTOC_OPTIONS <options>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:253
msgid ""
"A list of additional command-line options passed directly to the ``protoc`` "
"compiler."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:256
msgid "``PROTOC_EXE <executable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:259
msgid ""
"The command-line program, path, or CMake executable used to generate "
"Protobuf bindings.  If omitted, ``protobuf::protoc`` imported target is used "
"by default."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:263
msgid "``DESCRIPTORS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:264
msgid ""
"If specified, a command-line option ``--descriptor_set_out=<proto-file>`` is "
"appended to ``protoc`` compiler for each ``.proto`` source file, enabling "
"the creation of self-describing messages.  This option can only be used when "
"``<lang>`` is ``cpp`` and Protobuf is found in *module mode*."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:271
#: ../../../../Modules/FindProtobuf.cmake:325
msgid "This option is not available when Protobuf is found in *config mode*."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:274
msgid "Deprecated Commands"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:276
msgid "The following commands are provided for backward compatibility."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:280
msgid ""
"The ``protobuf_generate_cpp()`` and ``protobuf_generate_python()`` commands "
"work correctly only within the same directory scope, where "
"``find_package(Protobuf ...)`` is called."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:286
msgid ""
"If Protobuf is found in *config mode*, the ``protobuf_generate_cpp()`` and "
"``protobuf_generate_python()`` commands are **not available** as of Protobuf "
"version 3.0.0, unless the upstream package configuration hint variable "
"``protobuf_MODULE_COMPATIBLE`` is set to boolean true before calling "
"``find_package(Protobuf ...)``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:294
#: ../../../../Modules/FindProtobuf.cmake:336
msgid "Use :command:`protobuf_generate`."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:297
msgid ""
"Automatically generates C++ source files from ``.proto`` schema files at "
"build time:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:300
msgid ""
"protobuf_generate_cpp(\n"
"  <sources-variable>\n"
"  <headers-variable>\n"
"  [DESCRIPTORS <variable>]\n"
"  [EXPORT_MACRO <macro>]\n"
"  <proto-files>...\n"
")"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:310
msgid "``<sources-variable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:311
msgid ""
"Name of the variable to define, which will contain a list of generated C++ "
"source files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:314
msgid "``<headers-variable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:315
msgid ""
"Name of the variable to define, which will contain a list of generated "
"header files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:318
msgid "``DESCRIPTORS <variable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:321
msgid ""
"Name of the variable to define, which will contain a list of generated "
"descriptor files if requested."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:328
msgid ""
"Name of a macro that should expand to ``__declspec(dllexport)`` or "
"``__declspec(dllimport)``, depending on what is being compiled."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:331
#: ../../../../Modules/FindProtobuf.cmake:352
msgid "``<proto-files>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:332
msgid "One of more ``.proto`` files to be processed."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:341
msgid ""
"Automatically generates Python source files from ``.proto`` schema files at "
"build time:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:344
msgid "protobuf_generate_python(<python-sources-variable> <proto-files>...)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:348
msgid "``<python-sources-variable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:349
msgid ""
"Name of the variable to define, which will contain a list of generated "
"Python source files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:353
msgid "One or more ``.proto`` files to be processed."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:357
msgid ""
"The ``protobuf_generate_cpp()`` and ``protobuf_generate_python()`` commands "
"accept the following optional variables before being invoked:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:360
msgid "``Protobuf_IMPORT_DIRS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:363
msgid ""
"A list of additional directories to search for imported ``.proto`` files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:365
msgid "``PROTOBUF_GENERATE_CPP_APPEND_PATH``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:366
msgid "Use :command:`protobuf_generate(APPEND_PATH)` command option."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:369
msgid ""
"A boolean variable that, if set to boolean true, causes ``protoc`` to be "
"invoked with ``-I`` argument for each directory containing a ``.proto`` "
"file.  By default, it is set to boolean true."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:374
msgid "Examples"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:377
msgid "Examples: Finding Protobuf"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:379
msgid "Finding Protobuf library:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:381
msgid "find_package(Protobuf)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:385
msgid "Or, finding Protobuf and specifying a minimum required version:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:387
msgid "find_package(Protobuf 30)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:391
msgid ""
"Or, finding Protobuf and making it required (if not found, processing stops "
"with an error message):"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:394
msgid "find_package(Protobuf REQUIRED)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:399
msgid "Example: Finding Protobuf in Config Mode"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:401
msgid ""
"When Protobuf library is built and installed using its CMake-based build "
"system, it can be found in *config mode*:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:408
msgid ""
"However, some Protobuf installations might still not provide package "
"configuration file.  The following example shows, how to use the :variable:"
"`CMAKE_FIND_PACKAGE_PREFER_CONFIG` variable to find Protobuf in *config "
"mode* and falling back to *module mode* if config file is not found:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:413
msgid ""
"set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)\n"
"find_package(Protobuf)\n"
"unset(CMAKE_FIND_PACKAGE_PREFER_CONFIG)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:420
msgid "Example: Using Protobuf"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:422
msgid ""
"Finding Protobuf and linking its imported library target to a project target:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:424
msgid ""
"find_package(Protobuf)\n"
"target_link_libraries(example PRIVATE protobuf::libprotobuf)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:430
msgid "Example: Processing Proto Schema Files"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:432
msgid ""
"The following example demonstrates how to process all ``*.proto`` schema "
"source files added to a target into C++ source files:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:435
#: ../../../../Modules/FindProtobuf.cmake:485
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:435
msgid ""
"cmake_minimum_required(VERSION 3.24)\n"
"project(ProtobufExample)\n"
"\n"
"add_executable(example main.cxx person.proto)\n"
"\n"
"find_package(Protobuf)\n"
"\n"
"if(Protobuf_FOUND)\n"
"  protobuf_generate(TARGET example)\n"
"endif()\n"
"\n"
"target_link_libraries(example PRIVATE protobuf::libprotobuf)\n"
"target_include_directories(example PRIVATE ${CMAKE_CURRENT_BINARY_DIR})"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:452
msgid "``person.proto``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:452
msgid ""
"syntax = \"proto3\";\n"
"\n"
"message Person {\n"
"  string name = 1;\n"
"  int32 id = 2;\n"
"}"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:462
msgid "``main.cxx``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:462
msgid ""
"#include <iostream>\n"
"#include \"person.pb.h\"\n"
"\n"
"int main()\n"
"{\n"
"  Person person;\n"
"  person.set_name(\"Alice\");\n"
"  person.set_id(123);\n"
"\n"
"  std::cout << \"Name: \" << person.name() << \"\\n\";\n"
"  std::cout << \"ID: \" << person.id() << \"\\n\";\n"
"\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:481
msgid "Example: Using Protobuf and gRPC"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:483
msgid "The following example shows how to use Protobuf and gRPC:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:485
msgid ""
"find_package(Protobuf REQUIRED)\n"
"find_package(gRPC CONFIG REQUIRED)\n"
"\n"
"add_library(ProtoExample Example.proto)\n"
"target_link_libraries(ProtoExample PUBLIC gRPC::grpc++)\n"
"\n"
"protobuf_generate(TARGET ProtoExample)\n"
"protobuf_generate(\n"
"  TARGET ProtoExample\n"
"  LANGUAGE grpc\n"
"  PLUGIN protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\n"
"  PLUGIN_OPTIONS generate_mock_code=true\n"
"  GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc\n"
")"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:504
msgid "Examples: Upgrading Deprecated Commands"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:506
msgid ""
"The following example shows how to process ``.proto`` files to C++ code, "
"using a deprecated command and its modern replacement:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:509
#: ../../../../Modules/FindProtobuf.cmake:553
msgid "``CMakeLists.txt`` with deprecated command"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:509
msgid ""
"find_package(Protobuf)\n"
"\n"
"if(Protobuf_FOUND)\n"
"  protobuf_generate_cpp(\n"
"    proto_sources\n"
"    proto_headers\n"
"    EXPORT_MACRO DLL_EXPORT\n"
"    DESCRIPTORS proto_descriptors\n"
"    src/protocol/Proto1.proto\n"
"    src/protocol/Proto2.proto\n"
"  )\n"
"endif()\n"
"\n"
"target_sources(\n"
"  example\n"
"  PRIVATE ${proto_sources} ${proto_headers} ${proto_descriptors}\n"
")\n"
"target_link_libraries(example PRIVATE protobuf::libprotobuf)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:531
#: ../../../../Modules/FindProtobuf.cmake:564
msgid "``CMakeLists.txt`` with upgraded code"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:531
msgid ""
"find_package(Protobuf)\n"
"\n"
"if(Protobuf_FOUND)\n"
"  protobuf_generate(\n"
"    TARGET example\n"
"    EXPORT_MACRO DLL_EXPORT\n"
"    IMPORT_DIRS src/protocol\n"
"    DESCRIPTORS\n"
"    PROTOS\n"
"      src/protocol/Proto1.proto\n"
"      src/protocol/Proto2.proto\n"
"  )\n"
"endif()\n"
"\n"
"target_link_libraries(example PRIVATE protobuf::libprotobuf)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:550
msgid ""
"The following example shows how to process ``.proto`` files to Python code, "
"using a deprecated command and its modern replacement:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:553
msgid ""
"find_package(Protobuf)\n"
"\n"
"if(Protobuf_FOUND)\n"
"  protobuf_generate_python(python_sources foo.proto)\n"
"endif()\n"
"\n"
"add_custom_target(proto_files DEPENDS ${python_sources})"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:564
msgid ""
"find_package(Protobuf)\n"
"\n"
"if(Protobuf_FOUND)\n"
"  protobuf_generate(\n"
"    LANGUAGE python\n"
"    PROTOS foo.proto\n"
"    OUT_VAR python_sources\n"
"  )\n"
"endif()\n"
"\n"
"add_custom_target(proto_files DEPENDS ${python_sources})"
msgstr ""
