# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindEnvModules.cmake:6
msgid "FindEnvModules"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:10
msgid ""
"Finds an Environment Modules implementation and provides commands for use in "
"CMake scripts:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:13
msgid "find_package(EnvModules [...])"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:17
msgid ""
"The Environment Modules system is a command-line tool that manages Unix-like "
"shell environments by dynamically modifying environment variables. It is "
"commonly used in High-Performance Computing (HPC) environments to support "
"multiple software versions or configurations."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:22
msgid "This module is compatible with the two most common implementations:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:24
msgid "Lua-based Lmod"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:25
msgid "TCL-based Environment Modules"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:27
msgid ""
"This module is primarily intended for setting up compiler and library "
"environments within a :ref:`CTest Script <CTest Script>` (``ctest -S``). It "
"may also be used in a :ref:`CMake Script <Script Processing Mode>` (``cmake -"
"P``)."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:34
msgid ""
"The loaded environment will not persist beyond the end of the calling "
"process.  Do not use this module in CMake project code (such as ``CMakeLists."
"txt``) to load compiler environments, as the environment changes will not be "
"available during the build phase.  In such a case, load the desired "
"environment before invoking CMake or the generated build system."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:41
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:43
msgid "This module defines the following variables:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:45
msgid "``EnvModules_FOUND``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:46
msgid ""
"Boolean indicating whether a compatible Environment Modules framework was "
"found."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:50
msgid "Cache Variables"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:52
msgid "The following cache variables may also be set:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:54
msgid "``EnvModules_COMMAND``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:55
msgid "The path to a low level module command to use."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:58
msgid "Hints"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:60
msgid ""
"This module accepts the following variables before calling the "
"``find_package(EnvModules)``:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:63
msgid "``ENV{MODULESHOME}``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:64
msgid ""
"This environment variable is usually set by the Environment Modules "
"implementation, and can be used as a hint to locate the module command to "
"execute."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:69
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:71
msgid ""
"This module provides the following commands for interacting with the "
"Environment Modules system, if found:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:76
msgid "Executes an arbitrary module command:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:78
msgid ""
"env_module(<command> <args>...)\n"
"env_module(\n"
"  COMMAND <command> <args>...\n"
"  [OUTPUT_VARIABLE <out-var>]\n"
"  [RESULT_VARIABLE <ret-var>]\n"
")"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:87
#: ../../../../Modules/FindEnvModules.cmake:117
msgid "The options are:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:89
msgid "``COMMAND <command> <args>...``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:90
msgid ""
"The module sub-command and arguments to execute as if passed directly to the "
"module command in the shell environment."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:93
#: ../../../../Modules/FindEnvModules.cmake:119
msgid "``OUTPUT_VARIABLE <out-var>``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:94
#: ../../../../Modules/FindEnvModules.cmake:120
msgid ""
"Stores the standard output of the executed module command in the specified "
"variable."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:97
#: ../../../../Modules/FindEnvModules.cmake:123
msgid "``RESULT_VARIABLE <ret-var>``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:98
#: ../../../../Modules/FindEnvModules.cmake:124
msgid ""
"Stores the return code of the executed module command in the specified "
"variable."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:103
msgid "Swaps one module for another:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:105
msgid ""
"env_module_swap(\n"
"  <out-mod>\n"
"  <in-mod>\n"
"  [OUTPUT_VARIABLE <out-var>]\n"
"  [RESULT_VARIABLE <ret-var>]\n"
")"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:114
msgid ""
"This is functionally equivalent to the ``module swap <out-mod> <in-mod>`` "
"shell command."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:129
msgid "Retrieves the list of currently loaded modules:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:131
msgid "env_module_list(<out-var>)"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:135
msgid ""
"This is functionally equivalent to the ``module list`` shell command. The "
"result is stored in ``<out-var>`` as a properly formatted CMake :ref:"
"`semicolon-separated list <CMake Language Lists>` variable."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:141
msgid "Retrieves the list of available modules:"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:143
msgid "env_module_avail([<mod-prefix>] <out-var>)"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:147
msgid ""
"This is functionally equivalent to the ``module avail <mod-prefix>`` shell "
"command.  The result is stored in ``<out-var>`` as a properly formatted "
"CMake :ref:`semicolon-separated list <CMake Language Lists>` variable."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:152
msgid "Examples"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:154
msgid ""
"In the following example, this module is used in a CTest script to configure "
"the compiler and libraries for a Cray Programming Environment. After the "
"Environment Modules system is found, the ``env_module()`` command is used to "
"load the necessary compiler, MPI, and scientific libraries to set up the "
"build environment.  The ``CRAYPE_LINK_TYPE`` environment variable is set to "
"``dynamic`` to specify dynamic linking.  This instructs the Cray Linux "
"Environment compiler driver to link against dynamic libraries at runtime, "
"rather than linking static libraries at compile time.  As a result, the "
"compiler produces dynamically linked executable files."
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:164
msgid "``example-script.cmake``"
msgstr ""

#: ../../../../Modules/FindEnvModules.cmake:164
msgid ""
"set(CTEST_BUILD_NAME \"CrayLinux-CrayPE-Cray-dynamic\")\n"
"set(CTEST_BUILD_CONFIGURATION Release)\n"
"set(CTEST_BUILD_FLAGS \"-k -j8\")\n"
"set(CTEST_CMAKE_GENERATOR \"Unix Makefiles\")\n"
"\n"
"# ...\n"
"\n"
"find_package(EnvModules REQUIRED)\n"
"\n"
"# Clear all currently loaded Environment Modules to start with a clean "
"state\n"
"env_module(purge)\n"
"\n"
"# Load the base module-handling system to use other modules\n"
"env_module(load modules)\n"
"\n"
"# Load Cray Programming Environment (Cray PE) support, which manages\n"
"# platform-specific optimizations and architecture selection\n"
"env_module(load craype)\n"
"\n"
"# Load the Cray programming environment\n"
"env_module(load PrgEnv-cray)\n"
"\n"
"# Load settings targeting the Intel Knights Landing (KNL) CPU architecture\n"
"env_module(load craype-knl)\n"
"\n"
"# Load the Cray MPI (Message Passing Interface) library, needed for\n"
"# distributed computing\n"
"env_module(load cray-mpich)\n"
"\n"
"# Load Cray's scientific library package, which includes optimized math\n"
"# libraries (like BLAS, LAPACK)\n"
"env_module(load cray-libsci)\n"
"\n"
"set(ENV{CRAYPE_LINK_TYPE} dynamic)\n"
"\n"
"# ..."
msgstr ""
