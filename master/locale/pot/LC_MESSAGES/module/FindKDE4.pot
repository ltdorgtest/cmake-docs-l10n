# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindKDE4.cmake:6
msgid "FindKDE4"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:10
msgid ""
"This module is specifically intended for KDE version 4, which is obsolete "
"and no longer maintained.  For modern application development using KDE "
"technologies with CMake, use a newer version of KDE, and refer to the `KDE "
"documentation <https://develop.kde.org/docs/getting-started/building/cmake-"
"build/>`_."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:16
msgid "Finds the KDE 4 installation:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:18
msgid "find_package(KDE4 [...])"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:22
msgid "This module is a wrapper around the following upstream KDE 4 modules:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:24
msgid "``FindKDE4Internal.cmake``"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:26
msgid ""
"Upstream internal module, which finds the KDE 4 include directories, "
"libraries, and KDE-specific preprocessor tools.  It provides usage "
"requirements for building KDE 4 software and defines several helper commands "
"to simplify working with KDE 4 in CMake."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:31
msgid "``KDE4Macros.cmake``"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:32
msgid ""
"Upstream utility module that defines all additional KDE4-specific commands "
"to use KDE 4 in CMake.  For example: ``kde4_automoc()``, "
"``kde4_add_executable()``, ``kde4_add_library()``, ``kde4_add_ui_files()``, "
"``kde4_add_ui3_files()``, ``kde4_add_kcfg_files()``, "
"``kde4_add_kdeinit_executable()``, etc."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:38
msgid ""
"Upstream KDE 4 modules are installed by the KDE 4 distribution package in "
"``$KDEDIRS/share/apps/cmake/modules/``.  This path is automatically appended "
"to the :variable:`CMAKE_MODULE_PATH` variable when calling "
"``find_package(KDE4)``, so any additional KDE 4 modules can be included in "
"the project with :command:`include`.  For example:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:44
msgid "``KDE4Defaults.cmake``"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:45
msgid ""
"Upstream internal module that sets some CMake options which are useful, but "
"not required for building KDE 4 software.  If these settings should be used, "
"include this module after finding KDE 4:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:49
msgid ""
"find_package(KDE4)\n"
"include(KDE4Defaults)"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:54
msgid ""
"For usage details, refer to the upstream KDE 4 documentation.  For example, "
"at the top of the ``FindKDE4Internal`` module a complete documentation is "
"available for all variables and commands these modules provide."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:59
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:61
msgid "This module defines the following variables:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:63
msgid "``KDE4_FOUND``"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:64
msgid ""
"Boolean indicating whether KDE 4 was found.  This variable is set by the "
"upstream ``FindKDE4Internal`` module."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:68
msgid "Hints"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:70
msgid ""
"This module accepts the following variables before calling the "
"``find_package(KDE4)``:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:73
msgid "``ENV{KDEDIRS}``"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:74
msgid "Environment variable containing the path to the KDE 4 installation."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:76
msgid "KDE 4 is searched in the following directories in the given order:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:78
msgid ":variable:`CMAKE_INSTALL_PREFIX` variable"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:79
msgid "``KDEDIRS`` environment variable"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:80
msgid "``/opt/kde4`` path"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:83
msgid "Examples"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:86
msgid "Example: Basic Usage"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:88
msgid "Finding KDE 4 as required and using it in CMake:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:90
msgid ""
"find_package(KDE4 REQUIRED)\n"
"\n"
"set(sources main.cpp mywidget.cpp mypart.cpp)\n"
"\n"
"# The kde4_*() commands are provided by the KDE4Macros module, which is\n"
"# included automatically by FindKDE4, if KDE4 is found:\n"
"kde4_automoc(${sources})\n"
"kde4_add_executable(example ${sources})\n"
"\n"
"target_include_directories(example PRIVATE ${KDE4_INCLUDES})\n"
"target_link_libraries(example PRIVATE ${KDE4_KDEUI_LIBS} "
"${KDE4_KPARTS_LIBS})\n"
"\n"
"install(TARGETS example DESTINATION ${CMAKE_INSTALL_BINDIR})\n"
"install(FILES kfoo.desktop DESTINATION ${XDG_APPS_DIR})"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:108
msgid "Example: Full Featured Example"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:110
msgid ""
"In the following example this module is used to find KDE 4 installation."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:112
msgid ""
"project(kfoo)\n"
"\n"
"find_package(KDE4 REQUIRED)\n"
"\n"
"# Append path from where to include local project modules if any:\n"
"list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n"
"\n"
"include_directories(${KDE4_INCLUDE_DIRS})\n"
"add_definitions(${KDE4_DEFINITIONS})\n"
"\n"
"set(sources main.cpp myappl.cpp view.cpp)\n"
"\n"
"# If Qt designer UI files version 3 or 4 are available add them to the\n"
"# sources variable:\n"
"kde4_add_ui_files(sources maindialog.ui logindialog.ui)\n"
"kde4_add_ui3_files(sources printerdlg.ui previewdlg.ui)\n"
"\n"
"# If there are files for the kconfig_compiler add them this way:\n"
"kde4_add_kcfg_files(sources settings.kcfg)\n"
"\n"
"# When everything is listed, probably automoc is wanted:\n"
"kde4_automoc(${sources})\n"
"\n"
"# Finally, specify what to build:\n"
"kde4_add_executable(kfoo ${sources})"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:141
msgid ""
"The ``kde4_add_executable()`` command is a slightly extended version of the "
"CMake command :command:`add_executable`.  Additionally, it does some more "
"``RPATH`` handling and supports the ``KDE4_ENABLE_FINAL`` variable.  The "
"first argument is the name of the executable followed by a list of source "
"files.  If a library needs to be created instead of an executable, the "
"``kde4_add_library()`` can be used.  It is an extended version of the :"
"command:`add_library` command.  It adds support for the "
"``KDE4_ENABLE_FINAL`` variable and under Windows it adds the ``-"
"DMAKE_KFOO_LIB`` to the compile flags."
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:151
msgid ""
"find_package(KDE4 REQUIRED)\n"
"\n"
"# ...\n"
"\n"
"kde4_add_library(kfoo ${sources})\n"
"\n"
"# Optionally, set the library version number if needed:\n"
"set_target_properties(kfoo PROPERTIES VERSION 5.0.0 SOVERSION 5)"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:162
msgid ""
"KDE is very modular, so if a KPart, a control center module, or an ioslave "
"needs to be created, here's how to do it:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:165
msgid ""
"find_package(KDE4 REQUIRED)\n"
"# ...\n"
"kde4_add_plugin(kfoo ${sources})"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:171
msgid ""
"Now, the application/library/plugin probably needs to link to some "
"libraries.  For this use the standard :command:`target_link_libraries` "
"command.  For every KDE library there are variables available in the form of "
"``KDE4_FOO_LIBS``.  Use them to get also all depending libraries:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:176
msgid "target_link_libraries(kfoo ${KDE4_KDEUI_LIBS} ${KDE4_KIO_LIBS})"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:181
msgid "Example: The kdeinit Executable"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:183
msgid ""
"In the following example, the so called kdeinit executable is created. The "
"``kde4_add_kdeinit_executable()`` command creates both an executable with "
"the given name and a library with the given name prefixed with "
"``kdeinit_``.  The :command:`target_link_libraries` command adds all "
"required libraries to the ``kdeinit_kbar`` library, and then links the "
"``kbar`` against the ``kdeinit_kbar``:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:190
msgid ""
"find_package(KDE4 REQUIRED)\n"
"\n"
"# ...\n"
"\n"
"kde4_add_kdeinit_executable(kbar ${kbarSources})\n"
"target_link_libraries(kdeinit_kbar ${KDE4_KIO_LIBS})\n"
"target_link_libraries(kbar kdeinit_kbar)\n"
"\n"
"install(TARGETS kbar DESTINATION ${CMAKE_INSTALL_BINDIR})\n"
"install(TARGETS kdeinit_kbar DESTINATION ${CMAKE_INSTALL_LIBDIR})"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:204
msgid "Example: Removing Compile Definitions"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:206
msgid ""
"Sometimes, a default compile definition passed to the compiler needs to be "
"removed.  The :command:`remove_definitions` command can be used.  For "
"example, by default, the KDE4 build system sets the ``-DQT_NO_STL`` flag. If "
"the project code uses some of the Qt STL compatibility layer, this flag "
"should be removed:"
msgstr ""

#: ../../../../Modules/FindKDE4.cmake:212
msgid ""
"find_package(KDE4 REQUIRED)\n"
"\n"
"add_definitions(${KDE4_DEFINITIONS})\n"
"\n"
"# ...\n"
"\n"
"remove_definitions(-DQT_NO_STL)"
msgstr ""
