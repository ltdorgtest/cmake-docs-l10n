# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindFLEX.cmake:6
msgid "FindFLEX"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:8
msgid ""
"Finds the Fast Lexical Analyzer (Flex) command-line generator and its "
"library, and provides CMake commands to create custom build rules for using "
"Flex:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:11
msgid "find_package(FLEX [<version>] [...])"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:15
msgid ""
"Flex generates lexical analyzers, also known as *scanners* or *lexers*.  It "
"also includes a runtime library (``fl``) that supplies support functions for "
"the generated scanners, such as input handling, buffer management, and error "
"reporting."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:21
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:23
msgid "This module defines the following variables:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:25
msgid "``FLEX_FOUND``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:26
msgid "Boolean indicating whether (the requested version of) Flex was found."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:28
msgid "``FLEX_VERSION``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:29
msgid "The version of Flex found."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:31
msgid "``FLEX_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:32
msgid "The include directories containing headers for using Flex library."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:34
msgid "``FLEX_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:35
msgid "The libraries needed to link against to use Flex library."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:38
msgid "Cache Variables"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:40
msgid "The following cache variables may also be set:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:42
msgid "``FLEX_EXECUTABLE``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:43
msgid "The path to the ``flex`` executable."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:46
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:48
msgid "This module provides the following commands if ``flex`` is found:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:51
msgid "Generating Scanners"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:55
msgid ""
"Creates a custom build rule to generate a scanner file from a lex file using "
"Flex:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:58
msgid ""
"flex_target(\n"
"  <name>\n"
"  <input-lex-file>\n"
"  <output-scanner-file>\n"
"  [DEFINES_FILE <header>]\n"
"  [OPTIONS <options>...]\n"
"  [COMPILE_FLAGS <string>] # Deprecated\n"
")"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:69
msgid ""
"When policy :policy:`CMP0098` is set to ``NEW``, ``flex`` runs in the :"
"variable:`CMAKE_CURRENT_BINARY_DIR` directory."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:73
msgid "``<name>``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:74
msgid "String used as an identifier for this command invocation."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:76
msgid "``<input-lex-file>``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:77
msgid ""
"The path to an input Flex source file (``.l``).  If given as a relative "
"path, it will be interpreted relative to the current source directory (:"
"variable:`CMAKE_CURRENT_SOURCE_DIR`)."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:81
msgid "``<output-scanner-file>``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:82
msgid ""
"The path of the output file to be generated by Flex.  If given as a relative "
"path, it will be interpreted relative to the current Flex working directory."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:85
msgid "``DEFINES_FILE <header>``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:88
msgid ""
"If Flex is configured to output a header file, this option may be used to "
"specify its name.  If given as a relative path, it will be interpreted "
"relative to the current Flex working directory."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:92
msgid "``OPTIONS <options>...``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:95
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of extra options "
"added to the ``flex`` command line."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:98
msgid "``COMPILE_FLAGS <string>``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:99
msgid "Superseded by ``OPTIONS <options>...``."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:102
msgid ""
"A string of space-separated extra options added to the ``flex`` command "
"line. A :ref:`semicolon-separated list <CMake Language Lists>` will not work."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:107
msgid "Command variables"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:108
msgid "This command also defines the following variables:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:110
msgid "``FLEX_<name>_DEFINED``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:111
msgid "Boolean indicating whether this command was successfully invoked."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:113
msgid "``FLEX_<name>_INPUT``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:114
msgid "The Flex source file, an alias for ``<input-lex-file>``."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:116
msgid "``FLEX_<name>_OUTPUT_HEADER``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:119
msgid "The header file generated by ``flex``, if any."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:121
msgid "``FLEX_<name>_OUTPUTS``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:122
msgid ""
"A list of files generated by ``flex``, including the output scanner file, "
"and the header file."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:125
msgid "``FLEX_<name>_OPTIONS``"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:128
msgid "A list of command-line options used for the ``flex`` command."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:131
msgid "Adding Dependency Between Scanner and Parser"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:135
msgid "Adds the required dependency between a scanner and a parser:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:137
msgid "add_flex_bison_dependency(<flex-name> <bison-name>)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:141
msgid ""
"Flex scanners often rely on token definitions generated by Bison, meaning "
"the code produced by Flex depends on the header file created by Bison."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:144
msgid ""
"This command adds the required dependency between a scanner and a parser "
"where ``<flex-name>`` and ``<bison-name>`` are the first parameters of "
"respectively ``flex_target(<name> ...)`` and :command:"
"`bison_target(<name> ...)` commands."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:150
msgid "Examples"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:153
msgid "Examples: Finding Flex"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:155
msgid "Finding Flex:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:157
msgid "find_package(FLEX)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:161
msgid "Finding Flex and specifying its minimum required version:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:163
msgid "find_package(FLEX 2.5.13)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:167
msgid ""
"Finding Flex and making it required (if Flex is not found, processing stops "
"with an error message):"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:170
msgid "find_package(FLEX 2.5.13 REQUIRED)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:175
msgid "Example: Generating Scanner"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:177
msgid ""
"Finding Flex and generating scanner source file in the current binary "
"directory from the lex source file in the current source directory:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:180
msgid ""
"find_package(FLEX)\n"
"\n"
"if(FLEX_FOUND)\n"
"  flex_target(MyScanner lexer.l lexer.cpp)\n"
"endif()\n"
"\n"
"add_executable(foo foo.cc ${FLEX_MyScanner_OUTPUTS})"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:191
msgid "Example: Command-line Options"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:193
msgid ""
"Adding additional command-line options to the ``flex`` executable can be "
"passed as a list.  For example, adding the ``--warn`` option to report "
"warnings, and the ``--noline`` (``-L``) to not generate ``#line`` directives."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:197
msgid ""
"find_package(FLEX)\n"
"\n"
"if(FLEX_FOUND)\n"
"  flex_target(MyScanner lexer.l lexer.cpp OPTIONS --warn --noline)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:205
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` can be used "
"in the ``OPTIONS <options>...`` argument.  For example, to add the ``--"
"debug`` (``-d``) option only for the ``Debug`` build type:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:209
msgid ""
"find_package(FLEX)\n"
"\n"
"if(FLEX_FOUND)\n"
"  flex_target(MyScanner lexer.l lexer.cpp OPTIONS $<$<CONFIG:Debug>:--"
"debug>)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:218
msgid "Example: Using Flex Library"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:220
msgid ""
"Finding Flex and creating an interface :ref:`imported target <Imported "
"Targets>` that encapsulates its library usage requirements for linking to a "
"project target:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:224
msgid ""
"find_package(FLEX)\n"
"\n"
"if(FLEX_FOUND AND NOT TARGET FLEX::fl)\n"
"  add_library(FLEX::fl INTERFACE IMPORTED)\n"
"  set_target_properties(\n"
"    FLEX::fl\n"
"    PROPERTIES\n"
"      INTERFACE_INCLUDE_DIRECTORIES \"${FLEX_INCLUDE_DIRS}\"\n"
"      INTERFACE_LINK_LIBRARIES \"${FLEX_LIBRARIES}\"\n"
"  )\n"
"endif()\n"
"\n"
"if(FLEX_FOUND)\n"
"  flex_target(MyScanner lexer.l lexer.cpp)\n"
"endif()\n"
"\n"
"add_executable(Foo foo.cc ${FLEX_MyScanner_OUTPUTS})\n"
"target_link_libraries(Foo PRIVATE FLEX::fl)"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:246
msgid "Example: Using Flex and Bison"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:248
msgid ""
"The following example demonstrates, how to use Flex and :module:`Bison "
"<FindBISON>` in CMake:"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:251
msgid ""
"find_package(BISON)\n"
"find_package(FLEX)\n"
"\n"
"if(BISON_FOUND AND FLEX_FOUND)\n"
"  bison_target(MyParser parser.y parser.cpp)\n"
"  flex_target(MyScanner lexer.l lexer.cpp)\n"
"  add_flex_bison_dependency(MyScanner MyParser)\n"
"endif()\n"
"\n"
"add_executable(Foo foo.cc ${BISON_MyParser_OUTPUTS} "
"${FLEX_MyScanner_OUTPUTS})\n"
"\n"
"# ..."
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:267
msgid "See Also"
msgstr ""

#: ../../../../Modules/FindFLEX.cmake:269
msgid "The :module:`FindBISON` module to find Bison parser generator."
msgstr ""
