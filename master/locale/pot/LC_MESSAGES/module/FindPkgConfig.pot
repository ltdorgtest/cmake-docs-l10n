# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindPkgConfig.cmake:6
msgid "FindPkgConfig"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:8
msgid "A ``pkg-config`` module for CMake."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:10
msgid ""
"Finds the ``pkg-config`` executable and provides commands to use it in CMake:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:13
msgid "find_package(PkgConfig [<version>] [QUIET] [REQUIRED] [...])"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:17
msgid ""
"``pkg-config`` is a command-line program for configuring build dependency "
"information.  Initially developed by FreeDesktop, it is also available in "
"several implementations, such as pkgconf, u-config, and similar.  It reads "
"package data from the so-called PC metadata files (``<module-name>.pc``) "
"that may come installed with packages.  This module is a wrapper around the "
"``pkg-config`` command-line executable."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:25
#: ../../../../Modules/FindPkgConfig.cmake:143
#: ../../../../Modules/FindPkgConfig.cmake:227
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:27
msgid "This module defines the following variables:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:29
msgid "``PkgConfig_FOUND``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:32
#: ../../../../Modules/FindPkgConfig.cmake:344
msgid ""
"Boolean indicating whether the (requested version of) ``pkg-config`` "
"executable was found."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:35
msgid "``PkgConfig_VERSION``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:38
#: ../../../../Modules/FindPkgConfig.cmake:351
msgid "The version of ``pkg-config`` that was found."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:40
#: ../../../../Modules/FindPkgConfig.cmake:298
msgid "``PKG_CONFIG_EXECUTABLE``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:41
msgid "The pathname of the ``pkg-config`` program."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:43
#: ../../../../Modules/FindPkgConfig.cmake:308
msgid "``PKG_CONFIG_ARGN``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:46
msgid "A list of arguments to pass to ``pkg-config``."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:48
msgid ""
"Both ``PKG_CONFIG_EXECUTABLE`` and ``PKG_CONFIG_ARGN`` are initialized by "
"the module, but may be overridden by the user.  See `Hints`_ for how these "
"variables are initialized."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:53
msgid "Commands"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:55
msgid ""
"This module provides the following commands, if ``pkg-config`` is found:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:57
msgid ":command:`pkg_check_modules`"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:58
msgid ":command:`pkg_search_module`"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:59
msgid ":command:`pkg_get_variable`"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:63
msgid ""
"Checks for all the given modules, setting a variety of result variables in "
"the calling scope:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:66
msgid ""
"pkg_check_modules(\n"
"  <prefix>\n"
"  [QUIET]\n"
"  [REQUIRED]\n"
"  [NO_CMAKE_PATH]\n"
"  [NO_CMAKE_ENVIRONMENT_PATH]\n"
"  [IMPORTED_TARGET [GLOBAL]]\n"
"  <module-spec> [<module-spec>...]\n"
")"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:79
#: ../../../../Modules/FindPkgConfig.cmake:257
msgid "The arguments are:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:80
msgid "``<prefix>``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:81
msgid "Prefix string prepended to result variables for the specified modules."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:83
msgid "``QUIET``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:84
msgid "When this argument is given, no status messages will be printed."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:86
msgid "``REQUIRED``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:87
msgid ""
"When this argument is given, the command will fail with an error if any of "
"the specified module(s) could not be found."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:90
msgid "``NO_CMAKE_PATH``, ``NO_CMAKE_ENVIRONMENT_PATH``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:93
msgid ""
"The :variable:`CMAKE_PREFIX_PATH`, :variable:`CMAKE_FRAMEWORK_PATH`, and :"
"variable:`CMAKE_APPBUNDLE_PATH` cache and environment variables will be "
"added to the ``pkg-config`` search path. The ``NO_CMAKE_PATH`` and "
"``NO_CMAKE_ENVIRONMENT_PATH`` arguments disable this behavior for the cache "
"variables and environment variables respectively. The "
"``PKG_CONFIG_USE_CMAKE_PREFIX_PATH`` variable set to ``FALSE`` disables this "
"behavior globally."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:104
msgid "``IMPORTED_TARGET [GLOBAL]``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:107
msgid ""
"This argument will create an :ref:`imported target <Imported Targets>` named "
"``PkgConfig::<prefix>`` that can be passed directly as an argument to :"
"command:`target_link_libraries`.  It will encapsulate usage requirements for "
"all specified modules ``<module-spec>...`` at once."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:114
msgid "``GLOBAL``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:117
msgid ""
"This argument is used together with ``IMPORTED_TARGET`` and will make the "
"imported target available in global scope."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:120
msgid ""
"Non-library linker options reported by ``pkg-config`` are stored in the :"
"prop_tgt:`INTERFACE_LINK_OPTIONS` target property."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:124
msgid ""
"Include directories specified with ``-isystem`` are stored in the :prop_tgt:"
"`INTERFACE_INCLUDE_DIRECTORIES` target property.  Previous versions of CMake "
"left them in the :prop_tgt:`INTERFACE_COMPILE_OPTIONS` property."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:130
msgid "``<module-spec>``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:131
msgid ""
"Each ``<module-spec>`` can be either a bare module name (as defined in its "
"PC metadata file name ``<module-name>.pc``) or it can be a module name with "
"a version constraint (operators ``=``, ``<``, ``>``, ``<=`` and ``>=`` are "
"supported).  The following are examples for a module named ``foo`` with "
"various constraints:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:137
msgid "``foo`` matches any version."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:138
msgid "``foo<2`` only matches versions before 2."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:139
msgid "``foo>=3.1`` matches any version from 3.1 or later."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:140
msgid "``foo=1.2.3`` requires that foo must be exactly version 1.2.3."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:144
msgid ""
"The following variables may be set upon return.  Two sets of values exist: "
"One for the common case (``<XXX> = <prefix>``) and another for the "
"information ``pkg-config`` provides when called with the ``--static`` option "
"(``<XXX> = <prefix>_STATIC``)."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:149
msgid "``<XXX>_FOUND``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:150
msgid "Boolean variable set to 1 if module(s) exist."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:151
msgid "``<XXX>_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:152
msgid "A list of only the libraries (without the ``-l``)."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:153
msgid "``<XXX>_LINK_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:154
msgid "The libraries and their absolute paths."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:155
msgid "``<XXX>_LIBRARY_DIRS``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:156
msgid "The paths of the libraries (without the ``-L``)."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:157
msgid "``<XXX>_LDFLAGS``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:158
msgid "All required linker flags."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:159
msgid "``<XXX>_LDFLAGS_OTHER``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:160
msgid "All other linker flags."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:161
msgid "``<XXX>_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:162
msgid "The ``-I`` preprocessor flags (without the ``-I``)."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:163
msgid "``<XXX>_CFLAGS``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:164
msgid "All required cflags."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:165
msgid "``<XXX>_CFLAGS_OTHER``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:166
msgid "The other compiler flags."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:168
msgid ""
"All but ``<XXX>_FOUND`` may be a :ref:`semicolon-separated list <CMake "
"Language Lists>` if the associated variable returned from ``pkg-config`` has "
"multiple values."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:172
msgid ""
"Include directories specified with ``-isystem`` are stored in the "
"``<XXX>_INCLUDE_DIRS`` variable.  Previous versions of CMake left them in "
"``<XXX>_CFLAGS_OTHER``."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:177
msgid ""
"There are some special variables whose prefix depends on the number of "
"``<module-spec>`` given.  When there is only one ``<module-spec>``, "
"``<YYY>`` will simply be ``<prefix>``, but if two or more ``<module-spec>`` "
"items are given, ``<YYY>`` will be ``<prefix>_<module-name>``."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:182
msgid "``<YYY>_VERSION``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:183
msgid "The version of the module."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:184
msgid "``<YYY>_PREFIX``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:185
msgid "The prefix directory of the module."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:186
msgid "``<YYY>_INCLUDEDIR``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:187
msgid "The include directory of the module."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:188
msgid "``<YYY>_LIBDIR``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:189
msgid "The lib directory of the module."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:191
msgid ""
"For any given ``<prefix>``, ``pkg_check_modules()`` can be called multiple "
"times with different parameters.  Previous versions of CMake cached and "
"returned the first successful result."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:196
msgid ""
"If a full path to the found library can't be determined, but it's still "
"visible to the linker, pass it through as ``-l<name>``.  Previous versions "
"of CMake failed in this case."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:203
msgid ""
"Searches for the first successful match from one or more provided module "
"specifications:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:206
msgid ""
"pkg_search_module(\n"
"  <prefix>\n"
"  [QUIET]\n"
"  [REQUIRED]\n"
"  [NO_CMAKE_PATH]\n"
"  [NO_CMAKE_ENVIRONMENT_PATH]\n"
"  [IMPORTED_TARGET [GLOBAL]]\n"
"  <module-spec> [<module-spec>...]\n"
")"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:218
msgid ""
"The behavior and arguments of this command are the same as :command:"
"`pkg_check_modules`, except that rather than checking for all the specified "
"modules, it searches for just the first successful match."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:222
msgid ""
"This command can be used, for example, when some package is known to have "
"possible multiple ``<module-spec>`` on different platforms or versions for "
"the same package."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:228
msgid ""
"This command defines the same variables as described above with addition to:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:231
msgid "``<prefix>_MODULE_NAME``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:234
msgid ""
"If a module is found, the ``<prefix>_MODULE_NAME`` variable will contain the "
"name of the matching module. This variable can be used if the :command:"
"`pkg_get_variable` command needs to be called with the ``<module-name>`` "
"argument that was found by the :command:`pkg_search_module`."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:244
msgid ""
"Retrieves the value of a ``pkg-config`` variable and stores it in the result "
"variable in the calling scope:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:247
msgid ""
"pkg_get_variable(\n"
"  <result-var>\n"
"  <module-name>\n"
"  <var-name>\n"
"  [DEFINE_VARIABLES <key>=<value>...]\n"
")"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:258
msgid "``<result-var>``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:259
msgid ""
"Name of the result variable that will contain the value of ``pkg-config`` "
"variable.  If ``pkg-config`` returns multiple values for the specified "
"variable ``<var-name>``, ``<result-var>`` will contain a :ref:`semicolon-"
"separated list <CMake Language Lists>`."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:264
msgid "``<module-name>``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:265
msgid ""
"Name of the module as defined in its PC metadata file name (``<module-name>."
"pc``)."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:268
msgid "``<var-name>``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:269
msgid ""
"The ``pkg-config`` variable name from the PC metadata file ``<module-name>."
"pc``."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:272
msgid "``DEFINE_VARIABLES <key>=<value>...``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:275
msgid ""
"Specify key-value pairs to redefine variables affecting the variable "
"retrieved with ``pkg-config``."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:279
msgid "Hints"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:281
msgid ""
"This module accepts the following variables before calling "
"``find_package(PkgConfig)`` to influence this module's behavior:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:284
msgid "``ENV{PKG_CONFIG_PATH}``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:285
msgid ""
"Environment variable that specifies additional paths in which ``pkg-config`` "
"will search for its ``.pc`` files.  The ``pkg-config`` tool by default uses "
"this variable, while CMake also provides more common :variable:"
"`CMAKE_PREFIX_PATH` variable to specify additional paths where to look for "
"packages and their ``.pc`` files."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:291
msgid "``ENV{PKG_CONFIG}``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:294
msgid ""
"Environment variable that can be set to the path of the ``pkg-config`` "
"executable and can be used to initialize the ``PKG_CONFIG_EXECUTABLE`` "
"variable, if it has not yet been set."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:300
msgid ""
"This cache variable can be set to the path of the ``pkg-config`` "
"executable.  :command:`find_program` is called internally by the module with "
"this variable."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:304
msgid ""
"If the ``PKG_CONFIG`` environment variable is set, only the first argument "
"is taken from it when using it as a hint."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:312
msgid ""
"This cache variable can be set to a list of arguments to additionally pass "
"to ``pkg-config`` if needed. If not provided, it will be initialized from "
"the ``PKG_CONFIG`` environment variable, if set. The first argument in that "
"environment variable is assumed to be the ``pkg-config`` program, while all "
"remaining arguments after that are used to initialize ``PKG_CONFIG_ARGN``. "
"If no such environment variable is defined, ``PKG_CONFIG_ARGN`` is "
"initialized to an empty string. The module does not update the variable once "
"it has been set in the cache."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:321
msgid "``PKG_CONFIG_USE_CMAKE_PREFIX_PATH``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:325
msgid ""
"Specifies whether :command:`pkg_check_modules` and :command:"
"`pkg_search_module` should add the paths in the :variable:"
"`CMAKE_PREFIX_PATH`, :variable:`CMAKE_FRAMEWORK_PATH` and :variable:"
"`CMAKE_APPBUNDLE_PATH` cache and environment variables to the ``pkg-config`` "
"search path."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:331
msgid ""
"If this variable is not set, this behavior is enabled by default if :"
"variable:`CMAKE_MINIMUM_REQUIRED_VERSION` is 3.1 or later, disabled "
"otherwise."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:336
msgid "Deprecated Variables"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:338
msgid "The following variables are provided for backward compatibility:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:340
msgid "``PKG_CONFIG_FOUND``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:341
msgid "Use ``PkgConfig_FOUND``, which has the same value."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:347
msgid "``PKG_CONFIG_VERSION_STRING``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:348
msgid "Use ``PkgConfig_VERSION``, which has the same value."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:354
msgid "Examples"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:357
msgid "Examples: Finding pkg-config"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:359
msgid "Finding ``pkg-config``:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:361
msgid "find_package(PkgConfig)"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:365
msgid ""
"Finding ``pkg-config`` and making it required (if not found, processing "
"stops with an error message):"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:368
msgid "find_package(PkgConfig REQUIRED)"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:372
msgid ""
"Finding ``pkg-config`` quietly without printing status message as commonly "
"used in find modules:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:375
msgid "find_package(PkgConfig QUIET)"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:380
msgid "Examples: Using ``pkg_check_modules()``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:382
msgid ""
"Checking for any version of glib2.  If found, the output variable "
"``GLIB2_VERSION`` will hold the actual version found:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:385
msgid ""
"find_package(PkgConfig QUIET)\n"
"\n"
"if(PkgConfig_FOUND)\n"
"  pkg_check_modules(GLIB2 glib-2.0)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:393
msgid ""
"The following example looks for at least version 2.10 of glib2.  If found, "
"the output variable ``GLIB2_VERSION`` will hold the actual version found:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:396
msgid ""
"find_package(PkgConfig QUIET)\n"
"\n"
"if(PkgConfig_FOUND)\n"
"  pkg_check_modules(GLIB2 glib-2.0>=2.10)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:404
msgid ""
"The following example looks for both glib2-2.0 (at least version 2.10) and "
"any version of gtk2+-2.0.  Only if both are found will ``FOO`` be considered "
"found.  The ``FOO_glib-2.0_VERSION`` and ``FOO_gtk+-2.0_VERSION`` variables "
"will be set to their respective found module versions."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:409
msgid ""
"find_package(PkgConfig QUIET)\n"
"\n"
"if(PkgConfig_FOUND)\n"
"  pkg_check_modules(FOO glib-2.0>=2.10 gtk+-2.0)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:417
msgid "The following example requires any version of ``xrender``:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:419
msgid ""
"find_package(PkgConfig QUIET REQUIRED)\n"
"pkg_check_modules(XRENDER REQUIRED xrender)"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:424
msgid "Example output variables set by a successful call::"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:426
msgid ""
"XRENDER_LIBRARIES=Xrender;X11\n"
"XRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:430
msgid "Example: Using ``pkg_search_module()``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:432
msgid ""
"Searching for LibXml2 package, which might be provided with different module "
"specifications (``libxml-2.0`` or ``libxml2``):"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:435
msgid ""
"find_package(PkgConfig QUIET)\n"
"\n"
"if(PkgConfig_FOUND)\n"
"  pkg_search_module(BAR libxml-2.0 libxml2 libxml>=2)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:444
msgid "Example: Creating Imported Target"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:446
msgid ""
"In the following example an imported target is created from the module "
"specifications to use in the project directly without using a find module. "
"These imported targets can be used, for example, in cases, where package is "
"known to support ``pkg-config`` on all supported platforms:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:451
msgid ""
"find_package(PkgConfig QUIET REQUIRED)\n"
"pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk4>=4.14)\n"
"target_link_libraries(example PRIVATE PkgConfig::GTK)"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:458
msgid "Example: Using ``pkg_get_variable()``"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:460
msgid ""
"Retrieving the value of ``pkg-config`` variable ``girdir`` from the package "
"Gobject:"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:463
msgid ""
"find_package(PkgConfig QUIET)\n"
"\n"
"if(PkgConfig_FOUND)\n"
"  pkg_get_variable(GI_GIRDIR gobject-introspection-1.0 girdir)\n"
"endif()\n"
"\n"
"message(STATUS \"${GI_GIRDIR}\")"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:474
msgid "See Also"
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:476
msgid ""
"The :command:`cmake_pkg_config` command for a modern and more advanced way "
"to work with ``pkg-config`` in CMake without requiring ``pkg-config`` "
"executable to be installed."
msgstr ""

#: ../../../../Modules/FindPkgConfig.cmake:479
msgid ":ref:`Find Modules` for details how to write a find module."
msgstr ""
