# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CheckLibraryExists.cmake:6
msgid "CheckLibraryExists"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:8
msgid "This module provides a command to check whether a C library exists."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:10
msgid "Load this module in a CMake project with:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:12
msgid "include(CheckLibraryExists)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:17
msgid "Commands"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:19
msgid "This module provides the following command:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:23
msgid ""
"Checks once whether a specified library exists and a given C function is "
"available:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:26
msgid "check_library_exists(<library> <function> <location> <variable>)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:30
msgid ""
"This command attempts to link a test executable that uses the specified C "
"``<function>`` to verify that it is provided by either a system or user-"
"provided ``<library>``."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:34
msgid "The arguments are:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:36
msgid "``<library>``"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:37
msgid ""
"The name of the library, a full path to a library file, or an :ref:`Imported "
"Target <Imported Targets>`."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:40
msgid "``<function>``"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:41
msgid ""
"The name of a function that should be available in the system or user-"
"provided library ``<library>``."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:44
msgid "``<location>``"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:45
msgid ""
"The directory containing the library file.  It is added to the link search "
"path during the check.  If this is an empty string, only the default library "
"search paths are used."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:49
msgid "``<variable>``"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:50
msgid ""
"The name of the variable in which to store the check result.  This variable "
"will be created as an internal cache variable."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:55
msgid ""
"This command is intended for performing basic sanity checks to verify that a "
"library provides the expected functionality, or that the correct library is "
"being located.  However, it only verifies that a function symbol can be "
"linked successfully - it does not ensure that the function is declared in "
"library headers, nor can it detect functions that are inlined or defined as "
"preprocessor macros.  For more robust detection of function availability, "
"prefer using :module:`CheckSymbolExists` or :module:`CheckSourceCompiles`."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:65
msgid "Variables Affecting the Check"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:66
msgid ""
"The following variables may be set before calling this command to modify the "
"way the check is run:"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:1
msgid "``CMAKE_REQUIRED_FLAGS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:2
msgid ""
"A space-separated string of additional flags to pass to the compiler. A :ref:"
"`semicolon-separated list <CMake Language Lists>` will not work. The "
"contents of :variable:`CMAKE_<LANG>_FLAGS` and its associated configuration-"
"specific :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables are automatically "
"prepended to the compiler command before the contents of this variable."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:1
msgid "``CMAKE_REQUIRED_DEFINITIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of compiler "
"definitions, each of the form ``-DFOO`` or ``-DFOO=bar``.  A definition for "
"the name specified by the result variable argument of the check command is "
"also added automatically."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_OPTIONS.rst:1
msgid "``CMAKE_REQUIRED_LINK_OPTIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_OPTIONS.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of options to add "
"to the link command (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:1
msgid "``CMAKE_REQUIRED_LIBRARIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of libraries to add "
"to the link command.  These can be the names of system libraries, or they "
"can be :ref:`Imported Targets` (see :command:`try_compile` for further "
"details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:1
msgid "``CMAKE_REQUIRED_LINK_DIRECTORIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of library search "
"paths to pass to the linker (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:1
msgid "``CMAKE_REQUIRED_QUIET``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:4
msgid ""
"If this variable evaluates to a boolean true value, all status messages "
"associated with the check will be suppressed."
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:82
msgid "Examples"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:84
msgid ""
"Checking if the ``curl`` library exists in the default paths and has the "
"``curl_easy_perform()`` function:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:87
msgid ""
"include(CheckLibraryExists)\n"
"check_library_exists(curl curl_easy_perform \"\" HAVE_LIBRARY_CURL)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:92
msgid ""
"To check if library exists in specific non-standard location and has a "
"specified function:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:95
msgid ""
"include(CheckLibraryExists)\n"
"check_library_exists(curl curl_easy_perform \"/opt/curl/lib\" "
"HAVE_LIBRARY_CURL)"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:100
msgid ""
"Also :ref:`Imported Targets` (for example, from the ``find_package()`` call) "
"can be used:"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:103
msgid ""
"find_package(CURL)\n"
"\n"
"# ...\n"
"\n"
"if(TARGET CURL::libcurl)\n"
"  include(CheckLibraryExists)\n"
"  check_library_exists(CURL::libcurl curl_easy_perform \"\" "
"HAVE_LIBRARY_CURL)\n"
"endif()"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:115
msgid "See Also"
msgstr ""

#: ../../../../Modules/CheckLibraryExists.cmake:117
msgid ""
"The :module:`CheckSymbolExists` module to check whether a C symbol exists."
msgstr ""
