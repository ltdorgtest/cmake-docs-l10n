# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/SelectLibraryConfigurations.cmake:6
msgid "SelectLibraryConfigurations"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:8
msgid ""
"This module provides a command to automatically set library variables when "
"package is available with multiple :ref:`Build Configurations`.  It is "
"intended for use in :ref:`Find Modules` implementing :command:"
"`find_package(<PackageName>)` calls."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:13
msgid "Load this module in a CMake find module with:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:15
#: ../../../../Modules/SelectLibraryConfigurations.cmake:106
#: ../../../../Modules/SelectLibraryConfigurations.cmake:126
msgid "``FindFoo.cmake``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:15
msgid "include(SelectLibraryConfigurations)"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:20
msgid ""
"Supported build configurations are ``Release`` and ``Debug`` as these are "
"the most common ones in such packages."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:25
msgid ""
"This module has been available since early versions of CMake, when the "
"``<PackageName>_LIBRARIES`` result variable was used for linking found "
"packages.  When writing standard find modules, :ref:`Imported Targets` "
"should be preferred.  In addition to or as an alternative to this module, "
"imported targets provide finer control over linking through the :prop_tgt:"
"`IMPORTED_CONFIGURATIONS` property."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:33
msgid "Commands"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:35
msgid "This module provides the following command:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:39
msgid ""
"Sets and adjusts library variables based on debug and release build "
"configurations:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:42
msgid "select_library_configurations(<basename>)"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:46
msgid ""
"This command is a helper for setting the ``<basename>_LIBRARY`` and "
"``<basename>_LIBRARIES`` result variables when a library might be provided "
"with multiple build configurations."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:50
msgid "The argument is:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:52
msgid "``<basename>``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:53
msgid ""
"The base name of the library, used as a prefix for variable names.  This is "
"the name of the package as used in the ``Find<PackageName>.cmake`` module "
"filename, or the component name, when find module provides them."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:57
msgid ""
"Prior to calling this command the following cache variables should be set in "
"the find module (for example, by the :command:`find_library` command):"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:60
msgid "``<basename>_LIBRARY_RELEASE``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:61
msgid ""
"A cache variable storing the full path to the ``Release`` build of the "
"library.  If not set or found, this command will set its value to "
"``<basename>_LIBRARY_RELEASE-NOTFOUND``."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:65
msgid "``<basename>_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:66
msgid ""
"A cache variable storing the full path to the ``Debug`` build of the "
"library.  If not set or found, this command will set its value to "
"``<basename>_LIBRARY_DEBUG-NOTFOUND``."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:70
msgid "This command then sets the following local result variables:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:72
msgid "``<basename>_LIBRARY``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:73
msgid ""
"A result variable that is set to the value of ``<basename>_LIBRARY_RELEASE`` "
"variable if found, otherwise it is set to the value of "
"``<basename>_LIBRARY_DEBUG`` variable if found.  If both are found, the "
"release library value takes precedence. If both are not found, it is set to "
"value ``<basename>_LIBRARY-NOTFOUND``."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:79
msgid ""
"If the :manual:`CMake Generator <cmake-generators(7)>` in use supports build "
"configurations, then this variable will be a list of found libraries each "
"prepended with the ``optimized`` or ``debug`` keywords specifying which "
"library should be linked for the given configuration.  These keywords are "
"used by the :command:`target_link_libraries` command.  If a build "
"configuration has not been set or the generator in use does not support "
"build configurations, then this variable value will not contain these "
"keywords."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:88
msgid "``<basename>_LIBRARIES``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:89
msgid ""
"A result variable that is set to the same value as the "
"``<basename>_LIBRARY`` variable."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:94
msgid ""
"The ``select_library_configurations()`` command should be called before "
"handling standard find module arguments with :command:"
"`find_package_handle_standard_args` to ensure that the "
"``<PackageName>_FOUND`` result variable is correctly set based on "
"``<basename>_LIBRARY`` or other related variables."
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:101
msgid "Examples"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:103
msgid ""
"Setting library variables based on the build configuration inside a find "
"module file:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:106
msgid ""
"# Find release and debug build of the library\n"
"find_library(Foo_LIBRARY_RELEASE ...)\n"
"find_library(Foo_LIBRARY_DEBUG ...)\n"
"\n"
"# Set Foo_LIBRARY and Foo_LIBRARIES result variables\n"
"include(SelectLibraryConfigurations)\n"
"select_library_configurations(Foo)\n"
"\n"
"# Set Foo_FOUND variable and print result message.\n"
"include(FindPackageHandleStandardArgs)\n"
"find_package_handle_standard_args(\n"
"  Foo\n"
"  REQUIRED_VARS Foo_LIBRARY ...\n"
")"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:124
msgid ""
"When find module provides components with multiple build configurations:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:126
msgid ""
"include(SelectLibraryConfigurations)\n"
"foreach(component IN LISTS Foo_FIND_COMPONENTS)\n"
"  # ...\n"
"  select_library_configurations(Foo_${component})\n"
"  # ...\n"
"endforeach()"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:136
msgid "A project can then use this find module as follows:"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:138
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../../Modules/SelectLibraryConfigurations.cmake:138
msgid ""
"find_package(Foo)\n"
"target_link_libraries(project_target PRIVATE ${Foo_LIBRARIES})\n"
"# ..."
msgstr ""
