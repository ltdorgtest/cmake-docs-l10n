# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CheckTypeSize.cmake:6
msgid "CheckTypeSize"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:8
msgid ""
"This module provides a command to check the size of a C/C++ type or "
"expression."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:10
msgid "Load this module in a CMake project with:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:12
msgid "include(CheckTypeSize)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:17
msgid "Commands"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:19
msgid "This module provides the following command:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:23
msgid ""
"Checks once whether the C/C++ type or expression exists and determines its "
"size:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:26
msgid ""
"check_type_size(\n"
"  <type>\n"
"  <size-var>\n"
"  [RESULT_VARIABLE <result-var>]\n"
"  [BUILTIN_TYPES_ONLY]\n"
"  [LANGUAGE <language>]\n"
")"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:36
msgid "The arguments are:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:38
msgid "``<type>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:39
msgid "The type or expression being checked."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:41
#: ../../../../Modules/CheckTypeSize.cmake:74
msgid "``<size-var>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:42
msgid ""
"The name of the internal cache variable for storing the size of the type or "
"expression ``<type>``.  This name is also used as a prefix as explained "
"below."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:46
msgid "``RESULT_VARIABLE <result-var>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:49
msgid ""
"The name of the internal cache variable that holds a boolean value "
"indicating whether the type or expression ``<type>`` exists.  If *not* "
"given, the command will by default define an internal cache variable named "
"``HAVE_<size-var>`` instead."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:54
msgid "``BUILTIN_TYPES_ONLY``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:55
msgid ""
"If given, only compiler-builtin types will be supported in the check. If "
"*not* given, the command checks for common headers ``<sys/types.h>``, "
"``<stdint.h>``, and ``<stddef.h>``, and saves results in "
"``HAVE_SYS_TYPES_H``, ``HAVE_STDINT_H``, and ``HAVE_STDDEF_H`` internal "
"cache variables.  For C++ ``std::`` types, ``<cstdint>`` and ``<cstddef>`` "
"are also checked with ``HAVE_CSTDINT`` and ``HAVE_CSTDDEF`` defined "
"respectively.  The command automatically includes the available headers in "
"the type size check, thus supporting checks of types defined in the headers."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:65
msgid "``LANGUAGE <language>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:66
msgid ""
"Uses the ``<language>`` compiler to perform the check. Acceptable values are "
"``C`` and ``CXX``. If not specified, it defaults to ``C``."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:71
msgid "Result Variables"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:72
msgid "Results are reported in the following variables:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:75
msgid "Internal cache variable that holds one of the following values:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:77
msgid "``<size>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:78
msgid ""
"If the type or expression ``<type>`` exists, it will have a non-zero size "
"``<size>`` in bytes."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:81
msgid "``0``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:82
msgid ""
"When the type has an architecture-dependent size;  This may occur when :"
"variable:`CMAKE_OSX_ARCHITECTURES` has multiple architectures.  In this case "
"also the ``<size-var>_KEYS`` variable is defined and the ``<size-var>_CODE`` "
"variable contains preprocessor tests mapping as explained below."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:88
msgid "\"\" (empty string)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:89
msgid "When the type or expression ``<type>`` does not exist."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:91
msgid "``HAVE_<size-var>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:92
msgid ""
"Internal cache variable that holds a boolean value indicating whether the "
"type or expression ``<type>`` exists.  This variable is defined when the "
"``RESULT_VARIABLE`` argument is not used."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:96
msgid "``<result-var>``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:99
msgid ""
"Internal cache variable defined when the ``RESULT_VARIABLE`` argument is "
"used. It holds a boolean value indicating whether the type or expression "
"``<type>`` exists (same value as ``HAVE_<size-var>``). In this case, the "
"``HAVE_<size-var>`` variable is not defined."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:104
msgid "``<size-var>_CODE``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:105
msgid ""
"CMake variable that holds preprocessor code to define the macro ``<size-"
"var>`` to the size of the type, or to leave the macro undefined if the type "
"does not exist."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:109
msgid ""
"When the type has an architecture-dependent size (``<size-var>`` value is "
"``0``) this variable contains preprocessor tests mapping from each "
"architecture macro to the corresponding type size."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:113
msgid "``<size-var>_KEYS``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:114
msgid ""
"CMake variable that is defined only when the type has an architecture-"
"dependent size (``<size-var>`` value is ``0``) and contains a list of "
"architecture macros. The value for each key is stored in ``<size-var>-"
"<key>`` variables."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:120
msgid "Variables Affecting the Check"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:121
msgid ""
"The following variables may be set before calling this command to modify the "
"way the check is run:"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:1
msgid "``CMAKE_REQUIRED_FLAGS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_FLAGS.rst:2
msgid ""
"A space-separated string of additional flags to pass to the compiler. A :ref:"
"`semicolon-separated list <CMake Language Lists>` will not work. The "
"contents of :variable:`CMAKE_<LANG>_FLAGS` and its associated configuration-"
"specific :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables are automatically "
"prepended to the compiler command before the contents of this variable."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:1
msgid "``CMAKE_REQUIRED_DEFINITIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_DEFINITIONS.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of compiler "
"definitions, each of the form ``-DFOO`` or ``-DFOO=bar``.  A definition for "
"the name specified by the result variable argument of the check command is "
"also added automatically."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_INCLUDES.rst:1
msgid "``CMAKE_REQUIRED_INCLUDES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_INCLUDES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of header search "
"paths to pass to the compiler.  These will be the only header search paths "
"used; the contents of the :prop_dir:`INCLUDE_DIRECTORIES` directory property "
"will be ignored."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_OPTIONS.rst:1
msgid "``CMAKE_REQUIRED_LINK_OPTIONS``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_OPTIONS.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of options to add "
"to the link command (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:1
msgid "``CMAKE_REQUIRED_LIBRARIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LIBRARIES.rst:2
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of libraries to add "
"to the link command.  These can be the names of system libraries, or they "
"can be :ref:`Imported Targets` (see :command:`try_compile` for further "
"details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:1
msgid "``CMAKE_REQUIRED_LINK_DIRECTORIES``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_LINK_DIRECTORIES.rst:4
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of library search "
"paths to pass to the linker (see :command:`try_compile` for further details)."
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:1
msgid "``CMAKE_REQUIRED_QUIET``"
msgstr ""

#: ../../../module/include/CMAKE_REQUIRED_QUIET.rst:4
msgid ""
"If this variable evaluates to a boolean true value, all status messages "
"associated with the check will be suppressed."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:138
msgid "``CMAKE_EXTRA_INCLUDE_FILES``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:139
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of extra header "
"files to include when performing the check."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:143
msgid "Examples"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:145
msgid "Consider the code:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:147
msgid ""
"include(CheckTypeSize)\n"
"\n"
"# Check for size of long.\n"
"check_type_size(long SIZEOF_LONG)\n"
"\n"
"message(\"HAVE_SIZEOF_LONG: ${HAVE_SIZEOF_LONG}\")\n"
"message(\"SIZEOF_LONG: ${SIZEOF_LONG}\")\n"
"message(\"SIZEOF_LONG_CODE: ${SIZEOF_LONG_CODE}\")"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:158
msgid "On a 64-bit architecture, the output may look something like this::"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:160
msgid ""
"HAVE_SIZEOF_LONG: TRUE\n"
"SIZEOF_LONG: 8\n"
"SIZEOF_LONG_CODE: #define SIZEOF_LONG 8"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:164
msgid ""
"On Apple platforms, when :variable:`CMAKE_OSX_ARCHITECTURES` has multiple "
"architectures, types may have architecture-dependent sizes. For example, "
"with the code:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:168
msgid ""
"include(CheckTypeSize)\n"
"\n"
"check_type_size(long SIZEOF_LONG)\n"
"\n"
"message(\"HAVE_SIZEOF_LONG: ${HAVE_SIZEOF_LONG}\")\n"
"message(\"SIZEOF_LONG: ${SIZEOF_LONG}\")\n"
"foreach(key IN LISTS SIZEOF_LONG_KEYS)\n"
"  message(\"key: ${key}\")\n"
"  message(\"value: ${SIZEOF_LONG-${key}}\")\n"
"endforeach()\n"
"message(\"SIZEOF_LONG_CODE:\\n${SIZEOF_LONG_CODE}\")"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:182
msgid "the result may be::"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:184
msgid ""
"HAVE_SIZEOF_LONG: TRUE\n"
"SIZEOF_LONG: 0\n"
"key: __i386\n"
"value: 4\n"
"key: __x86_64\n"
"value: 8\n"
"SIZEOF_LONG_CODE:\n"
"#if defined(__i386)\n"
"# define SIZEOF_LONG 4\n"
"#elif defined(__x86_64)\n"
"# define SIZEOF_LONG 8\n"
"#else\n"
"# error SIZEOF_LONG unknown\n"
"#endif"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:200
msgid "Example: Configuration Header"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:202
msgid ""
"The next example demonstrates how the result variables can be used in a "
"configuration header:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:205
msgid ""
"include(CheckTypeSize)\n"
"check_type_size(long SIZEOF_LONG)\n"
"\n"
"configure_file(config.h.in config.h @ONLY)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:212
msgid "``config.h.in``"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:212
msgid ""
"/* Define whether the type 'long' exists. */\n"
"#cmakedefine HAVE_SIZEOF_LONG\n"
"\n"
"/* The size of 'long', as computed by sizeof. */\n"
"@SIZEOF_LONG_CODE@"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:223
msgid "Example: Checking Complex Expressions"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:225
msgid ""
"Despite the name of this module, it may also be used to determine the size "
"of more complex expressions.  For example, to check the size of a struct "
"member:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:229
msgid ""
"include(CheckTypeSize)\n"
"check_type_size(\"((struct something*)0)->member\" SIZEOF_MEMBER)"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:235
msgid "Example: Isolated Check"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:237
msgid ""
"In the following example, the check is performed with temporarily modified "
"additional headers using the ``CMAKE_EXTRA_INCLUDE_FILES`` variable and :"
"module:`CMakePushCheckState` module.  The result of the check is stored in "
"``HAVE_SIZEOF_UNION_SEMUN``, and size is stored in ``SIZEOF_UNION_SEMUN`` "
"internal cache variables."
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:243
msgid ""
"include(CheckTypeSize)\n"
"include(CMakePushCheckState)\n"
"\n"
"cmake_push_check_state(RESET)\n"
"  set(CMAKE_EXTRA_INCLUDE_FILES sys/types.h sys/ipc.h sys/sem.h)\n"
"  check_type_size(\"union semun\" SIZEOF_UNION_SEMUN)\n"
"cmake_pop_check_state()"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:254
msgid "Example: Customizing Result Variable"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:256
msgid ""
"Since CMake 4.2, the ``HAVE_<size-var>`` variable name can be customized "
"using the ``RESULT_VARIABLE`` argument. In the following example, this "
"module is used to check whether the ``struct flock`` exists, and the result "
"is stored in the ``MyProj_HAVE_STRUCT_FLOCK`` internal cache variable:"
msgstr ""

#: ../../../../Modules/CheckTypeSize.cmake:261
msgid ""
"cmake_minimum_required(VERSION 4.2)\n"
"\n"
"# ...\n"
"\n"
"include(CheckTypeSize)\n"
"include(CMakePushCheckState)\n"
"\n"
"cmake_push_check_state(RESET)\n"
"  set(CMAKE_EXTRA_INCLUDE_FILES \"fcntl.h\")\n"
"\n"
"  check_type_size(\n"
"    \"struct flock\"\n"
"    MyProj_SIZEOF_STRUCT_FLOCK\n"
"    RESULT_VARIABLE MyProj_HAVE_STRUCT_FLOCK\n"
"  )\n"
"cmake_pop_check_state()"
msgstr ""
