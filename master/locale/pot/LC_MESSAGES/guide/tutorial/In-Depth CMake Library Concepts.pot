# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:2
msgid "Step 5: In-Depth CMake Library Concepts"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:4
msgid ""
"While executables are mostly one-size-fits-all, libraries come in many "
"different forms. There are static archives, shared objects, modules, object "
"libraries, header-only libraries, and libraries which describe advanced "
"CMake properties to be inherited by other targets, just to name a few."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:9
msgid ""
"In this step you will learn about some of the most common kinds of libraries "
"that CMake can describe. This will cover most of the in-project uses of :"
"command:`add_library`. Libraries which are imported from dependencies (or "
"exported by the project to be consumed as a dependency) will be covered in "
"later steps."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:16
msgid "Background"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:18
msgid ""
"As we learned in ``Step1``, the :command:`add_library` command accepts the "
"name of the library target to be created as its first argument. The second "
"argument is an optional ``<type>`` for which the following values are valid:"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:22
msgid "``STATIC``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:23
msgid ""
"A :ref:`Static Library <Static Libraries>`: an archive of object files for "
"use when linking other targets."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:26
msgid "``SHARED``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:27
msgid ""
"A :ref:`Shared Library <Shared Libraries>`: a dynamic library that may be "
"linked by other targets and loaded at runtime."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:31
msgid "``MODULE``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:32
msgid ""
"A :ref:`Module Library <Module Libraries>`: a plugin that may not be linked "
"by other targets, but may be dynamically loaded at runtime using dlopen-like "
"functionality."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:36
msgid "``OBJECT``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:37
msgid ""
"An :ref:`Object Library <Object Libraries>`: a collection of object files "
"which have not been archived or linked into a library."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:41
msgid "``INTERFACE``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:42
msgid ""
"An :ref:`Interface Library <Interface Libraries>`: a library target which "
"specifies usage requirements for dependents but does not compile sources and "
"does not produce a library artifact on disk."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:46
msgid ""
"In addition, there are ``IMPORTED`` libraries which describe library targets "
"from foreign projects or modules, imported into the current project. We will "
"cover these briefly in later steps."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:50
msgid ""
"``MODULE`` libraries are most commonly found in plugin systems, or as "
"extensions to runtime-loading languages like Python or Javascript. They act "
"very similar to normal shared libraries, except they cannot be directly "
"linked by other targets. They are sufficiently similar that we won't cover "
"them in further depth here."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:56
msgid "Exercise 1 - Static and Shared"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:58
msgid ""
"While the :command:`add_library` command supports explicitly setting "
"``STATIC`` or ``SHARED``, and this is sometimes necessary, it is best to "
"leave the second argument empty for most \"normal\" libraries which can "
"operate as either."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:62
msgid ""
"When not given a type, :command:`add_library` will create either a "
"``STATIC`` or ``SHARED`` library depending on the value of :variable:"
"`BUILD_SHARED_LIBS`. If :variable:`BUILD_SHARED_LIBS` is true, a ``SHARED`` "
"library will be created, otherwise it will be ``STATIC``."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:67
msgid ""
"add_library(MyLib-static STATIC)\n"
"add_library(MyLib-shared SHARED)\n"
"\n"
"# Depends on BUILD_SHARED_LIBS\n"
"add_library(MyLib)"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:75
msgid ""
"This is desirable behavior, as it allows packagers to determine what kind of "
"library will be produced, and ensure dependents link to that version of the "
"library without needing to modify their source code. In some contexts, fully "
"static builds are appropriate, and in others shared libraries are desirable."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:81
msgid ""
"CMake does not define the :variable:`BUILD_SHARED_LIBS` variable by default, "
"meaning without project or user intervention :command:`add_library` will "
"produce ``STATIC`` libraries."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:85
msgid ""
"By leaving the second argument to :command:`add_library()` blank, projects "
"provide additional flexibility to their packagers and downstream dependents."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:89
#: Concepts.rst:159 Concepts.rst:340
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:91
msgid "Build ``MathFunctions`` as a shared library."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:94
msgid ""
"On Windows, you might see warnings about an empty DLL, as ``MathFunctions`` "
"doesn't export any symbols."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:98
#: Concepts.rst:165 Concepts.rst:345
msgid "Helpful Resources"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:100
msgid ":variable:`BUILD_SHARED_LIBS`"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:103
#: Concepts.rst:171 Concepts.rst:351
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:105
msgid "There are no files to edit."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:108
#: Concepts.rst:178 Concepts.rst:358
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:110
msgid ""
"The ``Help/guide/tutorial/Step5`` directory contains the complete, "
"recommended solution to ``Step4``. This step is about building the "
"``MathFunctions`` library, there are no ``TODOs`` necessary. You can proceed "
"directly to the build step."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:116
#: Concepts.rst:203 Concepts.rst:366
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:118
msgid ""
"We can configure using our preset, turning on :variable:`BUILD_SHARED_LIBS` "
"with a :option:`-D <cmake -D>` flag."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:121
msgid "cmake --preset tutorial -DBUILD_SHARED_LIBS=ON"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:125
msgid ""
"Then we can build only the ``MathFunctions`` library with :option:`-t "
"<cmake--build -t>`."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:128
msgid "cmake --build build -t MathFunctions"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:132
msgid ""
"Verify a shared library is produced for ``MathFunctions`` then reset :"
"variable:`BUILD_SHARED_LIBS`, either by reconfiguring with ``-"
"DBUILD_SHARED_LIBS=OFF`` or deleting the ``CMakeCache.txt``."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:137
#: Concepts.rst:216 Concepts.rst:380
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:139
msgid "There are no changes to the project for this exercise."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:142
msgid "Exercise 2 - Interface Libraries"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:144
msgid ""
"Interface libraries are those which only communicate usage requirements for "
"other targets, they do not build or produce any artifacts of their own. As "
"such all the properties of an interface library must themselves be interface "
"properties, specified with the ``INTERFACE`` :ref:`scope keywords <Target "
"Command Scope>`."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:149
msgid ""
"add_library(MyInterface INTERFACE)\n"
"target_compile_definitions(MyInterface INTERFACE MYINTERFACE_COMPILE_DEF)"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:154
msgid ""
"The most common kind of interface library in C++ development is a header-"
"only library. Such libraries do not build anything, only providing the flags "
"necessary to discover their headers."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:161
msgid ""
"Add a header-only library to the tutorial project, and use it inside the "
"``Tutorial`` executable."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:167
msgid ":command:`add_library`"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:168
msgid ":command:`target_sources`"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:173
msgid "``MathFunctions/MathLogger/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:174
#: Concepts.rst:353
msgid "``MathFunctions/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:175
msgid "``MathFunctions/MathFunctions.cxx``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:180
msgid ""
"In our previous discussions of :command:`target_sources(FILE_SET)`, we noted "
"we can omit the ``TYPE`` parameter if the file set's name is the same as the "
"file set's type. We also said we can omit the ``BASE_DIRS`` parameter if we "
"want to use the current source directory as the only base directory."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:185
msgid ""
"We're ready to introduce a third shortcut, we only need to include the "
"``FILES`` parameter if the headers are intended to be installed, such as "
"public headers of a library."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:189
msgid ""
"The ``MathLogger`` headers in this exercise are only used internally by the "
"``MathFunctions`` implementation. They will not be installed. This should "
"make for a very abbreviated call to :command:`target_sources(FILE_SET)`."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:194
msgid ""
"The headers will be discovered by the compiler's dependency scanner to "
"ensure correct incremental builds. It can be useful to list header files in "
"these contexts anyway, as the list can be used to generate metadata some "
"IDEs rely on."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:199
msgid ""
"You can begin editing the ``Step5`` directory. Complete ``TODO 1`` through "
"``TODO 7``."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:205
msgid ""
"The preset has already been updated to use ``mathfunctions::sqrt`` instead "
"of ``std::sqrt``. We can build and configure as usual."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:208
msgid ""
"cmake --preset tutorial\n"
"cmake --build build"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:213
msgid "Verify that the ``Tutorial`` output now uses the logging framework."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:218
msgid "First we add a new ``INTERFACE`` library named ``MathLogger``."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:220
msgid "<details><summary>TODO 1: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:224
msgid "TODO 1: MathFunctions/MathLogger/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:224
msgid "add_library(MathLogger INTERFACE)\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:231
#: Concepts.rst:252 Concepts.rst:278 Concepts.rst:310 Concepts.rst:407
#: Concepts.rst:426 Concepts.rst:444
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:235
msgid ""
"Then we add the appropriate :command:`target_sources` call to capture the "
"header information. We give this file set the name ``HEADERS`` so we can "
"omit the ``TYPE``, we don't need ``BASE_DIRS`` as we will use the default of "
"the current source directory, and we can exclude the ``FILES`` list because "
"we don't intend to install the library."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:241
msgid "<details><summary>TODO 2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:245
msgid "TODO 2: MathFunctions/MathLogger/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:245
msgid ""
"target_sources(MathLogger\n"
"  INTERFACE\n"
"    FILE_SET HEADERS\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:256
msgid ""
"Now we can add the ``MathLogger`` library to the ``MathFunctions`` linked "
"libraries, and at the ``MathLogger`` folder to the project."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:259
msgid "<details><summary>TODO 3-4: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:263
msgid "TODO 3: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:263
msgid ""
"target_link_libraries(MathFunctions\n"
"  PRIVATE\n"
"    MathLogger\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:271
msgid "TODO 4: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:271
msgid "add_subdirectory(MathLogger)\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:282
msgid ""
"Finally we can update ``MathFunctions.cxx`` to take advantage of the new "
"logger."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:284
msgid "<details><summary>TODO 5-7: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:288
msgid "TODO 5: MathFunctions/MathFunctions.cxx"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:288
msgid ""
"#include <cmath>\n"
"#include <format>\n"
"\n"
"#include <MathLogger.h>\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:295
msgid "TODO 6: MathFunctions/MathFunctions.cxx"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:295
msgid "mathlogger::Logger Logger;\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:302
msgid "TODO 7: MathFunctions/MathFunctions.cxx"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:302
msgid ""
"Logger.Log(std::format(\"Computing sqrt of {} to be {}\\n\", x, result));\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:315
msgid "Exercise 3 - Object Libraries"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:317
msgid ""
"Object libraries have several advanced uses, but also tricky nuances which "
"are difficult to fully enumerate in the scope of this tutorial."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:320
msgid "add_library(MyObjects OBJECT)"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:324
msgid ""
"The most obvious drawback to object libraries is the objects themselves "
"cannot be transitively linked. If an object library appears in the :prop_tgt:"
"`INTERFACE_LINK_LIBRARIES` of a target, the dependents which link that "
"target will not \"see\" the objects. The object library will act like an "
"``INTERFACE`` library in such contexts. In the general case, object "
"libraries are only suitable for ``PRIVATE`` or ``PUBLIC`` consumption via :"
"command:`target_link_libraries`."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:332
msgid ""
"A common use case for object libraries is coalescing several library targets "
"into a single archive or shared library object. Even within a single project "
"libraries may be maintained as different targets for a variety of reasons, "
"such as belonging to different teams within an organization. However, it may "
"be desirable to distribute these as a single consumer-facing binary. Object "
"libraries make this possible."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:342
msgid "Add several object libraries to the ``MathFunctions`` library."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:347
msgid ":command:`target_link_libraries`"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:348
msgid ":command:`add_subdirectory`"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:354
msgid "``MathFunctions/MathFunctions.h``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:355
msgid "``Tutorial/Tutorial.cxx``"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:360
msgid ""
"Several extensions for our ``MathFunctions`` library have been made "
"available (we can imagine these coming from other teams in our "
"organization). Take a minute to look at the targets made available in "
"``MathFunctions/MathExtensions``. Then complete ``TODO 8`` through ``TODO "
"11``."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:368
msgid "There's no reconfiguration needed, we can build as usual."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:370
msgid "cmake --build build"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:374
msgid ""
"Verify the output of ``Tutorial`` now includes the verification message. "
"Also take a minute to inspect the build directory under ``build/"
"MathFunctions/MathExtensions``. You should find that, unlike "
"``MathFunctions``, no archives are produced for any of the object libraries."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:382
msgid ""
"First we will add links for all the object libraries to ``MathFunctions``. "
"These are ``PUBLIC``, because we want the objects to be added to the "
"``MathFunctions`` library as part of its own build step, and we want the "
"headers to be available to consumers of the library."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:387
msgid "Then we add the ``MathExtensions`` subdirectoy to the project."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:389
msgid "<details><summary>TODO 8-9: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:393
msgid "TODO 8: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:393
msgid ""
"target_link_libraries(MathFunctions\n"
"  PRIVATE\n"
"    MathLogger\n"
"\n"
"  PUBLIC\n"
"    OpAdd\n"
"    OpMul\n"
"    OpSub\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:400
msgid "TODO 9: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:400
msgid "add_subdirectory(MathExtensions)\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:412
msgid ""
"To make the extensions available to consumers, we include their headers in "
"the ``MathFunctions.h`` header."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:415
msgid "<details><summary>TODO 10: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:419
msgid "TODO 10: MathFunctions/MathFunctions.h"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:419
msgid ""
"#include <OpAdd.h>\n"
"#include <OpMul.h>\n"
"#include <OpSub.h>\n"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:430
msgid ""
"Finally we can take advantage of the extensions in the ``Tutorial`` program."
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:432
msgid "<details><summary>TODO 11: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:436
msgid "TODO 11: Tutorial/Tutorial.cxx"
msgstr ""

#: ../../../guide/tutorial/In-Depth CMake Library Concepts.rst:436
msgid ""
"double const checkValue = mathfunctions::OpMul(outputValue, outputValue);\n"
"std::cout << std::format(\"The square of {} is {}\\n\", outputValue,\n"
"                         checkValue);\n"
msgstr ""
