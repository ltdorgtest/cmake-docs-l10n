# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:2
msgid "Step 3: Configuration and Cache Variables"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:4
msgid ""
"CMake projects often have some project-specific configuration variables "
"which users and packagers are interested in. CMake has many ways that an "
"invoking user or process can communicate these configuration choices, but "
"the most fundamental of them are :option:`-D <cmake -D>` flags."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:9
msgid ""
"In this step we'll explore the ins and out of how to provide project "
"configuration options from within a CML, and how to invoke CMake to take "
"advantage of configuration options provided by both CMake and individual "
"projects."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:15
msgid "Background"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:17
msgid ""
"If we had a CMake project for compression software which supported multiple "
"compression algorithms, we might want to let the packager of the project "
"decide which algorithms to enable when they build our software. We can do so "
"by consuming variables set via :option:`-D <cmake -D>` flags."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:22
msgid ""
"if(COMPRESSION_SOFTWARE_USE_ZLIB)\n"
"  message(\"I will use Zlib!\")\n"
"  # ...\n"
"endif()\n"
"\n"
"if(COMPRESSION_SOFTWARE_USE_ZSTD)\n"
"  message(\"I will use Zstd!\")\n"
"  # ...\n"
"endif()"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:34
msgid ""
"$ cmake -B build \\\n"
"    -DCOMPRESSION_SOFTWARE_USE_ZLIB=ON \\\n"
"    -DCOMPRESSION_SOFTWARE_USE_ZSTD=OFF\n"
"...\n"
"I will use Zlib!"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:42
msgid ""
"Of course, we will want to provide reasonable defaults for these "
"configuration choices, and a way to communicate the purpose of a given "
"option. This function is provided by the :command:`option` command."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:46
msgid ""
"option(COMPRESSION_SOFTWARE_USE_ZLIB \"Support Zlib compression\" ON)\n"
"option(COMPRESSION_SOFTWARE_USE_ZSTD \"Support Zstd compression\" ON)\n"
"\n"
"if(COMPRESSION_SOFTWARE_USE_ZLIB)\n"
"  # Same as before\n"
"# ..."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:55
msgid ""
"$ cmake -B build \\\n"
"    -DCOMPRESSION_SOFTWARE_USE_ZLIB=OFF\n"
"...\n"
"I will use Zstd!"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:62
msgid ""
"The names created by :option:`-D <cmake -D>` flags and :command:`option` are "
"not normal variables, they are **cache** variables. Cache variables are "
"globally visible variables which are *sticky*, their value is difficult to "
"change after it is initially set. In fact they are so sticky that, in "
"project mode, CMake will save and restore cache variables across multiple "
"configurations. If a cache variable is set once, it will remain until "
"another :option:`-D <cmake -D>` flag preempts the saved variable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:71
msgid ""
"CMake itself has dozens of normal and cache variables used for "
"configuration. These are documented at :manual:`cmake-variables(7)` and "
"operate in the same manner as project-provided variables for configuration."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:75
msgid ""
":command:`set` can also be used to manipulate cache variables, but will not "
"change a variable which has already been created."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:78
msgid ""
"set(StickyCacheVariable \"I will not change\" CACHE STRING \"\")\n"
"set(StickyCacheVariable \"Overwrite StickyCache\" CACHE STRING \"\")\n"
"\n"
"message(\"StickyCacheVariable: ${StickyCacheVariable}\")"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:85
msgid ""
"$ cmake -P StickyCacheVariable.cmake\n"
"StickyCacheVariable: I will not change"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:90
msgid ""
"Because :option:`-D <cmake -D>` flags are processed before any other "
"commands, they take precedence for setting the value of a cache variable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:93
msgid ""
"$ cmake \\\n"
"  -DStickyCacheVariable=\"Commandline always wins\" \\\n"
"  -P StickyCacheVariable.cmake\n"
"StickyCacheVariable: Commandline always wins"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:100
msgid ""
"While cache variables cannot ordinarily be changed, they can be *shadowed* "
"by normal variables. We can observe this by :command:`set`'ing a variable to "
"have the same name as a cache variable, and then using :command:`unset` to "
"remove the normal variable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:105
msgid ""
"set(ShadowVariable \"In the shadows\" CACHE STRING \"\")\n"
"set(ShadowVariable \"Hiding the cache variable\")\n"
"message(\"ShadowVariable: ${ShadowVariable}\")\n"
"\n"
"unset(ShadowVariable)\n"
"message(\"ShadowVariable: ${ShadowVariable}\")"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:114
msgid ""
"$ cmake -P ShadowVariable.cmake\n"
"ShadowVariable: Hiding the cache variable\n"
"ShadowVariable: In the shadows"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:121
msgid "Exercise 1 - Using Options"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:123
msgid ""
"We can imagine a scenario where consumers really want our ``MathFunctions`` "
"library, and the ``Tutorial`` utility is a \"take it or leave it\" add-on. "
"In that case, we might want to add an option to allow consumers to disable "
"building our ``Tutorial`` binary, building only the ``MathFunctions`` "
"library."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:128
msgid ""
"With our knowledge of options, conditionals, and cache variables we have all "
"the pieces we need to make this configuration available."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:132
#: Variables.rst:303 Variables.rst:523
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:134
msgid ""
"Add an option named ``TUTORIAL_BUILD_UTILITIES`` to control if the "
"``Tutorial`` binary is configured and built."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:138
msgid ""
"CMake allows us to determine which targets are built after configuration. "
"Our users could ask for the ``MathFunctions`` library alone without "
"``Tutorial``. CMake also has mechanisms to exclude targets from ``ALL``, the "
"default target which builds all the other available targets."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:143
msgid ""
"However, options which completely exclude targets from the configuration are "
"convenient and popular, especially if configuring those targets involves "
"heavy-weight steps which might take some time."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:147
msgid ""
"It also simplifies :command:`install()` logic, which we'll discuss in later "
"steps, if targets the packager is uninterested in are completely excluded."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:151
#: Variables.rst:310 Variables.rst:529
msgid "Helpful Resources"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:153
msgid ":command:`option`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:154
msgid ":command:`if`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:157
#: Variables.rst:319 Variables.rst:534
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:159
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:162
#: Variables.rst:325 Variables.rst:539
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:164
msgid ""
"The ``Help/guide/tutorial/Step3`` folder contains the complete, recommended "
"solution to ``Step1`` and the relevant ``TODOs`` for this step. Take a "
"minute to review and refamiliarize yourself with the ``Tutorial`` project."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:168
msgid ""
"When you feel you have an understanding of the current code, start with "
"``TODO 1`` and complete through ``TODO 2``."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:172
#: Variables.rst:335 Variables.rst:558
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:174
msgid ""
"We can now reconfigure our project. However, this time we want to control "
"the configuration via :option:`-D <cmake -D>` flags. We again start by "
"navigating to ``Help/guide/tutorial/Step3`` and invoking CMake, but this "
"time with our configuration options."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:179
msgid "cmake -B build -DTUTORIAL_BUILD_UTILITIES=OFF"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:183
msgid "We can now build as usual."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:185
#: Variables.rst:354 Variables.rst:569
msgid "cmake --build build"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:189
msgid ""
"After the build we should observe no Tutorial executable is produced. "
"Because cache variables are sticky even a reconfigure shouldn't change this, "
"despite the default-``ON`` option."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:193
msgid ""
"cmake -B build\n"
"cmake --build build"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:198
msgid ""
"Will not produce the Tutorial executable, the cache variables are \"locked "
"in\". To change this we have two options. First, we can edit the file which "
"stores the cache variables between CMake configuration runs, the \"CMake "
"Cache\". This file is ``build/CMakeCache.txt``, in it we can find the option "
"cache variable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:203
msgid ""
"//Build the Tutorial executable\n"
"TUTORIAL_BUILD_UTILITIES:BOOL=OFF"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:208
msgid ""
"We can change this from ``OFF`` to ``ON``, rerun the build, and we will get "
"our ``Tutorial`` executable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:212
msgid ""
"``CMakeCache.txt`` entries are of the form ``<Name>:<Type>=<Value>``, "
"however the \"type\" is only a hint. All objects in CMake are strings, "
"regardless of what the cache says."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:216
msgid ""
"Alternatively, we can change the value of the cache variable on the command "
"line, because the command line runs before ``CMakeCache.txt`` is loaded its "
"value take precedence over those in the cache file."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:220
msgid ""
"cmake -B build -DTUTORIAL_BUILD_UTILITIES=ON\n"
"cmake --build build"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:225
msgid ""
"Doing so we observe the value in ``CMakeCache.txt`` has flipped from ``OFF`` "
"to ``ON``, and that the ``Tutorial`` executable is built."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:229
#: Variables.rst:359 Variables.rst:574
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:231
msgid ""
"First we create our :command:`option` to provide our cache variable with a "
"reasonable default value."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:234
msgid "<details><summary>TODO 1: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:238
msgid "TODO 1: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:238
msgid "option(TUTORIAL_BUILD_UTILITIES \"Build the Tutorial executable\" ON)\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:245
#: Variables.rst:263 Variables.rst:391 Variables.rst:416 Variables.rst:604
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:249
msgid ""
"Then we can check the cache variable to conditionally enable the "
"``Tutorial`` executable (by way of adding its subdirectory)."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:252
msgid "<details><summary>TODO 2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:256
msgid "TODO 2: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:256
msgid ""
"if(TUTORIAL_BUILD_UTILITIES)\n"
"  add_subdirectory(Tutorial)\n"
"endif()\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:268
msgid "Exercise 2 - ``CMAKE`` Variables"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:270
msgid ""
"CMake has several important normal and cache variables provided to allow "
"packagers to control the build. Decisions such as compilers, default flags, "
"search locations for packages, and much more are all controlled by CMake's "
"own configuration variables."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:275
msgid ""
"Among the most important are language standards. As the language standard "
"can have significant impact on the ABI presented by a given package. For "
"example, it's quite common for libraries to use standard C++ templates on "
"later standards, and provide polyfills on earlier standards. If a library is "
"consumed under different standards then ABI incompatibilities between the "
"standard templates and the polyfills can result in incomprehensible errors "
"and runtime crashes."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:283
msgid ""
"Ensuring all of our targets are built under the same language standard is "
"achieved with the :variable:`CMAKE_<LANG>_STANDARD` cache variables. For C+"
"+, this is ``CMAKE_CXX_STANDARD``."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:288
msgid ""
"Because these variables are so important, it is equally important that "
"developers not override or shadow them in their CMLs. Shadowing :variable:"
"`CMAKE_<LANG>_STANDARD` in a CML because the library wants C++20, when the "
"packager has decided to build the rest of their libraries and applications "
"with C++23, can lead to the aforementioned terrible, incomprehensible errors."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:295
msgid ""
"Do not :command:`set` ``CMAKE_`` globals without very strong reasons for "
"doing so. We'll discuss better methods for targets to communicate "
"requirements like definitions and minimum standards in later steps."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:299
msgid ""
"In this exercise, we'll introduce some C++20 code into our library and "
"executable and build them with C++20 by setting the appropriate cache "
"variable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:305
msgid ""
"Use ``std::format`` to format printed strings instead of stream operators. "
"To ensure availability of ``std::format``, configure CMake to use the C++20 "
"standard for C++ targets."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:312
msgid ":option:`cmake -D`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:313
msgid ":variable:`CMAKE_<LANG>_STANDARD`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:314
msgid ":variable:`CMAKE_CXX_STANDARD`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:315
msgid ":prop_tgt:`CXX_STANDARD`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:316
msgid ""
"`cppreference \\<format\\> <https://en.cppreference.com/w/cpp/utility/format/"
"format.html>`_"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:321
msgid "``Tutorial/Tutorial.cxx``"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:322
msgid "``MathFunctions/MathFunctions.cxx``"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:327
msgid ""
"Continue to edit files from ``Step3``. Complete ``TODO 3`` through ``TODO "
"7``. We'll be modifying our prints to use ``std::format`` instead of stream "
"operators."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:331
msgid ""
"Ensure your cache variables are set such that the Tutorial executable will "
"be built, using any of the methods discussed in the previous exercise."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:337
msgid ""
"We need to reconfigure our project with the new standard, we can do this "
"using the same method as our ``TUTORIAL_BUILD_UTILITIES`` cache variable."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:340
msgid "cmake -B build -DCMAKE_CXX_STANDARD=20"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:345
msgid ""
"Configuration variables are, by convention, prefixed with the provider of "
"the variable. CMake configuration variables are prefixed with ``CMAKE_``, "
"while projects should prefix their variables with ``<PROJECT>_``."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:349
msgid ""
"The tutorial configuration variables follow this convention, and are "
"prefixed with ``TUTORIAL_``."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:352
msgid "Now that we've configured with C++20, we can build as usual."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:361
msgid "We need to include ``<format>`` and then use it."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:363
msgid "<details><summary>TODO 3-5: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:367
msgid "TODO 3: Tutorial/Tutorial.cxx"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:367
msgid ""
"#include <format>\n"
"#include <iostream>\n"
"#include <string>\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:374
msgid "TODO 4: Tutorial/Tutorial.cxx"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:374
msgid ""
"if (argc < 2) {\n"
"  std::cout << std::format(\"Usage: {} number\\n\", argv[0]);\n"
"  return 1;\n"
"}\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:383
msgid "TODO 5: Tutorial/Tutorial.cxx"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:383
msgid ""
"// calculate square root\n"
"double const outputValue = mathfunctions::sqrt(inputValue);\n"
"std::cout << std::format(\"The square root of {} is {}\\n\", inputValue,\n"
"                         outputValue);\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:395
msgid "And again for the ``MathFunctions`` library."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:397
msgid "<details><summary>TODO 6-7: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:401
msgid "TODO 6: MathFunctions.cxx"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:401
msgid ""
"#include <format>\n"
"#include <iostream>\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:408
msgid "TODO 7: MathFunctions.cxx"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:408
msgid ""
"double delta = x - (result * result);\n"
"result = result + 0.5 * delta / result;\n"
"\n"
"std::cout << std::format(\"Computing sqrt of {} to be {}\\n\", x, result);\n"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:421
msgid "Exercise 3 - CMakePresets.json"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:423
msgid ""
"Managing these configuration values can quickly become overwhelming. In CI "
"systems it is appropriate to record these as part of a given CI step. For "
"example in a Github Actions CI step we might see something akin to the "
"following:"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:428
msgid ""
"- name: Configure and Build\n"
"  run: |\n"
"    cmake \\\n"
"      -B build \\\n"
"      -DCMAKE_BUILD_TYPE=Release \\\n"
"      -DCMAKE_CXX_STANDARD=20 \\\n"
"      -DCMAKE_CXX_EXTENSIONS=ON \\\n"
"      -DTUTORIAL_BUILD_UTILITIES=OFF \\\n"
"      # Possibly many more options\n"
"      # ...\n"
"\n"
"    cmake --build build"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:443
msgid ""
"When developing code locally, typing all these options even once might be "
"error prone. If a fresh configuration is needed for any reason, doing so "
"multiple times could be exhausting."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:447
msgid ""
"There are many and varied solutions to this problem, and your choice is "
"ultimately up to your preferences as a developer. CLI-oriented developers "
"commonly use task runners to invoke CMake with their desired options for a "
"project. Most IDEs also have a custom mechanism for controlling CMake "
"configuration."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:453
msgid ""
"It would be impossible to fully enumerate every possible configuration "
"workflow here. Instead we will explore CMake's built-in solution, known as :"
"manual:`CMake Presets <cmake-presets(7)>`. Presets give us a format to name "
"and express collections of CMake configuration options."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:459
msgid ""
"Presets are capable of expressing entire CMake workflows, from "
"configuration, through building, all the way to installing the software "
"package."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:463
msgid ""
"They are far more flexible than can we have room for here. We'll limit "
"ourselves to using them for configuration."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:466
msgid ""
"CMake Presets come in two standard files, ``CMakePresets.json``, which is "
"intended to be a part of the project and tracked in source control; and "
"``CMakeUserPresets.json``, which is intended for local user configuration "
"and should not be tracked in source control."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:471
msgid ""
"The simplest preset which would be of use to a developer does nothing more "
"than configure variables."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:474
msgid ""
"{\n"
"  \"version\": 4,\n"
"  \"configurePresets\": [\n"
"    {\n"
"      \"name\": \"example-preset\",\n"
"      \"cacheVariables\": {\n"
"        \"EXAMPLE_FOO\": \"Bar\",\n"
"        \"EXAMPLE_QUX\": \"Baz\"\n"
"      }\n"
"    }\n"
"  ]\n"
"}"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:489
msgid "When invoking CMake, where previously we would have done:"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:491
msgid "cmake -B build -DEXAMPLE_FOO=Bar -DEXAMPLE_QUX=Baz"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:495
msgid "We can now use the preset:"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:497
msgid "cmake -B build --preset example-preset"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:501
msgid ""
"CMake will search for files named ``CMakePresets.json`` and "
"``CMakeUserPresets.json``, and load the named configuration from them if "
"available."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:506
msgid ""
"Command line flags can be mixed with presets. Command line flags have "
"precedence over values found in a preset."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:509
msgid ""
"Presets also support limited macros, variables that can be brace-expanded "
"inside the preset. The only one of interest to us is the ``${sourceDir}`` "
"macro, which expands to the root directory of the project. We can use this "
"to set our build directory, skipping the :option:`-B <cmake -B>` flag when "
"configuring the project."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:515
msgid ""
"{\n"
"  \"name\": \"example-preset\",\n"
"  \"binaryDir\": \"${sourceDir}/build\"\n"
"}"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:525
msgid ""
"Configure and build the tutorial using a CMake Preset instead of command "
"line flags."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:531
msgid ":manual:`cmake-presets(7)`"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:536
msgid "``CMakePresets.json``"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:541
msgid ""
"Continue to edit files from ``Step3``. Complete ``TODO 8`` and ``TODO 9``."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:544
msgid ""
"``TODOs`` inside ``CMakePresets.json`` need to be *replaced*. There should "
"be no ``TODO`` keys left inside the file when you have completed the "
"exercise."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:547
msgid ""
"You can verify the preset is working correctly by deleting the existing "
"build folder before you configure, this will ensure you're not reusing the "
"existing CMake Cache for configuration."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:552
msgid ""
"On CMake 3.24 and newer, the same effect can be achieved by configuring "
"with :option:`cmake --fresh`."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:555
msgid ""
"All future configuration changes will be via the ``CMakePresets.json`` file."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:560
msgid "We can now use the preset file to manage our configuration."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:562
msgid "cmake --preset tutorial"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:566
msgid ""
"Presets are capable of running the build step for us, but for this tutorial "
"we'll continue to run the build ourselves."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:576
msgid ""
"There are two changes we need to make, first we want to set the build "
"directory (also called the \"binary directory\") to the ``build`` "
"subdirectory of our project folder, and second we need to set the "
"``CMAKE_CXX_STANDARD`` to ``20``."
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:581
msgid "<details><summary>TODO 8-9: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:585
msgid "TODO 8-9: CMakePresets.json"
msgstr ""

#: ../../../guide/tutorial/Configuration and Cache Variables.rst:585
msgid ""
"{\n"
"  \"version\": 4,\n"
"  \"configurePresets\": [\n"
"    {\n"
"      \"name\": \"tutorial\",\n"
"      \"displayName\": \"Tutorial Preset\",\n"
"      \"description\": \"Preset to use with the tutorial\",\n"
"      \"binaryDir\": \"${sourceDir}/build\",\n"
"      \"cacheVariables\": {\n"
"        \"CMAKE_CXX_STANDARD\": \"20\"\n"
"      }\n"
"    }\n"
"  ]\n"
"}"
msgstr ""
