# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Getting Started with CMake.rst:2
msgid "Step 1: Getting Started with CMake"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:4
msgid ""
"This first step in the CMake tutorial is intended as a quick-start into "
"writing useful builds for small projects with CMake. By the end, you will be "
"able to describe executables, libraries, source and header files, and the "
"linkage relationships between them using CMake."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:9
msgid ""
"Each exercise in this step will start with a discussion of the concepts and "
"commands needed for the exercise. Then, a goal and list of helpful resources "
"are provided. Each file in the ``Files to Edit`` section is in the ``Step1`` "
"directory and contains one or more ``TODO`` comments. Each ``TODO`` "
"represents a line or two of code to change or add. The ``TODOs`` are "
"intended to be completed in numerical order, first complete  ``TODO 1`` then "
"``TODO 2``, etc."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:17
msgid ""
"Each step in the tutorial builds on the previous, but the steps are not "
"strictly contiguous. Code not relevant to learning CMake, such as C++ "
"function implementations or CMake code outside the scope of the tutorial, "
"will sometimes be added between steps."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:22
msgid ""
"The ``Getting Started`` section will give some helpful hints and guide you "
"through the exercise. Then the ``Build and Run`` section will walk step-by-"
"step through how to build and test the exercise. Finally, at the end of each "
"exercise the intended solution is reviewed."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:28
msgid "Background"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:30
msgid ""
"Typical usage of CMake revolves around one or more files named ``CMakeLists."
"txt``. This file is sometimes referred to as a \"lists file\" or \"CML\". "
"Within a given software project, a ``CMakeLists.txt`` will exist within any "
"directory where we want to provide instructions to CMake on how to handle "
"files and operations local to that directory or subdirectories. Each "
"consists of a set of commands which describe some information or actions "
"relevant to building the software project."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:38
msgid ""
"Not every directory in a software project needs a CML, but it's strongly "
"recommended that the project root contains one. This will serve as the entry "
"point for CMake for its initial setup during configuration. This *root* CML "
"should always contain the same two commands at or near the top the file."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:43
msgid ""
"cmake_minimum_required(VERSION 3.23)\n"
"\n"
"project(MyProjectName)"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:49
msgid ""
"The :command:`cmake_minimum_required` is a compatibility guarantee provided "
"by CMake to the project developer. When called, it ensures that CMake will "
"adopt the behavior of the listed version. If a later version of CMake is "
"invoked on a CML containing the above code, it will act exactly as if it "
"were CMake 3.23."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:54
msgid ""
"The :command:`project` command is a conceptually simple command which "
"provides a complex function. It informs CMake that what follows is the "
"description of a distinct software project of a given name (as opposed to a "
"shell-like script). When CMake sees the :command:`project` command it "
"performs various checks to ensure the environment is suitable for building "
"software; such as checking for compilers and other build tooling, and "
"discovering properties like the endianness of the host and target machines."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:63
msgid ""
"While links to complete documentation are provided for every command, it is "
"not intended the reader understand the full semantics of each CMake command "
"they use. Effectively learning CMake, like any piece of software, is an "
"incremental process."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:68
msgid ""
"The rest of this tutorial step will be chiefly concerned with the usage of "
"four more commands. The :command:`add_executable` and :command:`add_library` "
"commands for describing output artifacts the software project wants to "
"produce, the :command:`target_sources` command for associating input files "
"with their respective output artifacts, and the :command:"
"`target_link_libraries` command for associating output artifacts with one "
"another."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:75
msgid ""
"These four commands are the backbone of most CMake usage. As we'll learn, "
"they are sufficient for describing the majority of a typical project's "
"requirements."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:79
msgid "Exercise 1 - Building an Executable"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:81
msgid ""
"The most basic CMake project is an executable built from a single source "
"code file. For simple projects like this, a ``CMakeLists.txt`` file with "
"only four commands is needed."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:86
msgid ""
"Although upper, lower and mixed case commands are supported by CMake, lower "
"case commands are preferred and will be used throughout the tutorial."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:89
msgid ""
"The first two commands we have already introduced, :command:"
"`cmake_minimum_required` and :command:`project`. There is no usage of CMake "
"where the first command in a root CML will be anything other than :command:"
"`cmake_minimum_required`. There are some advanced usages where :command:"
"`project` might not be the second command in a CML, but for our purposes it "
"always will be."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:95
msgid ""
"The next command we need is :command:`add_executable`. This command creates "
"a *target*. In CMake lingo, a target is a name the developer gives to a "
"collection of properties."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:99
msgid "Some examples of properties a target might want to keep track of are:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:100
msgid "The artifact kind (executable, library, header collection, etc)"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:101
msgid "Source files"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:102
msgid "Include directories"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:103
msgid "Output name of an executable or library"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:104
msgid "Dependencies"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:105
msgid "Compiler and linker flags"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:107
msgid ""
"The mechanisms of CMake are often best understood as describing and "
"manipulating targets and their properties. There are many more properties "
"than those listed here. Documentation of CMake commands will often discuss "
"their function in terms of the target properties they operate on."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:112
msgid ""
"Targets themselves are simply names, a handle to this collection of "
"properties. Using the :command:`add_executable` command is as easy as "
"specifying the name we want to use for the target."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:116
msgid "add_executable(MyProgram)"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:120
msgid ""
"Now that we have a name for our target, we can start associating properties "
"with it like source files we want to build and link. The primary command for "
"this is :command:`target_sources`, which takes as arguments a target name "
"followed by one or more collections of files."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:125
msgid ""
"target_sources(MyProgram\n"
"  PRIVATE\n"
"    main.cxx\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:133
msgid ""
"Paths in CMake are generally either absolute, or relative to the :variable:"
"`CMAKE_CURRENT_SOURCE_DIR`. We haven't talked about variables like that yet, "
"so you can read this as \"relative to the location of the current CML\"."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:138
msgid ""
"Each collection of files is prefixed by a :ref:`scope keyword <Target "
"Command Scope>`. We'll discuss the complete semantics of these keywords when "
"we talk about linking targets together, but the quick explanation is these "
"describe how a property should be inherited by dependents of our target."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:143
msgid ""
"Typically, nothing depends on an executable. Other programs and libraries "
"don't need to link to an executable, or inherit headers, or anything of that "
"nature. So the appropriate scope to use here is ``PRIVATE``, which informs "
"CMake that this property only belongs to ``MyProgram`` and is not "
"inheritable."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:149
msgid ""
"This rule is true almost everywhere. Outside advanced and esoteric usages, "
"the scope keyword for executables should *always* be ``PRIVATE``. The same "
"holds for implementation files generally, regardless of whether the target "
"is an executable or a library. The only target which needs to \"see\" the ``."
"cxx`` files is the target building them."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:156 CMake.rst:397
#: CMake.rst:576 CMake.rst:700
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:158
msgid ""
"Understand how to create a simple CMake project with a single executable."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:161 CMake.rst:402
#: CMake.rst:582 CMake.rst:705
msgid "Helpful Resources"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:163
msgid ":command:`project`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:164
msgid ":command:`cmake_minimum_required`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:165
msgid ":command:`add_executable`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:166 CMake.rst:405
msgid ":command:`target_sources`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:169 CMake.rst:408
#: CMake.rst:587 CMake.rst:710
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:171 CMake.rst:410
#: CMake.rst:589 CMake.rst:712
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:174 CMake.rst:413
#: CMake.rst:593 CMake.rst:717
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:176
msgid ""
"The source code for ``Tutorial.cxx`` is provided in the ``Help/guide/"
"tutorial/Step1/Tutorial`` directory and can be used to compute the square "
"root of a number. This file does not need to be edited in this exercise."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:180
msgid ""
"In the parent directory, ``Help/guide/tutorial/Step1``, is a ``CMakeLists."
"txt`` file which you will complete. Start with ``TODO 1`` and work through "
"``TODO 4``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:184 CMake.rst:419
#: CMake.rst:603 CMake.rst:732
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:186
msgid ""
"Once ``TODO 1`` through ``TODO 4`` have been completed, we are ready to "
"build and run our project! First, run the :manual:`cmake <cmake(1)>` "
"executable or the :manual:`cmake-gui <cmake-gui(1)>` to configure the "
"project and then build it with your chosen build tool."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:191
msgid ""
"For example, from the command line we could navigate to the ``Help/guide/"
"tutorial/Step1`` directory and invoke CMake for configuration as follows:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:195
msgid "cmake -B build"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:199
msgid ""
"The :option:`-B <cmake -B>` flag tells CMake to use the given relative path "
"as the location to generate files and store artifacts during the build "
"process. If it is omitted, the current working directory is used. It is "
"generally considered bad practice to do \"in-source\" builds, placing these "
"generated files in the source tree itself."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:205
msgid ""
"Next, tell CMake to build the project with :option:`cmake --build <cmake --"
"build>`, passing it the same relative path we did with the :option:`-B "
"<cmake -B>` flag."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:209 CMake.rst:424
#: CMake.rst:608
msgid "cmake --build build"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:213
msgid ""
"The ``Tutorial`` executable will be built into the ``build`` directory. For "
"multi-config generators (e.g. Visual Studio), it might be placed in a "
"subdirectory such as ``build/Debug``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:217
msgid "Finally, try to use the newly built ``Tutorial``:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:219
msgid ""
"Tutorial 4294967296\n"
"Tutorial 10\n"
"Tutorial"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:226
msgid ""
"Depending on the shell, the correct syntax may be ``Tutorial``, ``./"
"Tutorial``, ``.\\Tutorial``, or even ``.\\Tutorial.exe``. For simplicity, "
"the exercises will use ``Tutorial`` throughout."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:231 CMake.rst:431
#: CMake.rst:616 CMake.rst:757
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:233
msgid ""
"As mentioned above, a four command ``CMakeLists.txt`` is all that we need to "
"get up and running. The first line should be :command:"
"`cmake_minimum_required`, to set the CMake version as follows:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:237
msgid "<details><summary>TODO 1: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:241
msgid "TODO 1: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:241
msgid "cmake_minimum_required(VERSION 3.23)\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:248 CMake.rst:267
#: CMake.rst:284 CMake.rst:305 CMake.rst:447 CMake.rst:485 CMake.rst:637
#: CMake.rst:675 CMake.rst:779 CMake.rst:803
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:252
msgid ""
"The next step to make a basic project is to use the :command:`project` "
"command as follows to set the project name and inform CMake we intend to "
"build software with this ``CMakeLists.txt``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:256
msgid "<details><summary>TODO 2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:260
msgid "TODO 2: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:260
msgid "project(Tutorial)\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:271
msgid ""
"Now we can setup our executable target for the Tutorial with :command:"
"`add_executable`."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:273
msgid "<details><summary>TODO 3: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:277
msgid "TODO 3: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:277
msgid "add_executable(Tutorial)\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:288
msgid ""
"Finally, we can associate our source file with the Tutorial executable "
"target using :command:`target_sources`."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:291
msgid "<details><summary>TODO 4: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:295
msgid "TODO 4: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:295
msgid ""
"target_sources(Tutorial\n"
"  PRIVATE\n"
"    Tutorial/Tutorial.cxx\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:310
msgid "Exercise 2 - Building a Library"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:312
msgid ""
"We only need to introduce one more command to build a library, :command:"
"`add_library`. This works exactly like :command:`add_executable`, but for "
"libraries."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:316
msgid "add_library(MyLibrary)"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:320
msgid ""
"However, now is a good time to introduce header files. Header files are not "
"directly built as translation units, which is to say they are not a *build* "
"requirement. They are a *usage* requirement. We need to know about header "
"files in order to build other parts of a given target."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:325
msgid ""
"As such, header files are described slightly differently than implementation "
"files like ``tutorial.cxx``. They're also going to need different :ref:"
"`scope keywords <Target Command Scope>` than the ``PRIVATE`` keyword we have "
"used so far."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:330
msgid ""
"To describe a collection of header files, we're going to use what's known as "
"a ``FILE_SET``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:333
msgid ""
"target_sources(MyLibrary\n"
"  PRIVATE\n"
"    library_implementation.cxx\n"
"\n"
"  PUBLIC\n"
"    FILE_SET myHeaders\n"
"    TYPE HEADERS\n"
"    BASE_DIRS\n"
"      include\n"
"    FILES\n"
"      include/library_header.h\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:348
msgid ""
"This is a lot of complexity, but we'll go through it point by point. First, "
"note that we have our implementation file as a ``PRIVATE`` source, same as "
"with the executable previously. However, we now use ``PUBLIC`` for our "
"header file. This allows consumers of our library to \"see\" the library's "
"header files."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:355
msgid ""
"We're not quite ready to discuss the full semantics of scope keywords. We'll "
"cover them more completely in Exercise 3."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:358
msgid ""
"Following the scope keyword is a ``FILE_SET``, a collection of files to be "
"described as a single unit. A ``FILE_SET`` consists of the following parts:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:361
msgid ""
"``FILE_SET <name>`` is the name of the ``FILE_SET``. This is a handle which "
"we can use to describe the collection in other contexts."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:364
msgid ""
"``TYPE <type>`` is the kind of files we are describing. Most commonly this "
"will be headers, but newer versions of CMake support other types like C++20 "
"modules."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:368
msgid ""
"``BASE_DIRS`` is the \"base\" locations for the files. This can be most "
"easily understood as the locations that will be described to compilers for "
"header discovery via ``-I`` flags."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:372
msgid ""
"``FILES`` is the list of files, same as with the implementation sources list "
"earlier."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:375
msgid ""
"This is a lot of information to describe, so there are some useful shortcuts "
"we can take. Notably, if the ``FILE_SET`` name is the same as the type, we "
"don't need to provide the ``TYPE`` field."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:379
msgid ""
"target_sources(MyLibrary\n"
"  PRIVATE\n"
"    library_implementation.cxx\n"
"\n"
"  PUBLIC\n"
"    FILE_SET HEADERS\n"
"    BASE_DIRS\n"
"      include\n"
"    FILES\n"
"      include/library_header.h\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:393
msgid ""
"There are other shortcuts we can take, but we'll discuss those more in later "
"steps."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:399
msgid "Build a library."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:404
msgid ":command:`add_library`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:415
msgid ""
"Continue editing files in the ``Step1`` directory. Start with ``TODO 5`` and "
"complete through ``TODO 6``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:421
msgid ""
"Let's build our project again. Since we already created a build directory "
"and ran CMake for Exercise 1, we can skip to the build step:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:428
msgid ""
"We should be able to see our library created alongside the Tutorial "
"executable."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:433
msgid ""
"We start by adding the library target in the same manner as the the Tutorial "
"executable."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:436
msgid "<details><summary>TODO 5: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:440
msgid "TODO 5: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:440
msgid "add_library(MathFunctions)\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:451
msgid ""
"Next we need to describe the source files. For the implementation file, "
"``MathFunctions.cxx``, this is straight-forward; for the header file "
"``MathFunctions.h`` we will need to use a ``FILE_SET``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:455
msgid ""
"We can either give this ``FILE_SET`` its own name, or use the shortcut of "
"naming it ``HEADERS``. For this tutorial, we'll be using the shortcut, but "
"either solution is valid."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:459
msgid ""
"For ``BASE_DIRS`` we need to determine the directory which will allow for "
"the desired ``#include <MathFunctions.h>`` directive. To achieve this, the "
"``MathFunctions`` folder itself will be a base directory. We would make a "
"different choice if the desired include directive were ``#include "
"<MathFunctions/MathFunctions.h>`` or similar."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:465
msgid "<details><summary>TODO 6: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:469
msgid "TODO 6: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:469
msgid ""
"target_sources(MathFunctions\n"
"  PRIVATE\n"
"    MathFunctions/MathFunctions.cxx\n"
"\n"
"  PUBLIC\n"
"    FILE_SET HEADERS\n"
"    BASE_DIRS\n"
"      MathFunctions\n"
"    FILES\n"
"      MathFunctions/MathFunctions.h\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:490
msgid "Exercise 3 - Linking Together Libraries and Executables"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:492
msgid ""
"We're ready to combine our library with our executable, for this we must "
"introduce a new command, :command:`target_link_libraries`. The name of this "
"command can be somewhat misleading, as it does a great deal more than just "
"invoke linkers. It describes relationships between targets generally."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:497
msgid ""
"target_link_libraries(MyProgram\n"
"  PRIVATE\n"
"    MyLibrary\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:504
msgid ""
"We're finally ready to discuss the :ref:`scope keywords <Target Command "
"Scope>`. There are three of them, ``PRIVATE``, ``INTERFACE``, and "
"``PUBLIC``. These describe how properties are made available to targets."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:508
msgid ""
"A ``PRIVATE`` property (also called a \"non-interface\" property) is only "
"available to the target which owns it, for example ``PRIVATE`` headers will "
"only be visible to the target they're attached to."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:512
msgid ""
"An ``INTERFACE`` property is only available to targets *which link* the "
"owning target. The owning target does not have access to these properties. A "
"header-only library is an example of a collection of ``INTERFACE`` "
"properties, as header-only libraries do not build anything themselves and do "
"not need to access their own files."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:518
msgid ""
"``PUBLIC`` is not a distinct kind of property, but rather is the union of "
"the ``PRIVATE`` and ``INTERFACE`` properties. Thus requirements described "
"with ``PUBLIC`` are available to both the owning target and consuming "
"targets."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:522
msgid "Consider the following concrete example:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:524
msgid ""
"target_sources(MyLibrary\n"
"  PRIVATE\n"
"    FILE_SET internalOnlyHeaders\n"
"    TYPE HEADERS\n"
"    FILES\n"
"      InternalOnlyHeader.h\n"
"\n"
"  INTERFACE\n"
"    FILE_SET consumerOnlyHeaders\n"
"    TYPE HEADERS\n"
"    FILES\n"
"      ConsumerOnlyHeader.h\n"
"\n"
"  PUBLIC\n"
"    FILE_SET publicHeaders\n"
"    TYPE HEADERS\n"
"    FILES\n"
"      PublicHeader.h\n"
")"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:547
msgid ""
"We excluded ``BASE_DIRS`` for each file set here, that's another shortcut. "
"When excluded, ``BASE_DIRS`` defaults to the current source directory."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:550
msgid ""
"The ``MyLibrary`` target has several properties which will be modified by "
"this call to :command:`target_sources`. Until now we've used the term "
"\"properties\" generically, but properties are themselves named values we "
"can reason about. Two specific properties which will be modified here are :"
"prop_tgt:`HEADER_SETS` and :prop_tgt:`INTERFACE_HEADER_SETS`, which both "
"contain lists of header file sets added via :command:`target_sources`."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:557
msgid ""
"The value ``internalOnlyHeaders`` will be added to :prop_tgt:`HEADER_SETS`, "
"``consumerOnlyHeaders`` to :prop_tgt:`INTERFACE_HEADER_SETS`, and "
"``publicHeaders`` will be added to both."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:561
msgid ""
"When a given target is being built, it will use its own *non-interface* "
"properties (eg, :prop_tgt:`HEADER_SETS`), combined with the *interface* "
"properties of any targets it links to (eg, :prop_tgt:"
"`INTERFACE_HEADER_SETS`)."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:566
msgid ""
"**It is not necessary to reason about CMake properties at this level of "
"detail.** The above is described for completeness. Most of the time you "
"don't need to be concerned with the specific properties a command is "
"modifying."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:570
msgid ""
"Scope keywords have a simple intuition associated with them, when "
"considering a command from the point of view of the target it is being "
"applied to: **PRIVATE** is for me, **INTERFACE** is for others, **PUBLIC** "
"is for all of us."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:578
msgid ""
"In the Tutorial executable, use the ``sqrt()`` function provided by the "
"``MathFunctions`` library."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:584
msgid ":command:`target_link_libraries`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:590
msgid "``Tutorial/Tutorial.cxx``"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:595
msgid ""
"Continue to edit files from ``Step1``. Start on ``TODO 7`` and complete "
"through ``TODO 9``. In this exercise, we need to add the ``MathFunctions`` "
"target to the ``Tutorial`` target's linked libraries using :command:"
"`target_link_libraries`."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:599
msgid ""
"After modifying the CML, update ``tutorial.cxx`` to use the ``mathfunctions::"
"sqrt()`` function instead of ``std::sqrt``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:605
msgid ""
"Let's build our project again. As before, we already created a build "
"directory and ran CMake so we can skip to the build step:"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:612
msgid ""
"Verify that the output matches what you would expect from the "
"``MathFunctions`` library."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:618
msgid ""
"In this exercise, we are describing the ``Tutorial`` executable as a "
"consumer of the ``MathFunctions`` target by adding ``MathFunctions`` to the "
"linked libraries of the ``Tutorial``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:622
msgid ""
"To achieve this, we modify ``CMakeLists.txt`` file to use the :command:"
"`target_link_libraries` command, using ``Tutorial`` as the target to be "
"modified and ``MathFunctions`` as the library we want to add."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:626
msgid "<details><summary>TODO 7: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:630
msgid "TODO 7: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:630
msgid ""
"target_link_libraries(Tutorial\n"
"  PRIVATE\n"
"    MathFunctions\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:642
msgid ""
"The order here is only loosely relevant. That we call :command:"
"`target_link_libraries` prior to defining ``MathFunctions`` with :command:"
"`add_library` doesn't matter to CMake. We are recording that ``Tutorial`` "
"has a dependency on something named ``MathFunctions``, but what "
"``MathFunctions`` means isn't resolved at this stage."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:648
msgid ""
"The only target which needs to be defined when calling a CMake command like :"
"command:`target_sources` or :command:`target_link_libraries` is the target "
"being modified."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:652
msgid ""
"Finally, all that's left to do is modify ``Tutorial.cxx`` to use the newly "
"provided ``mathfunctions::sqrt`` function. That means adding the appropriate "
"header file and modifying our ``sqrt()`` call."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:656
msgid "<details><summary>TODO 8-9: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:660
msgid "TODO 8: Tutorial/Tutorial.cxx"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:660
msgid ""
"#include <iostream>\n"
"#include <string>\n"
"\n"
"#include <MathFunctions.h>\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:667
msgid "TODO 9: Tutorial/Tutorial.cxx"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:667
msgid ""
"// calculate square root\n"
"double const outputValue = mathfunctions::sqrt(inputValue);\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:680
msgid "Exercise 4 - Subdirectories"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:682
msgid ""
"As we move through the tutorial, we will be adding more commands to "
"manipulate the ``Tutorial`` executable and the ``MathFunctions`` library. We "
"want to make sure we keep commands local to the files they are dealing with. "
"While not a major concern for a small project like this, it can be very "
"useful for large projects with many targets and thousands of files."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:688
msgid ""
"The :command:`add_subdirectory` command allows us to incorporate CMLs "
"located in subdirectories of the project."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:691
msgid "add_subdirectory(SubdirectoryName)"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:695
msgid ""
"When a ``CMakeLists.txt`` in a subdirectory is being processed by CMake all "
"relative paths described in the subdirectory CML are relative to that "
"subdirectory, not the top-level CML."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:702
msgid "Use :command:`add_subdirectory` to organize the project."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:707
msgid ":command:`add_subdirectory`"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:713
msgid "``Tutorial/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:714
msgid "``MathFunctions/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:719
msgid ""
"The ``TODOs`` for this step are spread across three ``CMakeLists.txt`` "
"files. Be sure to pay attention to the path changes necessary when moving "
"the :command:`target_sources` commands into subdirectories."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:724
msgid ""
"Previously we said that ``BASE_DIRS`` defaults to the current source "
"directory. As the desired include directory for ``MathFunctions`` will now "
"be the same directory as the CML calling :command:`target_sources`, we "
"should remove the ``BASE_DIRS`` keyword and argument entirely."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:729
msgid "Complete ``TODO 10`` through ``TODO 13``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:734
msgid ""
"Because of the reorganization, we'll need to clean the original build "
"directory prior to rebuilding (otherwise our new ``Target`` build folder "
"would conflict with our previously created ``Target`` executable). We can "
"achieve this with the :option:`--clean-first <cmake--build --clean-first>` "
"flag."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:739
msgid ""
"There's no need for a reconfiguration. CMake will automatically re-configure "
"itself due to the changes in the CMLs."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:742
msgid "cmake --build build --clean-first"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:747
msgid ""
"Our executable and library will be output to a new location in the build "
"tree. A subdirectory which mirrors where :command:`add_executable` and :"
"command:`add_library` were called in the source tree. You will need to "
"navigate to this subdirectory in the build tree to run the tutorial "
"executable in future steps."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:753
msgid ""
"You can verify this behavior by deleting the old ``Tutorial`` executable, "
"and observing that the new one is produced at ``Tutorial/Tutorial``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:759
msgid ""
"We need to move all the commands concerning the ``Tutorial`` executable into "
"``Tutorial/CMakeLists.txt``, and replace them with an :command:"
"`add_subdirectory` command. We also need to update the path for ``Tutorial."
"cxx``."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:764
msgid "<details><summary>TODO 10-11: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:768
msgid "TODO 10: Tutorial/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:768
msgid ""
"add_executable(Tutorial)\n"
"\n"
"target_sources(Tutorial\n"
"  PRIVATE\n"
"    Tutorial.cxx\n"
")\n"
"\n"
"target_link_libraries(Tutorial\n"
"  PRIVATE\n"
"    MathFunctions\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:773
msgid "TODO 11: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:773
msgid "add_subdirectory(Tutorial)"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:783
msgid ""
"We need to do the same with the commands for ``MathFunctions``, changing the "
"relative paths as appropriate and removing ``BASE_DIRS`` as it is no longer "
"necessary, the default value will work."
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:787
msgid "<details><summary>TODO 12-13: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:791
msgid "TODO 12: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:791
msgid ""
"add_library(MathFunctions)\n"
"\n"
"target_sources(MathFunctions\n"
"  PRIVATE\n"
"    MathFunctions.cxx\n"
"\n"
"  PUBLIC\n"
"    FILE_SET HEADERS\n"
"    FILES\n"
"      MathFunctions.h\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:796
msgid "TODO 13: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Getting Started with CMake.rst:796
msgid "add_subdirectory(MathFunctions)\n"
msgstr ""
