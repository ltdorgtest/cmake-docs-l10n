# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:2
msgid "Step 7: Custom Commands and Generated Files"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:4
msgid ""
"Code generation is a ubiquitous mechanism for extending programming "
"languages beyond the bounds of their language model. CMake has first-class "
"support for Qt's Meta-Object Compiler, but very few other code generators "
"are notable enough to warrant that kind of effort."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:9
msgid ""
"Instead, code generators tend to be bespoke and usage specific. CMake "
"provides facilities for describing the usage of a code generator, so "
"projects can add support for their individual needs."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:13
msgid ""
"In this step, we will use :command:`add_custom_command` to add support for a "
"code generator within the tutorial project."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:17
msgid "Background"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:19
msgid ""
"Any step in the build process can generally be described in terms of its "
"inputs and outputs. CMake assumes that code generators and other custom "
"processes operate on the same principle. In this way, the code generator "
"acts identically to compilers, linkers, and other elements of the toolchain; "
"when the inputs are newer than the outputs (or the outputs don't exist), a "
"user-specified command will be run to update the outputs."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:27
msgid ""
"This model assumes the outputs of a process are known before it is run. "
"CMake lacks the ability to describe code generators where the name and "
"location of the outputs depends on the *content* of the input. Various hacks "
"exist to shim this functionality into CMake, but they are outside the scope "
"of this tutorial."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:33
msgid ""
"Describing a code generator (or any custom process) is usually performed in "
"two parts. First, the inputs and outputs are described independently of the "
"CMake target model, concerned only with the generation process itself. "
"Second, the outputs are associated with a CMake target to insert them into "
"the CMake target model."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:39
msgid ""
"For sources, this is as simple as adding the generated files to the source "
"list of a ``STATIC``, ``SHARED``, or ``OBJECT`` library. For header-only "
"generators, it's often necessary to use an intermediary target created via :"
"command:`add_custom_target` to add the header file generation to the build "
"stage (because ``INTERFACE`` libraries have no build step)."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:46
msgid "Exercise 1 - Using a Code Generator"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:48
msgid ""
"The primary mechanism for describing a code generator is the :command:"
"`add_custom_command` command. A \"command\", for the purpose of :command:"
"`add_custom_command` is either an executable available in the build "
"environment or a CMake executable target name."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:53
msgid ""
"add_executable(Tool)\n"
"# ...\n"
"add_custom_command(\n"
"  OUTPUT Generated.cxx\n"
"  COMMAND Tool -i input.txt -o Generated.cxx\n"
"  DEPENDS Tool input.txt\n"
"  VERBATIM\n"
")\n"
"# ...\n"
"add_library(GeneratedObject OBJECT)\n"
"target_sources(GeneratedObject\n"
"  PRIVATE\n"
"    Generated.cxx\n"
")"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:70
msgid ""
"Most of the keywords are self-explanatory, with the exception of "
"``VERBATIM``. This argument is effectively mandatory for legacy reasons that "
"are uninteresting to explain in a modern context. The curious should consult "
"the :command:`add_custom_command` documentation for additional details."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:75
msgid ""
"The ``Tool`` executable target appears both in the ``COMMAND`` and "
"``DEPENDS`` parameters. While ``COMMAND`` is sufficient for the code to "
"build correctly, adding the ``Tool`` itself as a dependency of the custom "
"command ensure that if ``Tool`` is updated, the custom command will be rerun."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:80
msgid ""
"For header-only file generation, additional commands are necessary because "
"the library itself has no build step. We can use :command:"
"`add_custom_target` to create an \"artificial\" build step for the library. "
"We then force the custom target to be run before any targets which link the "
"library with the command :command:`add_dependencies`."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:86
msgid ""
"add_custom_target(RunGenerator DEPENDS Generated.h)\n"
"\n"
"add_library(GeneratedLib INTERFACE)\n"
"target_sources(GeneratedLib\n"
"  INTERFACE\n"
"    FILE_SET HEADERS\n"
"    BASE_DIRS\n"
"      ${CMAKE_CURRENT_BINARY_DIR}\n"
"    FILES\n"
"      ${CMAKE_CURRENT_BINARY_DIR}/Generated.h\n"
")\n"
"\n"
"add_dependencies(GeneratedLib RunGenerator)"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:103
msgid ""
"We add the :variable:`CMAKE_CURRENT_BINARY_DIR`, a variable which names the "
"current location in the build tree where our artifacts are being placed, to "
"the base directories because that's the working directory our code generator "
"will be run inside of. Listing the ``FILES`` is unnecessary for the build "
"and done so here only for clarity."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:110
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:112
msgid ""
"Add a generated table of pre-computed square roots to the ``MathFunctions`` "
"library."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:116
msgid "Helpful Resources"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:118
msgid ":command:`add_executable`"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:119
msgid ":command:`add_library`"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:120
msgid ":command:`target_sources`"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:121
msgid ":command:`add_custom_command`"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:122
msgid ":command:`add_custom_target`"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:123
msgid ":command:`add_dependencies`"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:126
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:128
msgid "``MathFunctions/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:129
msgid "``MathFunctions/MakeTable/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:130
msgid "``MathFunctions/MathFunctions.cxx``"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:133
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:135
msgid ""
"The ``MathFunctions`` library has been edited to use a pre-computed table "
"when given a number less than 10. However, the hardcoded table is not "
"particularly accurate, containing only the nearest truncated integer value."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:139
msgid ""
"The ``MakeTable.cxx`` source file describes a program which will generate a "
"better table. It takes a single argument as input, the file name of the "
"table to be generated."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:143
msgid "Complete ``TODO 1`` through ``TODO 10``."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:146
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:148
msgid ""
"No special configuration is needed, configure and build as usual. Note that "
"the ``MakeTable`` executable is sequenced before ``MathFunctions``."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:151
msgid ""
"cmake --preset tutorial\n"
"cmake --build build"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:156
msgid ""
"Verify the output of ``Tutorial`` now uses the pre-computed table for values "
"less than 10."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:160
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:162
msgid ""
"First we add a new executable to generate the tables, adding the ``MakeTable."
"cxx`` file as a source."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:165
msgid "<details><summary>TODO 1-2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:169
msgid "TODO 1-2: MathFunctions/MakeTable/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:169
msgid ""
"add_executable(MakeTable)\n"
"\n"
"target_sources(MakeTable\n"
"  PRIVATE\n"
"    MakeTable.cxx\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:177
#: Files.rst:195 Files.rst:215 Files.rst:234 Files.rst:259 Files.rst:277
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:181
msgid ""
"Then we add a custom command which produces the table, and custom target "
"which depends on the table."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:184
msgid "<details><summary>TODO 3-4: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:188
msgid "TODO 3-4: MathFunctions/MakeTable/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:188
msgid ""
"add_custom_command(\n"
"  OUTPUT SqrtTable.h\n"
"  COMMAND MakeTable SqrtTable.h\n"
"  DEPENDS MakeTable\n"
"  VERBATIM\n"
")\n"
"\n"
"add_custom_target(RunMakeTable DEPENDS SqrtTable.h)\n"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:199
msgid ""
"We need to add an interface library which describes the output which will "
"appear in :variable:`CMAKE_CURRENT_BINARY_DIR`. The ``FILES`` parameter is "
"optional."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:203
msgid "<details><summary>TODO 5-6: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:207
msgid "TODO 5-6: MathFunctions/MakeTable/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:207
msgid ""
"add_library(SqrtTable INTERFACE)\n"
"\n"
"target_sources(SqrtTable\n"
"  INTERFACE\n"
"    FILE_SET HEADERS\n"
"    BASE_DIRS\n"
"      ${CMAKE_CURRENT_BINARY_DIR}\n"
"    FILES\n"
"      ${CMAKE_CURRENT_BINARY_DIR}/SqrtTable.h\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:219
msgid ""
"Now that all the targets are described, we can force the custom target to "
"run before any dependents of the interface library by associating them with :"
"command:`add_dependencies`."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:223
msgid "<details><summary>TODO 7: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:227
msgid "TODO 7: MathFunctions/MakeTable/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:227
msgid "add_dependencies(SqrtTable RunMakeTable)\n"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:238
msgid ""
"We are ready to add the interface library to the linked libraries of "
"``MathFunctions``, and add the entire ``MakeTable`` folder to the project."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:241
msgid "<details><summary>TODO 8-9: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:245
msgid "TODO 8: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:245
msgid ""
"target_link_libraries(MathFunctions\n"
"  PRIVATE\n"
"    MathLogger\n"
"    SqrtTable\n"
"\n"
"  PUBLIC\n"
"    OpAdd\n"
"    OpMul\n"
"    OpSub\n"
")\n"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:252
msgid "TODO 9: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:252
msgid "add_subdirectory(MakeTable)\n"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:263
msgid ""
"Finally, we update the ``MathFunctions`` library itself to take advantage of "
"the generated table."
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:266
msgid "<details><summary>TODO 10: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:270
msgid "TODO 10: MathFunctions/MathFunctions.cxx"
msgstr ""

#: ../../../guide/tutorial/Custom Commands and Generated Files.rst:270
msgid ""
"#include <SqrtTable.h>\n"
"\n"
"double table_sqrt(double x)\n"
"{\n"
msgstr ""
