# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-21 08:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../prop_tgt/LINKER_TYPE.rst:2
msgid "LINKER_TYPE"
msgstr ""

#: ../../../prop_tgt/LINKER_TYPE.rst:6
msgid ""
"Specify which linker will be used for the link step. The property value may "
"use :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:2
msgid ""
"It is assumed that the linker specified is fully compatible with the default "
"one the compiler would normally invoke. CMake will not do any option "
"translation."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:6
msgid ""
"Linker types are case-sensitive and may only contain letters, numbers and "
"underscores. Linker types defined in all uppercase are reserved for CMake's "
"own built-in types. The pre-defined linker types are:"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:10
msgid "``DEFAULT``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:11
msgid ""
"This type corresponds to standard linking, essentially equivalent to the :"
"prop_tgt:`LINKER_TYPE` target property not being set at all."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:14
msgid "``SYSTEM``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:15
msgid ""
"Use the standard linker provided by the platform or toolchain. For example, "
"this implies the Microsoft linker for all MSVC-compatible compilers. This "
"type is supported for the following platform-compiler combinations:"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:19
#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:29
msgid ""
"Linux: ``GNU``, ``Clang``, ``LLVMFlang``, ``NVIDIA``, and ``Swift`` "
"compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:21
msgid ""
"Apple platforms: ``AppleClang``, ``Clang``, ``GNU``, and ``Swift`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:23
msgid ""
"Windows: ``MSVC``, ``GNU``, ``Clang``, ``NVIDIA``, and ``Swift`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:25
msgid "``LLD``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:26
msgid ""
"Use the ``LLVM`` linker. This type is supported for the following platform-"
"compiler combinations:"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:31
msgid "Apple platforms: ``Clang``, ``AppleClang``, and ``Swift`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:32
msgid ""
"Windows: ``GNU``, ``Clang`` with MSVC-like front-end, ``Clang`` with GNU-"
"like front-end, ``MSVC``, ``NVIDIA`` with MSVC-like front-end, and ``Swift``."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:36
msgid "``BFD``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:37
msgid ""
"Use the ``GNU`` linker.  This type is supported for the following platform-"
"compiler combinations:"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:40
#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:51
msgid "Linux: ``GNU``, ``Clang``, ``LLVMFlang``, and ``NVIDIA`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:41
msgid "Windows: ``GNU``, ``Clang`` with GNU-like front-end."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:43
msgid "``GOLD``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:44
msgid ""
"Supported on Linux platform with ``GNU``, ``Clang``, ``LLVMFlang``, "
"``NVIDIA``, and ``Swift`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:47
msgid "``MOLD``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:48
msgid ""
"Use the `mold linker <https://github.com/rui314/mold>`_. This type is "
"supported on the following platform-compiler combinations:"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:52
msgid ""
"Apple platforms: ``Clang`` and ``AppleClang`` compilers (acts as an alias to "
"the `sold linker`_)."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:55
msgid "``SOLD``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:56
msgid ""
"Use the `sold linker`_. This type is only supported on Apple platforms with "
"``Clang`` and ``AppleClang`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:59
msgid "``APPLE_CLASSIC``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:60
msgid ""
"Use the Apple linker in the classic behavior (i.e. before ``Xcode 15.0``). "
"This type is only supported on Apple platforms with ``GNU``, ``Clang``, "
"``AppleClang``, and ``Swift`` compilers."
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:64
msgid "``MSVC``"
msgstr ""

#: ../../../variable/include/LINKER_PREDEFINED_TYPES.rst:65
msgid ""
"Use the Microsoft linker. This type is only supported on the Windows "
"platform with ``MSVC``, ``Clang`` with MSVC-like front-end, and ``Swift`` "
"compilers."
msgstr ""

#: ../../../prop_tgt/LINKER_TYPE.rst:11
msgid ""
"This property is not supported on :generator:`Green Hills MULTI` generator."
msgstr ""

#: ../../../prop_tgt/LINKER_TYPE.rst:13
msgid ""
"The implementation details for the selected linker will be provided by the :"
"variable:`CMAKE_<LANG>_USING_LINKER_<TYPE>` variable. For example:"
msgstr ""

#: ../../../prop_tgt/LINKER_TYPE.rst:16
msgid ""
"add_library(lib1 SHARED ...)\n"
"set_property(TARGET lib1 PROPERTY LINKER_TYPE LLD)"
msgstr ""

#: ../../../prop_tgt/LINKER_TYPE.rst:21
msgid ""
"This specifies that ``lib1`` should use linker type ``LLD`` for the link "
"step. The command line options that will be passed to the toolchain will be "
"provided by the ``CMAKE_<LANG>_USING_LINKER_LLD`` variable."
msgstr ""

#: ../../../prop_tgt/LINKER_TYPE.rst:25
msgid ""
"Note that the linker would typically be set using :variable:"
"`CMAKE_LINKER_TYPE` for the whole build rather than setting the "
"``LINKER_TYPE`` property on individual targets."
msgstr ""
