# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../cpack_gen/appimage.rst:2
msgid "CPack AppImage generator"
msgstr ""

#: ../../../cpack_gen/appimage.rst:6
msgid ""
"CPack `AppImage`_ generator allows to bundle an application into AppImage "
"format. It uses ``appimagetool`` to pack the application, and ``patchelf`` "
"to set the application ``RPATH`` to a relative path based on where the "
"AppImage will be mounted."
msgstr ""

#: ../../../cpack_gen/appimage.rst:13
msgid ""
"The ``appimagetool`` does not scan for libraries dependencies it only packs "
"the installed content and check if the provided ``.desktop`` file was "
"properly created. For best compatibility it's recommended to choose some old "
"LTS distro and built it there, as well as including most dependencies on the "
"generated file."
msgstr ""

#: ../../../cpack_gen/appimage.rst:19
msgid ""
"The snipped below can be added to your ``CMakeLists.txt`` file replacing "
"``my_application_target`` with your application target, it will do a best "
"effort to scan and copy the libraries your application links to and copy to "
"install location."
msgstr ""

#: ../../../cpack_gen/appimage.rst:24
msgid ""
"install(CODE [[\n"
"    file(GET_RUNTIME_DEPENDENCIES\n"
"        EXECUTABLES $<TARGET_FILE:my_application_target>\n"
"        RESOLVED_DEPENDENCIES_VAR resolved_deps\n"
"    )\n"
"\n"
"    foreach(dep ${resolved_deps})\n"
"        # copy the symlink\n"
"        file(COPY ${dep} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)\n"
"\n"
"        # Resolve the real path of the dependency (follows symlinks)\n"
"        file(REAL_PATH ${dep} resolved_dep_path)\n"
"\n"
"        # Copy the resolved file to the destination\n"
"        file(COPY ${resolved_dep_path} DESTINATION ${CMAKE_INSTALL_PREFIX}/"
"lib)\n"
"    endforeach()\n"
"]])"
msgstr ""

#: ../../../cpack_gen/appimage.rst:44
msgid ""
"For Qt based projects it's recommended to call "
"``qt_generate_deploy_app_script()`` or "
"``qt_generate_deploy_qml_app_script()`` and install the files generated by "
"the script, this will install Qt module's plugins."
msgstr ""

#: ../../../cpack_gen/appimage.rst:49
msgid ""
"You must also set :variable:`CPACK_PACKAGE_ICON` with the same value listed "
"in the Desktop file."
msgstr ""

#: ../../../cpack_gen/appimage.rst:53
msgid "Variables specific to CPack AppImage generator"
msgstr ""

#: ../../../cpack_gen/appimage.rst:57
msgid ""
"Name of the ``appimagetool`` executable, might be located in the build dir, "
"full path or reachable in ``PATH``."
msgstr ""

#: ../../../cpack_gen/appimage.rst:0
msgid "Default"
msgstr ""

#: ../../../cpack_gen/appimage.rst:60
msgid "``appimagetool`` :variable:`CPACK_PACKAGE_FILE_NAME`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:64
msgid ""
"Name of the ``patchelf`` executable, might be located in the build dir, full "
"path or reachable in ``PATH``."
msgstr ""

#: ../../../cpack_gen/appimage.rst:67
msgid "``patchelf`` :variable:`CPACK_APPIMAGE_PATCHELF_EXECUTABLE`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:71
msgid "Name of freedesktop.org desktop file installed."
msgstr ""

#: ../../../cpack_gen/appimage.rst:0
msgid "Mandatory"
msgstr ""

#: ../../../cpack_gen/appimage.rst:73
msgid "Yes"
msgstr ""

#: ../../../cpack_gen/appimage.rst:74
msgid ":variable:`CPACK_APPIMAGE_DESKTOP_FILE`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:78
msgid ""
"Embed update information STRING; if zsyncmake is installed, generate zsync "
"file."
msgstr ""

#: ../../../cpack_gen/appimage.rst:81
msgid ":variable:`CPACK_APPIMAGE_UPDATE_INFORMATION`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:85
msgid ""
"Guess update information based on GitHub or GitLab environment variables."
msgstr ""

#: ../../../cpack_gen/appimage.rst:87
msgid ":variable:`CPACK_APPIMAGE_GUESS_UPDATE_INFORMATION`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:91
msgid "Squashfs compression."
msgstr ""

#: ../../../cpack_gen/appimage.rst:93
msgid ":variable:`CPACK_APPIMAGE_COMPRESSOR`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:97
msgid "Arguments to pass through to mksquashfs."
msgstr ""

#: ../../../cpack_gen/appimage.rst:99
msgid ":variable:`CPACK_APPIMAGE_MKSQUASHFS_OPTIONS`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:103
msgid "Do not check AppStream metadata."
msgstr ""

#: ../../../cpack_gen/appimage.rst:105
msgid ":variable:`CPACK_APPIMAGE_NO_APPSTREAM`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:109
msgid ""
"Uses given file as exclude file for mksquashfs, in addition to ."
"appimageignore."
msgstr ""

#: ../../../cpack_gen/appimage.rst:112
msgid ":variable:`CPACK_APPIMAGE_EXCLUDE_FILE`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:116
msgid "Runtime file to use, if not set a bash script will be generated."
msgstr ""

#: ../../../cpack_gen/appimage.rst:118
msgid ":variable:`CPACK_APPIMAGE_RUNTIME_FILE`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:122
msgid "Sign with gpg[2]."
msgstr ""

#: ../../../cpack_gen/appimage.rst:124
msgid ":variable:`CPACK_APPIMAGE_SIGN`"
msgstr ""

#: ../../../cpack_gen/appimage.rst:128
msgid "Key ID to use for gpg[2] signatures."
msgstr ""

#: ../../../cpack_gen/appimage.rst:130
msgid ":variable:`CPACK_APPIMAGE_SIGN_KEY`"
msgstr ""
