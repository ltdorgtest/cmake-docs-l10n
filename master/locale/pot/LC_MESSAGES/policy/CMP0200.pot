# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../policy/CMP0200.rst:2
msgid "CMP0200"
msgstr ""

#: ../../../policy/CMP0200.rst:6
msgid ""
"Location and configuration selection for imported targets is more consistent."
msgstr ""

#: ../../../policy/CMP0200.rst:8
msgid ""
"The way CMake historically selected the configuration to use for imported "
"targets prioritized selection based on location properties for a candidate "
"configuration and only considered :prop_tgt:`IMPORTED_CONFIGURATIONS` as a "
"fallback.  This could result in incorrect configuration selection especially "
"for ``INTERFACE`` libraries."
msgstr ""

#: ../../../policy/CMP0200.rst:14
msgid ""
"CMake 4.2 and above consider :prop_tgt:`IMPORTED_CONFIGURATIONS` to be a "
"definitive list of available configurations, regardless of whether a "
"configuration specific location is provided for the library.  Additionally, "
"CMake will respect non-configuration-specific locations when a configuration "
"specific location is not specified."
msgstr ""

#: ../../../policy/CMP0200.rst:20
msgid ""
"This policy provides compatibility with projects that rely on the historical "
"behavior.  The policy setting applies to targets and is recorded at the "
"point an imported target is created.  Accordingly, imported packages may "
"override the policy set by the consumer for targets they create.  In "
"particular, targets imported from |CPS| packages always use the ``NEW`` "
"behavior."
msgstr ""

#: ../../../policy/CMP0200.rst:26
msgid ""
"The ``OLD`` behavior for this policy is to retain the historic behavior. The "
"``NEW`` behavior prioritizes selection based on the advertised list of "
"available configurations.  Both behaviors are described in detail below."
msgstr ""

#: ../../../policy/include/STANDARD_ADVICE.rst:1
msgid ""
"This policy was introduced in CMake version |INTRODUCED_IN_CMAKE_VERSION|. "
"It may be set by :command:`cmake_policy` or :command:"
"`cmake_minimum_required`. If it is not set, CMake |WARNS_OR_DOES_NOT_WARN|, "
"and uses ``OLD`` behavior."
msgstr ""

#: ../../../policy/include/DEPRECATED.rst:2
msgid ""
"The ``OLD`` behavior of a policy is :manual:`deprecated by definition <cmake-"
"policies(7)>` and may be removed in a future version of CMake."
msgstr ""

#: ../../../policy/CMP0200.rst:37
msgid "Mapped configuration selection"
msgstr ""

#: ../../../policy/CMP0200.rst:39
msgid ""
"If :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` (where ``<CONFIG>`` is the "
"configuration of the consuming target) is set on an imported target, CMake "
"would historically select from that list the first configuration which "
"provides a configuration-specific location.  If no such configuration "
"exists, CMake would selects the consuming target's configuration, if the "
"imported target is an ``INTERFACE`` library.  Otherwise, CMake considers the "
"target as not having a suitable configuration."
msgstr ""

#: ../../../policy/CMP0200.rst:47
msgid ""
"For ``INTERFACE`` libraries which do not provide a location, this results in "
"CMake always selecting the consuming target's configuration and effectively "
"ignoring :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>`.  This behavior is not "
"consistent with configuration selection for imported targets which provide a "
"location."
msgstr ""

#: ../../../policy/CMP0200.rst:53
msgid ""
"Under the ``NEW`` behavior, CMake selects the first configuration from the "
"mapping which appears in :prop_tgt:`IMPORTED_CONFIGURATIONS`.  If :prop_tgt:"
"`IMPORTED_CONFIGURATIONS` is not set, CMake selects the first configuration "
"from the mapping which is \"usable\".  For non-``INTERFACE`` libraries, "
"\"usable\" means that a location (either configuration-specific or "
"configuration-agnostic) is available.  ``INTERFACE`` libraries are always "
"considered \"usable\"."
msgstr ""

#: ../../../policy/CMP0200.rst:61
msgid ""
"If no match is found, CMake considers the target as not having a suitable "
"configuration."
msgstr ""

#: ../../../policy/CMP0200.rst:65
msgid "Non-mapped configuration selection"
msgstr ""

#: ../../../policy/CMP0200.rst:67
msgid ""
"If :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` is *not* set, CMake would "
"historically select the first configuration which provides a location out of "
"the following:"
msgstr ""

#: ../../../policy/CMP0200.rst:71
msgid "The consuming target's configuration, or"
msgstr ""

#: ../../../policy/CMP0200.rst:73
msgid "The empty configuration, or"
msgstr ""

#: ../../../policy/CMP0200.rst:75
msgid "The list of configurations in :prop_tgt:`IMPORTED_CONFIGURATIONS`."
msgstr ""

#: ../../../policy/CMP0200.rst:77
msgid ""
"As an implementation artifact, this results in CMake selecting the *last* "
"configuration in :prop_tgt:`IMPORTED_CONFIGURATIONS` for ``INTERFACE`` "
"libraries which do not provide a location.  Again, this behavior is not "
"consistent with configuration selection for imported targets which provide a "
"location."
msgstr ""

#: ../../../policy/CMP0200.rst:83
msgid ""
"Under the ``NEW`` behavior, if :prop_tgt:`IMPORTED_CONFIGURATIONS` is set, "
"CMake will select the consuming target's configuration if present therein, "
"otherwise CMake will select the first imported configuration.  If :prop_tgt:"
"`IMPORTED_CONFIGURATIONS` is *not* set, CMake will select the consuming "
"target's configuration if it is \"usable\" (as defined in the previous "
"section); otherwise, CMake considers the target as not having a suitable "
"configuration."
msgstr ""

#: ../../../policy/CMP0200.rst:92
msgid "Examples"
msgstr ""

#: ../../../policy/CMP0200.rst:94
msgid "Consider the following imported library:"
msgstr ""

#: ../../../policy/CMP0200.rst:96
msgid ""
"add_library(test INTERFACE IMPORTED)\n"
"set_target_properties(test PROPERTIES\n"
"  IMPORTED_CONFIGURATIONS \"RELEASE;DEBUG\"\n"
"  INTERFACE_COMPILE_DEFINITIONS \"$<$<CONFIG:debug>:DEBUG>\"\n"
")"
msgstr ""

#: ../../../policy/CMP0200.rst:104
msgid ""
"Under the ``OLD`` policy, CMake will select the ``DEBUG`` configuration of "
"``test`` (and thus define the symbol ``DEBUG``) for any target linking to "
"``test``, because CMake does not consider any configuration \"valid\", and, "
"as an implementation artifact, the last configuration considered is accepted."
msgstr ""

#: ../../../policy/CMP0200.rst:109
msgid ""
"Under the ``NEW`` policy, the ``RELEASE`` configuration will be selected if "
"the consuming project is built in any configuration other than ``Debug`` "
"(keeping in mind that configuration matching is case-insensitive).  This is "
"because ``DEBUG`` will be preferred if the consumer's configuration is also "
"``DEBUG``, but ``RELEASE`` will be preferred otherwise because it appears "
"first in :prop_tgt:`IMPORTED_CONFIGURATIONS`, and its appearance therein "
"makes it a \"valid\" configuration for an ``INTERFACE`` library."
msgstr ""
