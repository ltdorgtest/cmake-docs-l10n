# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/cmake_parse_arguments.rst:2
msgid "cmake_parse_arguments"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:4
msgid "Parse function or macro arguments."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:6
msgid ""
"cmake_parse_arguments(<prefix> <options> <one_value_keywords>\n"
"                      <multi_value_keywords> <args>...)\n"
"\n"
"cmake_parse_arguments(PARSE_ARGV <N> <prefix> <options>\n"
"                      <one_value_keywords> <multi_value_keywords>)"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:14
msgid ""
"This command is implemented natively.  Previously, it has been defined in "
"the module :module:`CMakeParseArguments`."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:18
msgid ""
"This command is for use in macros or functions. It processes the arguments "
"given to that macro or function, and defines a set of variables which hold "
"the values of the respective options."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:23
msgid ""
"The first signature reads arguments passed in the ``<args>...``. This may be "
"used in either a :command:`macro` or a :command:`function`."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:26
msgid ""
"The ``PARSE_ARGV`` signature is only for use in a :command:`function` body.  "
"In this case, the arguments that are parsed come from the ``ARGV#`` "
"variables of the calling function.  The parsing starts with the ``<N>``-th "
"argument, where ``<N>`` is an unsigned integer. This allows for the values "
"to have special characters like ``;`` in them."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:33
msgid ""
"The ``<options>`` argument contains all options for the respective function "
"or macro. These are keywords that have no value following them, like the "
"``OPTIONAL`` keyword of the :command:`install` command."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:37
msgid ""
"The ``<one_value_keywords>`` argument contains all keywords for this "
"function or macro which are followed by one value, like the ``DESTINATION`` "
"keyword of the :command:`install` command."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:41
msgid ""
"The ``<multi_value_keywords>`` argument contains all keywords for this "
"function or macro which can be followed by more than one value, like the "
"``TARGETS`` or ``FILES`` keywords of the :command:`install` command."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:45
msgid ""
"All keywords must be unique.  Each keyword can only be specified once in any "
"of the ``<options>``, ``<one_value_keywords>``, or "
"``<multi_value_keywords>``. A warning will be emitted if uniqueness is "
"violated."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:51
msgid ""
"When done, ``cmake_parse_arguments`` will consider for each of the keywords "
"listed in ``<options>``, ``<one_value_keywords>``, and "
"``<multi_value_keywords>``, a variable composed of the given ``<prefix>`` "
"followed by ``\"_\"`` and the name of the respective keyword.  For "
"``<one_value_keywords>`` and ``<multi_value_keywords>``, these variables "
"will then hold the respective value(s) from the argument list, or be "
"undefined if the associated keyword was not given (policy :policy:`CMP0174` "
"can also affect the behavior for ``<one_value_keywords>``).  For the "
"``<options>`` keywords, these variables will always be defined, and they "
"will be set to ``TRUE`` if the keyword is present, or ``FALSE`` if it is not."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:62
msgid ""
"All remaining arguments are collected in a variable "
"``<prefix>_UNPARSED_ARGUMENTS`` that will be undefined if all arguments were "
"recognized. This can be checked afterwards to see whether your macro or "
"function was called with unrecognized parameters."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:67
msgid ""
"``<one_value_keywords>`` and ``<multi_value_keywords>`` that were given no "
"values at all are collected in a variable "
"``<prefix>_KEYWORDS_MISSING_VALUES`` that will be undefined if all keywords "
"received values. This can be checked to see if there were keywords without "
"any values given."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:74
msgid ""
"If a ``<one_value_keyword>`` is followed by an empty string as its value, "
"policy :policy:`CMP0174` controls whether a corresponding "
"``<prefix>_<keyword>`` variable is defined or not."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:79
msgid ""
"Choose a ``<prefix>`` carefully to avoid clashing with existing variable "
"names. When used inside a function, it is usually suitable to use the prefix "
"``arg``. There is a very strong convention that all keywords are fully "
"uppercase, so this prefix results in variables of the form "
"``arg_SOME_KEYWORD``.  This makes the code more readable, and it minimizes "
"the chance of clashing with cache variables, which also have a strong "
"convention of being all uppercase."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:86
msgid ""
"function(my_install)\n"
"    set(options OPTIONAL FAST)\n"
"    set(oneValueArgs DESTINATION RENAME)\n"
"    set(multiValueArgs TARGETS CONFIGURATIONS)\n"
"    cmake_parse_arguments(PARSE_ARGV 0 arg\n"
"        \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\"\n"
"    )\n"
"\n"
"    # The above will set or unset variables with the following names:\n"
"    #   arg_OPTIONAL\n"
"    #   arg_FAST\n"
"    #   arg_DESTINATION\n"
"    #   arg_RENAME\n"
"    #   arg_TARGETS\n"
"    #   arg_CONFIGURATIONS\n"
"    #\n"
"    # The following will also be set or unset:\n"
"    #   arg_UNPARSED_ARGUMENTS\n"
"    #   arg_KEYWORDS_MISSING_VALUES"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:108
msgid ""
"When used inside a macro, ``arg`` might not be a suitable prefix because the "
"code will affect the calling scope.  If another macro also called in the "
"same scope were to use ``arg`` in its own call to "
"``cmake_parse_arguments()``, and if there are any common keywords between "
"the two macros, the later call's variables can overwrite or remove those of "
"the earlier macro's call. Therefore, it is advisable to incorporate "
"something unique from the macro name in the ``<prefix>``, such as "
"``arg_lowercase_macro_name``."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:116
msgid ""
"macro(my_install)\n"
"    set(options OPTIONAL FAST)\n"
"    set(oneValueArgs DESTINATION RENAME)\n"
"    set(multiValueArgs TARGETS CONFIGURATIONS)\n"
"    cmake_parse_arguments(arg_my_install\n"
"        \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\"\n"
"        ${ARGN}\n"
"    )\n"
"    # ...\n"
"endmacro()\n"
"\n"
"macro(my_special_install)\n"
"    # NOTE: Has the same keywords as my_install()\n"
"    set(options OPTIONAL FAST)\n"
"    set(oneValueArgs DESTINATION RENAME)\n"
"    set(multiValueArgs TARGETS CONFIGURATIONS)\n"
"    cmake_parse_arguments(arg_my_special_install\n"
"        \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\"\n"
"        ${ARGN}\n"
"    )\n"
"    # ...\n"
"endmacro()"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:141
msgid "Suppose the above macros are called one after the other, like so:"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:143
msgid ""
"my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub CONFIGURATIONS)\n"
"my_special_install(TARGETS barry DESTINATION sbin RENAME FAST)"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:148
msgid ""
"After these two calls, the following describes the variables that will be "
"set or unset::"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:151
msgid ""
"arg_my_install_OPTIONAL = TRUE\n"
"arg_my_install_FAST = FALSE # was not present in call to my_install\n"
"arg_my_install_DESTINATION = \"bin\"\n"
"arg_my_install_RENAME <UNSET> # was not present\n"
"arg_my_install_TARGETS = \"foo;bar\"\n"
"arg_my_install_CONFIGURATIONS <UNSET> # was not present\n"
"arg_my_install_UNPARSED_ARGUMENTS = \"blub\" # nothing expected after "
"\"OPTIONAL\"\n"
"arg_my_install_KEYWORDS_MISSING_VALUES = \"CONFIGURATIONS\" # value was "
"missing\n"
"\n"
"arg_my_special_install_OPTIONAL = FALSE # was not present\n"
"arg_my_special_install_FAST = TRUE\n"
"arg_my_special_install_DESTINATION = \"sbin\"\n"
"arg_my_special_install_RENAME <UNSET> # value was missing\n"
"arg_my_special_install_TARGETS = \"barry\"\n"
"arg_my_special_install_CONFIGURATIONS <UNSET> # was not present\n"
"arg_my_special_install_UNPARSED_ARGUMENTS <UNSET>\n"
"arg_my_special_install_KEYWORDS_MISSING_VALUES = \"RENAME\""
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:169
msgid ""
"Keywords terminate lists of values. If a keyword is given directly after a "
"``<one_value_keyword>``, that preceding ``<one_value_keyword>`` receives no "
"value and the keyword is added to the ``<prefix>_KEYWORDS_MISSING_VALUES`` "
"variable. In the above example, the call to ``my_special_install()`` "
"contains the ``RENAME`` keyword immediately followed by the ``FAST`` "
"keyword. In this case, ``FAST`` terminates processing of the ``RENAME`` "
"keyword. ``arg_my_special_install_FAST`` is set to ``TRUE``, "
"``arg_my_special_install_RENAME`` is unset, and "
"``arg_my_special_install_KEYWORDS_MISSING_VALUES`` contains the value "
"``RENAME``."
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:181
msgid "See Also"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:183
msgid ":command:`function`"
msgstr ""

#: ../../../command/cmake_parse_arguments.rst:184
msgid ":command:`macro`"
msgstr ""
