# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 08:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../policy/CMP0156.rst:2
msgid "CMP0156"
msgstr ""

#: ../../../policy/CMP0156.rst:6
msgid "De-duplicate libraries on link lines based on linker capabilities."
msgstr ""

#: ../../../policy/CMP0156.rst:8
msgid ""
"Traditional linkers maintain a set of undefined symbols during linking. The "
"linker processes each file in the order in which it appears on the command "
"line, until the set of undefined symbols becomes empty. An object file is "
"linked into the output object when it is encountered, with its undefined "
"symbols added to the set. Upon encountering an archive file a traditional "
"linker searches the objects contained therein, and processes those that "
"satisfy symbols in the unresolved set."
msgstr ""

#: ../../../policy/CMP0156.rst:16
msgid ""
"Handling mutually dependent archives may be awkward when using a traditional "
"linker. Archive files may have to be specified multiple times."
msgstr ""

#: ../../../policy/CMP0156.rst:19
msgid ""
"Some linkers (for instance Apple or Windows linkers, as well as ``LLVM "
"LLD``) record all symbols found in objects and archives as they iterate over "
"command line arguments. When one of these linkers encounters an undefined "
"symbol that can be resolved by an object file contained in a previously "
"processed archive file, it immediately extracts and links it into the output "
"object."
msgstr ""

#: ../../../policy/CMP0156.rst:25
msgid ""
"CMake 3.28 and below may generate link lines that repeat static libraries as "
"a traditional linker would need, even when using a linker that does not need "
"it. They may also de-duplicate shared libraries by keeping their last "
"occurrence, which on Windows platforms can change DLL load order."
msgstr ""

#: ../../../policy/CMP0156.rst:30
msgid ""
"CMake 3.29 and above prefer to apply different strategies based on linker "
"capabilities.  So, when targeting Apple and Windows platforms, all libraries "
"are de-duplicated.  Moreover, on Windows platforms, libraries are de-"
"duplicated by keeping their first occurrence, thus respecting the project-"
"specified order.  This policy provides compatibility with projects that have "
"not been updated to expect the latter behavior."
msgstr ""

#: ../../../policy/CMP0156.rst:39
msgid ""
"When this policy is set to ``NEW``, the policy :policy:`CMP0179` controls "
"which occurrence of the static libraries is kept when they are de-duplicated."
msgstr ""

#: ../../../policy/CMP0156.rst:42
msgid ""
"The ``OLD`` behavior for this policy is to always repeat static libraries as "
"if using a traditional linker, and always de-duplicate shared libraries by "
"keeping the last occurrence of each.  The ``NEW`` behavior for this policy "
"is to apply different strategies based on linker capabilities."
msgstr ""

#: ../../../policy/STANDARD_ADVICE.txt:1
msgid ""
"This policy was introduced in CMake version |INTRODUCED_IN_CMAKE_VERSION|. "
"It may be set by :command:`cmake_policy` or :command:"
"`cmake_minimum_required`. If it is not set, CMake |WARNS_OR_DOES_NOT_WARN|, "
"and uses ``OLD`` behavior."
msgstr ""

#: ../../../policy/DEPRECATED.txt:2
msgid ""
"The ``OLD`` behavior of a policy is :manual:`deprecated by definition <cmake-"
"policies(7)>` and may be removed in a future version of CMake."
msgstr ""
