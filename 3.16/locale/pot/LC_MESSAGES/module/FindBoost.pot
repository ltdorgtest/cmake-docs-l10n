# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2019 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindBoost.cmake:6
msgid "FindBoost"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:8
msgid "Find Boost include dirs and libraries"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:10
msgid "Use this module by invoking find_package with the form::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:12
msgid ""
"find_package(Boost\n"
"  [version] [EXACT]      # Minimum or EXACT version e.g. 1.67.0\n"
"  [REQUIRED]             # Fail with error if Boost is not found\n"
"  [COMPONENTS <libs>...] # Boost libraries by their canonical name\n"
"                         # e.g. \"date_time\" for \"libboost_date_time\"\n"
"  [OPTIONAL_COMPONENTS <libs>...]\n"
"                         # Optional Boost libraries by their canonical "
"name)\n"
"  )                      # e.g. \"date_time\" for \"libboost_date_time\""
msgstr ""

#: ../../../../Modules/FindBoost.cmake:21
msgid ""
"This module finds headers and requested component libraries OR a CMake "
"package configuration file provided by a \"Boost CMake\" build.  For the "
"latter case skip to the \"Boost CMake\" section below.  For the former case "
"results are reported in variables::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:26
msgid ""
"Boost_FOUND            - True if headers and requested libraries were found\n"
"Boost_INCLUDE_DIRS     - Boost include directories\n"
"Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n"
"Boost_LIBRARIES        - Boost component libraries to be linked\n"
"Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-"
"case)\n"
"Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n"
"                         target_link_libraries debug/optimized keywords)\n"
"Boost_VERSION_MACRO    - BOOST_VERSION value from boost/version.hpp\n"
"Boost_VERSION_STRING   - Boost version number in x.y.z format\n"
"Boost_VERSION          - if CMP0093 NEW => same as Boost_VERSION_STRING\n"
"                         if CMP0093 OLD or unset => same as "
"Boost_VERSION_MACRO\n"
"Boost_LIB_VERSION      - Version string appended to library filenames\n"
"Boost_VERSION_MAJOR    - Boost major version number (X in X.y.z)\n"
"                         alias: Boost_MAJOR_VERSION\n"
"Boost_VERSION_MINOR    - Boost minor version number (Y in x.Y.z)\n"
"                         alias: Boost_MINOR_VERSION\n"
"Boost_VERSION_PATCH    - Boost subminor version number (Z in x.y.Z)\n"
"                         alias: Boost_SUBMINOR_VERSION\n"
"Boost_VERSION_COUNT    - Amount of version components (3)\n"
"Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n"
"                       - Pass to add_definitions() to have diagnostic\n"
"                         information about Boost's automatic linking\n"
"                         displayed during compilation"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:50
msgid ""
"Note that Boost Python components require a Python version suffix (Boost "
"1.67 and later), e.g. ``python36`` or ``python27`` for the versions built "
"against Python 3.6 and 2.7, respectively.  This also applies to additional "
"components using Python including ``mpi_python`` and ``numpy``.  Earlier "
"Boost releases may use distribution-specific suffixes such as ``2``, ``3`` "
"or ``2.7``. These may also be used as suffixes, but note that they are not "
"portable."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:59
msgid "This module reads hints about search locations from variables::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:61
msgid ""
"BOOST_ROOT             - Preferred installation prefix\n"
" (or BOOSTROOT)\n"
"BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n"
"BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n"
"Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n"
"                         specified by these hint variables. Default is OFF.\n"
"Boost_ADDITIONAL_VERSIONS\n"
"                       - List of Boost versions not known to this module\n"
"                         (Boost install locations may contain the version)"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:71
msgid "and saves search results persistently in CMake cache entries::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:73
msgid ""
"Boost_INCLUDE_DIR         - Directory containing Boost headers\n"
"Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n"
"Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n"
"Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n"
"Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:79
msgid "The following :prop_tgt:`IMPORTED` targets are also defined::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:81
msgid ""
"Boost::headers                - Target for header-only dependencies\n"
"                                (Boost include directory)\n"
"                                alias: Boost::boost\n"
"Boost::<C>                    - Target for specific component dependency\n"
"                                (shared or static library); <C> is lower-\n"
"                                case\n"
"Boost::diagnostic_definitions - interface target to enable diagnostic\n"
"                                information about Boost's automatic linking\n"
"                                during compilation (adds "
"BOOST_LIB_DIAGNOSTIC)\n"
"Boost::disable_autolinking    - interface target to disable automatic\n"
"                                linking with MSVC (adds BOOST_ALL_NO_LIB)\n"
"Boost::dynamic_linking        - interface target to enable dynamic linking\n"
"                                linking with MSVC (adds BOOST_ALL_DYN_LINK)"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:95
msgid ""
"Implicit dependencies such as ``Boost::filesystem`` requiring ``Boost::"
"system`` will be automatically detected and satisfied, even if system is not "
"specified when using :command:`find_package` and if ``Boost::system`` is not "
"added to :command:`target_link_libraries`.  If using ``Boost::thread``, then "
"``Threads::Threads`` will also be added automatically."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:101
msgid ""
"It is important to note that the imported targets behave differently than "
"variables created by this module: multiple calls to :command:"
"`find_package(Boost)` in the same directory or sub-directories with "
"different options (e.g. static or shared) will not override the values of "
"the targets created by the first call."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:107
msgid ""
"Users may set these hints or results as ``CACHE`` entries.  Projects should "
"not read these entries directly but instead use the above result variables.  "
"Note that some hint names start in upper-case \"BOOST\".  One may specify "
"these as environment variables if they are not specified as CMake variables "
"or cache entries."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:113
msgid ""
"This module first searches for the ``Boost`` header files using the above "
"hint variables (excluding ``BOOST_LIBRARYDIR``) and saves the result in "
"``Boost_INCLUDE_DIR``.  Then it searches for requested component libraries "
"using the above hints (excluding ``BOOST_INCLUDEDIR`` and "
"``Boost_ADDITIONAL_VERSIONS``), \"lib\" directories near "
"``Boost_INCLUDE_DIR``, and the library name configuration settings below.  "
"It saves the library directories in ``Boost_LIBRARY_DIR_DEBUG`` and "
"``Boost_LIBRARY_DIR_RELEASE`` and individual library locations in "
"``Boost_<C>_LIBRARY_DEBUG`` and ``Boost_<C>_LIBRARY_RELEASE``. When one "
"changes settings used by previous searches in the same build tree (excluding "
"environment variables) this module discards previous search results affected "
"by the changes and searches again."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:126
msgid ""
"Boost libraries come in many variants encoded in their file name. Users or "
"projects may tell this module which variant to find by setting variables::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:130
msgid ""
"Boost_USE_DEBUG_LIBS     - Set to ON or OFF to specify whether to search\n"
"                           and use the debug libraries.  Default is ON.\n"
"Boost_USE_RELEASE_LIBS   - Set to ON or OFF to specify whether to search\n"
"                           and use the release libraries.  Default is ON.\n"
"Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n"
"                           libraries ('mt' tag).  Default is ON.\n"
"Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n"
"                           libraries.  Default is OFF.\n"
"Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n"
"                           libraries linked statically to the C++ runtime\n"
"                           ('s' tag).  Default is platform dependent.\n"
"Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n"
"                           libraries linked to the MS debug C++ runtime\n"
"                           ('g' tag).  Default is ON.\n"
"Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n"
"                           debug Python build ('y' tag). Default is OFF.\n"
"Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n"
"                           STLPort ('p' tag).  Default is OFF.\n"
"Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n"
"                         - Set to ON to use libraries compiled with\n"
"                           STLPort deprecated \"native iostreams\"\n"
"                           ('n' tag).  Default is OFF.\n"
"Boost_COMPILER           - Set to the compiler-specific library suffix\n"
"                           (e.g. \"-gcc43\").  Default is auto-computed\n"
"                           for the C++ compiler in use.  A list may be\n"
"                           used if multiple compatible suffixes should\n"
"                           be tested for, in decreasing order of\n"
"                           preference.\n"
"Boost_ARCHITECTURE       - Set to the architecture-specific library suffix\n"
"                           (e.g. \"-x64\").  Default is auto-computed for "
"the\n"
"                           C++ compiler in use.\n"
"Boost_THREADAPI          - Suffix for \"thread\" component library name,\n"
"                           such as \"pthread\" or \"win32\".  Names with\n"
"                           and without this suffix will both be tried.\n"
"Boost_NAMESPACE          - Alternate namespace used to build boost with\n"
"                           e.g. if set to \"myboost\", will search for\n"
"                           myboost_thread instead of boost_thread."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:168
msgid "Other variables one may set to control this module are::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:170
msgid ""
"Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n"
"                           Please enable this before filing any bug report.\n"
"Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n"
"                           libraries to assist with packaging.  For "
"example,\n"
"                           the \"system\" component library may be resolved "
"to\n"
"                           \"/usr/lib/libboost_system.so.1.67.0\" instead "
"of\n"
"                           \"/usr/lib/libboost_system.so\".  This does not\n"
"                           affect linking and should not be enabled unless\n"
"                           the user needs this information.\n"
"Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n"
"                           Boost_LIBRARY_DIR_DEBUG."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:182
msgid ""
"On Visual Studio and Borland compilers Boost headers request automatic "
"linking to corresponding libraries.  This requires matching libraries to be "
"linked explicitly or available in the link library search path. In this case "
"setting ``Boost_USE_STATIC_LIBS`` to ``OFF`` may not achieve dynamic "
"linking.  Boost automatic linking typically requests static libraries with a "
"few exceptions (such as ``Boost.Python``).  Use::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:189
msgid "add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:191
msgid "to ask Boost to report information about automatic linking requests."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:193
msgid "Example to find Boost headers only::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:195
msgid ""
"find_package(Boost 1.36.0)\n"
"if(Boost_FOUND)\n"
"  include_directories(${Boost_INCLUDE_DIRS})\n"
"  add_executable(foo foo.cc)\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:201
msgid "Example to find Boost libraries and use imported targets::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:203
msgid ""
"find_package(Boost 1.56 REQUIRED COMPONENTS\n"
"             date_time filesystem iostreams)\n"
"add_executable(foo foo.cc)\n"
"target_link_libraries(foo Boost::date_time Boost::filesystem\n"
"                          Boost::iostreams)"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:209
msgid "Example to find Boost Python 3.6 libraries and use imported targets::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:211
msgid ""
"find_package(Boost 1.67 REQUIRED COMPONENTS\n"
"             python36 numpy36)\n"
"add_executable(foo foo.cc)\n"
"target_link_libraries(foo Boost::python36 Boost::numpy36)"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:216
msgid ""
"Example to find Boost headers and some *static* (release only) libraries::"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:218
msgid ""
"set(Boost_USE_STATIC_LIBS        ON)  # only find static libs\n"
"set(Boost_USE_DEBUG_LIBS         OFF) # ignore debug libs and\n"
"set(Boost_USE_RELEASE_LIBS       ON)  # only find release libs\n"
"set(Boost_USE_MULTITHREADED      ON)\n"
"set(Boost_USE_STATIC_RUNTIME    OFF)\n"
"find_package(Boost 1.66.0 COMPONENTS date_time filesystem system ...)\n"
"if(Boost_FOUND)\n"
"  include_directories(${Boost_INCLUDE_DIRS})\n"
"  add_executable(foo foo.cc)\n"
"  target_link_libraries(foo ${Boost_LIBRARIES})\n"
"endif()"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:231
msgid "Boost CMake"
msgstr ""

#: ../../../../Modules/FindBoost.cmake:233
msgid ""
"If Boost was built using the boost-cmake project or from Boost 1.70.0 on it "
"provides a package configuration file for use with find_package's config "
"mode. This module looks for the package configuration file called "
"``BoostConfig.cmake`` or ``boost-config.cmake`` and stores the result in "
"``CACHE`` entry \"Boost_DIR\".  If found, the package configuration file is "
"loaded and this module returns with no further action.  See documentation of "
"the Boost CMake package configuration for details on what it provides."
msgstr ""

#: ../../../../Modules/FindBoost.cmake:241
msgid ""
"Set ``Boost_NO_BOOST_CMAKE`` to ``ON``, to disable the search for boost-"
"cmake."
msgstr ""
