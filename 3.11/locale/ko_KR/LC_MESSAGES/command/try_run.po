# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2018 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/try_run.rst:2
msgid "try_run"
msgstr ""

#: ../../../command/try_run.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/try_run.rst:8
msgid "Try compiling and then running some code."
msgstr ""

#: ../../../command/try_run.rst:11
msgid "Try Compiling and Running Source Files"
msgstr ""

#: ../../../command/try_run.rst:15
msgid ""
"try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR\n"
"        bindir srcfile [CMAKE_FLAGS <flags>...]\n"
"        [COMPILE_DEFINITIONS <defs>...]\n"
"        [LINK_LIBRARIES <libs>...]\n"
"        [COMPILE_OUTPUT_VARIABLE <var>]\n"
"        [RUN_OUTPUT_VARIABLE <var>]\n"
"        [OUTPUT_VARIABLE <var>]\n"
"        [ARGS <args>...])"
msgstr ""

#: ../../../command/try_run.rst:24
msgid ""
"Try compiling a ``<srcfile>``.  Returns ``TRUE`` or ``FALSE`` for success or "
"failure in ``COMPILE_RESULT_VAR``.  If the compile succeeded, runs the "
"executable and returns its exit code in ``RUN_RESULT_VAR``.  If the "
"executable was built, but failed to run, then ``RUN_RESULT_VAR`` will be set "
"to ``FAILED_TO_RUN``.  See the :command:`try_compile` command for "
"information on how the test project is constructed to build the source file."
msgstr ""

#: ../../../command/try_run.rst:31
msgid "The options are:"
msgstr ""

#: ../../../command/try_run.rst:38
msgid "``CMAKE_FLAGS <flags>...``"
msgstr ""

#: ../../../command/try_run.rst:34
msgid ""
"Specify flags of the form ``-DVAR:TYPE=VALUE`` to be passed to the ``cmake`` "
"command-line used to drive the test build. The example in :command:"
"`try_compile` shows how values for variables ``INCLUDE_DIRECTORIES``, "
"``LINK_DIRECTORIES``, and ``LINK_LIBRARIES`` are used."
msgstr ""

#: ../../../command/try_run.rst:42
msgid "``COMPILE_DEFINITIONS <defs>...``"
msgstr ""

#: ../../../command/try_run.rst:41
msgid ""
"Specify ``-Ddefinition`` arguments to pass to ``add_definitions`` in the "
"generated test project."
msgstr ""

#: ../../../command/try_run.rst:45
msgid "``COMPILE_OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:45
msgid "Report the compile step build output in a given variable."
msgstr ""

#: ../../../command/try_run.rst:53
msgid "``LINK_LIBRARIES <libs>...``"
msgstr ""

#: ../../../command/try_run.rst:48
msgid ""
"Specify libraries to be linked in the generated project. The list of "
"libraries may refer to system libraries and to :ref:`Imported Targets "
"<Imported Targets>` from the calling project."
msgstr ""

#: ../../../command/try_run.rst:52
msgid ""
"If this option is specified, any ``-DLINK_LIBRARIES=...`` value given to the "
"``CMAKE_FLAGS`` option will be ignored."
msgstr ""

#: ../../../command/try_run.rst:58
msgid "``OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:56
msgid ""
"Report the compile build output and the output from running the executable "
"in the given variable.  This option exists for legacy reasons.  Prefer "
"``COMPILE_OUTPUT_VARIABLE`` and ``RUN_OUTPUT_VARIABLE`` instead."
msgstr ""

#: ../../../command/try_run.rst:61
msgid "``RUN_OUTPUT_VARIABLE <var>``"
msgstr ""

#: ../../../command/try_run.rst:61
msgid "Report the output from running the executable in a given variable."
msgstr ""

#: ../../../command/try_run.rst:64
msgid "Other Behavior Settings"
msgstr ""

#: ../../../command/try_run.rst:66
msgid ""
"Set the :variable:`CMAKE_TRY_COMPILE_CONFIGURATION` variable to choose a "
"build configuration."
msgstr ""

#: ../../../command/try_run.rst:70
msgid "Behavior when Cross Compiling"
msgstr ""

#: ../../../command/try_run.rst:72
msgid ""
"When cross compiling, the executable compiled in the first step usually "
"cannot be run on the build host.  The ``try_run`` command checks the :"
"variable:`CMAKE_CROSSCOMPILING` variable to detect whether CMake is in cross-"
"compiling mode.  If that is the case, it will still try to compile the "
"executable, but it will not try to run the executable unless the :variable:"
"`CMAKE_CROSSCOMPILING_EMULATOR` variable is set.  Instead it will create "
"cache variables which must be filled by the user or by presetting them in "
"some CMake script file to the values the executable would have produced if "
"it had been run on its actual target platform. These cache entries are:"
msgstr ""

#: ../../../command/try_run.rst:84
msgid "``<RUN_RESULT_VAR>``"
msgstr ""

#: ../../../command/try_run.rst:84
msgid "Exit code if the executable were to be run on the target platform."
msgstr ""

#: ../../../command/try_run.rst:89
msgid "``<RUN_RESULT_VAR>__TRYRUN_OUTPUT``"
msgstr ""

#: ../../../command/try_run.rst:87
msgid ""
"Output from stdout and stderr if the executable were to be run on the target "
"platform.  This is created only if the ``RUN_OUTPUT_VARIABLE`` or "
"``OUTPUT_VARIABLE`` option was used."
msgstr ""

#: ../../../command/try_run.rst:91
msgid ""
"In order to make cross compiling your project easier, use ``try_run`` only "
"if really required.  If you use ``try_run``, use the ``RUN_OUTPUT_VARIABLE`` "
"or ``OUTPUT_VARIABLE`` options only if really required.  Using them will "
"require that when cross-compiling, the cache variables will have to be set "
"manually to the output of the executable. You can also \"guard\" the calls "
"to ``try_run`` with an :command:`if` block checking the :variable:"
"`CMAKE_CROSSCOMPILING` variable and provide an easy-to-preset alternative "
"for this case."
msgstr ""
