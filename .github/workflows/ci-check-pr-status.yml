# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: ci-check-pr-status

on:
  pull_request:
    branches:
      - main
      - l10n
    types:
      - opened
      - synchronize
      - reopened

jobs:
  before-check:
    runs-on: ubuntu-latest
    outputs:
      WORKFLOW_CHANGE: ${{ steps.filter.outputs.workflow }}
      DOCUMENT_CHANGE: ${{ steps.filter.outputs.document }}
      BUILD_CHANGE: ${{ steps.filter.outputs.build }}
    steps:
      - name: Print Contexts
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event.action = ${{ github.event.action }}"
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.event.pull_request.base.ref = ${{ github.event.pull_request.base.ref }}"
          echo "github.event.pull_request.head.ref = ${{ github.event.pull_request.head.ref }}"
          echo "github.base_ref = ${{ github.base_ref }}"
          echo "github.head_ref = ${{ github.head_ref }}"
          echo "github.event.before = ${{ github.event.before }}"
          echo "github.sha = ${{ github.sha }}"
          echo "[Secrets]"
          echo "secrets.ACTOR_GITHUB_TOKEN = ${{ secrets.ACTOR_GITHUB_TOKEN }}"
      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      # - name: Get VERSION from the Pull Request Title
      #   id: gvprt
      #   uses: ltdorgtest/ci-common/.github/actions/get-version-from-pull-request-title@main
      #   with:
      #     pull-request-title: ${{ github.event.pull_request.title }}
      - name: Filter Changes in the Pull Request
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.ACTOR_GITHUB_TOKEN }}
          filters: |
            workflow:
              - '.github/workflows/*.yml'
            document:
              - 'README.md'
            build:
              - 'cmake/custom/**/*'
              - 'cmake/targets/*.cmake'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
      - name: Check Outputs of paths-filter
        run: |
          echo "steps.filter.outputs.workflow = ${{ steps.filter.outputs.workflow }}"
          echo "steps.filter.outputs.document = ${{ steps.filter.outputs.document }}"
          echo "steps.filter.outputs.build    = ${{ steps.filter.outputs.build }}"
          echo "steps.filter.outputs.workflow_count = ${{ steps.filter.outputs.workflow_count }}"
          echo "steps.filter.outputs.document_count = ${{ steps.filter.outputs.document_count }}"
          echo "steps.filter.outputs.build_count    = ${{ steps.filter.outputs.build_count }}"

  check-crowdin-readme:
    needs: [ 'before-check' ]
    uses: ltdorgtest/ci-common/.github/workflows/use-crowdin-readme.yml@main
    with:
      RUNNER: 'ubuntu-latest'
      CHECKOUT: ${{ github.ref }}
      VERSION: 'check'
      LANGUAGE: 'all'
      LANGUAGE_SOURCE: 'en_US'
      ENABLE_JOB: ${{ needs.before-check.outputs.DOCUMENT_CHANGE == 'true' }}
      ACTOR_NAME: ${{ vars.ACTOR_NAME }}
      ACTOR_EMAIL: ${{ vars.ACTOR_EMAIL }}
      CROWDIN_PROJECT_ID: ${{ vars.CROWDIN_PROJECT_ID }}
      CROWDIN_BASE_URL: ${{ vars.CROWDIN_BASE_URL }}
    secrets:
      ACTOR_GITHUB_TOKEN: ${{ secrets.ACTOR_GITHUB_TOKEN }}
      CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

  check-sphinx-build-docs:
    needs: [ 'before-check' ]
    uses: ltdorgtest/ci-sphinx/.github/workflows/use-sphinx-build-docs.yml@main
    with:
      RUNNER: 'ubuntu-latest'
      CHECKOUT: ${{ github.ref }}
      VERSION: 'master'
      LANGUAGE: 'all'
      MODE_OF_UPDATE: 'COMPARE'
      BASEURL_HREF: ${{ vars.BASEURL_HREF }}
      SPHINX_BUILDER: 'html'
      DEPLOY_PAGES: false
      ENABLE_JOB: ${{ needs.before-check.outputs.BUILD_CHANGE == 'true' }}
      ACTOR_NAME: ${{ vars.ACTOR_NAME }}
      ACTOR_EMAIL: ${{ vars.ACTOR_EMAIL }}
    secrets:
      ACTOR_GITHUB_TOKEN: ${{ secrets.ACTOR_GITHUB_TOKEN }}
