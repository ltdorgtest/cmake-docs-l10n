# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2015 Kitware, Inc.
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 18:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:3
msgid "FindPackageHandleStandardArgs"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:7
msgid "FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ...  )"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:9
msgid ""
"This function is intended to be used in FindXXX.cmake modules files. It "
"handles the REQUIRED, QUIET and version-related arguments to "
"find_package().  It also sets the <packagename>_FOUND variable.  The package "
"is considered found if all variables <var1>...  listed contain valid "
"results, e.g.  valid filepaths."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:15
msgid ""
"There are two modes of this function.  The first argument in both modes is "
"the name of the Find-module where it is called (in original casing)."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:19
msgid "The first simple mode looks like this:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:23
msgid ""
"FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name>\n"
"  (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:26
msgid ""
"If the variables <var1> to <varN> are all valid, then "
"<UPPERCASED_NAME>_FOUND will be set to TRUE.  If DEFAULT_MSG is given as "
"second argument, then the function will generate itself useful success and "
"error messages.  You can also supply a custom error message for the failure "
"case.  This is not recommended."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:32
msgid "The second mode is more powerful and also supports version checking:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:36
msgid ""
"FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME\n"
"  [FOUND_VAR <resultVar>]\n"
"  [REQUIRED_VARS <var1>...<varN>]\n"
"  [VERSION_VAR   <versionvar>]\n"
"  [HANDLE_COMPONENTS]\n"
"  [CONFIG_MODE]\n"
"  [FAIL_MESSAGE \"Custom failure message\"] )"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:44
msgid ""
"In this mode, the name of the result-variable can be set either to either "
"<UPPERCASED_NAME>_FOUND or <OriginalCase_Name>_FOUND using the FOUND_VAR "
"option.  Other names for the result-variable are not allowed.  So for a Find-"
"module named FindFooBar.cmake, the two possible names are FooBar_FOUND and "
"FOOBAR_FOUND.  It is recommended to use the original case version.  If the "
"FOUND_VAR option is not used, the default is <UPPERCASED_NAME>_FOUND."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:52
msgid ""
"As in the simple mode, if <var1> through <varN> are all valid, "
"<packagename>_FOUND will be set to TRUE.  After REQUIRED_VARS the variables "
"which are required for this package are listed.  Following VERSION_VAR the "
"name of the variable can be specified which holds the version of the package "
"which has been found.  If this is done, this version will be checked against "
"the (potentially) specified required version used in the find_package() "
"call.  The EXACT keyword is also handled.  The default messages include "
"information about the required version and the version which has been "
"actually found, both if the version is ok or not.  If the package supports "
"components, use the HANDLE_COMPONENTS option to enable handling them.  In "
"this case, find_package_handle_standard_args() will report which components "
"have been found and which are missing, and the <packagename>_FOUND variable "
"will be set to FALSE if any of the required components (i.e.  not the ones "
"listed after OPTIONAL_COMPONENTS) are missing.  Use the option CONFIG_MODE "
"if your FindXXX.cmake module is a wrapper for a find_package(...  NO_MODULE) "
"call.  In this case VERSION_VAR will be set to <NAME>_VERSION and the macro "
"will automatically check whether the Config module was found.  Via "
"FAIL_MESSAGE a custom failure message can be specified, if this is not used, "
"the default message will be displayed."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:74
msgid "Example for mode 1:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:78
msgid ""
"find_package_handle_standard_args(LibXml2  DEFAULT_MSG\n"
"  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:83
msgid ""
"LibXml2 is considered to be found, if both LIBXML2_LIBRARY and "
"LIBXML2_INCLUDE_DIR are valid.  Then also LIBXML2_FOUND is set to TRUE.  If "
"it is not found and REQUIRED was used, it fails with FATAL_ERROR, "
"independent whether QUIET was used or not.  If it is found, success will be "
"reported, including the content of <var1>.  On repeated Cmake runs, the same "
"message won't be printed again."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:90
msgid "Example for mode 2:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:94
msgid ""
"find_package_handle_standard_args(LibXslt\n"
"  FOUND_VAR LibXslt_FOUND\n"
"  REQUIRED_VARS LibXslt_LIBRARIES LibXslt_INCLUDE_DIRS\n"
"  VERSION_VAR LibXslt_VERSION_STRING)"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:99
msgid ""
"In this case, LibXslt is considered to be found if the variable(s) listed "
"after REQUIRED_VAR are all valid, i.e.  LibXslt_LIBRARIES and "
"LibXslt_INCLUDE_DIRS in this case.  The result will then be stored in "
"LibXslt_FOUND .  Also the version of LibXslt will be checked by using the "
"version contained in LibXslt_VERSION_STRING.  Since no FAIL_MESSAGE is "
"given, the default messages will be printed."
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:106
msgid "Another example for mode 2:"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:110
msgid ""
"find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n"
"find_package_handle_standard_args(Automoc4  CONFIG_MODE)"
msgstr ""

#: ../../../../Modules/FindPackageHandleStandardArgs.cmake:113
msgid ""
"In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4 "
"NO_MODULE) and adds an additional search directory for automoc4.  Here the "
"result will be stored in AUTOMOC4_FOUND.  The following "
"FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper success/error "
"message."
msgstr ""
