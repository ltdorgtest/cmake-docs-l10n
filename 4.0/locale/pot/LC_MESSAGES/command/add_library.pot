# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-02 08:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../command/add_library.rst:2
msgid "add_library"
msgstr ""

#: ../../../command/add_library.rst:5
msgid "Contents"
msgstr ""

#: ../../../command/add_library.rst:8
msgid "Add a library to the project using the specified source files."
msgstr ""

#: ../../../command/add_library.rst:11
msgid "Normal Libraries"
msgstr ""

#: ../../../command/add_library.rst:17
msgid ""
"Add a library target called ``<name>`` to be built from the source files "
"listed in the command invocation."
msgstr ""

#: ../../../command/add_library.rst:20
msgid "The optional ``<type>`` specifies the type of library to be created:"
msgstr ""

#: ../../../command/add_library.rst:22
msgid "``STATIC``"
msgstr ""

#: ../../../command/add_library.rst:23
msgid ""
"A :ref:`Static Library <Static Libraries>`: an archive of object files for "
"use when linking other targets."
msgstr ""

#: ../../../command/add_library.rst:26
msgid "``SHARED``"
msgstr ""

#: ../../../command/add_library.rst:27
msgid ""
"A :ref:`Shared Library <Shared Libraries>`: a dynamic library that may be "
"linked by other targets and loaded at runtime."
msgstr ""

#: ../../../command/add_library.rst:31
msgid "``MODULE``"
msgstr ""

#: ../../../command/add_library.rst:32
msgid ""
"A :ref:`Module Library <Module Libraries>`: a plugin that may not be linked "
"by other targets, but may be dynamically loaded at runtime using dlopen-like "
"functionality."
msgstr ""

#: ../../../command/add_library.rst:36
msgid ""
"If no ``<type>`` is given the default is ``STATIC`` or ``SHARED`` based on "
"the value of the :variable:`BUILD_SHARED_LIBS` variable."
msgstr ""

#: ../../../command/add_library.rst:39 ../../../command/add_library.rst:184
#: ../../../command/add_library.rst:260
msgid "The options are:"
msgstr ""

#: ../../../command/add_library.rst:41 ../../../command/add_library.rst:186
msgid "``EXCLUDE_FROM_ALL``"
msgstr ""

#: ../../../command/add_library.rst:42 ../../../command/add_library.rst:187
msgid ""
"Set the :prop_tgt:`EXCLUDE_FROM_ALL` target property automatically. See "
"documentation of that target property for details."
msgstr ""

#: ../../../command/add_library.rst:45
msgid ""
"The ``<name>`` corresponds to the logical target name and must be globally "
"unique within a project.  The actual file name of the library built is "
"constructed based on conventions of the native platform (such as ``lib<name>."
"a`` or ``<name>.lib``)."
msgstr ""

#: ../../../command/add_library.rst:50
msgid ""
"Source arguments to ``add_library`` may use \"generator expressions\" with "
"the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions."
msgstr ""

#: ../../../command/add_library.rst:55
msgid ""
"The source files can be omitted if they are added later using :command:"
"`target_sources`."
msgstr ""

#: ../../../command/add_library.rst:59
msgid ""
"For ``SHARED`` and ``MODULE`` libraries the :prop_tgt:"
"`POSITION_INDEPENDENT_CODE` target property is set to ``ON`` automatically. "
"A ``SHARED`` library may be marked with the :prop_tgt:`FRAMEWORK` target "
"property to create an macOS Framework."
msgstr ""

#: ../../../command/add_library.rst:65
msgid ""
"A ``STATIC`` library may be marked with the :prop_tgt:`FRAMEWORK` target "
"property to create a static Framework."
msgstr ""

#: ../../../command/add_library.rst:69
msgid ""
"If a library does not export any symbols, it must not be declared as a "
"``SHARED`` library.  For example, a Windows resource DLL or a managed C++/"
"CLI DLL that exports no unmanaged symbols would need to be a ``MODULE`` "
"library. This is because CMake expects a ``SHARED`` library to always have "
"an associated import library on Windows."
msgstr ""

#: ../../../command/add_library.rst:75
msgid ""
"By default the library file will be created in the build tree directory "
"corresponding to the source tree directory in which the command was "
"invoked.  See documentation of the :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`, :"
"prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and :prop_tgt:"
"`RUNTIME_OUTPUT_DIRECTORY` target properties to change this location.  See "
"documentation of the :prop_tgt:`OUTPUT_NAME` target property to change the "
"``<name>`` part of the final file name."
msgstr ""

#: ../../../command/add_library.rst:83
msgid ""
"See the :manual:`cmake-buildsystem(7)` manual for more on defining "
"buildsystem properties."
msgstr ""

#: ../../../command/add_library.rst:86
msgid ""
"See also :prop_sf:`HEADER_FILE_ONLY` on what to do if some sources are pre-"
"processed, and you want to have the original sources reachable from within "
"IDE."
msgstr ""

#: ../../../command/add_library.rst:92
msgid ""
"On platforms that do not support shared libraries, ``add_library`` now fails "
"on calls creating ``SHARED`` libraries instead of automatically converting "
"them to ``STATIC`` libraries as before. See policy :policy:`CMP0164`."
msgstr ""

#: ../../../command/add_library.rst:98
msgid "Object Libraries"
msgstr ""

#: ../../../command/add_library.rst:104
msgid ""
"Add an :ref:`Object Library <Object Libraries>` to compile source files "
"without archiving or linking their object files into a library."
msgstr ""

#: ../../../command/add_library.rst:107
msgid ""
"Other targets created by ``add_library`` or :command:`add_executable` may "
"reference the objects using an expression of the form :genex:`$"
"\\<TARGET_OBJECTS:objlib\\> <TARGET_OBJECTS>` as a source, where ``objlib`` "
"is the object library name.  For example:"
msgstr ""

#: ../../../command/add_library.rst:112
msgid ""
"add_library(... $<TARGET_OBJECTS:objlib> ...)\n"
"add_executable(... $<TARGET_OBJECTS:objlib> ...)"
msgstr ""

#: ../../../command/add_library.rst:117
msgid ""
"will include objlib's object files in a library and an executable along with "
"those compiled from their own sources.  Object libraries may contain only "
"sources that compile, header files, and other files that would not affect "
"linking of a normal library (e.g. ``.txt``). They may contain custom "
"commands generating such sources, but not ``PRE_BUILD``, ``PRE_LINK``, or "
"``POST_BUILD`` commands.  Some native build systems (such as Xcode) may not "
"like targets that have only object files, so consider adding at least one "
"real source file to any target that references :genex:`$\\<TARGET_OBJECTS:"
"objlib\\> <TARGET_OBJECTS>`."
msgstr ""

#: ../../../command/add_library.rst:127
msgid ""
"Object libraries can be linked to with :command:`target_link_libraries`."
msgstr ""

#: ../../../command/add_library.rst:131
msgid "Interface Libraries"
msgstr ""

#: ../../../command/add_library.rst:137
msgid ""
"Add an :ref:`Interface Library <Interface Libraries>` target that may "
"specify usage requirements for dependents but does not compile sources and "
"does not produce a library artifact on disk."
msgstr ""

#: ../../../command/add_library.rst:141
msgid ""
"An interface library with no source files is not included as a target in the "
"generated buildsystem.  However, it may have properties set on it and it may "
"be installed and exported. Typically, ``INTERFACE_*`` properties are "
"populated on an interface target using the commands:"
msgstr ""

#: ../../../command/add_library.rst:147
msgid ":command:`set_property`,"
msgstr ""

#: ../../../command/add_library.rst:148
msgid ":command:`target_link_libraries(INTERFACE)`,"
msgstr ""

#: ../../../command/add_library.rst:149
msgid ":command:`target_link_options(INTERFACE)`,"
msgstr ""

#: ../../../command/add_library.rst:150
msgid ":command:`target_include_directories(INTERFACE)`,"
msgstr ""

#: ../../../command/add_library.rst:151
msgid ":command:`target_compile_options(INTERFACE)`,"
msgstr ""

#: ../../../command/add_library.rst:152
msgid ":command:`target_compile_definitions(INTERFACE)`, and"
msgstr ""

#: ../../../command/add_library.rst:153
msgid ":command:`target_sources(INTERFACE)`,"
msgstr ""

#: ../../../command/add_library.rst:155
msgid ""
"and then it is used as an argument to :command:`target_link_libraries` like "
"any other target."
msgstr ""

#: ../../../command/add_library.rst:158
msgid ""
"An interface library can have :prop_tgt:`PUBLIC_HEADER` and :prop_tgt:"
"`PRIVATE_HEADER` properties.  The headers specified by those properties can "
"be installed using the :command:`install(TARGETS)` command."
msgstr ""

#: ../../../command/add_library.rst:169
msgid ""
"Add an :ref:`Interface Library <Interface Libraries>` target with source "
"files (in addition to usage requirements and properties as documented by "
"the :command:`above signature <add_library(INTERFACE)>`). Source files may "
"be listed directly in the ``add_library`` call or added later by calls to :"
"command:`target_sources` with the ``PRIVATE`` or ``PUBLIC`` keywords."
msgstr ""

#: ../../../command/add_library.rst:176
msgid ""
"If an interface library has source files (i.e. the :prop_tgt:`SOURCES` "
"target property is set), or header sets (i.e. the :prop_tgt:`HEADER_SETS` "
"target property is set), it will appear in the generated buildsystem as a "
"build target much like a target defined by the :command:`add_custom_target` "
"command.  It does not compile any sources, but does contain build rules for "
"custom commands created by the :command:`add_custom_command` command."
msgstr ""

#: ../../../command/add_library.rst:191
msgid ""
"In most command signatures where the ``INTERFACE`` keyword appears, the "
"items listed after it only become part of that target's usage requirements "
"and are not part of the target's own settings.  However, in this signature "
"of ``add_library``, the ``INTERFACE`` keyword refers to the library type "
"only.  Sources listed after it in the ``add_library`` call are ``PRIVATE`` "
"to the interface library and do not appear in its :prop_tgt:"
"`INTERFACE_SOURCES` target property."
msgstr ""

#: ../../../command/add_library.rst:202
msgid "Imported Libraries"
msgstr ""

#: ../../../command/add_library.rst:208
msgid ""
"Add an :ref:`IMPORTED library target <Imported Targets>` called ``<name>``. "
"The target name may be referenced like any target built within the project, "
"except that by default it is visible only in the directory in which it is "
"created, and below."
msgstr ""

#: ../../../command/add_library.rst:213
msgid "The ``<type>`` must be one of:"
msgstr ""

#: ../../../command/add_library.rst:215
msgid "``STATIC``, ``SHARED``, ``MODULE``, ``UNKNOWN``"
msgstr ""

#: ../../../command/add_library.rst:216
msgid ""
"References a library file located outside the project.  The :prop_tgt:"
"`IMPORTED_LOCATION` target property (or its per-configuration variant :"
"prop_tgt:`IMPORTED_LOCATION_<CONFIG>`) specifies the location of the main "
"library file on disk:"
msgstr ""

#: ../../../command/add_library.rst:221
msgid ""
"For a ``SHARED`` library on most non-Windows platforms, the main library "
"file is the ``.so`` or ``.dylib`` file used by both linkers and dynamic "
"loaders.  If the referenced library file has a ``SONAME`` (or on macOS, has "
"a ``LC_ID_DYLIB`` starting in ``@rpath/``), the value of that field should "
"be set in the :prop_tgt:`IMPORTED_SONAME` target property. If the referenced "
"library file does not have a ``SONAME``, but the platform supports it, then  "
"the :prop_tgt:`IMPORTED_NO_SONAME` target property should be set."
msgstr ""

#: ../../../command/add_library.rst:230
msgid ""
"For a ``SHARED`` library on Windows, the :prop_tgt:`IMPORTED_IMPLIB` target "
"property (or its per-configuration variant :prop_tgt:"
"`IMPORTED_IMPLIB_<CONFIG>`) specifies the location of the DLL import library "
"file (``.lib`` or ``.dll.a``) on disk, and the ``IMPORTED_LOCATION`` is the "
"location of the ``.dll`` runtime library (and is optional, but needed by "
"the :genex:`TARGET_RUNTIME_DLLS` generator expression)."
msgstr ""

#: ../../../command/add_library.rst:238
msgid ""
"Additional usage requirements may be specified in ``INTERFACE_*`` properties."
msgstr ""

#: ../../../command/add_library.rst:241
msgid ""
"An ``UNKNOWN`` library type is typically only used in the implementation of :"
"ref:`Find Modules`.  It allows the path to an imported library (often found "
"using the :command:`find_library` command) to be used without having to know "
"what type of library it is.  This is especially useful on Windows where a "
"static library and a DLL's import library both have the same file extension."
msgstr ""

#: ../../../command/add_library.rst:248
msgid "``OBJECT``"
msgstr ""

#: ../../../command/add_library.rst:249
msgid ""
"References a set of object files located outside the project. The :prop_tgt:"
"`IMPORTED_OBJECTS` target property (or its per-configuration variant :"
"prop_tgt:`IMPORTED_OBJECTS_<CONFIG>`) specifies the locations of object "
"files on disk. Additional usage requirements may be specified in "
"``INTERFACE_*`` properties."
msgstr ""

#: ../../../command/add_library.rst:256
msgid "``INTERFACE``"
msgstr ""

#: ../../../command/add_library.rst:257
msgid ""
"Does not reference any library or object files on disk, but may specify "
"usage requirements in ``INTERFACE_*`` properties."
msgstr ""

#: ../../../command/add_library.rst:262
msgid "``GLOBAL``"
msgstr ""

#: ../../../command/add_library.rst:263
msgid "Make the target name globally visible."
msgstr ""

#: ../../../command/add_library.rst:265
msgid ""
"No rules are generated to build imported targets, and the :prop_tgt:"
"`IMPORTED` target property is ``True``.  Imported libraries are useful for "
"convenient reference from commands like :command:`target_link_libraries`."
msgstr ""

#: ../../../command/add_library.rst:269
msgid ""
"Details about the imported library are specified by setting properties whose "
"names begin in ``IMPORTED_`` and ``INTERFACE_``.  See documentation of such "
"properties for more information."
msgstr ""

#: ../../../command/add_library.rst:274
msgid "Alias Libraries"
msgstr ""

#: ../../../command/add_library.rst:280
msgid ""
"Creates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can be "
"used to refer to ``<target>`` in subsequent commands.  The ``<name>`` does "
"not appear in the generated buildsystem as a make target.  The ``<target>`` "
"may not be an ``ALIAS``."
msgstr ""

#: ../../../command/add_library.rst:285
msgid ""
"An ``ALIAS`` can target a ``GLOBAL`` :ref:`Imported Target <Imported "
"Targets>`"
msgstr ""

#: ../../../command/add_library.rst:288
msgid ""
"An ``ALIAS`` can target a non-``GLOBAL`` Imported Target. Such alias is "
"scoped to the directory in which it is created and below. The :prop_tgt:"
"`ALIAS_GLOBAL` target property can be used to check if the alias is global "
"or not."
msgstr ""

#: ../../../command/add_library.rst:294
msgid ""
"``ALIAS`` targets can be used as linkable targets and as targets to read "
"properties from.  They can also be tested for existence with the regular :"
"command:`if(TARGET)` subcommand.  The ``<name>`` may not be used to modify "
"properties of ``<target>``, that is, it may not be used as the operand of :"
"command:`set_property`, :command:`set_target_properties`, :command:"
"`target_link_libraries` etc.  An ``ALIAS`` target may not be installed or "
"exported."
msgstr ""

#: ../../../command/add_library.rst:303
msgid "See Also"
msgstr ""

#: ../../../command/add_library.rst:305
msgid ":command:`add_executable`"
msgstr ""
