# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:46+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko_KR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/FindProtobuf.cmake:6
msgid "FindProtobuf"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:8
msgid "Locate and configure the Google Protocol Buffers library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:10
msgid "Support for :command:`find_package` version checks."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:13
msgid ""
"All input and output variables use the ``Protobuf_`` prefix. Variables with "
"``PROTOBUF_`` prefix are still supported for compatibility."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:17
msgid "The following variables can be set and are optional:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:19
msgid "``Protobuf_SRC_ROOT_FOLDER``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:20
msgid ""
"When compiling with MSVC, if this cache variable is set the protobuf-default "
"VS project build locations (vsprojects/Debug and vsprojects/Release or "
"vsprojects/x64/Debug and vsprojects/x64/Release) will be searched for "
"libraries and binaries."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:25
msgid "``Protobuf_IMPORT_DIRS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:26
msgid ""
"List of additional directories to be searched for imported .proto files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:28
msgid "``Protobuf_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:31
msgid "Show debug messages."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:32
msgid "``Protobuf_USE_STATIC_LIBS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:35
msgid "Set to ON to force the use of the static libraries. Default is OFF."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:38
msgid "Defines the following variables:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:40
msgid "``Protobuf_FOUND``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:41
msgid "Found the Google Protocol Buffers library (libprotobuf & header files)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:43
msgid "``Protobuf_VERSION``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:46
msgid "Version of package found."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:47
msgid "``Protobuf_INCLUDE_DIRS``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:48
msgid "Include directories for Google Protocol Buffers"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:49
msgid "``Protobuf_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:50
msgid "The protobuf libraries"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:51
msgid "``Protobuf_PROTOC_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:52
msgid "The protoc libraries"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:53
msgid "``Protobuf_LITE_LIBRARIES``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:54
msgid "The protobuf-lite libraries"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:56
msgid "The following :prop_tgt:`IMPORTED` targets are also defined:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:59
msgid "``protobuf::libprotobuf``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:60
msgid "The protobuf library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:61
msgid "``protobuf::libprotobuf-lite``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:62
msgid "The protobuf lite library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:63
msgid "``protobuf::libprotoc``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:64
msgid "The protoc library."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:65
msgid "``protobuf::protoc``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:66
msgid "The protoc compiler."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:69
msgid "The following cache variables are also available to set or use:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:71
msgid "``Protobuf_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:72
msgid "The protobuf library"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:73
msgid "``Protobuf_PROTOC_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:74
msgid "The protoc library"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:75
msgid "``Protobuf_INCLUDE_DIR``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:76
msgid "The include directory for protocol buffers"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:77
msgid "``Protobuf_PROTOC_EXECUTABLE``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:78
msgid "The protoc compiler"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:79
msgid "``Protobuf_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:80
msgid "The protobuf library (debug)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:81
msgid "``Protobuf_PROTOC_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:82
msgid "The protoc library (debug)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:83
msgid "``Protobuf_LITE_LIBRARY``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:84
msgid "The protobuf lite library"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:85
msgid "``Protobuf_LITE_LIBRARY_DEBUG``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:86
msgid "The protobuf lite library (debug)"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:88
#: ../../../../Modules/FindProtobuf.cmake:239
msgid "Example:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:90
msgid ""
"find_package(Protobuf REQUIRED)\n"
"include_directories(${Protobuf_INCLUDE_DIRS})\n"
"include_directories(${CMAKE_CURRENT_BINARY_DIR})\n"
"protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS foo.proto)\n"
"protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS EXPORT_MACRO DLL_EXPORT foo."
"proto)\n"
"protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS DESCRIPTORS PROTO_DESCS foo."
"proto)\n"
"protobuf_generate_python(PROTO_PY foo.proto)\n"
"add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\n"
"target_link_libraries(bar ${Protobuf_LIBRARIES})"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:103
msgid ""
"The ``protobuf_generate_cpp`` and ``protobuf_generate_python`` functions "
"and :command:`add_executable` or :command:`add_library` calls only work "
"properly within the same directory."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:109
msgid "Add custom commands to process ``.proto`` files to C++:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:111
msgid ""
"protobuf_generate_cpp (\n"
"  <srcs-var> <hdrs-var>\n"
"  [DESCRIPTORS <var>]\n"
"  [EXPORT_MACRO <macro>]\n"
"  [<proto-file>...])"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:119
msgid "``<srcs-var>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:120
msgid "Variable to define with autogenerated source files"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:122
msgid "``<hdrs-var>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:123
msgid "Variable to define with autogenerated header files"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:125
msgid "``DESCRIPTORS <var>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:126
msgid "Variable to define with autogenerated descriptor files, if requested."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:129
#: ../../../../Modules/FindProtobuf.cmake:188
msgid "``EXPORT_MACRO <macro>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:130
msgid ""
"is a macro which should expand to ``__declspec(dllexport)`` or "
"``__declspec(dllimport)`` depending on what is being compiled."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:133
#: ../../../../Modules/FindProtobuf.cmake:149
msgid "``<proto-file>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:134
#: ../../../../Modules/FindProtobuf.cmake:150
msgid "``.proto`` files"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:140
msgid "Add custom commands to process ``.proto`` files to Python:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:142
msgid "protobuf_generate_python (<py-srcs-var> [<proto-file>...])"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:146
msgid "``<py-srcs-var>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:147
msgid "Variable to define with autogenerated Python files"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:156
msgid ""
"Automatically generate source files from ``.proto`` schema files at build "
"time:"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:158
msgid ""
"protobuf_generate (\n"
"    TARGET <target>\n"
"    [LANGUAGE <lang>]\n"
"    [OUT_VAR <var>]\n"
"    [EXPORT_MACRO <macro>]\n"
"    [PROTOC_OUT_DIR <dir>]\n"
"    [PLUGIN <plugin>]\n"
"    [PLUGIN_OPTIONS <plugin-options>]\n"
"    [DEPENDENCIES <dependencies>]\n"
"    [PROTOS <proto-file>...]\n"
"    [IMPORT_DIRS <dir>...]\n"
"    [GENERATE_EXTENSIONS <extension>...]\n"
"    [PROTOC_OPTIONS <option>...]\n"
"    [PROTOC_EXE <executable>]\n"
"    [APPEND_PATH])"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:176
msgid "``APPEND_PATH``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:177
msgid ""
"A flag that causes the base path of all proto schema files to be added to "
"``IMPORT_DIRS``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:180
msgid "``LANGUAGE <lang>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:181
msgid ""
"A single value: cpp or python. Determines what kind of source files are "
"being generated. Defaults to cpp."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:184
msgid "``OUT_VAR <var>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:185
msgid ""
"Name of a CMake variable that will be filled with the paths to the generated "
"source files."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:189
msgid ""
"Name of a macro that is applied to all generated Protobuf message classes "
"and extern variables. It can, for example, be used to declare DLL exports."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:192
msgid "``PROTOC_OUT_DIR <dir>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:193
msgid ""
"Output directory of generated source files. Defaults to "
"``CMAKE_CURRENT_BINARY_DIR``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:195
msgid "``PLUGIN <plugin>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:198
msgid ""
"An optional plugin executable. This could, for example, be the path to "
"``grpc_cpp_plugin``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:201
msgid "``PLUGIN_OPTIONS <plugin-options>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:204
msgid ""
"Additional options provided to the plugin, such as "
"``generate_mock_code=true`` for the gRPC cpp plugin."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:207
msgid "``DEPENDENCIES <dependencies>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:210
msgid ""
"Arguments forwarded to the ``DEPENDS`` of the underlying "
"``add_custom_command`` invocation."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:213
msgid "``TARGET <target>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:214
msgid "CMake target that will have the generated files added as sources."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:216
msgid "``PROTOS <proto-file>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:217
msgid ""
"List of proto schema files. If omitted, then every source file ending in "
"*proto* of ``TARGET`` will be used."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:219
msgid "``IMPORT_DIRS <dir>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:220
msgid ""
"A common parent directory for the schema files. For example, if the schema "
"file is ``proto/helloworld/helloworld.proto`` and the import directory "
"``proto/`` then the generated files are ``${PROTOC_OUT_DIR}/helloworld/"
"helloworld.pb.h`` and ``${PROTOC_OUT_DIR}/helloworld/helloworld.pb.cc``."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:225
msgid "``GENERATE_EXTENSIONS <extension>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:226
msgid ""
"If LANGUAGE is omitted then this must be set to the extensions that protoc "
"generates."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:228
msgid "``PROTOC_OPTIONS <option>...``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:231
msgid "Additional arguments that are forwarded to protoc."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:233
msgid "``PROTOC_EXE <executable>``"
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:236
msgid ""
"Command name, path, or CMake executable used to generate protobuf bindings. "
"If omitted, ``protobuf::protoc`` is used."
msgstr ""

#: ../../../../Modules/FindProtobuf.cmake:241
msgid ""
"find_package(gRPC CONFIG REQUIRED)\n"
"find_package(Protobuf REQUIRED)\n"
"add_library(ProtoTest Test.proto)\n"
"target_link_libraries(ProtoTest PUBLIC gRPC::grpc++)\n"
"protobuf_generate(TARGET ProtoTest)\n"
"protobuf_generate(\n"
"    TARGET ProtoTest\n"
"    LANGUAGE grpc\n"
"    PLUGIN protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\n"
"    PLUGIN_OPTIONS generate_mock_code=true\n"
"    GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc)"
msgstr ""
