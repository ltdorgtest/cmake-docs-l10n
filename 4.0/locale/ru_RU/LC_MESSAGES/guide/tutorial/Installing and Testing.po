# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:46+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../guide/tutorial/Installing and Testing.rst:2
msgid "Step 5: Installing and Testing"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:5
msgid "Exercise 1 - Install Rules"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:7
msgid ""
"Often, it is not enough to only build an executable, it should also be "
"installable. With CMake, we can specify install rules using the :command:"
"`install` command. Supporting local installations for your builds in CMake "
"is often as simple as specifying an install location and the targets and "
"files to be installed."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:14 Testing.rst:166
msgid "Goal"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:16
msgid "Install the ``Tutorial`` executable and the ``MathFunctions`` library."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:19 Testing.rst:171
msgid "Helpful Materials"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:21
msgid ":command:`install`"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:24 Testing.rst:180
msgid "Files to Edit"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:26
msgid "``MathFunctions/CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:27 Testing.rst:182
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:30 Testing.rst:185
msgid "Getting Started"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:32
msgid ""
"The starting code is provided in the ``Step5`` directory. In this exercise, "
"complete ``TODO 1`` through ``TODO 4``."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:35
msgid ""
"First, update ``MathFunctions/CMakeLists.txt`` to install the "
"``MathFunctions`` and ``tutorial_compiler_flags`` libraries to the ``lib`` "
"directory. In that same file, specify the install rules needed to install "
"``MathFunctions.h`` to the ``include`` directory."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:40
msgid ""
"Then, update the top level ``CMakeLists.txt`` to install the ``Tutorial`` "
"executable to the ``bin`` directory. Lastly, any header files should be "
"installed to the ``include`` directory. Remember that ``TutorialConfig.h`` "
"is in the :variable:`PROJECT_BINARY_DIR`."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:46 Testing.rst:195
msgid "Build and Run"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:48
msgid ""
"Make a new directory called ``Step5_build``. Run the :manual:`cmake "
"<cmake(1)>` executable or the :manual:`cmake-gui <cmake-gui(1)>` to "
"configure the project and then build it with your chosen build tool."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:53
msgid ""
"Then, run the install step by using the :option:`--install <cmake --"
"install>` option of the :manual:`cmake  <cmake(1)>` command (introduced in "
"3.15, older versions of CMake must use ``make install``) from the command "
"line. This step will install the appropriate header files, libraries, and "
"executables. For example:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:59
msgid "cmake --install ."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:63
msgid ""
"For multi-configuration tools, don't forget to use the :option:`--config "
"<cmake--build --config>` argument to specify the configuration."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:66
msgid "cmake --install . --config Release"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:70
msgid ""
"If using an IDE, simply build the ``INSTALL`` target. You can build the same "
"install target from the command line like the following:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:73
msgid "cmake --build . --target install --config Debug"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:77
msgid ""
"The CMake variable :variable:`CMAKE_INSTALL_PREFIX` is used to determine the "
"root of where the files will be installed. If using the :option:`cmake --"
"install` command, the installation prefix can be overridden via the :option:"
"`--prefix <cmake--install --prefix>` argument. For example:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:82
msgid "cmake --install . --prefix \"/home/myuser/installdir\""
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:86
msgid ""
"Navigate to the install directory and verify that the installed ``Tutorial`` "
"runs."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:90 Testing.rst:207
msgid "Solution"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:92
msgid "The install rules for our project are fairly simple:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:94
msgid ""
"For ``MathFunctions``, we want to install the libraries and header file to "
"the ``lib`` and ``include`` directories respectively."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:97
msgid ""
"For the ``Tutorial`` executable, we want to install the executable and "
"configured header file to the ``bin`` and ``include`` directories "
"respectively."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:101
msgid "So to the end of ``MathFunctions/CMakeLists.txt`` we add:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:103
msgid "<details><summary>TODO 1: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:107
msgid "TODO 1: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:107
msgid ""
"set(installable_libs MathFunctions tutorial_compiler_flags)\n"
"if(TARGET SqrtLibrary)\n"
"  list(APPEND installable_libs SqrtLibrary)\n"
"endif()\n"
"install(TARGETS ${installable_libs} DESTINATION lib)\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:114 Testing.rst:130
#: Testing.rst:148 Testing.rst:224 Testing.rst:247 Testing.rst:267
#: Testing.rst:287 Testing.rst:309
msgid "</details>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:118
msgid "and"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:120
msgid "<details><summary>TODO 2: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:124
msgid "TODO 2: MathFunctions/CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:124
msgid "install(FILES MathFunctions.h DESTINATION include)\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:134
msgid ""
"The install rules for the ``Tutorial`` executable and configured header file "
"are similar. To the end of the top-level ``CMakeLists.txt`` we add:"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:137
msgid "<details><summary>TODO 3,4: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:141
msgid "CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:141
msgid ""
"install(TARGETS Tutorial DESTINATION bin)\n"
"install(FILES \"${PROJECT_BINARY_DIR}/TutorialConfig.h\"\n"
"  DESTINATION include\n"
"  )\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:152
msgid ""
"That is all that is needed to create a basic local install of the tutorial."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:158
msgid "Exercise 2 - Testing Support"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:160
msgid ""
"CTest offers a way to easily manage tests for your project. Tests can be "
"added through the :command:`add_test` command. Although it is not explicitly "
"covered in this tutorial, there is a lot of compatibility between CTest and "
"other testing frameworks such as :module:`GoogleTest`."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:168
msgid "Create unit tests for our executable using CTest."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:173
msgid ":command:`enable_testing`"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:174
msgid ":command:`add_test`"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:175
msgid ":command:`function`"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:176
msgid ":command:`set_tests_properties`"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:177
msgid ":manual:`ctest <ctest(1)>`"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:187
msgid ""
"The starting source code is provided in the ``Step5`` directory. In this "
"exercise, complete ``TODO 5`` through ``TODO 9``."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:190
msgid ""
"First, we need to enable testing. Next, begin adding tests to our project "
"using :command:`add_test`. We will work through adding 3 simple tests and "
"then you can add additional testing as you see fit."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:197
msgid ""
"Navigate to the build directory and rebuild the application. Then, run the :"
"program:`ctest` executable: :option:`ctest -N` and :option:`ctest -VV`. For "
"multi-config generators (e.g. Visual Studio), the configuration type must be "
"specified with the :option:`-C \\<mode\\> <ctest -C>` flag.  For example, to "
"run tests in Debug mode use ``ctest -C Debug -VV`` from the build directory "
"(not the Debug subdirectory!). Release mode would be executed from the same "
"location but with a ``-C Release``. Alternatively, build the ``RUN_TESTS`` "
"target from the IDE."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:209
msgid ""
"Let's test our application. At the end of the top-level ``CMakeLists.txt`` "
"file we first need to enable testing with the :command:`enable_testing` "
"command."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:213
msgid "<details><summary>TODO 5: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:217
msgid "TODO 5: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:217
msgid ""
"enable_testing()\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:228
msgid ""
"With testing enabled, we will add a number of basic tests to verify that the "
"application is working correctly. First, we create a test using :command:"
"`add_test` which runs the ``Tutorial`` executable with the parameter 25 "
"passed in. For this test, we are not going to check the executable's "
"computed answer. This test will verify that application runs, does not "
"segfault or otherwise crash, and has a zero return value. This is the basic "
"form of a CTest test."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:236
msgid "<details><summary>TODO 6: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:240
msgid "TODO 6: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:240
msgid ""
"add_test(NAME Runs COMMAND Tutorial 25)\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:251
msgid ""
"Next, let's use the :prop_test:`PASS_REGULAR_EXPRESSION` test property to "
"verify that the output of the test contains certain strings. In this case, "
"verifying that the usage message is printed when an incorrect number of "
"arguments are provided."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:256
msgid "<details><summary>TODO 7: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:260
msgid "TODO 7: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:260
msgid ""
"add_test(NAME Usage COMMAND Tutorial)\n"
"set_tests_properties(Usage\n"
"  PROPERTIES PASS_REGULAR_EXPRESSION \"Usage:.*number\"\n"
"  )\n"
"\n"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:271
msgid ""
"The next test we will add verifies the computed value is truly the square "
"root."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:274
msgid "<details><summary>TODO 8: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:278
msgid "TODO 8: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:278
msgid ""
"add_test(NAME StandardUse COMMAND Tutorial 4)\n"
"set_tests_properties(StandardUse\n"
"  PROPERTIES PASS_REGULAR_EXPRESSION \"4 is 2\"\n"
"  )"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:291
msgid ""
"This one test is not enough to give us confidence that it will work for all "
"values passed in. We should add more tests to verify this. To easily add "
"more tests, we make a function called ``do_test`` that runs the application "
"and verifies that the computed square root is correct for given input. For "
"each invocation of ``do_test``, another test is added to the project with a "
"name, input, and expected results based on the passed arguments."
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:299
msgid "<details><summary>TODO 9: Click to show/hide answer</summary>"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:303
msgid "TODO 9: CMakeLists.txt"
msgstr ""

#: ../../../guide/tutorial/Installing and Testing.rst:303
msgid ""
"function(do_test target arg result)\n"
"  add_test(NAME Comp${arg} COMMAND ${target} ${arg})\n"
"  set_tests_properties(Comp${arg}\n"
"    PROPERTIES PASS_REGULAR_EXPRESSION ${result}\n"
"    )\n"
"endfunction()\n"
"\n"
"# do a bunch of result based tests\n"
"do_test(Tutorial 4 \"4 is 2\")\n"
"do_test(Tutorial 9 \"9 is 3\")\n"
"do_test(Tutorial 5 \"5 is 2.236\")\n"
"do_test(Tutorial 7 \"7 is 2.645\")\n"
"do_test(Tutorial 25 \"25 is 5\")\n"
"do_test(Tutorial -25 \"-25 is (-nan|nan|0)\")\n"
"do_test(Tutorial 0.0001 \"0.0001 is 0.01\")\n"
msgstr ""
