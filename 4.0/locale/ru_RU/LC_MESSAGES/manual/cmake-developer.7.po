# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:46+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/cmake-developer.7.rst:4
msgid "cmake-developer(7)"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:7
msgid "Contents"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:11
msgid "Introduction"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:13
msgid ""
"This manual is intended for reference by developers working with :manual:"
"`cmake-language(7)` code, whether writing their own modules, authoring their "
"own build systems, or working on CMake itself."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:17
msgid ""
"See https://cmake.org/get-involved/ to get involved in development of CMake "
"upstream.  It includes links to contribution instructions, which in turn "
"link to developer guides for CMake itself."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:22
msgid "Accessing Windows Registry"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:24
msgid ""
"CMake offers some facilities to access the registry on ``Windows`` platforms."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:27
msgid "Query Windows Registry"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:31
msgid ""
"The :command:`cmake_host_system_information` command offers the possibility "
"to query the registry on the local computer. See :ref:"
"`cmake_host_system(QUERY_WINDOWS_REGISTRY) <Query Windows registry>` for "
"more information."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:39
msgid "Find Using Windows Registry"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:43
msgid ""
"Options ``HINTS`` and ``PATHS`` of :command:`find_file`, :command:"
"`find_library`, :command:`find_path`, :command:`find_program`, and :command:"
"`find_package` commands offer the possibility, on ``Windows`` platform, to "
"query the registry."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:48
msgid ""
"The formal syntax, as specified using `BNF <https://en.wikipedia.org/wiki/"
"Backus%E2%80%93Naur_form>`_ notation with the regular extensions, for "
"registry query is the following:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:52
msgid "\\begin{small}"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:70
msgid "\\end{small}"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:74
msgid ""
"The :token:`sep_definition` optional item offers the possibility to specify "
"the string used to separate the :token:`sub_key` from the :token:"
"`value_name` item. If not specified, the character ``;`` is used. Multiple :"
"token:`registry_query` items can be specified as part of a path."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:79
msgid ""
"# example using default separator\n"
"find_file(... PATHS \"/root/[HKLM/Stuff;InstallDir]/lib[HKLM\\\\\\\\Stuff;"
"Architecture]\")\n"
"\n"
"# example using different specified separators\n"
"find_library(... HINTS \"/root/[{|}HKCU/Stuff|InstallDir]/lib[{@@}HKCU\\\\\\"
"\\Stuff@@Architecture]\")"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:87
msgid ""
"If the :token:`value_name` item is not specified or has the special name "
"``(default)``, the content of the default value, if any, will be returned. "
"The supported types for the :token:`value_name` are:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:91
msgid "``REG_SZ``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:92
msgid "``REG_EXPAND_SZ``. The returned data is expanded."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:93
msgid "``REG_DWORD``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:94
msgid "``REG_QWORD``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:96
msgid ""
"When the registry query failed, typically because the key does not exist or "
"the data type is not supported, the string ``/REGISTRY-NOTFOUND`` is "
"substituted to the ``[]`` query expression."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:103
msgid "Find Modules"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:105
msgid ""
"A \"find module\" is a ``Find<PackageName>.cmake`` file to be loaded by the :"
"command:`find_package` command when invoked for ``<PackageName>``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:108
msgid ""
"The primary task of a find module is to determine whether a package is "
"available, set the ``<PackageName>_FOUND`` variable to reflect this and "
"provide any variables, macros and imported targets required to use the "
"package.  A find module is useful in cases where an upstream library does "
"not provide a :ref:`config file package <Config File Packages>`."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:114
msgid ""
"The traditional approach is to use variables for everything, including "
"libraries and executables: see the `Standard Variable Names`_ section "
"below.  This is what most of the existing find modules provided by CMake do."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:119
msgid ""
"The more modern approach is to behave as much like :ref:`config file "
"packages <Config File Packages>` files as possible, by providing :ref:"
"`imported target <Imported targets>`.  This has the advantage of "
"propagating :ref:`usage requirements <Target Usage Requirements>` to "
"consumers."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:125
msgid ""
"In either case (or even when providing both variables and imported targets), "
"find modules should provide backwards compatibility with old versions that "
"had the same name."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:129
msgid "A FindFoo.cmake module will typically be loaded by the command:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:131
msgid ""
"find_package(Foo [major[.minor[.patch[.tweak]]]]\n"
"             [EXACT] [QUIET] [REQUIRED]\n"
"             [[COMPONENTS] [components...]]\n"
"             [OPTIONAL_COMPONENTS components...]\n"
"             [NO_POLICY_SCOPE])"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:139
msgid ""
"See the :command:`find_package` documentation for details on what variables "
"are set for the find module.  Most of these are dealt with by using :module:"
"`FindPackageHandleStandardArgs`."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:143
msgid ""
"Briefly, the module should only locate versions of the package compatible "
"with the requested version, as described by the ``Foo_FIND_VERSION`` family "
"of variables.  If ``Foo_FIND_QUIETLY`` is set to true, it should avoid "
"printing messages, including anything complaining about the package not "
"being found.  If ``Foo_FIND_REQUIRED`` is set to true, the module should "
"issue a ``FATAL_ERROR`` if the package cannot be found.  If neither are set "
"to true, it should print a non-fatal message if it cannot find the package."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:152
msgid ""
"Packages that find multiple semi-independent parts (like bundles of "
"libraries) should search for the components listed in "
"``Foo_FIND_COMPONENTS`` if it is set , and only set ``Foo_FOUND`` to true if "
"for each searched-for component ``<c>`` that was not found, "
"``Foo_FIND_REQUIRED_<c>`` is not set to true.  The ``HANDLE_COMPONENTS`` "
"argument of ``find_package_handle_standard_args()`` can be used to implement "
"this."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:160
msgid ""
"If ``Foo_FIND_COMPONENTS`` is not set, which modules are searched for and "
"required is up to the find module, but should be documented."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:163
msgid ""
"For internal implementation, it is a generally accepted convention that "
"variables starting with underscore are for temporary use only."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:170
msgid "Standard Variable Names"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:172
msgid ""
"For a ``FindXxx.cmake`` module that takes the approach of setting variables "
"(either instead of or in addition to creating imported targets), the "
"following variable names should be used to keep things consistent between "
"Find modules.  Note that all variables start with ``Xxx_``, which (unless "
"otherwise noted) must match exactly the name of the ``FindXxx.cmake`` file, "
"including upper/lowercase. This prefix on the variable names ensures that "
"they do not conflict with variables of other Find modules.  The same pattern "
"should also be followed for any macros, functions and imported targets "
"defined by the Find module."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:182
msgid "``Xxx_INCLUDE_DIRS``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:183
msgid ""
"The final set of include directories listed in one variable for use by "
"client code. This should not be a cache entry (note that this also means "
"this variable should not be used as the result variable of a :command:"
"`find_path` command - see ``Xxx_INCLUDE_DIR`` below for that)."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:188
msgid "``Xxx_LIBRARIES``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:189
msgid ""
"The libraries to use with the module.  These may be CMake targets, full "
"absolute paths to a library binary or the name of a library that the linker "
"must find in its search path.  This should not be a cache entry (note that "
"this also means this variable should not be used as the result variable of "
"a :command:`find_library` command - see ``Xxx_LIBRARY`` below for that)."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:196
msgid "``Xxx_DEFINITIONS``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:197
msgid ""
"The compile definitions to use when compiling code that uses the module. "
"This really shouldn't include options such as ``-DHAS_JPEG`` that a client "
"source-code file uses to decide whether to ``#include <jpeg.h>``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:201
msgid "``Xxx_EXECUTABLE``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:202
msgid ""
"The full absolute path to an executable.  In this case, ``Xxx`` might not be "
"the name of the module, it might be the name of the tool (usually converted "
"to all uppercase), assuming that tool has such a well-known name that it is "
"unlikely that another tool with the same name exists.  It would be "
"appropriate to use this as the result variable of a :command:`find_program` "
"command."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:209
msgid "``Xxx_YYY_EXECUTABLE``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:210
msgid ""
"Similar to ``Xxx_EXECUTABLE`` except here the ``Xxx`` is always the module "
"name and ``YYY`` is the tool name (again, usually fully uppercase). Prefer "
"this form if the tool name is not very widely known or has the potential  to "
"clash with another tool.  For greater consistency, also prefer this form if "
"the module provides more than one executable."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:216
msgid "``Xxx_LIBRARY_DIRS``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:217
msgid ""
"Optionally, the final set of library directories listed in one variable for "
"use by client code. This should not be a cache entry."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:220
msgid "``Xxx_ROOT_DIR``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:221
msgid ""
"The base directory of the installation of ``Xxx`` that can be optionally set "
"by the find module if ``Xxx`` is found. This is useful for large packages "
"where many files need to be referenced relative to a common base (or root) "
"directory. Not to be confused with the ``Xxx_ROOT`` hint variable set from "
"the outside for the find module to know where to look for the ``Xxx``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:227
msgid "``Xxx_VERSION_VV``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:228
msgid ""
"Variables of this form specify whether the ``Xxx`` module being provided is "
"version ``VV`` of the module.  There should not be more than one variable of "
"this form set to true for a given module.  For example, a module ``Barry`` "
"might have evolved over many years and gone through a number of different "
"major versions.  Version 3 of the ``Barry`` module might set the variable "
"``Barry_VERSION_3`` to true, whereas an older version of the module might "
"set ``Barry_VERSION_2`` to true instead. It would be an error for both "
"``Barry_VERSION_3`` and ``Barry_VERSION_2`` to both be set to true."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:238
msgid "``Xxx_WRAP_YY``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:239
msgid ""
"When a variable of this form is set to false, it indicates that the relevant "
"wrapping command should not be used.  The wrapping command depends on the "
"module, it may be implied by the module name or it might be specified by the "
"``YY`` part of the variable."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:244
msgid "``Xxx_Yy_FOUND``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:245
msgid ""
"For variables of this form, ``Yy`` is the name of a component for the "
"module.  It should match exactly one of the valid component names that may "
"be passed to the :command:`find_package` command for the module. If a "
"variable of this form is set to false, it means that the ``Yy`` component of "
"module ``Xxx`` was not found or is not available. Variables of this form "
"would typically be used for optional components so that the caller can check "
"whether an optional component is available."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:253
msgid "``Xxx_FOUND``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:254
msgid ""
"When the :command:`find_package` command returns to the caller, this "
"variable will be set to true if the module was deemed to have been found "
"successfully."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:258
msgid "``Xxx_NOT_FOUND_MESSAGE``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:259
msgid ""
"Should be set by config-files in the case that it has set ``Xxx_FOUND`` to "
"FALSE.  The contained message will be printed by the :command:`find_package` "
"command and by :command:`find_package_handle_standard_args` to inform the "
"user about the problem.  Use this instead of calling :command:`message` "
"directly to report a reason for failing to find the module or package."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:266
msgid "``Xxx_RUNTIME_LIBRARY_DIRS``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:267
msgid ""
"Optionally, the runtime library search path for use when running an "
"executable linked to shared libraries.  The list should be used by user code "
"to create the ``PATH`` on windows or ``LD_LIBRARY_PATH`` on UNIX.  This "
"should not be a cache entry."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:272
msgid "``Xxx_VERSION``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:273
msgid ""
"The full version string of the package found, if any.  Note that many "
"existing modules provide ``Xxx_VERSION_STRING`` instead."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:276
msgid "``Xxx_VERSION_MAJOR``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:277
msgid "The major version of the package found, if any."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:279
msgid "``Xxx_VERSION_MINOR``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:280
msgid "The minor version of the package found, if any."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:282
msgid "``Xxx_VERSION_PATCH``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:283
msgid "The patch version of the package found, if any."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:285
msgid ""
"The following names should not usually be used in ``CMakeLists.txt`` files. "
"They are intended for use by Find modules to specify and cache the locations "
"of specific files or directories.  Users are typically able to set and edit "
"these variables to control the behavior of Find modules (like entering the "
"path to a library manually):"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:291
msgid "``Xxx_LIBRARY``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:292
msgid ""
"The path of the library.  Use this form only when the module provides a "
"single library.  It is appropriate to use this as the result variable in a :"
"command:`find_library` command."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:296
msgid "``Xxx_Yy_LIBRARY``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:297
msgid ""
"The path of library ``Yy`` provided by the module ``Xxx``.  Use this form "
"when the module provides more than one library or where other modules may "
"also provide a library of the same name. It is also appropriate to use this "
"form as the result variable in a :command:`find_library` command."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:302
msgid "``Xxx_INCLUDE_DIR``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:303
msgid ""
"When the module provides only a single library, this variable can be used to "
"specify where to find headers for using the library (or more accurately, the "
"path that consumers of the library should add to their header search path).  "
"It would be appropriate to use this as the result variable in a :command:"
"`find_path` command."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:309
msgid "``Xxx_Yy_INCLUDE_DIR``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:310
msgid ""
"If the module provides more than one library or where other modules may also "
"provide a library of the same name, this form is recommended for specifying "
"where to find headers for using library ``Yy`` provided by the module.  "
"Again, it would be appropriate to use this as the result variable in a :"
"command:`find_path` command."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:316
msgid ""
"To prevent users being overwhelmed with settings to configure, try to keep "
"as many options as possible out of the cache, leaving at least one option "
"which can be used to disable use of the module, or locate a not-found "
"library (e.g. ``Xxx_ROOT_DIR``).  For the same reason, mark most cache "
"options as advanced.  For packages which provide both debug and release "
"binaries, it is common to create cache variables with a "
"``_LIBRARY_<CONFIG>`` suffix, such as ``Foo_LIBRARY_RELEASE`` and "
"``Foo_LIBRARY_DEBUG``.  The :module:`SelectLibraryConfigurations` module can "
"be helpful for such cases."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:326
msgid ""
"While these are the standard variable names, you should provide backwards "
"compatibility for any old names that were actually in use. Make sure you "
"comment them as deprecated, so that no-one starts using them."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:332
msgid "A Sample Find Module"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:334
msgid ""
"We will describe how to create a simple find module for a library ``Foo``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:336
msgid ""
"The top of the module should begin with a license notice, followed by a "
"blank line, and then followed by a :ref:`Bracket Comment`.  The comment "
"should begin with ``.rst:`` to indicate that the rest of its content is "
"reStructuredText-format documentation.  For example:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:343
msgid ""
"# Distributed under the OSI-approved BSD 3-Clause License.  See "
"accompanying\n"
"# file Copyright.txt or https://cmake.org/licensing for details.\n"
"\n"
"#[=======================================================================[."
"rst:\n"
"FindFoo\n"
"-------\n"
"\n"
"Finds the Foo library.\n"
"\n"
"Imported Targets\n"
"^^^^^^^^^^^^^^^^\n"
"\n"
"This module provides the following imported targets, if found:\n"
"\n"
"``Foo::Foo``\n"
"  The Foo library\n"
"\n"
"Result Variables\n"
"^^^^^^^^^^^^^^^^\n"
"\n"
"This will define the following variables:\n"
"\n"
"``Foo_FOUND``\n"
"  True if the system has the Foo library.\n"
"``Foo_VERSION``\n"
"  The version of the Foo library which was found.\n"
"``Foo_INCLUDE_DIRS``\n"
"  Include directories needed to use Foo.\n"
"``Foo_LIBRARIES``\n"
"  Libraries needed to link to Foo.\n"
"\n"
"Cache Variables\n"
"^^^^^^^^^^^^^^^\n"
"\n"
"The following cache variables may also be set:\n"
"\n"
"``Foo_INCLUDE_DIR``\n"
"  The directory containing ``foo.h``.\n"
"``Foo_LIBRARY``\n"
"  The path to the Foo library.\n"
"\n"
"#]=======================================================================]"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:386
msgid "The module documentation consists of:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:388
msgid "An underlined heading specifying the module name."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:390
msgid ""
"A simple description of what the module finds. More description may be "
"required for some packages.  If there are caveats or other details users of "
"the module should be aware of, specify them here."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:395
msgid "A section listing imported targets provided by the module, if any."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:397
msgid "A section listing result variables provided by the module."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:399
msgid ""
"Optionally a section listing cache variables used by the module, if any."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:401
msgid ""
"If the package provides any macros or functions, they should be listed in an "
"additional section, but can be documented by additional ``.rst:`` comment "
"blocks immediately above where those macros or functions are defined."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:405
msgid ""
"The find module implementation may begin below the documentation block. Now "
"the actual libraries and so on have to be found.  The code here will "
"obviously vary from module to module (dealing with that, after all, is the "
"point of find modules), but there tends to be a common pattern for libraries."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:410
msgid ""
"First, we try to use ``pkg-config`` to find the library.  Note that we "
"cannot rely on this, as it may not be available, but it provides a good "
"starting point."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:414
msgid ""
"find_package(PkgConfig)\n"
"if(PKG_CONFIG_FOUND)\n"
"  pkg_check_modules(PC_Foo QUIET Foo)\n"
"endif()"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:421
msgid ""
"This should define some variables starting ``PC_Foo_`` that contain the "
"information from the ``Foo.pc`` file."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:424
msgid ""
"Now we need to find the libraries and include files; we use the information "
"from ``pkg-config`` to provide hints to CMake about where to look before "
"checking other default paths."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:428
msgid ""
"find_path(Foo_INCLUDE_DIR\n"
"  NAMES foo.h\n"
"  HINTS ${PC_Foo_INCLUDE_DIRS}\n"
"  PATH_SUFFIXES Foo\n"
")\n"
"find_library(Foo_LIBRARY\n"
"  NAMES foo\n"
"  HINTS ${PC_Foo_LIBRARY_DIRS}\n"
")"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:440
msgid ""
"Alternatively, if the library is available with multiple configurations, you "
"can use :module:`SelectLibraryConfigurations` to automatically set the "
"``Foo_LIBRARY`` variable instead:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:444
msgid ""
"find_library(Foo_LIBRARY_RELEASE\n"
"  NAMES foo\n"
"  HINTS ${PC_Foo_LIBRARY_DIRS}/Release\n"
")\n"
"find_library(Foo_LIBRARY_DEBUG\n"
"  NAMES foo\n"
"  HINTS ${PC_Foo_LIBRARY_DIRS}/Debug\n"
")\n"
"\n"
"include(SelectLibraryConfigurations)\n"
"select_library_configurations(Foo)"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:458
msgid ""
"If you have a good way of getting the version (from a header file, for "
"example), you can use that information to set ``Foo_VERSION`` (although note "
"that find modules have traditionally used ``Foo_VERSION_STRING``, so you may "
"want to set both).  Otherwise, attempt to use the information from ``pkg-"
"config``"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:464
msgid "set(Foo_VERSION ${PC_Foo_VERSION})"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:468
msgid ""
"Now we can use :module:`FindPackageHandleStandardArgs` to do most of the "
"rest of the work for us"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:471
msgid ""
"include(FindPackageHandleStandardArgs)\n"
"find_package_handle_standard_args(Foo\n"
"  REQUIRED_VARS\n"
"    Foo_LIBRARY\n"
"    Foo_INCLUDE_DIR\n"
"  VERSION_VAR Foo_VERSION\n"
")"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:481
msgid ""
"This will check that the ``REQUIRED_VARS`` contain values (that do not end "
"in ``-NOTFOUND``) and set ``Foo_FOUND`` appropriately.  It will also cache "
"those values.  If ``Foo_VERSION`` is set, and a required version was passed "
"to :command:`find_package`, it will check the requested version against the "
"one in ``Foo_VERSION``.  It will also print messages as appropriate; note "
"that if the package was found, it will print the contents of the first "
"required variable to indicate where it was found."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:489
msgid ""
"At this point, we have to provide a way for users of the find module to link "
"to the library or libraries that were found.  There are two approaches, as "
"discussed in the `Find Modules`_ section above.  The traditional variable "
"approach looks like"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:494
msgid ""
"if(Foo_FOUND)\n"
"  set(Foo_LIBRARIES ${Foo_LIBRARY})\n"
"  set(Foo_INCLUDE_DIRS ${Foo_INCLUDE_DIR})\n"
"  set(Foo_DEFINITIONS ${PC_Foo_CFLAGS_OTHER})\n"
"endif()"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:502
msgid ""
"If more than one library was found, all of them should be included in these "
"variables (see the `Standard Variable Names`_ section for more information)."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:506
msgid ""
"When providing imported targets, these should be namespaced (hence the "
"``Foo::`` prefix); CMake will recognize that values passed to :command:"
"`target_link_libraries` that contain ``::`` in their name are supposed to be "
"imported targets (rather than just library names), and will produce "
"appropriate diagnostic messages if that target does not exist (see policy :"
"policy:`CMP0028`)."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:513
msgid ""
"if(Foo_FOUND AND NOT TARGET Foo::Foo)\n"
"  add_library(Foo::Foo UNKNOWN IMPORTED)\n"
"  set_target_properties(Foo::Foo PROPERTIES\n"
"    IMPORTED_LOCATION \"${Foo_LIBRARY}\"\n"
"    INTERFACE_COMPILE_OPTIONS \"${PC_Foo_CFLAGS_OTHER}\"\n"
"    INTERFACE_INCLUDE_DIRECTORIES \"${Foo_INCLUDE_DIR}\"\n"
"  )\n"
"endif()"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:524
msgid ""
"One thing to note about this is that the ``INTERFACE_INCLUDE_DIRECTORIES`` "
"and similar properties should only contain information about the target "
"itself, and not any of its dependencies.  Instead, those dependencies should "
"also be targets, and CMake should be told that they are dependencies of this "
"target. CMake will then combine all the necessary information automatically."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:530
msgid ""
"The type of the :prop_tgt:`IMPORTED` target created in the :command:"
"`add_library` command can always be specified as ``UNKNOWN`` type.  This "
"simplifies the code in cases where static or shared variants may be found, "
"and CMake will determine the type by inspecting the files."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:535
msgid ""
"If the library is available with multiple configurations, the :prop_tgt:"
"`IMPORTED_CONFIGURATIONS` target property should also be populated:"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:539
msgid ""
"if(Foo_FOUND)\n"
"  if (NOT TARGET Foo::Foo)\n"
"    add_library(Foo::Foo UNKNOWN IMPORTED)\n"
"  endif()\n"
"  if (Foo_LIBRARY_RELEASE)\n"
"    set_property(TARGET Foo::Foo APPEND PROPERTY\n"
"      IMPORTED_CONFIGURATIONS RELEASE\n"
"    )\n"
"    set_target_properties(Foo::Foo PROPERTIES\n"
"      IMPORTED_LOCATION_RELEASE \"${Foo_LIBRARY_RELEASE}\"\n"
"    )\n"
"  endif()\n"
"  if (Foo_LIBRARY_DEBUG)\n"
"    set_property(TARGET Foo::Foo APPEND PROPERTY\n"
"      IMPORTED_CONFIGURATIONS DEBUG\n"
"    )\n"
"    set_target_properties(Foo::Foo PROPERTIES\n"
"      IMPORTED_LOCATION_DEBUG \"${Foo_LIBRARY_DEBUG}\"\n"
"    )\n"
"  endif()\n"
"  set_target_properties(Foo::Foo PROPERTIES\n"
"    INTERFACE_COMPILE_OPTIONS \"${PC_Foo_CFLAGS_OTHER}\"\n"
"    INTERFACE_INCLUDE_DIRECTORIES \"${Foo_INCLUDE_DIR}\"\n"
"  )\n"
"endif()"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:567
msgid ""
"The ``RELEASE`` variant should be listed first in the property so that the "
"variant is chosen if the user uses a configuration which is not an exact "
"match for any listed ``IMPORTED_CONFIGURATIONS``."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:571
msgid ""
"Most of the cache variables should be hidden in the :program:`ccmake` "
"interface unless the user explicitly asks to edit them."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:574
msgid ""
"mark_as_advanced(\n"
"  Foo_INCLUDE_DIR\n"
"  Foo_LIBRARY\n"
")"
msgstr ""

#: ../../../manual/cmake-developer.7.rst:581
msgid ""
"If this module replaces an older version, you should set compatibility "
"variables to cause the least disruption possible."
msgstr ""

#: ../../../manual/cmake-developer.7.rst:584
msgid ""
"# compatibility variables\n"
"set(Foo_VERSION_STRING ${Foo_VERSION})"
msgstr ""
