# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2025 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:46+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:6
msgid "CMakePackageConfigHelpers"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:8
msgid ""
"Helper functions for creating config files that can be included by other "
"projects to find and use a package."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:12
msgid "Generating a Package Configuration File"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:16
msgid "Create a config file for a project:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:18
msgid ""
"configure_package_config_file(<input> <output>\n"
"  INSTALL_DESTINATION <path>\n"
"  [PATH_VARS <var1> <var2> ... <varN>]\n"
"  [NO_SET_AND_CHECK_MACRO]\n"
"  [NO_CHECK_REQUIRED_COMPONENTS_MACRO]\n"
"  [INSTALL_PREFIX <path>]\n"
"  )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:28
msgid ""
"``configure_package_config_file()`` should be used instead of the plain :"
"command:`configure_file()` command when creating the ``<PackageName>Config."
"cmake`` or ``<PackageName>-config.cmake`` file for installing a project or "
"library. It helps make the resulting package relocatable by avoiding "
"hardcoded paths in the installed ``<PackageName>Config.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:34
msgid ""
"In a ``FooConfig.cmake`` file there may be code like this to make the "
"install destinations known to the using project:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:37
msgid ""
"set(FOO_INCLUDE_DIR   \"@CMAKE_INSTALL_FULL_INCLUDEDIR@\" )\n"
"set(FOO_DATA_DIR   \"@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@\" )\n"
"set(FOO_ICONS_DIR   \"@CMAKE_INSTALL_PREFIX@/share/icons\" )\n"
"#...logic to determine installedPrefix from the own location...\n"
"set(FOO_CONFIG_DIR  \"${installedPrefix}/@CONFIG_INSTALL_DIR@\" )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:45
msgid ""
"All four options shown above are not sufficient  The first three hardcode "
"the absolute directory locations.  The fourth case works only if the logic "
"to determine the ``installedPrefix`` is correct, and if "
"``CONFIG_INSTALL_DIR`` contains a relative path, which in general cannot be "
"guaranteed.  This has the effect that the resulting ``FooConfig.cmake`` file "
"would work poorly under Windows and macOS, where users are used to choosing "
"the install location of a binary package at install time, independent from "
"how :variable:`CMAKE_INSTALL_PREFIX` was set at build/cmake time."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:54
msgid ""
"Using ``configure_package_config_file()`` helps.  If used correctly, it "
"makes the resulting ``FooConfig.cmake`` file relocatable.  Usage:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:57
msgid "Write a ``FooConfig.cmake.in`` file as you are used to."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:58
msgid "Insert a line at the top containing only the string ``@PACKAGE_INIT@``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:59
msgid ""
"Instead of ``set(FOO_DIR \"@SOME_INSTALL_DIR@\")``, use ``set(FOO_DIR "
"\"@PACKAGE_SOME_INSTALL_DIR@\")`` (this must be after the ``@PACKAGE_INIT@`` "
"line)."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:62
msgid ""
"Instead of using the normal :command:`configure_file()` command, use "
"``configure_package_config_file()``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:65
msgid ""
"The ``<input>`` and ``<output>`` arguments are the input and output file, "
"the same way as in :command:`configure_file()`."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:68
msgid ""
"The ``<path>`` given to ``INSTALL_DESTINATION`` must be the destination "
"where the ``FooConfig.cmake`` file will be installed to.  This path can "
"either be absolute, or relative to the ``INSTALL_PREFIX`` path."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:72
msgid ""
"The variables ``<var1>`` to ``<varN>`` given as ``PATH_VARS`` are the "
"variables which contain install destinations.  For each of them, the macro "
"will create a helper variable ``PACKAGE_<var...>``.  These helper variables "
"must be used in the ``FooConfig.cmake.in`` file for setting the installed "
"location. They are calculated by ``configure_package_config_file()`` so that "
"they are always relative to the installed location of the package.  This "
"works both for relative and also for absolute locations.  For absolute "
"locations, it works only if the absolute location is a subdirectory of "
"``INSTALL_PREFIX``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:81
msgid ""
"The variable ``PACKAGE_PREFIX_DIR`` will always be defined after the "
"``@PACKAGE_INIT@`` line.  It will hold the value of the base install "
"location.  In general, variables defined via the ``PATH_VARS`` mechanism "
"should be used instead, but ``PACKAGE_PREFIX_DIR`` can be used for those "
"cases not easily handled by ``PATH_VARS``, such as for files installed "
"directly to the base install location rather than a subdirectory of it."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:90
msgid ""
"When consumers of the generated file use CMake 3.29 or older, the value of "
"``PACKAGE_PREFIX_DIR`` can be changed by a call to :command:"
"`find_dependency` or :command:`find_package`. If a project relies on "
"``PACKAGE_PREFIX_DIR``, it is the project's responsibility to ensure that "
"the value of ``PACKAGE_PREFIX_DIR`` is preserved across any such calls, or "
"any other calls which might include another file generated by "
"``configure_package_config_file()``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:98
msgid ""
"If the ``INSTALL_PREFIX`` argument is passed, this is used as the base path "
"to calculate all the relative paths.  The ``<path>`` argument must be an "
"absolute path.  If this argument is not passed, the :variable:"
"`CMAKE_INSTALL_PREFIX` variable will be used instead.  The default value is "
"good when generating a ``FooConfig.cmake`` file to use your package from the "
"install tree.  When generating a ``FooConfig.cmake`` file to use your "
"package from the build tree, this option should be used."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:107
msgid ""
"By default, ``configure_package_config_file()`` also generates two helper "
"macros, ``set_and_check()`` and ``check_required_components()``, into the "
"``FooConfig.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:111
msgid ""
"``set_and_check()`` should be used instead of the normal :command:`set` "
"command for setting directories and file locations.  In addition to setting "
"the variable, it also checks that the referenced file or directory actually "
"exists and fails with a fatal error if it doesn't.  This ensures that the "
"generated ``FooConfig.cmake`` file does not contain wrong references. Add "
"the ``NO_SET_AND_CHECK_MACRO`` option to prevent the generation of the "
"``set_and_check()`` macro in the ``FooConfig.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:119
msgid ""
"``check_required_components(<PackageName>)`` should be called at the end of "
"the ``FooConfig.cmake`` file. This macro checks whether all requested, non-"
"optional components have been found, and if this is not the case, it sets "
"the ``Foo_FOUND`` variable to ``FALSE`` so that the package is considered to "
"be not found.  It does that by testing the ``Foo_<Component>_FOUND`` "
"variables for all requested required components.  This macro should be "
"called even if the package doesn't provide any components to make sure users "
"are not specifying components erroneously.  Add the "
"``NO_CHECK_REQUIRED_COMPONENTS_MACRO`` option to prevent the generation of "
"the ``check_required_components()`` macro in the ``FooConfig.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:130
msgid "See also :ref:`CMakePackageConfigHelpers Examples`."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:133
msgid "Generating a Package Version File"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:137
msgid "Create a version file for a project:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:139
msgid ""
"write_basic_package_version_file(<filename>\n"
"  [VERSION <major.minor.patch>]\n"
"  COMPATIBILITY <AnyNewerVersion|SameMajorVersion|SameMinorVersion|"
"ExactVersion>\n"
"  [ARCH_INDEPENDENT] )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:147
msgid ""
"Writes a file for use as a ``<PackageName>ConfigVersion.cmake`` file to "
"``<filename>``.  See the documentation of :command:`find_package()` for "
"details on such files."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:151
msgid ""
"``<filename>`` is the output filename, which should be in the build tree. "
"``<major.minor.patch>`` is the version number of the project to be installed."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:154
msgid ""
"If no ``VERSION`` is given, the :variable:`PROJECT_VERSION` variable is "
"used. If this hasn't been set, it errors out."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:157
msgid ""
"The ``COMPATIBILITY`` mode ``AnyNewerVersion`` means that the installed "
"package version will be considered compatible if it is newer or exactly the "
"same as the requested version.  This mode should be used for packages which "
"are fully backward compatible, also across major versions. If "
"``SameMajorVersion`` is used instead, then the behavior differs from "
"``AnyNewerVersion`` in that the major version number must be the same as "
"requested, e.g.  version 2.0 will not be considered compatible if 1.0 is "
"requested.  This mode should be used for packages which guarantee backward "
"compatibility within the same major version. If ``SameMinorVersion`` is "
"used, the behavior is the same as ``SameMajorVersion``, but both major and "
"minor version must be the same as requested, e.g version 0.2 will not be "
"compatible if 0.1 is requested. If ``ExactVersion`` is used, then the "
"package is only considered compatible if the requested version matches "
"exactly its own version number (not considering the tweak version).  For "
"example, version 1.2.3 of a package is only considered compatible to "
"requested version 1.2.3.  This mode is for packages without compatibility "
"guarantees. If your project has more elaborate version matching rules, you "
"will need to write your own custom ``<PackageName>ConfigVersion.cmake`` file "
"instead of using this macro."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:178
msgid "The ``SameMinorVersion`` compatibility mode."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:181
msgid ""
"If ``ARCH_INDEPENDENT`` is given, the installed package version will be "
"considered compatible even if it was built for a different architecture than "
"the requested architecture.  Otherwise, an architecture check will be "
"performed, and the package will be considered compatible only if the "
"architecture matches exactly.  For example, if the package is built for a 32-"
"bit architecture, the package is only considered compatible if it is used on "
"a 32-bit architecture, unless ``ARCH_INDEPENDENT`` is given, in which case "
"the package is considered compatible on any architecture."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:191
msgid ""
"``ARCH_INDEPENDENT`` is intended for header-only libraries or similar "
"packages with no binaries."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:194
msgid ""
"The version file generated by ``AnyNewerVersion``, ``SameMajorVersion`` and "
"``SameMinorVersion`` arguments of ``COMPATIBILITY`` handle the version "
"range, if one is specified (see :command:`find_package` command for the "
"details). ``ExactVersion`` mode is incompatible with version ranges and will "
"display an author warning if one is specified."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:201
msgid ""
"Internally, this macro executes :command:`configure_file()` to create the "
"resulting version file.  Depending on the ``COMPATIBILITY``, the "
"corresponding ``BasicConfigVersion-<COMPATIBILITY>.cmake.in`` file is used. "
"Please note that these files are internal to CMake and you should not call :"
"command:`configure_file()` on them yourself, but they can be used as a "
"starting point to create more sophisticated custom "
"``<PackageName>ConfigVersion.cmake`` files."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:210
msgid "Generating an Apple Platform Selection File"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:216
msgid "Create an Apple platform selection file:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:218
msgid ""
"generate_apple_platform_selection_file(<filename>\n"
"  INSTALL_DESTINATION <path>\n"
"  [INSTALL_PREFIX <path>]\n"
"  [MACOS_INCLUDE_FILE <file>]\n"
"  [IOS_INCLUDE_FILE <file>]\n"
"  [IOS_SIMULATOR_INCLUDE_FILE <file>]\n"
"  [IOS_CATALYST_INCLUDE_FILE <file>]\n"
"  [TVOS_INCLUDE_FILE <file>]\n"
"  [TVOS_SIMULATOR_INCLUDE_FILE <file>]\n"
"  [WATCHOS_INCLUDE_FILE <file>]\n"
"  [WATCHOS_SIMULATOR_INCLUDE_FILE <file>]\n"
"  [VISIONOS_INCLUDE_FILE <file>]\n"
"  [VISIONOS_SIMULATOR_INCLUDE_FILE <file>]\n"
"  [ERROR_VARIABLE <variable>]\n"
"  )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:236
msgid ""
"Write a file that includes an Apple-platform-specific ``.cmake`` file, e.g., "
"for use as ``<PackageName>Config.cmake``.  This can be used in conjunction "
"with the ``XCFRAMEWORK_LOCATION`` argument of :command:`export(SETUP)` to "
"export packages in a way that a project built for any Apple platform can use "
"them."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:242
#: ../../../../Modules/CMakePackageConfigHelpers.cmake:321
msgid "``INSTALL_DESTINATION <path>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:243
#: ../../../../Modules/CMakePackageConfigHelpers.cmake:322
msgid ""
"Path to which the generated file will be installed by the caller, e.g., via :"
"command:`install(FILES)`.  The path may be either relative to the "
"``INSTALL_PREFIX`` or absolute."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:247
#: ../../../../Modules/CMakePackageConfigHelpers.cmake:326
msgid "``INSTALL_PREFIX <path>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:248
#: ../../../../Modules/CMakePackageConfigHelpers.cmake:327
msgid ""
"Path prefix to which the package will be installed by the caller. The "
"``<path>`` argument must be an absolute path.  If this argument is not "
"passed, the :variable:`CMAKE_INSTALL_PREFIX` variable will be used instead."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:253
msgid "``MACOS_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:254
msgid "File to include if the platform is macOS."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:256
msgid "``IOS_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:257
msgid "File to include if the platform is iOS."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:259
msgid "``IOS_SIMULATOR_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:260
msgid "File to include if the platform is iOS Simulator."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:262
msgid "``IOS_CATALYST_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:265
msgid "File to include if the platform is iOS Catalyst."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:267
msgid "``TVOS_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:268
msgid "File to include if the platform is tvOS."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:270
msgid "``TVOS_SIMULATOR_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:271
msgid "File to include if the platform is tvOS Simulator."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:273
msgid "``WATCHOS_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:274
msgid "File to include if the platform is watchOS."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:276
msgid "``WATCHOS_SIMULATOR_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:277
msgid "File to include if the platform is watchOS Simulator."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:279
msgid "``VISIONOS_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:280
msgid "File to include if the platform is visionOS."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:282
msgid "``VISIONOS_SIMULATOR_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:283
msgid "File to include if the platform is visionOS Simulator."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:285
#: ../../../../Modules/CMakePackageConfigHelpers.cmake:353
msgid "``ERROR_VARIABLE <variable>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:286
msgid ""
"If the consuming project is built for an unsupported platform, set "
"``<variable>`` to an error message.  The includer may use this information "
"to pretend the package was not found.  If this option is not given, the "
"default behavior is to issue a fatal error."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:291
msgid ""
"If any of the optional include files is not specified, and the consuming "
"project is built for its corresponding platform, the generated file will "
"consider the platform to be unsupported.  The behavior is determined by the "
"``ERROR_VARIABLE`` option."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:297
msgid "Generating an Apple Architecture Selection File"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:303
msgid "Create an Apple architecture selection file:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:305
msgid ""
"generate_apple_architecture_selection_file(<filename>\n"
"  INSTALL_DESTINATION <path>\n"
"  [INSTALL_PREFIX <path>]\n"
"  [SINGLE_ARCHITECTURES <arch>...\n"
"   SINGLE_ARCHITECTURE_INCLUDE_FILES <file>...]\n"
"  [UNIVERSAL_ARCHITECTURES <arch>...\n"
"   UNIVERSAL_INCLUDE_FILE <file>]\n"
"  [ERROR_VARIABLE <variable>]\n"
"  )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:317
msgid ""
"Write a file that includes an Apple-architecture-specific ``.cmake`` file "
"based on :variable:`CMAKE_OSX_ARCHITECTURES`, e.g., for inclusion from an "
"Apple-specific ``<PackageName>Config.cmake`` file."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:332
msgid "``SINGLE_ARCHITECTURES <arch>...``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:333
msgid ""
"Architectures provided by entries of ``SINGLE_ARCHITECTURE_INCLUDE_FILES``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:335
msgid "``SINGLE_ARCHITECTURE_INCLUDE_FILES <file>...``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:336
msgid ""
"Architecture-specific files.  One of them will be loaded when :variable:"
"`CMAKE_OSX_ARCHITECTURES` contains a single architecture matching the "
"corresponding entry of ``SINGLE_ARCHITECTURES``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:341
msgid "``UNIVERSAL_ARCHITECTURES <arch>...``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:342
msgid "Architectures provided by the ``UNIVERSAL_INCLUDE_FILE``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:344
msgid ""
"The list may include ``$(ARCHS_STANDARD)`` to support consumption using the :"
"generator:`Xcode` generator, but the architectures should always be listed "
"individually too."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:348
msgid "``UNIVERSAL_INCLUDE_FILE <file>``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:349
msgid ""
"A file to load when :variable:`CMAKE_OSX_ARCHITECTURES` contains a (non-"
"strict) subset of the ``UNIVERSAL_ARCHITECTURES`` and does not match any one "
"of the ``SINGLE_ARCHITECTURES``."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:354
msgid ""
"If the consuming project is built for an unsupported architecture, set "
"``<variable>`` to an error message.  The includer may use this information "
"to pretend the package was not found.  If this option is not given, the "
"default behavior is to issue a fatal error."
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:362
msgid "Example Generating Package Files"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:364
msgid ""
"Example using both the :command:`configure_package_config_file` and :command:"
"`write_basic_package_version_file()` commands:"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:367
msgid "``CMakeLists.txt``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:367
msgid ""
"include(GNUInstallDirs)\n"
"set(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/Foo\n"
"    CACHE PATH \"Location of header files\" )\n"
"set(SYSCONFIG_INSTALL_DIR ${CMAKE_INSTALL_SYSCONFDIR}/foo\n"
"    CACHE PATH \"Location of configuration files\" )\n"
"#...\n"
"include(CMakePackageConfigHelpers)\n"
"configure_package_config_file(FooConfig.cmake.in\n"
"  ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n"
"  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Foo\n"
"  PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)\n"
"write_basic_package_version_file(\n"
"  ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n"
"  VERSION 1.2.3\n"
"  COMPATIBILITY SameMajorVersion )\n"
"install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\n"
"              ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\n"
"        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Foo )"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:389
msgid "``FooConfig.cmake.in``"
msgstr ""

#: ../../../../Modules/CMakePackageConfigHelpers.cmake:389
msgid ""
"set(FOO_VERSION x.y.z)\n"
"...\n"
"@PACKAGE_INIT@\n"
"...\n"
"set_and_check(FOO_INCLUDE_DIR \"@PACKAGE_INCLUDE_INSTALL_DIR@\")\n"
"set_and_check(FOO_SYSCONFIG_DIR \"@PACKAGE_SYSCONFIG_INSTALL_DIR@\")\n"
"\n"
"check_required_components(Foo)"
msgstr ""
