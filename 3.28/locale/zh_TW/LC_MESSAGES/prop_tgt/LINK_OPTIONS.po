# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.28\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 17:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../prop_tgt/LINK_OPTIONS.rst:2
msgid "LINK_OPTIONS"
msgstr ""

#: ../../../prop_tgt/LINK_OPTIONS.rst:6
msgid ""
"List of options to use for the link step of shared library, module and "
"executable targets as well as the device link step. Targets that are static "
"libraries need to use the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property."
msgstr ""

#: ../../../prop_tgt/LINK_OPTIONS.rst:10
msgid ""
"These options are used for both normal linking and device linking (see "
"policy :policy:`CMP0105`). To control link options for normal and device "
"link steps, :genex:`$<HOST_LINK>` and :genex:`$<DEVICE_LINK>` generator "
"expressions can be used."
msgstr ""

#: ../../../prop_tgt/LINK_OPTIONS.rst:15
msgid ""
"This property holds a :ref:`semicolon-separated list <CMake Language Lists>` "
"of options specified so far for its target.  Use the :command:"
"`target_link_options` command to append more options."
msgstr ""

#: ../../../prop_tgt/LINK_OPTIONS.rst:19
msgid ""
"This property is initialized by the :prop_dir:`LINK_OPTIONS` directory "
"property when a target is created, and is used by the generators to set the "
"options for the compiler."
msgstr ""

#: ../../../prop_tgt/LINK_OPTIONS.rst:23
msgid ""
"Contents of ``LINK_OPTIONS`` may use \"generator expressions\" with the "
"syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual "
"for available expressions.  See the :manual:`cmake-buildsystem(7)` manual "
"for more on defining buildsystem properties."
msgstr ""

#: ../../../prop_tgt/LINK_OPTIONS.rst:30
msgid ""
"This property must be used in preference to :prop_tgt:`LINK_FLAGS` property."
msgstr ""

#: ../../../command/DEVICE_LINK_OPTIONS.txt:2
msgid "Host And Device Specific Link Options"
msgstr ""

#: ../../../command/DEVICE_LINK_OPTIONS.txt:4
msgid ""
"When a device link step is involved, which is controlled by :prop_tgt:"
"`CUDA_SEPARABLE_COMPILATION` and :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` "
"properties and policy :policy:`CMP0105`, the raw options will be delivered "
"to the host and device link steps (wrapped in ``-Xcompiler`` or equivalent "
"for device link). Options wrapped with :genex:`$<DEVICE_LINK:...>` generator "
"expression will be used only for the device link step. Options wrapped with :"
"genex:`$<HOST_LINK:...>` generator expression will be used only for the host "
"link step."
msgstr ""

#: ../../../command/OPTIONS_SHELL.txt:2
msgid "Option De-duplication"
msgstr ""

#: ../../../command/OPTIONS_SHELL.txt:4
msgid ""
"The final set of options used for a target is constructed by accumulating "
"options from the current target and the usage requirements of its "
"dependencies.  The set of options is de-duplicated to avoid repetition."
msgstr ""

#: ../../../command/OPTIONS_SHELL.txt:8
msgid ""
"While beneficial for individual options, the de-duplication step can break "
"up option groups.  For example, ``-option A -option B`` becomes ``-option A "
"B``.  One may specify a group of options using shell-like quoting along with "
"a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped, and the rest of the "
"option string is parsed using the :command:`separate_arguments` "
"``UNIX_COMMAND`` mode. For example, ``\"SHELL:-option A\" \"SHELL:-option "
"B\"`` becomes ``-option A -option B``."
msgstr ""

#: ../../../command/LINK_OPTIONS_LINKER.txt:2
msgid "Handling Compiler Driver Differences"
msgstr ""

#: ../../../command/LINK_OPTIONS_LINKER.txt:4
msgid ""
"To pass options to the linker tool, each compiler driver has its own syntax. "
"The ``LINKER:`` prefix and ``,`` separator can be used to specify, in a "
"portable way, options to pass to the linker tool. ``LINKER:`` is replaced by "
"the appropriate driver option and ``,`` by the appropriate driver separator. "
"The driver prefix and driver separator are given by the values of the :"
"variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and :variable:"
"`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables."
msgstr ""

#: ../../../command/LINK_OPTIONS_LINKER.txt:12
msgid ""
"For example, ``\"LINKER:-z,defs\"`` becomes ``-Xlinker -z -Xlinker defs`` "
"for ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``."
msgstr ""

#: ../../../command/LINK_OPTIONS_LINKER.txt:15
msgid ""
"The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix "
"expression."
msgstr ""

#: ../../../command/LINK_OPTIONS_LINKER.txt:18
msgid ""
"The ``LINKER:`` prefix supports, as an alternative syntax, specification of "
"arguments using the ``SHELL:`` prefix and space as separator. The previous "
"example then becomes ``\"LINKER:SHELL:-z defs\"``."
msgstr ""

#: ../../../command/LINK_OPTIONS_LINKER.txt:24
msgid ""
"Specifying the ``SHELL:`` prefix anywhere other than at the beginning of the "
"``LINKER:`` prefix is not supported."
msgstr ""
